{"version":3,"sources":["Pressability.js"],"names":["Transitions","Object","freeze","NOT_RESPONDER","DELAY","RESPONDER_GRANT","RESPONDER_RELEASE","RESPONDER_TERMINATED","ENTER_PRESS_RECT","LEAVE_PRESS_RECT","LONG_PRESS_DETECTED","RESPONDER_INACTIVE_PRESS_IN","RESPONDER_INACTIVE_PRESS_OUT","RESPONDER_ACTIVE_PRESS_IN","RESPONDER_ACTIVE_PRESS_OUT","RESPONDER_ACTIVE_LONG_PRESS_IN","RESPONDER_ACTIVE_LONG_PRESS_OUT","ERROR","isActiveSignal","signal","isActivationSignal","isPressInSignal","isTerminalSignal","DEFAULT_LONG_PRESS_DELAY_MS","DEFAULT_PRESS_RECT_OFFSETS","bottom","left","right","top","DEFAULT_MIN_PRESS_DURATION","Pressability","config","_eventHandlers","_hoverInDelayTimeout","_hoverOutDelayTimeout","_isHovered","_longPressDelayTimeout","_pressDelayTimeout","_pressOutDelayTimeout","_responderID","_responderRegion","_touchState","_measureCallback","width","height","pageX","pageY","configure","_config","_cancelHoverInDelayTimeout","_cancelHoverOutDelayTimeout","_cancelLongPressDelayTimeout","_cancelPressDelayTimeout","_cancelPressOutDelayTimeout","_createEventHandlers","focusEventHandlers","onBlur","event","onFocus","responderEventHandlers","onStartShouldSetResponder","disabled","onStartShouldSetResponder_DEPRECATED","onResponderGrant","persist","currentTarget","_receiveSignal","delayPressIn","normalizeDelay","setTimeout","delayLongPress","_handleLongPress","onResponderMove","onPressMove","responderRegion","touch","getTouchFromPressEvent","_touchActivatePosition","deltaX","deltaY","Math","hypot","_isTouchWithinResponderRegion","onResponderRelease","onResponderTerminate","onResponderTerminationRequest","cancelable","onResponderTerminationRequest_DEPRECATED","onClick","onPress","process","env","NODE_ENV","testOnly_pressabilityConfig","mouseEventHandlers","Platform","OS","onMouseEnter","onHoverIn","delayHoverIn","onMouseLeave","onHoverOut","delayHoverOut","prevState","nextState","_performTransitionSideEffects","isInitialTransition","isActivationTransiton","_measureResponderRegion","onLongPress","isPrevActive","isNextActive","_activate","_deactivate","android_disableSound","isPressCanceledByLongPress","_shouldLongPressCancelPress","SoundManager","playTouchSound","onPressIn","_touchActivateTime","Date","now","onPressOut","minPressDuration","pressDuration","delayPressOut","max","UIManager","measure","hitSlop","pressRectOffset","regionBottom","regionLeft","regionRight","regionTop","onLongPressShouldCancelPress_DEPRECATED","clearTimeout","delay","min","fallback","nativeEvent","changedTouches","touches","length"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n'use strict';\n\nimport {isHoverEnabled} from './HoverState';\nimport invariant from 'invariant';\nimport SoundManager from '../Components/Sound/SoundManager';\nimport {normalizeRect, type RectOrSize} from '../StyleSheet/Rect';\nimport type {\n  BlurEvent,\n  FocusEvent,\n  PressEvent,\n  MouseEvent,\n} from '../Types/CoreEventTypes';\nimport Platform from '../Utilities/Platform';\nimport UIManager from '../ReactNative/UIManager';\nimport type {HostComponent} from '../Renderer/shims/ReactNativeTypes';\nimport * as React from 'react';\n\nexport type PressabilityConfig = $ReadOnly<{|\n  /**\n   * Whether a press gesture can be interrupted by a parent gesture such as a\n   * scroll event. Defaults to true.\n   */\n  cancelable?: ?boolean,\n\n  /**\n   * Whether to disable initialization of the press gesture.\n   */\n  disabled?: ?boolean,\n\n  /**\n   * Amount to extend the `VisualRect` by to create `HitRect`.\n   */\n  hitSlop?: ?RectOrSize,\n\n  /**\n   * Amount to extend the `HitRect` by to create `PressRect`.\n   */\n  pressRectOffset?: ?RectOrSize,\n\n  /**\n   * Whether to disable the systemm sound when `onPress` fires on Android.\n   **/\n  android_disableSound?: ?boolean,\n\n  /**\n   * Duration to wait after hover in before calling `onHoverIn`.\n   */\n  delayHoverIn?: ?number,\n\n  /**\n   * Duration to wait after hover out before calling `onHoverOut`.\n   */\n  delayHoverOut?: ?number,\n\n  /**\n   * Duration (in addition to `delayPressIn`) after which a press gesture is\n   * considered a long press gesture. Defaults to 500 (milliseconds).\n   */\n  delayLongPress?: ?number,\n\n  /**\n   * Duration to wait after press down before calling `onPressIn`.\n   */\n  delayPressIn?: ?number,\n\n  /**\n   * Duration to wait after letting up before calling `onPressOut`.\n   */\n  delayPressOut?: ?number,\n\n  /**\n   * Minimum duration to wait between calling `onPressIn` and `onPressOut`.\n   */\n  minPressDuration?: ?number,\n\n  /**\n   * Called after the element loses focus.\n   */\n  onBlur?: ?(event: BlurEvent) => mixed,\n\n  /**\n   * Called after the element is focused.\n   */\n  onFocus?: ?(event: FocusEvent) => mixed,\n\n  /**\n   * Called when the hover is activated to provide visual feedback.\n   */\n  onHoverIn?: ?(event: MouseEvent) => mixed,\n\n  /**\n   * Called when the hover is deactivated to undo visual feedback.\n   */\n  onHoverOut?: ?(event: MouseEvent) => mixed,\n\n  /**\n   * Called when a long press gesture has been triggered.\n   */\n  onLongPress?: ?(event: PressEvent) => mixed,\n\n  /**\n   * Called when a press gestute has been triggered.\n   */\n  onPress?: ?(event: PressEvent) => mixed,\n\n  /**\n   * Called when the press is activated to provide visual feedback.\n   */\n  onPressIn?: ?(event: PressEvent) => mixed,\n\n  /**\n   * Called when the press location moves. (This should rarely be used.)\n   */\n  onPressMove?: ?(event: PressEvent) => mixed,\n\n  /**\n   * Called when the press is deactivated to undo visual feedback.\n   */\n  onPressOut?: ?(event: PressEvent) => mixed,\n\n  /**\n   * Returns whether a long press gesture should cancel the press gesture.\n   * Defaults to true.\n   */\n  onLongPressShouldCancelPress_DEPRECATED?: ?() => boolean,\n\n  /**\n   * If `cancelable` is set, this will be ignored.\n   *\n   * Returns whether to yield to a lock termination request (e.g. if a native\n   * scroll gesture attempts to steal the responder lock).\n   */\n  onResponderTerminationRequest_DEPRECATED?: ?() => boolean,\n\n  /**\n   * If `disabled` is set, this will be ignored.\n   *\n   * Returns whether to start a press gesture.\n   *\n   * @deprecated\n   */\n  onStartShouldSetResponder_DEPRECATED?: ?() => boolean,\n|}>;\n\nexport type EventHandlers = $ReadOnly<{|\n  onBlur: (event: BlurEvent) => void,\n  onClick: (event: PressEvent) => void,\n  onFocus: (event: FocusEvent) => void,\n  onMouseEnter?: (event: MouseEvent) => void,\n  onMouseLeave?: (event: MouseEvent) => void,\n  onResponderGrant: (event: PressEvent) => void,\n  onResponderMove: (event: PressEvent) => void,\n  onResponderRelease: (event: PressEvent) => void,\n  onResponderTerminate: (event: PressEvent) => void,\n  onResponderTerminationRequest: () => boolean,\n  onStartShouldSetResponder: () => boolean,\n|}>;\n\ntype TouchState =\n  | 'NOT_RESPONDER'\n  | 'RESPONDER_INACTIVE_PRESS_IN'\n  | 'RESPONDER_INACTIVE_PRESS_OUT'\n  | 'RESPONDER_ACTIVE_PRESS_IN'\n  | 'RESPONDER_ACTIVE_PRESS_OUT'\n  | 'RESPONDER_ACTIVE_LONG_PRESS_IN'\n  | 'RESPONDER_ACTIVE_LONG_PRESS_OUT'\n  | 'ERROR';\n\ntype TouchSignal =\n  | 'DELAY'\n  | 'RESPONDER_GRANT'\n  | 'RESPONDER_RELEASE'\n  | 'RESPONDER_TERMINATED'\n  | 'ENTER_PRESS_RECT'\n  | 'LEAVE_PRESS_RECT'\n  | 'LONG_PRESS_DETECTED';\n\nconst Transitions = Object.freeze({\n  NOT_RESPONDER: {\n    DELAY: 'ERROR',\n    RESPONDER_GRANT: 'RESPONDER_INACTIVE_PRESS_IN',\n    RESPONDER_RELEASE: 'ERROR',\n    RESPONDER_TERMINATED: 'ERROR',\n    ENTER_PRESS_RECT: 'ERROR',\n    LEAVE_PRESS_RECT: 'ERROR',\n    LONG_PRESS_DETECTED: 'ERROR',\n  },\n  RESPONDER_INACTIVE_PRESS_IN: {\n    DELAY: 'RESPONDER_ACTIVE_PRESS_IN',\n    RESPONDER_GRANT: 'ERROR',\n    RESPONDER_RELEASE: 'NOT_RESPONDER',\n    RESPONDER_TERMINATED: 'NOT_RESPONDER',\n    ENTER_PRESS_RECT: 'RESPONDER_INACTIVE_PRESS_IN',\n    LEAVE_PRESS_RECT: 'RESPONDER_INACTIVE_PRESS_OUT',\n    LONG_PRESS_DETECTED: 'ERROR',\n  },\n  RESPONDER_INACTIVE_PRESS_OUT: {\n    DELAY: 'RESPONDER_ACTIVE_PRESS_OUT',\n    RESPONDER_GRANT: 'ERROR',\n    RESPONDER_RELEASE: 'NOT_RESPONDER',\n    RESPONDER_TERMINATED: 'NOT_RESPONDER',\n    ENTER_PRESS_RECT: 'RESPONDER_INACTIVE_PRESS_IN',\n    LEAVE_PRESS_RECT: 'RESPONDER_INACTIVE_PRESS_OUT',\n    LONG_PRESS_DETECTED: 'ERROR',\n  },\n  RESPONDER_ACTIVE_PRESS_IN: {\n    DELAY: 'ERROR',\n    RESPONDER_GRANT: 'ERROR',\n    RESPONDER_RELEASE: 'NOT_RESPONDER',\n    RESPONDER_TERMINATED: 'NOT_RESPONDER',\n    ENTER_PRESS_RECT: 'RESPONDER_ACTIVE_PRESS_IN',\n    LEAVE_PRESS_RECT: 'RESPONDER_ACTIVE_PRESS_OUT',\n    LONG_PRESS_DETECTED: 'RESPONDER_ACTIVE_LONG_PRESS_IN',\n  },\n  RESPONDER_ACTIVE_PRESS_OUT: {\n    DELAY: 'ERROR',\n    RESPONDER_GRANT: 'ERROR',\n    RESPONDER_RELEASE: 'NOT_RESPONDER',\n    RESPONDER_TERMINATED: 'NOT_RESPONDER',\n    ENTER_PRESS_RECT: 'RESPONDER_ACTIVE_PRESS_IN',\n    LEAVE_PRESS_RECT: 'RESPONDER_ACTIVE_PRESS_OUT',\n    LONG_PRESS_DETECTED: 'ERROR',\n  },\n  RESPONDER_ACTIVE_LONG_PRESS_IN: {\n    DELAY: 'ERROR',\n    RESPONDER_GRANT: 'ERROR',\n    RESPONDER_RELEASE: 'NOT_RESPONDER',\n    RESPONDER_TERMINATED: 'NOT_RESPONDER',\n    ENTER_PRESS_RECT: 'RESPONDER_ACTIVE_LONG_PRESS_IN',\n    LEAVE_PRESS_RECT: 'RESPONDER_ACTIVE_LONG_PRESS_OUT',\n    LONG_PRESS_DETECTED: 'RESPONDER_ACTIVE_LONG_PRESS_IN',\n  },\n  RESPONDER_ACTIVE_LONG_PRESS_OUT: {\n    DELAY: 'ERROR',\n    RESPONDER_GRANT: 'ERROR',\n    RESPONDER_RELEASE: 'NOT_RESPONDER',\n    RESPONDER_TERMINATED: 'NOT_RESPONDER',\n    ENTER_PRESS_RECT: 'RESPONDER_ACTIVE_LONG_PRESS_IN',\n    LEAVE_PRESS_RECT: 'RESPONDER_ACTIVE_LONG_PRESS_OUT',\n    LONG_PRESS_DETECTED: 'ERROR',\n  },\n  ERROR: {\n    DELAY: 'NOT_RESPONDER',\n    RESPONDER_GRANT: 'RESPONDER_INACTIVE_PRESS_IN',\n    RESPONDER_RELEASE: 'NOT_RESPONDER',\n    RESPONDER_TERMINATED: 'NOT_RESPONDER',\n    ENTER_PRESS_RECT: 'NOT_RESPONDER',\n    LEAVE_PRESS_RECT: 'NOT_RESPONDER',\n    LONG_PRESS_DETECTED: 'NOT_RESPONDER',\n  },\n});\n\nconst isActiveSignal = signal =>\n  signal === 'RESPONDER_ACTIVE_PRESS_IN' ||\n  signal === 'RESPONDER_ACTIVE_LONG_PRESS_IN';\n\nconst isActivationSignal = signal =>\n  signal === 'RESPONDER_ACTIVE_PRESS_OUT' ||\n  signal === 'RESPONDER_ACTIVE_PRESS_IN';\n\nconst isPressInSignal = signal =>\n  signal === 'RESPONDER_INACTIVE_PRESS_IN' ||\n  signal === 'RESPONDER_ACTIVE_PRESS_IN' ||\n  signal === 'RESPONDER_ACTIVE_LONG_PRESS_IN';\n\nconst isTerminalSignal = signal =>\n  signal === 'RESPONDER_TERMINATED' || signal === 'RESPONDER_RELEASE';\n\nconst DEFAULT_LONG_PRESS_DELAY_MS = 500;\nconst DEFAULT_PRESS_RECT_OFFSETS = {\n  bottom: 30,\n  left: 20,\n  right: 20,\n  top: 20,\n};\nconst DEFAULT_MIN_PRESS_DURATION = 130;\n\n/**\n * Pressability implements press handling capabilities.\n *\n * =========================== Pressability Tutorial ===========================\n *\n * The `Pressability` class helps you create press interactions by analyzing the\n * geometry of elements and observing when another responder (e.g. ScrollView)\n * has stolen the touch lock. It offers hooks for your component to provide\n * interaction feedback to the user:\n *\n * - When a press has activated (e.g. highlight an element)\n * - When a press has deactivated (e.g. un-highlight an element)\n * - When a press sould trigger an action, meaning it activated and deactivated\n *   while within the geometry of the element without the lock being stolen.\n *\n * A high quality interaction isn't as simple as you might think. There should\n * be a slight delay before activation. Moving your finger beyond an element's\n * bounds should trigger deactivation, but moving the same finger back within an\n * element's bounds should trigger reactivation.\n *\n * In order to use `Pressability`, do the following:\n *\n * 1. Instantiate `Pressability` and store it on your component's state.\n *\n *    state = {\n *      pressability: new Pressability({\n *        // ...\n *      }),\n *    };\n *\n * 2. Choose the rendered component who should collect the press events. On that\n *    element, spread `pressability.getEventHandlers()` into its props.\n *\n *    return (\n *      <View {...this.state.pressability.getEventHandlers()} />\n *    );\n *\n * 3. Reset `Pressability` when your component unmounts.\n *\n *    componentWillUnmount() {\n *      this.state.pressability.reset();\n *    }\n *\n * ==================== Pressability Implementation Details ====================\n *\n * `Pressability` only assumes that there exists a `HitRect` node. The `PressRect`\n * is an abstract box that is extended beyond the `HitRect`.\n *\n * # Geometry\n *\n *  ┌────────────────────────┐\n *  │  ┌──────────────────┐  │ - Presses start anywhere within `HitRect`, which\n *  │  │  ┌────────────┐  │  │   is expanded via the prop `hitSlop`.\n *  │  │  │ VisualRect │  │  │\n *  │  │  └────────────┘  │  │ - When pressed down for sufficient amount of time\n *  │  │    HitRect       │  │   before letting up, `VisualRect` activates for\n *  │  └──────────────────┘  │   as long as the press stays within `PressRect`.\n *  │       PressRect    o   │\n *  └────────────────────│───┘\n *          Out Region   └────── `PressRect`, which is expanded via the prop\n *                               `pressRectOffset`, allows presses to move\n *                               beyond `HitRect` while maintaining activation\n *                               and being eligible for a \"press\".\n *\n * # State Machine\n *\n * ┌───────────────┐ ◀──── RESPONDER_RELEASE\n * │ NOT_RESPONDER │\n * └───┬───────────┘ ◀──── RESPONDER_TERMINATED\n *     │\n *     │ RESPONDER_GRANT (HitRect)\n *     │\n *     ▼\n * ┌─────────────────────┐          ┌───────────────────┐              ┌───────────────────┐\n * │ RESPONDER_INACTIVE_ │  DELAY   │ RESPONDER_ACTIVE_ │  T + DELAY   │ RESPONDER_ACTIVE_ │\n * │ PRESS_IN            ├────────▶ │ PRESS_IN          ├────────────▶ │ LONG_PRESS_IN     │\n * └─┬───────────────────┘          └─┬─────────────────┘              └─┬─────────────────┘\n *   │           ▲                    │           ▲                      │           ▲\n *   │LEAVE_     │                    │LEAVE_     │                      │LEAVE_     │\n *   │PRESS_RECT │ENTER_              │PRESS_RECT │ENTER_                │PRESS_RECT │ENTER_\n *   │           │PRESS_RECT          │           │PRESS_RECT            │           │PRESS_RECT\n *   ▼           │                    ▼           │                      ▼           │\n * ┌─────────────┴───────┐          ┌─────────────┴─────┐              ┌─────────────┴─────┐\n * │ RESPONDER_INACTIVE_ │  DELAY   │ RESPONDER_ACTIVE_ │              │ RESPONDER_ACTIVE_ │\n * │ PRESS_OUT           ├────────▶ │ PRESS_OUT         │              │ LONG_PRESS_OUT    │\n * └─────────────────────┘          └───────────────────┘              └───────────────────┘\n *\n * T + DELAY => LONG_PRESS_DELAY + DELAY\n *\n * Not drawn are the side effects of each transition. The most important side\n * effect is the invocation of `onPress` and `onLongPress` that occur when a\n * responder is release while in the \"press in\" states.\n */\nexport default class Pressability {\n  _config: PressabilityConfig;\n  _eventHandlers: ?EventHandlers = null;\n  _hoverInDelayTimeout: ?TimeoutID = null;\n  _hoverOutDelayTimeout: ?TimeoutID = null;\n  _isHovered: boolean = false;\n  _longPressDelayTimeout: ?TimeoutID = null;\n  _pressDelayTimeout: ?TimeoutID = null;\n  _pressOutDelayTimeout: ?TimeoutID = null;\n  _responderID: ?number | React.ElementRef<HostComponent<mixed>> = null;\n  _responderRegion: ?$ReadOnly<{|\n    bottom: number,\n    left: number,\n    right: number,\n    top: number,\n  |}> = null;\n  _touchActivatePosition: ?$ReadOnly<{|\n    pageX: number,\n    pageY: number,\n  |}>;\n  _touchActivateTime: ?number;\n  _touchState: TouchState = 'NOT_RESPONDER';\n\n  constructor(config: PressabilityConfig) {\n    this.configure(config);\n  }\n\n  configure(config: PressabilityConfig): void {\n    this._config = config;\n  }\n\n  /**\n   * Resets any pending timers. This should be called on unmount.\n   */\n  reset(): void {\n    this._cancelHoverInDelayTimeout();\n    this._cancelHoverOutDelayTimeout();\n    this._cancelLongPressDelayTimeout();\n    this._cancelPressDelayTimeout();\n    this._cancelPressOutDelayTimeout();\n  }\n\n  /**\n   * Returns a set of props to spread into the interactive element.\n   */\n  getEventHandlers(): EventHandlers {\n    if (this._eventHandlers == null) {\n      this._eventHandlers = this._createEventHandlers();\n    }\n    return this._eventHandlers;\n  }\n\n  _createEventHandlers(): EventHandlers {\n    const focusEventHandlers = {\n      onBlur: (event: BlurEvent): void => {\n        const {onBlur} = this._config;\n        if (onBlur != null) {\n          onBlur(event);\n        }\n      },\n      onFocus: (event: FocusEvent): void => {\n        const {onFocus} = this._config;\n        if (onFocus != null) {\n          onFocus(event);\n        }\n      },\n    };\n\n    const responderEventHandlers = {\n      onStartShouldSetResponder: (): boolean => {\n        const {disabled} = this._config;\n        if (disabled == null) {\n          const {onStartShouldSetResponder_DEPRECATED} = this._config;\n          return onStartShouldSetResponder_DEPRECATED == null\n            ? true\n            : onStartShouldSetResponder_DEPRECATED();\n        }\n        return !disabled;\n      },\n\n      onResponderGrant: (event: PressEvent): void => {\n        event.persist();\n\n        this._cancelPressOutDelayTimeout();\n\n        this._responderID = event.currentTarget;\n        this._touchState = 'NOT_RESPONDER';\n        this._receiveSignal('RESPONDER_GRANT', event);\n\n        const delayPressIn = normalizeDelay(this._config.delayPressIn);\n        if (delayPressIn > 0) {\n          this._pressDelayTimeout = setTimeout(() => {\n            this._receiveSignal('DELAY', event);\n          }, delayPressIn);\n        } else {\n          this._receiveSignal('DELAY', event);\n        }\n\n        const delayLongPress = normalizeDelay(\n          this._config.delayLongPress,\n          10,\n          DEFAULT_LONG_PRESS_DELAY_MS - delayPressIn,\n        );\n        this._longPressDelayTimeout = setTimeout(() => {\n          this._handleLongPress(event);\n        }, delayLongPress + delayPressIn);\n      },\n\n      onResponderMove: (event: PressEvent): void => {\n        if (this._config.onPressMove != null) {\n          this._config.onPressMove(event);\n        }\n\n        // Region may not have finished being measured, yet.\n        const responderRegion = this._responderRegion;\n        if (responderRegion == null) {\n          return;\n        }\n\n        const touch = getTouchFromPressEvent(event);\n        if (touch == null) {\n          this._cancelLongPressDelayTimeout();\n          this._receiveSignal('LEAVE_PRESS_RECT', event);\n          return;\n        }\n\n        if (this._touchActivatePosition != null) {\n          const deltaX = this._touchActivatePosition.pageX - touch.pageX;\n          const deltaY = this._touchActivatePosition.pageY - touch.pageY;\n          if (Math.hypot(deltaX, deltaY) > 10) {\n            this._cancelLongPressDelayTimeout();\n          }\n        }\n\n        if (this._isTouchWithinResponderRegion(touch, responderRegion)) {\n          this._receiveSignal('ENTER_PRESS_RECT', event);\n        } else {\n          this._cancelLongPressDelayTimeout();\n          this._receiveSignal('LEAVE_PRESS_RECT', event);\n        }\n      },\n\n      onResponderRelease: (event: PressEvent): void => {\n        this._receiveSignal('RESPONDER_RELEASE', event);\n      },\n\n      onResponderTerminate: (event: PressEvent): void => {\n        this._receiveSignal('RESPONDER_TERMINATED', event);\n      },\n\n      onResponderTerminationRequest: (): boolean => {\n        const {cancelable} = this._config;\n        if (cancelable == null) {\n          const {onResponderTerminationRequest_DEPRECATED} = this._config;\n          return onResponderTerminationRequest_DEPRECATED == null\n            ? true\n            : onResponderTerminationRequest_DEPRECATED();\n        }\n        return cancelable;\n      },\n\n      onClick: (event: PressEvent): void => {\n        const {onPress} = this._config;\n        if (onPress != null) {\n          onPress(event);\n        }\n      },\n    };\n\n    if (process.env.NODE_ENV === 'test') {\n      // We are setting this in order to find this node in ReactNativeTestTools\n      responderEventHandlers.onStartShouldSetResponder.testOnly_pressabilityConfig = () =>\n        this._config;\n    }\n\n    const mouseEventHandlers =\n      Platform.OS === 'ios' || Platform.OS === 'android'\n        ? null\n        : {\n            onMouseEnter: (event: MouseEvent): void => {\n              if (isHoverEnabled()) {\n                this._isHovered = true;\n                this._cancelHoverOutDelayTimeout();\n                const {onHoverIn} = this._config;\n                if (onHoverIn != null) {\n                  const delayHoverIn = normalizeDelay(\n                    this._config.delayHoverIn,\n                  );\n                  if (delayHoverIn > 0) {\n                    this._hoverInDelayTimeout = setTimeout(() => {\n                      onHoverIn(event);\n                    }, delayHoverIn);\n                  } else {\n                    onHoverIn(event);\n                  }\n                }\n              }\n            },\n\n            onMouseLeave: (event: MouseEvent): void => {\n              if (this._isHovered) {\n                this._isHovered = false;\n                this._cancelHoverInDelayTimeout();\n                const {onHoverOut} = this._config;\n                if (onHoverOut != null) {\n                  const delayHoverOut = normalizeDelay(\n                    this._config.delayHoverOut,\n                  );\n                  if (delayHoverOut > 0) {\n                    this._hoverInDelayTimeout = setTimeout(() => {\n                      onHoverOut(event);\n                    }, delayHoverOut);\n                  } else {\n                    onHoverOut(event);\n                  }\n                }\n              }\n            },\n          };\n\n    return {\n      ...focusEventHandlers,\n      ...responderEventHandlers,\n      ...mouseEventHandlers,\n    };\n  }\n\n  /**\n   * Receives a state machine signal, performs side effects of the transition\n   * and stores the new state. Validates the transition as well.\n   */\n  _receiveSignal(signal: TouchSignal, event: PressEvent): void {\n    const prevState = this._touchState;\n    const nextState = Transitions[prevState]?.[signal];\n    if (this._responderID == null && signal === 'RESPONDER_RELEASE') {\n      return;\n    }\n    invariant(\n      nextState != null && nextState !== 'ERROR',\n      'Pressability: Invalid signal `%s` for state `%s` on responder: %s',\n      signal,\n      prevState,\n      typeof this._responderID === 'number'\n        ? this._responderID\n        : '<<host component>>',\n    );\n    if (prevState !== nextState) {\n      this._performTransitionSideEffects(prevState, nextState, signal, event);\n      this._touchState = nextState;\n    }\n  }\n\n  /**\n   * Performs a transition between touchable states and identify any activations\n   * or deactivations (and callback invocations).\n   */\n  _performTransitionSideEffects(\n    prevState: TouchState,\n    nextState: TouchState,\n    signal: TouchSignal,\n    event: PressEvent,\n  ): void {\n    if (isTerminalSignal(signal)) {\n      this._touchActivatePosition = null;\n      this._cancelLongPressDelayTimeout();\n    }\n\n    const isInitialTransition =\n      prevState === 'NOT_RESPONDER' &&\n      nextState === 'RESPONDER_INACTIVE_PRESS_IN';\n\n    const isActivationTransiton =\n      !isActivationSignal(prevState) && isActivationSignal(nextState);\n\n    if (isInitialTransition || isActivationTransiton) {\n      this._measureResponderRegion();\n    }\n\n    if (isPressInSignal(prevState) && signal === 'LONG_PRESS_DETECTED') {\n      const {onLongPress} = this._config;\n      if (onLongPress != null) {\n        onLongPress(event);\n      }\n    }\n\n    const isPrevActive = isActiveSignal(prevState);\n    const isNextActive = isActiveSignal(nextState);\n\n    if (!isPrevActive && isNextActive) {\n      this._activate(event);\n    } else if (isPrevActive && !isNextActive) {\n      this._deactivate(event);\n    }\n\n    if (isPressInSignal(prevState) && signal === 'RESPONDER_RELEASE') {\n      const {onLongPress, onPress, android_disableSound} = this._config;\n      if (onPress != null) {\n        const isPressCanceledByLongPress =\n          onLongPress != null &&\n          prevState === 'RESPONDER_ACTIVE_LONG_PRESS_IN' &&\n          this._shouldLongPressCancelPress();\n        if (!isPressCanceledByLongPress) {\n          // If we never activated (due to delays), activate and deactivate now.\n          if (!isNextActive && !isPrevActive) {\n            this._activate(event);\n            this._deactivate(event);\n          }\n          if (Platform.OS === 'android' && android_disableSound !== true) {\n            SoundManager.playTouchSound();\n          }\n          onPress(event);\n        }\n      }\n    }\n\n    this._cancelPressDelayTimeout();\n  }\n\n  _activate(event: PressEvent): void {\n    const {onPressIn} = this._config;\n    const touch = getTouchFromPressEvent(event);\n    this._touchActivatePosition = {\n      pageX: touch.pageX,\n      pageY: touch.pageY,\n    };\n    this._touchActivateTime = Date.now();\n    if (onPressIn != null) {\n      onPressIn(event);\n    }\n  }\n\n  _deactivate(event: PressEvent): void {\n    const {onPressOut} = this._config;\n    if (onPressOut != null) {\n      const minPressDuration = normalizeDelay(\n        this._config.minPressDuration,\n        0,\n        DEFAULT_MIN_PRESS_DURATION,\n      );\n      const pressDuration = Date.now() - (this._touchActivateTime ?? 0);\n      const delayPressOut = Math.max(\n        minPressDuration - pressDuration,\n        normalizeDelay(this._config.delayPressOut),\n      );\n      if (delayPressOut > 0) {\n        this._pressOutDelayTimeout = setTimeout(() => {\n          onPressOut(event);\n        }, delayPressOut);\n      } else {\n        onPressOut(event);\n      }\n    }\n    this._touchActivateTime = null;\n  }\n\n  _measureResponderRegion(): void {\n    if (this._responderID == null) {\n      return;\n    }\n\n    if (typeof this._responderID === 'number') {\n      UIManager.measure(this._responderID, this._measureCallback);\n    } else {\n      this._responderID.measure(this._measureCallback);\n    }\n  }\n\n  _measureCallback = (left, top, width, height, pageX, pageY) => {\n    if (!left && !top && !width && !height && !pageX && !pageY) {\n      return;\n    }\n    this._responderRegion = {\n      bottom: pageY + height,\n      left: pageX,\n      right: pageX + width,\n      top: pageY,\n    };\n  };\n\n  _isTouchWithinResponderRegion(\n    touch: $PropertyType<PressEvent, 'nativeEvent'>,\n    responderRegion: $ReadOnly<{|\n      bottom: number,\n      left: number,\n      right: number,\n      top: number,\n    |}>,\n  ): boolean {\n    const hitSlop = normalizeRect(this._config.hitSlop);\n    const pressRectOffset = normalizeRect(this._config.pressRectOffset);\n\n    let regionBottom = responderRegion.bottom;\n    let regionLeft = responderRegion.left;\n    let regionRight = responderRegion.right;\n    let regionTop = responderRegion.top;\n\n    if (hitSlop != null) {\n      if (hitSlop.bottom != null) {\n        regionBottom += hitSlop.bottom;\n      }\n      if (hitSlop.left != null) {\n        regionLeft -= hitSlop.left;\n      }\n      if (hitSlop.right != null) {\n        regionRight += hitSlop.right;\n      }\n      if (hitSlop.top != null) {\n        regionTop -= hitSlop.top;\n      }\n    }\n\n    regionBottom +=\n      pressRectOffset?.bottom ?? DEFAULT_PRESS_RECT_OFFSETS.bottom;\n    regionLeft -= pressRectOffset?.left ?? DEFAULT_PRESS_RECT_OFFSETS.left;\n    regionRight += pressRectOffset?.right ?? DEFAULT_PRESS_RECT_OFFSETS.right;\n    regionTop -= pressRectOffset?.top ?? DEFAULT_PRESS_RECT_OFFSETS.top;\n\n    return (\n      touch.pageX > regionLeft &&\n      touch.pageX < regionRight &&\n      touch.pageY > regionTop &&\n      touch.pageY < regionBottom\n    );\n  }\n\n  _handleLongPress(event: PressEvent): void {\n    if (\n      this._touchState === 'RESPONDER_ACTIVE_PRESS_IN' ||\n      this._touchState === 'RESPONDER_ACTIVE_LONG_PRESS_IN'\n    ) {\n      this._receiveSignal('LONG_PRESS_DETECTED', event);\n    }\n  }\n\n  _shouldLongPressCancelPress(): boolean {\n    return (\n      this._config.onLongPressShouldCancelPress_DEPRECATED == null ||\n      this._config.onLongPressShouldCancelPress_DEPRECATED()\n    );\n  }\n\n  _cancelHoverInDelayTimeout(): void {\n    if (this._hoverInDelayTimeout != null) {\n      clearTimeout(this._hoverInDelayTimeout);\n      this._hoverInDelayTimeout = null;\n    }\n  }\n\n  _cancelHoverOutDelayTimeout(): void {\n    if (this._hoverOutDelayTimeout != null) {\n      clearTimeout(this._hoverOutDelayTimeout);\n      this._hoverOutDelayTimeout = null;\n    }\n  }\n\n  _cancelLongPressDelayTimeout(): void {\n    if (this._longPressDelayTimeout != null) {\n      clearTimeout(this._longPressDelayTimeout);\n      this._longPressDelayTimeout = null;\n    }\n  }\n\n  _cancelPressDelayTimeout(): void {\n    if (this._pressDelayTimeout != null) {\n      clearTimeout(this._pressDelayTimeout);\n      this._pressDelayTimeout = null;\n    }\n  }\n\n  _cancelPressOutDelayTimeout(): void {\n    if (this._pressOutDelayTimeout != null) {\n      clearTimeout(this._pressOutDelayTimeout);\n      this._pressOutDelayTimeout = null;\n    }\n  }\n}\n\nfunction normalizeDelay(delay: ?number, min = 0, fallback = 0): number {\n  return Math.max(min, delay ?? fallback);\n}\n\nconst getTouchFromPressEvent = (event: PressEvent) => {\n  const {changedTouches, touches} = event.nativeEvent;\n\n  if (touches != null && touches.length > 0) {\n    return touches[0];\n  }\n  if (changedTouches != null && changedTouches.length > 0) {\n    return changedTouches[0];\n  }\n  return event.nativeEvent;\n};\n"]}