6ddbe5f434c1ad72ae851f80d3d76d28
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ToggleButtonRow = exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _ToggleButtonGroup = _interopRequireDefault(require("./ToggleButtonGroup"));

var _ToggleButton = _interopRequireDefault(require("./ToggleButton"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

var ToggleButtonRow = function ToggleButtonRow(_ref) {
  var value = _ref.value,
      onValueChange = _ref.onValueChange,
      children = _ref.children,
      style = _ref.style;
  var count = React.Children.count(children);
  return React.createElement(_ToggleButtonGroup.default, {
    value: value,
    onValueChange: onValueChange
  }, React.createElement(_reactNative.View, {
    style: [styles.row, style]
  }, React.Children.map(children, function (child, i) {
    if (child && child.type === _ToggleButton.default) {
      return React.cloneElement(child, {
        style: [styles.button, i === 0 ? styles.first : i === count - 1 ? styles.last : styles.middle, child.props.style]
      });
    }

    return child;
  })));
};

exports.ToggleButtonRow = ToggleButtonRow;
ToggleButtonRow.displayName = 'ToggleButton.Row';

var styles = _reactNative.StyleSheet.create({
  row: {
    flexDirection: 'row'
  },
  button: {
    borderWidth: _reactNative.StyleSheet.hairlineWidth
  },
  first: {
    borderTopRightRadius: 0,
    borderBottomRightRadius: 0
  },
  middle: {
    borderRadius: 0,
    borderLeftWidth: 0
  },
  last: {
    borderLeftWidth: 0,
    borderTopLeftRadius: 0,
    borderBottomLeftRadius: 0
  }
});

var _default = ToggleButtonRow;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlRvZ2dsZUJ1dHRvblJvdy50c3giXSwibmFtZXMiOlsiVG9nZ2xlQnV0dG9uUm93Iiwic3R5bGUiLCJjb3VudCIsIlJlYWN0Iiwib25WYWx1ZUNoYW5nZSIsInN0eWxlcyIsImNoaWxkIiwiVG9nZ2xlQnV0dG9uIiwiaSIsInJvdyIsImZsZXhEaXJlY3Rpb24iLCJidXR0b24iLCJib3JkZXJXaWR0aCIsIlN0eWxlU2hlZXQiLCJoYWlybGluZVdpZHRoIiwiZmlyc3QiLCJib3JkZXJUb3BSaWdodFJhZGl1cyIsImJvcmRlckJvdHRvbVJpZ2h0UmFkaXVzIiwibWlkZGxlIiwiYm9yZGVyUmFkaXVzIiwiYm9yZGVyTGVmdFdpZHRoIiwibGFzdCIsImJvcmRlclRvcExlZnRSYWRpdXMiLCJib3JkZXJCb3R0b21MZWZ0UmFkaXVzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsSUFBQSxLQUFBLEdBQUEsdUJBQUEsQ0FBQSxPQUFBLENBQUEsT0FBQSxDQUFBLENBQUE7O0FBQ0EsSUFBQSxZQUFBLEdBQUEsT0FBQSxDQUFBLGNBQUEsQ0FBQTs7QUFDQSxJQUFBLGtCQUFBLEdBQUEsc0JBQUEsQ0FBQSxPQUFBLHVCQUFBLENBQUE7O0FBQ0EsSUFBQSxhQUFBLEdBQUEsc0JBQUEsQ0FBQSxPQUFBLGtCQUFBLENBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQStDQSxJQUFNQSxlQUFlLEdBQUcsU0FBbEJBLGVBQWtCLE9BQXNEO0FBQUEsTUFBckQsS0FBcUQsUUFBckQsS0FBcUQ7QUFBQSxNQUFyRCxhQUFxRCxRQUFyRCxhQUFxRDtBQUFBLE1BQXJELFFBQXFELFFBQXJELFFBQXFEO0FBQUEsTUFBbkJDLEtBQW1CLFFBQW5CQSxLQUFtQjtBQUM1RSxNQUFNQyxLQUFLLEdBQUdDLEtBQUssQ0FBTEEsUUFBQUEsQ0FBQUEsS0FBQUEsQ0FBZCxRQUFjQSxDQUFkO0FBRUEsU0FDRSxLQUFBLENBQUEsYUFBQSxDQUFDLGtCQUFBLENBQUQsT0FBQSxFQUFBO0FBQW1CLElBQUEsS0FBSyxFQUF4QixLQUFBO0FBQWlDLElBQUEsYUFBYSxFQUFFQztBQUFoRCxHQUFBLEVBQ0UsS0FBQSxDQUFBLGFBQUEsQ0FBQyxZQUFBLENBQUQsSUFBQSxFQUFBO0FBQU0sSUFBQSxLQUFLLEVBQUUsQ0FBQ0MsTUFBTSxDQUFQLEdBQUEsRUFBQSxLQUFBO0FBQWIsR0FBQSxFQUNHLEtBQUssQ0FBTCxRQUFBLENBQUEsR0FBQSxDQUFBLFFBQUEsRUFBNkIsVUFBQSxLQUFBLEVBQUEsQ0FBQSxFQUFjO0FBRTFDLFFBQUlDLEtBQUssSUFBSUEsS0FBSyxDQUFMQSxJQUFBQSxLQUFlQyxhQUFBQSxDQUE1QixPQUFBLEVBQTBDO0FBRXhDLGFBQU8sS0FBSyxDQUFMLFlBQUEsQ0FBQSxLQUFBLEVBQTBCO0FBQy9CTixRQUFBQSxLQUFLLEVBQUUsQ0FDTEksTUFBTSxDQURELE1BQUEsRUFFTEcsQ0FBQyxLQUFEQSxDQUFBQSxHQUNJSCxNQUFNLENBRFZHLEtBQUFBLEdBRUlBLENBQUMsS0FBS04sS0FBSyxHQUFYTSxDQUFBQSxHQUNBSCxNQUFNLENBRE5HLElBQUFBLEdBRUFILE1BQU0sQ0FOTCxNQUFBLEVBUUxDLEtBQUssQ0FBTEEsS0FBQUEsQ0FSSyxLQUFBO0FBRHdCLE9BQTFCLENBQVA7QUFZRDs7QUFFRCxXQUFBLEtBQUE7QUFyQlIsR0FHTyxDQURILENBREYsQ0FERjtBQUhGLENBQUE7OztBQStCQU4sZUFBZSxDQUFmQSxXQUFBQSxHQUFBQSxrQkFBQUE7O0FBRUEsSUFBTUssTUFBTSxHQUFHLFlBQUEsQ0FBQSxVQUFBLENBQUEsTUFBQSxDQUFrQjtBQUMvQkksRUFBQUEsR0FBRyxFQUFFO0FBQ0hDLElBQUFBLGFBQWEsRUFBRTtBQURaLEdBRDBCO0FBSS9CQyxFQUFBQSxNQUFNLEVBQUU7QUFDTkMsSUFBQUEsV0FBVyxFQUFFQyxZQUFBQSxDQUFBQSxVQUFBQSxDQUFXQztBQURsQixHQUp1QjtBQVEvQkMsRUFBQUEsS0FBSyxFQUFFO0FBQ0xDLElBQUFBLG9CQUFvQixFQURmLENBQUE7QUFFTEMsSUFBQUEsdUJBQXVCLEVBQUU7QUFGcEIsR0FSd0I7QUFhL0JDLEVBQUFBLE1BQU0sRUFBRTtBQUNOQyxJQUFBQSxZQUFZLEVBRE4sQ0FBQTtBQUVOQyxJQUFBQSxlQUFlLEVBQUU7QUFGWCxHQWJ1QjtBQWtCL0JDLEVBQUFBLElBQUksRUFBRTtBQUNKRCxJQUFBQSxlQUFlLEVBRFgsQ0FBQTtBQUVKRSxJQUFBQSxtQkFBbUIsRUFGZixDQUFBO0FBR0pDLElBQUFBLHNCQUFzQixFQUFFO0FBSHBCO0FBbEJ5QixDQUFsQixDQUFmOztlQXlCZXZCLGUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBTdHlsZVNoZWV0LCBWaWV3LCBTdHlsZVByb3AsIFZpZXdTdHlsZSB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgVG9nZ2xlQnV0dG9uR3JvdXAgZnJvbSAnLi9Ub2dnbGVCdXR0b25Hcm91cCc7XG5pbXBvcnQgVG9nZ2xlQnV0dG9uIGZyb20gJy4vVG9nZ2xlQnV0dG9uJztcblxudHlwZSBQcm9wcyA9IHtcbiAgLyoqXG4gICAqIEZ1bmN0aW9uIHRvIGV4ZWN1dGUgb24gc2VsZWN0aW9uIGNoYW5nZS5cbiAgICovXG4gIG9uVmFsdWVDaGFuZ2U6ICh2YWx1ZTogc3RyaW5nKSA9PiB2b2lkO1xuICAvKipcbiAgICogVmFsdWUgb2YgdGhlIGN1cnJlbnRseSBzZWxlY3RlZCB0b2dnbGUgYnV0dG9uLlxuICAgKi9cbiAgdmFsdWU6IHN0cmluZztcbiAgLyoqXG4gICAqIFJlYWN0IGVsZW1lbnRzIGNvbnRhaW5pbmcgdG9nZ2xlIGJ1dHRvbnMuXG4gICAqL1xuICBjaGlsZHJlbjogUmVhY3QuUmVhY3ROb2RlO1xuICBzdHlsZT86IFN0eWxlUHJvcDxWaWV3U3R5bGU+O1xufTtcblxuLyoqXG4gKiBUb2dnbGUgYnV0dG9uIHJvdyByZW5kZXJzIGEgZ3JvdXAgb2YgdG9nZ2xlIGJ1dHRvbnMgaW4gYSByb3cuXG4gKlxuICogPGRpdiBjbGFzcz1cInNjcmVlbnNob3RzXCI+XG4gKiAgIDxmaWd1cmU+XG4gKiAgICAgPGltZyBjbGFzcz1cIm1lZGl1bVwiIHNyYz1cInNjcmVlbnNob3RzL3RvZ2dsZS1idXR0b24tcm93LmdpZlwiIC8+XG4gKiAgIDwvZmlndXJlPlxuICogPC9kaXY+XG4gKlxuICogIyMgVXNhZ2VcbiAqIGBgYGpzXG4gKiBpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG4gKiBpbXBvcnQgeyBUb2dnbGVCdXR0b24gfSBmcm9tICdyZWFjdC1uYXRpdmUtcGFwZXInO1xuICpcbiAqIGNvbnN0IE15Q29tcG9uZW50ID0gKCkgPT4ge1xuICogICBjb25zdCBbdmFsdWUsIHNldFZhbHVlXSA9IFJlYWN0LnVzZVN0YXRlKCdsZWZ0Jyk7XG4gKlxuICogICByZXR1cm4gKFxuICogICAgIDxUb2dnbGVCdXR0b24uUm93IG9uVmFsdWVDaGFuZ2U9e3ZhbHVlID0+IHNldFZhbHVlKHZhbHVlKX0gdmFsdWU9e3ZhbHVlfT5cbiAqICAgICAgIDxUb2dnbGVCdXR0b24gaWNvbj1cImZvcm1hdC1hbGlnbi1sZWZ0XCIgdmFsdWU9XCJsZWZ0XCIgLz5cbiAqICAgICAgIDxUb2dnbGVCdXR0b24gaWNvbj1cImZvcm1hdC1hbGlnbi1yaWdodFwiIHZhbHVlPVwicmlnaHRcIiAvPlxuICogICAgIDwvVG9nZ2xlQnV0dG9uLlJvdz5cbiAqICAgKTtcbiAqIH07XG4gKlxuICogZXhwb3J0IGRlZmF1bHQgTXlDb21wb25lbnQ7XG4gKlxuICpgYGBcbiAqL1xuY29uc3QgVG9nZ2xlQnV0dG9uUm93ID0gKHsgdmFsdWUsIG9uVmFsdWVDaGFuZ2UsIGNoaWxkcmVuLCBzdHlsZSB9OiBQcm9wcykgPT4ge1xuICBjb25zdCBjb3VudCA9IFJlYWN0LkNoaWxkcmVuLmNvdW50KGNoaWxkcmVuKTtcblxuICByZXR1cm4gKFxuICAgIDxUb2dnbGVCdXR0b25Hcm91cCB2YWx1ZT17dmFsdWV9IG9uVmFsdWVDaGFuZ2U9e29uVmFsdWVDaGFuZ2V9PlxuICAgICAgPFZpZXcgc3R5bGU9e1tzdHlsZXMucm93LCBzdHlsZV19PlxuICAgICAgICB7UmVhY3QuQ2hpbGRyZW4ubWFwKGNoaWxkcmVuLCAoY2hpbGQsIGkpID0+IHtcbiAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yOiBUeXBlU2NyaXB0IGNvbXBsYWlucyBhYm91dCBjaGlsZC50eXBlIGJ1dCBpdCBkb2Vzbid0IG1hdHRlclxuICAgICAgICAgIGlmIChjaGlsZCAmJiBjaGlsZC50eXBlID09PSBUb2dnbGVCdXR0b24pIHtcbiAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3I6IFdlJ3JlIHN1cmUgdGhhdCBjaGlsZCBpcyBhIFJlYWN0IEVsZW1lbnRcbiAgICAgICAgICAgIHJldHVybiBSZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGQsIHtcbiAgICAgICAgICAgICAgc3R5bGU6IFtcbiAgICAgICAgICAgICAgICBzdHlsZXMuYnV0dG9uLFxuICAgICAgICAgICAgICAgIGkgPT09IDBcbiAgICAgICAgICAgICAgICAgID8gc3R5bGVzLmZpcnN0XG4gICAgICAgICAgICAgICAgICA6IGkgPT09IGNvdW50IC0gMVxuICAgICAgICAgICAgICAgICAgPyBzdHlsZXMubGFzdFxuICAgICAgICAgICAgICAgICAgOiBzdHlsZXMubWlkZGxlLFxuICAgICAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3I6IFdlJ3JlIHN1cmUgdGhhdCBjaGlsZCBpcyBhIFJlYWN0IEVsZW1lbnRcbiAgICAgICAgICAgICAgICBjaGlsZC5wcm9wcy5zdHlsZSxcbiAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBjaGlsZDtcbiAgICAgICAgfSl9XG4gICAgICA8L1ZpZXc+XG4gICAgPC9Ub2dnbGVCdXR0b25Hcm91cD5cbiAgKTtcbn07XG5cblRvZ2dsZUJ1dHRvblJvdy5kaXNwbGF5TmFtZSA9ICdUb2dnbGVCdXR0b24uUm93JztcblxuY29uc3Qgc3R5bGVzID0gU3R5bGVTaGVldC5jcmVhdGUoe1xuICByb3c6IHtcbiAgICBmbGV4RGlyZWN0aW9uOiAncm93JyxcbiAgfSxcbiAgYnV0dG9uOiB7XG4gICAgYm9yZGVyV2lkdGg6IFN0eWxlU2hlZXQuaGFpcmxpbmVXaWR0aCxcbiAgfSxcblxuICBmaXJzdDoge1xuICAgIGJvcmRlclRvcFJpZ2h0UmFkaXVzOiAwLFxuICAgIGJvcmRlckJvdHRvbVJpZ2h0UmFkaXVzOiAwLFxuICB9LFxuXG4gIG1pZGRsZToge1xuICAgIGJvcmRlclJhZGl1czogMCxcbiAgICBib3JkZXJMZWZ0V2lkdGg6IDAsXG4gIH0sXG5cbiAgbGFzdDoge1xuICAgIGJvcmRlckxlZnRXaWR0aDogMCxcbiAgICBib3JkZXJUb3BMZWZ0UmFkaXVzOiAwLFxuICAgIGJvcmRlckJvdHRvbUxlZnRSYWRpdXM6IDAsXG4gIH0sXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgVG9nZ2xlQnV0dG9uUm93O1xuXG4vLyBAY29tcG9uZW50LWRvY3MgaWdub3JlLW5leHQtbGluZVxuZXhwb3J0IHsgVG9nZ2xlQnV0dG9uUm93IH07XG4iXX0=