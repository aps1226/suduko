c95ebd347e6f84c6f68f505585be4281
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var AnimatedValue = require("./AnimatedValue");

var AnimatedWithChildren = require("./AnimatedWithChildren");

var invariant = require('invariant');

var _uniqueId = 1;

var AnimatedValueXY = function (_AnimatedWithChildren) {
  (0, _inherits2.default)(AnimatedValueXY, _AnimatedWithChildren);

  var _super = _createSuper(AnimatedValueXY);

  function AnimatedValueXY(valueIn) {
    var _this;

    (0, _classCallCheck2.default)(this, AnimatedValueXY);
    _this = _super.call(this);
    var value = valueIn || {
      x: 0,
      y: 0
    };

    if (typeof value.x === 'number' && typeof value.y === 'number') {
      _this.x = new AnimatedValue(value.x);
      _this.y = new AnimatedValue(value.y);
    } else {
      invariant(value.x instanceof AnimatedValue && value.y instanceof AnimatedValue, 'AnimatedValueXY must be initialized with an object of numbers or ' + 'AnimatedValues.');
      _this.x = value.x;
      _this.y = value.y;
    }

    _this._listeners = {};
    return _this;
  }

  (0, _createClass2.default)(AnimatedValueXY, [{
    key: "setValue",
    value: function setValue(value) {
      this.x.setValue(value.x);
      this.y.setValue(value.y);
    }
  }, {
    key: "setOffset",
    value: function setOffset(offset) {
      this.x.setOffset(offset.x);
      this.y.setOffset(offset.y);
    }
  }, {
    key: "flattenOffset",
    value: function flattenOffset() {
      this.x.flattenOffset();
      this.y.flattenOffset();
    }
  }, {
    key: "extractOffset",
    value: function extractOffset() {
      this.x.extractOffset();
      this.y.extractOffset();
    }
  }, {
    key: "__getValue",
    value: function __getValue() {
      return {
        x: this.x.__getValue(),
        y: this.y.__getValue()
      };
    }
  }, {
    key: "resetAnimation",
    value: function resetAnimation(callback) {
      this.x.resetAnimation();
      this.y.resetAnimation();
      callback && callback(this.__getValue());
    }
  }, {
    key: "stopAnimation",
    value: function stopAnimation(callback) {
      this.x.stopAnimation();
      this.y.stopAnimation();
      callback && callback(this.__getValue());
    }
  }, {
    key: "addListener",
    value: function addListener(callback) {
      var _this2 = this;

      var id = String(_uniqueId++);

      var jointCallback = function jointCallback(_ref) {
        var number = _ref.value;
        callback(_this2.__getValue());
      };

      this._listeners[id] = {
        x: this.x.addListener(jointCallback),
        y: this.y.addListener(jointCallback)
      };
      return id;
    }
  }, {
    key: "removeListener",
    value: function removeListener(id) {
      this.x.removeListener(this._listeners[id].x);
      this.y.removeListener(this._listeners[id].y);
      delete this._listeners[id];
    }
  }, {
    key: "removeAllListeners",
    value: function removeAllListeners() {
      this.x.removeAllListeners();
      this.y.removeAllListeners();
      this._listeners = {};
    }
  }, {
    key: "getLayout",
    value: function getLayout() {
      return {
        left: this.x,
        top: this.y
      };
    }
  }, {
    key: "getTranslateTransform",
    value: function getTranslateTransform() {
      return [{
        translateX: this.x
      }, {
        translateY: this.y
      }];
    }
  }]);
  return AnimatedValueXY;
}(AnimatedWithChildren);

module.exports = AnimatedValueXY;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkFuaW1hdGVkVmFsdWVYWS5qcyJdLCJuYW1lcyI6WyJBbmltYXRlZFZhbHVlIiwicmVxdWlyZSIsIkFuaW1hdGVkV2l0aENoaWxkcmVuIiwiaW52YXJpYW50IiwiX3VuaXF1ZUlkIiwiQW5pbWF0ZWRWYWx1ZVhZIiwidmFsdWVJbiIsInZhbHVlIiwieCIsInkiLCJfbGlzdGVuZXJzIiwic2V0VmFsdWUiLCJvZmZzZXQiLCJzZXRPZmZzZXQiLCJmbGF0dGVuT2Zmc2V0IiwiZXh0cmFjdE9mZnNldCIsIl9fZ2V0VmFsdWUiLCJjYWxsYmFjayIsInJlc2V0QW5pbWF0aW9uIiwic3RvcEFuaW1hdGlvbiIsImlkIiwiU3RyaW5nIiwiam9pbnRDYWxsYmFjayIsIm51bWJlciIsImFkZExpc3RlbmVyIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJsZWZ0IiwidG9wIiwidHJhbnNsYXRlWCIsInRyYW5zbGF0ZVkiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFVQTs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRUEsSUFBTUEsYUFBYSxHQUFHQyxPQUFPLG1CQUE3Qjs7QUFDQSxJQUFNQyxvQkFBb0IsR0FBR0QsT0FBTywwQkFBcEM7O0FBRUEsSUFBTUUsU0FBUyxHQUFHRixPQUFPLENBQUMsV0FBRCxDQUF6Qjs7QUFRQSxJQUFJRyxTQUFTLEdBQUcsQ0FBaEI7O0lBUU1DLGU7Ozs7O0FBWUosMkJBQ0VDLE9BREYsRUFNRTtBQUFBOztBQUFBO0FBQ0E7QUFDQSxRQUFNQyxLQUFVLEdBQUdELE9BQU8sSUFBSTtBQUFDRSxNQUFBQSxDQUFDLEVBQUUsQ0FBSjtBQUFPQyxNQUFBQSxDQUFDLEVBQUU7QUFBVixLQUE5Qjs7QUFDQSxRQUFJLE9BQU9GLEtBQUssQ0FBQ0MsQ0FBYixLQUFtQixRQUFuQixJQUErQixPQUFPRCxLQUFLLENBQUNFLENBQWIsS0FBbUIsUUFBdEQsRUFBZ0U7QUFDOUQsWUFBS0QsQ0FBTCxHQUFTLElBQUlSLGFBQUos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LENBQUwsQ0FBT2tCLGtCQUFQO0FBQ0EsV0FBS2pCLENBQUwsQ0FBT2lCLGtCQUFQO0FBQ0EsV0FBS2hCLFVBQUwsR0FBa0IsRUFBbEI7QUFDRDs7O1dBT0QscUJBQWlEO0FBQy9DLGFBQU87QUFDTGlCLFFBQUFBLElBQUksRUFBRSxLQUFLbkIsQ0FETjtBQUVMb0IsUUFBQUEsR0FBRyxFQUFFLEtBQUtuQjtBQUZMLE9BQVA7QUFJRDs7O1dBT0QsaUNBQW9FO0FBQ2xFLGFBQU8sQ0FBQztBQUFDb0IsUUFBQUEsVUFBVSxFQUFFLEtBQUtyQjtBQUFsQixPQUFELEVBQXVCO0FBQUNzQixRQUFBQSxVQUFVLEVBQUUsS0FBS3JCO0FBQWxCLE9BQXZCLENBQVA7QUFDRDs7O0VBL0wyQlAsb0I7O0FBa005QjZCLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjNCLGVBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICogQGZvcm1hdFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgQW5pbWF0ZWRWYWx1ZSA9IHJlcXVpcmUoJy4vQW5pbWF0ZWRWYWx1ZScpO1xuY29uc3QgQW5pbWF0ZWRXaXRoQ2hpbGRyZW4gPSByZXF1aXJlKCcuL0FuaW1hdGVkV2l0aENoaWxkcmVuJyk7XG5cbmNvbnN0IGludmFyaWFudCA9IHJlcXVpcmUoJ2ludmFyaWFudCcpO1xuXG50eXBlIFZhbHVlWFlMaXN0ZW5lckNhbGxiYWNrID0gKHZhbHVlOiB7XG4gIHg6IG51bWJlcixcbiAgeTogbnVtYmVyLFxuICAuLi5cbn0pID0+IG1peGVkO1xuXG5sZXQgX3VuaXF1ZUlkID0gMTtcblxuLyoqXG4gKiAyRCBWYWx1ZSBmb3IgZHJpdmluZyAyRCBhbmltYXRpb25zLCBzdWNoIGFzIHBhbiBnZXN0dXJlcy4gQWxtb3N0IGlkZW50aWNhbFxuICogQVBJIHRvIG5vcm1hbCBgQW5pbWF0ZWQuVmFsdWVgLCBidXQgbXVsdGlwbGV4ZWQuXG4gKlxuICogU2VlIGh0dHBzOi8vcmVhY3RuYXRpdmUuZGV2L2RvY3MvYW5pbWF0ZWR2YWx1ZXh5Lmh0bWxcbiAqL1xuY2xhc3MgQW5pbWF0ZWRWYWx1ZVhZIGV4dGVuZHMgQW5pbWF0ZWRXaXRoQ2hpbGRyZW4ge1xuICB4OiBBbmltYXRlZFZhbHVlO1xuICB5OiBBbmltYXRlZFZhbHVlO1xuICBfbGlzdGVuZXJzOiB7XG4gICAgW2tleTogc3RyaW5nXToge1xuICAgICAgeDogc3RyaW5nLFxuICAgICAgeTogc3RyaW5nLFxuICAgICAgLi4uXG4gICAgfSxcbiAgICAuLi4sXG4gIH07XG5cbiAgY29uc3RydWN0b3IoXG4gICAgdmFsdWVJbj86ID97XG4gICAgICAreDogbnVtYmVyIHwgQW5pbWF0ZWRWYWx1ZSxcbiAgICAgICt5OiBudW1iZXIgfCBBbmltYXRlZFZhbHVlLFxuICAgICAgLi4uXG4gICAgfSxcbiAgKSB7XG4gICAgc3VwZXIoKTtcbiAgICBjb25zdCB2YWx1ZTogYW55ID0gdmFsdWVJbiB8fCB7eDogMCwgeTogMH07IC8vIEBmbG93Zml4bWU6IHNob3VsZG4ndCBuZWVkIGA6IGFueWBcbiAgICBpZiAodHlwZW9mIHZhbHVlLnggPT09ICdudW1iZXInICYmIHR5cGVvZiB2YWx1ZS55ID09PSAnbnVtYmVyJykge1xuICAgICAgdGhpcy54ID0gbmV3IEFuaW1hdGVkVmFsdWUodmFsdWUueCk7XG4gICAgICB0aGlzLnkgPSBuZXcgQW5pbWF0ZWRWYWx1ZSh2YWx1ZS55KTtcbiAgICB9IGVsc2Uge1xuICAgICAgaW52YXJpYW50KFxuICAgICAgICB2YWx1ZS54IGluc3RhbmNlb2YgQW5pbWF0ZWRWYWx1ZSAmJiB2YWx1ZS55IGluc3RhbmNlb2YgQW5pbWF0ZWRWYWx1ZSxcbiAgICAgICAgJ0FuaW1hdGVkVmFsdWVYWSBtdXN0IGJlIGluaXRpYWxpemVkIHdpdGggYW4gb2JqZWN0IG9mIG51bWJlcnMgb3IgJyArXG4gICAgICAgICAgJ0FuaW1hdGVkVmFsdWVzLicsXG4gICAgICApO1xuICAgICAgdGhpcy54ID0gdmFsdWUueDtcbiAgICAgIHRoaXMueSA9IHZhbHVlLnk7XG4gICAgfVxuICAgIHRoaXMuX2xpc3RlbmVycyA9IHt9O1xuICB9XG5cbiAgLyoqXG4gICAqIERpcmVjdGx5IHNldCB0aGUgdmFsdWUuIFRoaXMgd2lsbCBzdG9wIGFueSBhbmltYXRpb25zIHJ1bm5pbmcgb24gdGhlIHZhbHVlXG4gICAqIGFuZCB1cGRhdGUgYWxsIHRoZSBib3VuZCBwcm9wZXJ0aWVzLlxuICAgKlxuICAgKiBTZWUgaHR0cHM6Ly9yZWFjdG5hdGl2ZS5kZXYvZG9jcy9hbmltYXRlZHZhbHVleHkuaHRtbCNzZXR2YWx1ZVxuICAgKi9cbiAgc2V0VmFsdWUodmFsdWU6IHt4OiBudW1iZXIsIHk6IG51bWJlciwgLi4ufSkge1xuICAgIHRoaXMueC5zZXRWYWx1ZSh2YWx1ZS54KTtcbiAgICB0aGlzLnkuc2V0VmFsdWUodmFsdWUueSk7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyBhbiBvZmZzZXQgdGhhdCBpcyBhcHBsaWVkIG9uIHRvcCBvZiB3aGF0ZXZlciB2YWx1ZSBpcyBzZXQsIHdoZXRoZXJcbiAgICogdmlhIGBzZXRWYWx1ZWAsIGFuIGFuaW1hdGlvbiwgb3IgYEFuaW1hdGVkLmV2ZW50YC4gVXNlZnVsIGZvciBjb21wZW5zYXRpbmdcbiAgICogdGhpbmdzIGxpa2UgdGhlIHN0YXJ0IG9mIGEgcGFuIGdlc3R1cmUuXG4gICAqXG4gICAqIFNlZSBodHRwczovL3JlYWN0bmF0aXZlLmRldi9kb2NzL2FuaW1hdGVkdmFsdWV4eS5odG1sI3NldG9mZnNldFxuICAgKi9cbiAgc2V0T2Zmc2V0KG9mZnNldDoge3g6IG51bWJlciwgeTogbnVtYmVyLCAuLi59KSB7XG4gICAgdGhpcy54LnNldE9mZnNldChvZmZzZXQueCk7XG4gICAgdGhpcy55LnNldE9mZnNldChvZmZzZXQueSk7XG4gIH1cblxuICAvKipcbiAgICogTWVyZ2VzIHRoZSBvZmZzZXQgdmFsdWUgaW50byB0aGUgYmFzZSB2YWx1ZSBhbmQgcmVzZXRzIHRoZSBvZmZzZXQgdG8gemVyby5cbiAgICogVGhlIGZpbmFsIG91dHB1dCBvZiB0aGUgdmFsdWUgaXMgdW5jaGFuZ2VkLlxuICAgKlxuICAgKiBTZWUgaHR0cHM6Ly9yZWFjdG5hdGl2ZS5kZXYvZG9jcy9hbmltYXRlZHZhbHVleHkuaHRtbCNmbGF0dGVub2Zmc2V0XG4gICAqL1xuICBmbGF0dGVuT2Zmc2V0KCk6IHZvaWQge1xuICAgIHRoaXMueC5mbGF0dGVuT2Zmc2V0KCk7XG4gICAgdGhpcy55LmZsYXR0ZW5PZmZzZXQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBvZmZzZXQgdmFsdWUgdG8gdGhlIGJhc2UgdmFsdWUsIGFuZCByZXNldHMgdGhlIGJhc2UgdmFsdWUgdG9cbiAgICogemVyby4gVGhlIGZpbmFsIG91dHB1dCBvZiB0aGUgdmFsdWUgaXMgdW5jaGFuZ2VkLlxuICAgKlxuICAgKiBTZWUgaHR0cHM6Ly9yZWFjdG5hdGl2ZS5kZXYvZG9jcy9hbmltYXRlZHZhbHVleHkuaHRtbCNleHRyYWN0b2Zmc2V0XG4gICAqL1xuICBleHRyYWN0T2Zmc2V0KCk6IHZvaWQge1xuICAgIHRoaXMueC5leHRyYWN0T2Zmc2V0KCk7XG4gICAgdGhpcy55LmV4dHJhY3RPZmZzZXQoKTtcbiAgfVxuXG4gIF9fZ2V0VmFsdWUoKToge1xuICAgIHg6IG51bWJlcixcbiAgICB5OiBudW1iZXIsXG4gICAgLi4uXG4gIH0ge1xuICAgIHJldHVybiB7XG4gICAgICB4OiB0aGlzLnguX19nZXRWYWx1ZSgpLFxuICAgICAgeTogdGhpcy55Ll9fZ2V0VmFsdWUoKSxcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFN0b3BzIGFueSBhbmltYXRpb24gYW5kIHJlc2V0cyB0aGUgdmFsdWUgdG8gaXRzIG9yaWdpbmFsLlxuICAgKlxuICAgKiBTZWUgaHR0cHM6Ly9yZWFjdG5hdGl2ZS5kZXYvZG9jcy9hbmltYXRlZHZhbHVleHkuaHRtbCNyZXNldGFuaW1hdGlvblxuICAgKi9cbiAgcmVzZXRBbmltYXRpb24oXG4gICAgY2FsbGJhY2s/OiAodmFsdWU6IHtcbiAgICAgIHg6IG51bWJlcixcbiAgICAgIHk6IG51bWJlcixcbiAgICAgIC4uLlxuICAgIH0pID0+IHZvaWQsXG4gICk6IHZvaWQge1xuICAgIHRoaXMueC5yZXNldEFuaW1hdGlvbigpO1xuICAgIHRoaXMueS5yZXNldEFuaW1hdGlvbigpO1xuICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKHRoaXMuX19nZXRWYWx1ZSgpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdG9wcyBhbnkgcnVubmluZyBhbmltYXRpb24gb3IgdHJhY2tpbmcuIGBjYWxsYmFja2AgaXMgaW52b2tlZCB3aXRoIHRoZVxuICAgKiBmaW5hbCB2YWx1ZSBhZnRlciBzdG9wcGluZyB0aGUgYW5pbWF0aW9uLCB3aGljaCBpcyB1c2VmdWwgZm9yIHVwZGF0aW5nXG4gICAqIHN0YXRlIHRvIG1hdGNoIHRoZSBhbmltYXRpb24gcG9zaXRpb24gd2l0aCBsYXlvdXQuXG4gICAqXG4gICAqIFNlZSBodHRwczovL3JlYWN0bmF0aXZlLmRldi9kb2NzL2FuaW1hdGVkdmFsdWV4eS5odG1sI3N0b3BhbmltYXRpb25cbiAgICovXG4gIHN0b3BBbmltYXRpb24oXG4gICAgY2FsbGJhY2s/OiAodmFsdWU6IHtcbiAgICAgIHg6IG51bWJlcixcbiAgICAgIHk6IG51bWJlcixcbiAgICAgIC4uLlxuICAgIH0pID0+IHZvaWQsXG4gICk6IHZvaWQge1xuICAgIHRoaXMueC5zdG9wQW5pbWF0aW9uKCk7XG4gICAgdGhpcy55LnN0b3BBbmltYXRpb24oKTtcbiAgICBjYWxsYmFjayAmJiBjYWxsYmFjayh0aGlzLl9fZ2V0VmFsdWUoKSk7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBhbiBhc3luY2hyb25vdXMgbGlzdGVuZXIgdG8gdGhlIHZhbHVlIHNvIHlvdSBjYW4gb2JzZXJ2ZSB1cGRhdGVzIGZyb21cbiAgICogYW5pbWF0aW9ucy4gIFRoaXMgaXMgdXNlZnVsIGJlY2F1c2UgdGhlcmUgaXMgbm8gd2F5IHRvIHN5bmNocm9ub3VzbHkgcmVhZFxuICAgKiB0aGUgdmFsdWUgYmVjYXVzZSBpdCBtaWdodCBiZSBkcml2ZW4gbmF0aXZlbHkuXG4gICAqXG4gICAqIFJldHVybnMgYSBzdHJpbmcgdGhhdCBzZXJ2ZXMgYXMgYW4gaWRlbnRpZmllciBmb3IgdGhlIGxpc3RlbmVyLlxuICAgKlxuICAgKiBTZWUgaHR0cHM6Ly9yZWFjdG5hdGl2ZS5kZXYvZG9jcy9hbmltYXRlZHZhbHVleHkuaHRtbCNhZGRsaXN0ZW5lclxuICAgKi9cbiAgYWRkTGlzdGVuZXIoY2FsbGJhY2s6IFZhbHVlWFlMaXN0ZW5lckNhbGxiYWNrKTogc3RyaW5nIHtcbiAgICBjb25zdCBpZCA9IFN0cmluZyhfdW5pcXVlSWQrKyk7XG4gICAgY29uc3Qgam9pbnRDYWxsYmFjayA9ICh7dmFsdWU6IG51bWJlcn0pID0+IHtcbiAgICAgIGNhbGxiYWNrKHRoaXMuX19nZXRWYWx1ZSgpKTtcbiAgICB9O1xuICAgIHRoaXMuX2xpc3RlbmVyc1tpZF0gPSB7XG4gICAgICB4OiB0aGlzLnguYWRkTGlzdGVuZXIoam9pbnRDYWxsYmFjayksXG4gICAgICB5OiB0aGlzLnkuYWRkTGlzdGVuZXIoam9pbnRDYWxsYmFjayksXG4gICAgfTtcbiAgICByZXR1cm4gaWQ7XG4gIH1cblxuICAvKipcbiAgICogVW5yZWdpc3RlciBhIGxpc3RlbmVyLiBUaGUgYGlkYCBwYXJhbSBzaGFsbCBtYXRjaCB0aGUgaWRlbnRpZmllclxuICAgKiBwcmV2aW91c2x5IHJldHVybmVkIGJ5IGBhZGRMaXN0ZW5lcigpYC5cbiAgICpcbiAgICogU2VlIGh0dHBzOi8vcmVhY3RuYXRpdmUuZGV2L2RvY3MvYW5pbWF0ZWR2YWx1ZXh5Lmh0bWwjcmVtb3ZlbGlzdGVuZXJcbiAgICovXG4gIHJlbW92ZUxpc3RlbmVyKGlkOiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLngucmVtb3ZlTGlzdGVuZXIodGhpcy5fbGlzdGVuZXJzW2lkXS54KTtcbiAgICB0aGlzLnkucmVtb3ZlTGlzdGVuZXIodGhpcy5fbGlzdGVuZXJzW2lkXS55KTtcbiAgICBkZWxldGUgdGhpcy5fbGlzdGVuZXJzW2lkXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmUgYWxsIHJlZ2lzdGVyZWQgbGlzdGVuZXJzLlxuICAgKlxuICAgKiBTZWUgaHR0cHM6Ly9yZWFjdG5hdGl2ZS5kZXYvZG9jcy9hbmltYXRlZHZhbHVleHkuaHRtbCNyZW1vdmVhbGxsaXN0ZW5lcnNcbiAgICovXG4gIHJlbW92ZUFsbExpc3RlbmVycygpOiB2b2lkIHtcbiAgICB0aGlzLngucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG4gICAgdGhpcy55LnJlbW92ZUFsbExpc3RlbmVycygpO1xuICAgIHRoaXMuX2xpc3RlbmVycyA9IHt9O1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGB7eCwgeX1gIGludG8gYHtsZWZ0LCB0b3B9YCBmb3IgdXNlIGluIHN0eWxlLlxuICAgKlxuICAgKiBTZWUgaHR0cHM6Ly9yZWFjdG5hdGl2ZS5kZXYvZG9jcy9hbmltYXRlZHZhbHVleHkuaHRtbCNnZXRsYXlvdXRcbiAgICovXG4gIGdldExheW91dCgpOiB7W2tleTogc3RyaW5nXTogQW5pbWF0ZWRWYWx1ZSwgLi4ufSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxlZnQ6IHRoaXMueCxcbiAgICAgIHRvcDogdGhpcy55LFxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYHt4LCB5fWAgaW50byBhIHVzZWFibGUgdHJhbnNsYXRpb24gdHJhbnNmb3JtLlxuICAgKlxuICAgKiBTZWUgaHR0cHM6Ly9yZWFjdG5hdGl2ZS5kZXYvZG9jcy9hbmltYXRlZHZhbHVleHkuaHRtbCNnZXR0cmFuc2xhdGV0cmFuc2Zvcm1cbiAgICovXG4gIGdldFRyYW5zbGF0ZVRyYW5zZm9ybSgpOiBBcnJheTx7W2tleTogc3RyaW5nXTogQW5pbWF0ZWRWYWx1ZSwgLi4ufT4ge1xuICAgIHJldHVybiBbe3RyYW5zbGF0ZVg6IHRoaXMueH0sIHt0cmFuc2xhdGVZOiB0aGlzLnl9XTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEFuaW1hdGVkVmFsdWVYWTtcbiJdfQ==