45c755a7d2ae5f6b3349ca24b8e80bc1
"use strict";function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) {symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});}keys.push.apply(keys, symbols);}return keys;}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(Object(source), true).forEach(function (key) {require("@babel/runtime/helpers/defineProperty")(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(Object(source)).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}

Object.defineProperty(exports, "__esModule", {
  value: true });

exports.default = void 0;

var _react = _interopRequireDefault(require("react"));



var _AnimatedText = _interopRequireDefault(require("../../Typography/AnimatedText"));

function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

var InputLabel = function InputLabel(props) {
  var
  parentState =

  props.parentState,labelBackground = props.labelBackground;
  var _props$labelProps =



















  props.labelProps,label = _props$labelProps.label,error = _props$labelProps.error,onLayoutAnimatedText = _props$labelProps.onLayoutAnimatedText,hasActiveOutline = _props$labelProps.hasActiveOutline,activeColor = _props$labelProps.activeColor,placeholderStyle = _props$labelProps.placeholderStyle,baseLabelTranslateX = _props$labelProps.baseLabelTranslateX,baseLabelTranslateY = _props$labelProps.baseLabelTranslateY,font = _props$labelProps.font,fontSize = _props$labelProps.fontSize,fontWeight = _props$labelProps.fontWeight,placeholderOpacity = _props$labelProps.placeholderOpacity,wiggleOffsetX = _props$labelProps.wiggleOffsetX,labelScale = _props$labelProps.labelScale,topPosition = _props$labelProps.topPosition,paddingOffset = _props$labelProps.paddingOffset,placeholderColor = _props$labelProps.placeholderColor,errorColor = _props$labelProps.errorColor,labelTranslationXOffset = _props$labelProps.labelTranslationXOffset;
  var labelTranslationX = {
    transform: [{

      translateX: parentState.labeled.interpolate({
        inputRange: [0, 1],
        outputRange: [baseLabelTranslateX, labelTranslationXOffset || 0] }) }] };



  var labelStyle = _objectSpread(_objectSpread({}, font), {}, {
    fontSize: fontSize,
    fontWeight: fontWeight,
    transform: [{

      translateX: parentState.error.interpolate({
        inputRange: [0, 0.5, 1],
        outputRange: [0, parentState.value && error ? wiggleOffsetX : 0, 0] }) },

    {

      translateY: parentState.labeled.interpolate({
        inputRange: [0, 1],
        outputRange: [baseLabelTranslateY, 0] }) },

    {

      scale: parentState.labeled.interpolate({
        inputRange: [0, 1],
        outputRange: [labelScale, 1] }) }] });



  return label ?



  _react.default.createElement(require("react-native").Animated.View, {
    pointerEvents: "none",
    style: [require("react-native").StyleSheet.absoluteFill, {
      opacity:
      parentState.value || parentState.focused ? parentState.labelLayout.measured ? 1 : 0 : 1 },
    labelTranslationX] },
  labelBackground === null || labelBackground === void 0 ? void 0 : labelBackground({
    parentState: parentState,
    labelStyle: labelStyle,
    labelProps: props.labelProps }),
  _react.default.createElement(_AnimatedText.default, {
    onLayout: onLayoutAnimatedText,
    style: [placeholderStyle, {
      top: topPosition },
    labelStyle, paddingOffset || {}, {
      color: activeColor,
      opacity: parentState.labeled.interpolate({
        inputRange: [0, 1],
        outputRange: [hasActiveOutline ? 1 : 0, 0] }) }],


    numberOfLines: 1 },
  label), _react.default.createElement(_AnimatedText.default, {
    style: [placeholderStyle, {
      top: topPosition },
    labelStyle, paddingOffset, {
      color: error && errorColor ? errorColor : placeholderColor,
      opacity: placeholderOpacity }],

    numberOfLines: 1 },
  label)) : null;
};

var _default = InputLabel;
exports.default = _default;