c88fb4cb54f56f919fe5fa0d7497c020
"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.fontFamilyNeedsScoping = fontFamilyNeedsScoping;exports.getAssetForSource = getAssetForSource;exports.loadSingleFontAsync = loadSingleFontAsync;exports.getNativeFontName = getNativeFontName;var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));var _core = require("@unimodules/core");
var _expoAsset = require("expo-asset");
var _expoConstants = _interopRequireDefault(require("expo-constants"));
var _reactNative = require("react-native");
var _ExpoFontLoader = _interopRequireDefault(require("./ExpoFontLoader"));
var isInClient = _expoConstants.default.appOwnership === 'expo';
var isInIOSStandalone = _expoConstants.default.appOwnership === 'standalone' && _reactNative.Platform.OS === 'ios';
function fontFamilyNeedsScoping(name) {
  return (isInClient || isInIOSStandalone) &&
  !_expoConstants.default.systemFonts.includes(name) &&
  name !== 'System' &&
  !name.includes(_expoConstants.default.sessionId);
}
function getAssetForSource(source) {
  if (source instanceof _expoAsset.Asset) {
    return source;
  }
  if (typeof source === 'string') {
    return _expoAsset.Asset.fromURI(source);
  } else
  if (typeof source === 'number') {
    return _expoAsset.Asset.fromModule(source);
  } else
  if (typeof source === 'object' && typeof source.uri !== 'undefined') {
    return getAssetForSource(source.uri);
  }



  return source;
}
function loadSingleFontAsync(name, input) {var asset;return _regenerator.default.async(function loadSingleFontAsync$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:
          asset = input;if (
          asset.downloadAsync) {_context.next = 3;break;}throw (
            new _core.CodedError("ERR_FONT_SOURCE", '`loadSingleFontAsync` expected resource of type `Asset` from expo-asset on native'));case 3:_context.next = 5;return _regenerator.default.awrap(

          asset.downloadAsync());case 5:if (
          asset.downloaded) {_context.next = 7;break;}throw (
            new _core.CodedError("ERR_DOWNLOAD", "Failed to download asset for font \"" + name + "\""));case 7:_context.next = 9;return _regenerator.default.awrap(

          _ExpoFontLoader.default.loadAsync(getNativeFontName(name), asset.localUri));case 9:case "end":return _context.stop();}}}, null, null, null, Promise);}

function getNativeFontName(name) {
  if (fontFamilyNeedsScoping(name)) {
    return _expoConstants.default.sessionId + "-" + name;
  } else
  {
    return name;
  }
}