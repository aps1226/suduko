{"version":3,"sources":["index.js"],"names":["TOP_MIN","DEFAULT_COLORS","DEFAULT_EXPLOSION_SPEED","DEFAULT_FALL_SPEED","Explosion","props","state","items","animation","Animated","Value","componentDidMount","autoStart","autoStartDelay","setTimeout","start","componentDidUpdate","prevCount","count","colors","prevColors","setState","getItems","difference","length","newItems","Array","fill","map","leftDelta","topDelta","swingDelta","speedDelta","rotateX","rotateY","rotateZ","color","slice","concat","item","resume","explosionSpeed","fallSpeed","onAnimationStart","onAnimationResume","onAnimationEnd","sequence","timing","toValue","duration","useNativeDriver","easing","Easing","out","quad","finished","stop","onAnimationStop","bind","origin","fadeOut","Dimensions","get","height","width","index","left","interpolate","inputRange","outputRange","x","top","y","translateX","opacity","containerTransform","translateY","transform","rotate","Platform","OS","push","perspective","React","PureComponent"],"mappings":"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","sourcesContent":["// @flow\n\nimport * as React from 'react';\nimport { Animated, Dimensions, Easing, Platform } from 'react-native';\nimport type { CompositeAnimation } from 'react-native/Libraries/Animated/src/AnimatedImplementation';\nimport type { EndResult } from 'react-native/Libraries/Animated/src/animations/Animation';\n\nimport Confetti from './components/confetti';\nimport { randomValue, randomColor } from './utils';\n\ntype Props = {|\n  count: number,\n  origin: {\n    x: number,\n    y: number\n  },\n  explosionSpeed?: number,\n  fallSpeed?: number,\n  colors?: Array<string>,\n  fadeOut?: boolean,\n  autoStart?: boolean,\n  autoStartDelay?: number,\n  onAnimationStart?: () => void,\n  onAnimationResume?: () => void,\n  onAnimationStop?: () => void,\n  onAnimationEnd?: () => void,\n  testID?: string\n|};\n\ntype Item = {|\n  leftDelta: number,\n  topDelta: number,\n  swingDelta: number,\n  speedDelta: {\n    rotateX: number,\n    rotateY: number,\n    rotateZ: number\n  },\n  color: string\n|};\n\ntype State = {|\n  items: Array<Item>\n|};\n\nexport const TOP_MIN = 0.7;\nexport const DEFAULT_COLORS: Array<string> =[\n  '#e67e22',\n  '#2ecc71',\n  '#3498db',\n  '#84AAC2',\n  '#E6D68D',\n  '#F67933',\n  '#42A858',\n  '#4F50A2',\n  '#A86BB7',\n  '#e74c3c',\n  '#1abc9c'\n];\nexport const DEFAULT_EXPLOSION_SPEED = 350;\nexport const DEFAULT_FALL_SPEED = 3000;\n\nclass Explosion extends React.PureComponent<Props, State> {\n  props: Props;\n  state: State = {\n    items: []\n  };\n  start: () => void;\n  resume: () => void;\n  stop: () => void;\n  sequence: CompositeAnimation | null;\n  items: Array<Item> = [];\n  animation: Animated.Value = new Animated.Value(0);\n\n  constructor(props: Props) {\n    super(props);\n\n    const { colors = DEFAULT_COLORS } = props;\n\n    this.start = this.start.bind(this);\n    this.resume = this.resume.bind(this);\n    this.stop = this.stop.bind(this);\n\n    this.state.items = this.getItems(colors);\n  }\n\n  componentDidMount = () => {\n    const { autoStart = true, autoStartDelay = 0 } = this.props;\n\n    if (autoStart) {\n      setTimeout(this.start, autoStartDelay);\n    }\n  };\n\n  componentDidUpdate = ({ count: prevCount, colors: prevColors = DEFAULT_COLORS }: Props) => {\n    const { count, colors = DEFAULT_COLORS } = this.props;\n\n    if (count !== prevCount || colors !== prevColors) {\n      this.setState({\n        items: this.getItems(prevColors)\n      });\n    }\n  };\n\n  getItems = (prevColors: Array<string>): Array<Item> => {\n    const { count, colors = DEFAULT_COLORS } = this.props;\n    const { items } = this.state;\n\n    const difference = items.length < count ? count - items.length : 0;\n\n    const newItems = Array(difference).fill().map((): Item => ({\n      leftDelta: randomValue(0, 1),\n      topDelta: randomValue(TOP_MIN, 1),\n      swingDelta: randomValue(0.2, 1),\n      speedDelta: {\n        rotateX: randomValue(0.3, 1),\n        rotateY: randomValue(0.3, 1),\n        rotateZ: randomValue(0.3, 1)\n      },\n      color: randomColor(colors)\n    }));\n\n    return items\n      .slice(0, count)\n      .concat(newItems)\n      .map(item => ({\n        ...item,\n        color: prevColors !== colors ? randomColor(colors) : item.color\n      }));\n  };\n\n  start = (resume?: boolean = false) => {\n    const {\n      explosionSpeed = DEFAULT_EXPLOSION_SPEED,\n      fallSpeed = DEFAULT_FALL_SPEED,\n      onAnimationStart,\n      onAnimationResume,\n      onAnimationEnd\n    } = this.props;\n\n    if (resume) {\n      onAnimationResume && onAnimationResume();\n    } else {\n      this.sequence = Animated.sequence([\n        Animated.timing(this.animation, {toValue: 0, duration: 0, useNativeDriver: true}),\n        Animated.timing(this.animation, {\n          toValue: 1,\n          duration: explosionSpeed,\n          easing: Easing.out(Easing.quad),\n          useNativeDriver: true\n        }),\n        Animated.timing(this.animation, {\n          toValue: 2,\n          duration: fallSpeed,\n          easing: Easing.quad,\n          useNativeDriver: true\n        }),\n      ]);\n\n      onAnimationStart && onAnimationStart();\n    }\n\n    this.sequence && this.sequence.start(({finished}: EndResult) => {\n      if (finished) {\n        onAnimationEnd && onAnimationEnd();\n      }\n    });\n  };\n\n  resume = () => this.start(true);\n\n  stop = () => {\n    const { onAnimationStop } = this.props;\n\n    onAnimationStop && onAnimationStop();\n\n    this.sequence && this.sequence.stop();\n  };\n\n  render() {\n    const { origin, fadeOut } = this.props;\n    const { items } = this.state;\n    const { height, width } = Dimensions.get('window');\n\n    return (\n      <React.Fragment>\n        {items.map((item: Item, index: number) => {\n          const left = this.animation.interpolate({\n            inputRange: [0, 1, 2],\n            outputRange: [origin.x, item.leftDelta * width, item.leftDelta * width]\n          });\n          const top = this.animation.interpolate({\n            inputRange: [0, 1, 1 + item.topDelta, 2],\n            outputRange: [-origin.y, -item.topDelta * height, 0, 0]\n          });\n          const rotateX = this.animation.interpolate({\n            inputRange: [0, 2],\n            outputRange: ['0deg', `${item.speedDelta.rotateX * 360 * 10}deg`]\n          });\n          const rotateY = this.animation.interpolate({\n            inputRange: [0, 2],\n            outputRange: ['0deg', `${item.speedDelta.rotateY * 360 * 5}deg`]\n          });\n          const rotateZ = this.animation.interpolate({\n            inputRange: [0, 2],\n            outputRange: ['0deg', `${item.speedDelta.rotateZ * 360 * 2}deg`]\n          });\n          const translateX = this.animation.interpolate({\n            inputRange: [0, 0.4, 1.2, 2],\n            outputRange: [0, -(item.swingDelta * 30), (item.swingDelta * 30), 0]\n          });\n          const opacity = this.animation.interpolate({\n            inputRange: [0, 1, 1.8, 2],\n            outputRange: [1, 1, 1, fadeOut ? 0 : 1]\n          });\n          const containerTransform = [{translateX: left}, {translateY: top}];\n          const transform = [{rotateX}, {rotateY}, {rotate: rotateZ}, {translateX}];\n\n          if (Platform.OS === 'android') {\n            transform.push({ perspective: 100 });\n          }\n\n          return (\n            <Confetti\n              color={item.color}\n              containerTransform={containerTransform}\n              transform={transform}\n              opacity={opacity}\n              key={index}\n              testID={`confetti-${index + 1}`}\n            />\n          );\n        })}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Explosion;\n"]}