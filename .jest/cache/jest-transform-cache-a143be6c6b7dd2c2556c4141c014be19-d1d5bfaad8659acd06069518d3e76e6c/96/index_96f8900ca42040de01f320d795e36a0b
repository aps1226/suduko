af52ea2c2c9cbb01d079cab5d2320679
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.DEFAULT_FALL_SPEED = exports.DEFAULT_EXPLOSION_SPEED = exports.DEFAULT_COLORS = exports.TOP_MIN = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _confetti = _interopRequireDefault(require("./components/confetti"));

var _utils = require("./utils");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var TOP_MIN = 0.7;
exports.TOP_MIN = TOP_MIN;
var DEFAULT_COLORS = ['#e67e22', '#2ecc71', '#3498db', '#84AAC2', '#E6D68D', '#F67933', '#42A858', '#4F50A2', '#A86BB7', '#e74c3c', '#1abc9c'];
exports.DEFAULT_COLORS = DEFAULT_COLORS;
var DEFAULT_EXPLOSION_SPEED = 350;
exports.DEFAULT_EXPLOSION_SPEED = DEFAULT_EXPLOSION_SPEED;
var DEFAULT_FALL_SPEED = 3000;
exports.DEFAULT_FALL_SPEED = DEFAULT_FALL_SPEED;

var Explosion = function (_React$PureComponent) {
  (0, _inherits2.default)(Explosion, _React$PureComponent);

  var _super = _createSuper(Explosion);

  function Explosion(props) {
    var _this;

    (0, _classCallCheck2.default)(this, Explosion);
    _this = _super.call(this, props);
    _this.state = {
      items: []
    };
    _this.items = [];
    _this.animation = new _reactNative.Animated.Value(0);

    _this.componentDidMount = function () {
      var _this$props = _this.props,
          _this$props$autoStart = _this$props.autoStart,
          autoStart = _this$props$autoStart === void 0 ? true : _this$props$autoStart,
          _this$props$autoStart2 = _this$props.autoStartDelay,
          autoStartDelay = _this$props$autoStart2 === void 0 ? 0 : _this$props$autoStart2;

      if (autoStart) {
        setTimeout(_this.start, autoStartDelay);
      }
    };

    _this.componentDidUpdate = function (_ref) {
      var prevCount = _ref.count,
          _ref$colors = _ref.colors,
          prevColors = _ref$colors === void 0 ? DEFAULT_COLORS : _ref$colors;
      var _this$props2 = _this.props,
          count = _this$props2.count,
          _this$props2$colors = _this$props2.colors,
          colors = _this$props2$colors === void 0 ? DEFAULT_COLORS : _this$props2$colors;

      if (count !== prevCount || colors !== prevColors) {
        _this.setState({
          items: _this.getItems(prevColors)
        });
      }
    };

    _this.getItems = function (prevColors) {
      var _this$props3 = _this.props,
          count = _this$props3.count,
          _this$props3$colors = _this$props3.colors,
          colors = _this$props3$colors === void 0 ? DEFAULT_COLORS : _this$props3$colors;
      var items = _this.state.items;
      var difference = items.length < count ? count - items.length : 0;
      var newItems = Array(difference).fill().map(function () {
        return {
          leftDelta: (0, _utils.randomValue)(0, 1),
          topDelta: (0, _utils.randomValue)(TOP_MIN, 1),
          swingDelta: (0, _utils.randomValue)(0.2, 1),
          speedDelta: {
            rotateX: (0, _utils.randomValue)(0.3, 1),
            rotateY: (0, _utils.randomValue)(0.3, 1),
            rotateZ: (0, _utils.randomValue)(0.3, 1)
          },
          color: (0, _utils.randomColor)(colors)
        };
      });
      return items.slice(0, count).concat(newItems).map(function (item) {
        return _objectSpread(_objectSpread({}, item), {}, {
          color: prevColors !== colors ? (0, _utils.randomColor)(colors) : item.color
        });
      });
    };

    _this.start = function () {
      var resume = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      var _this$props4 = _this.props,
          _this$props4$explosio = _this$props4.explosionSpeed,
          explosionSpeed = _this$props4$explosio === void 0 ? DEFAULT_EXPLOSION_SPEED : _this$props4$explosio,
          _this$props4$fallSpee = _this$props4.fallSpeed,
          fallSpeed = _this$props4$fallSpee === void 0 ? DEFAULT_FALL_SPEED : _this$props4$fallSpee,
          onAnimationStart = _this$props4.onAnimationStart,
          onAnimationResume = _this$props4.onAnimationResume,
          onAnimationEnd = _this$props4.onAnimationEnd;

      if (resume) {
        onAnimationResume && onAnimationResume();
      } else {
        _this.sequence = _reactNative.Animated.sequence([_reactNative.Animated.timing(_this.animation, {
          toValue: 0,
          duration: 0,
          useNativeDriver: true
        }), _reactNative.Animated.timing(_this.animation, {
          toValue: 1,
          duration: explosionSpeed,
          easing: _reactNative.Easing.out(_reactNative.Easing.quad),
          useNativeDriver: true
        }), _reactNative.Animated.timing(_this.animation, {
          toValue: 2,
          duration: fallSpeed,
          easing: _reactNative.Easing.quad,
          useNativeDriver: true
        })]);
        onAnimationStart && onAnimationStart();
      }

      _this.sequence && _this.sequence.start(function (_ref2) {
        var finished = _ref2.finished;

        if (finished) {
          onAnimationEnd && onAnimationEnd();
        }
      });
    };

    _this.resume = function () {
      return _this.start(true);
    };

    _this.stop = function () {
      var onAnimationStop = _this.props.onAnimationStop;
      onAnimationStop && onAnimationStop();
      _this.sequence && _this.sequence.stop();
    };

    var _props$colors = props.colors,
        _colors = _props$colors === void 0 ? DEFAULT_COLORS : _props$colors;

    _this.start = _this.start.bind((0, _assertThisInitialized2.default)(_this));
    _this.resume = _this.resume.bind((0, _assertThisInitialized2.default)(_this));
    _this.stop = _this.stop.bind((0, _assertThisInitialized2.default)(_this));
    _this.state.items = _this.getItems(_colors);
    return _this;
  }

  (0, _createClass2.default)(Explosion, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props5 = this.props,
          origin = _this$props5.origin,
          fadeOut = _this$props5.fadeOut;
      var items = this.state.items;

      var _Dimensions$get = _reactNative.Dimensions.get('window'),
          height = _Dimensions$get.height,
          width = _Dimensions$get.width;

      return React.createElement(React.Fragment, null, items.map(function (item, index) {
        var left = _this2.animation.interpolate({
          inputRange: [0, 1, 2],
          outputRange: [origin.x, item.leftDelta * width, item.leftDelta * width]
        });

        var top = _this2.animation.interpolate({
          inputRange: [0, 1, 1 + item.topDelta, 2],
          outputRange: [-origin.y, -item.topDelta * height, 0, 0]
        });

        var rotateX = _this2.animation.interpolate({
          inputRange: [0, 2],
          outputRange: ['0deg', item.speedDelta.rotateX * 360 * 10 + "deg"]
        });

        var rotateY = _this2.animation.interpolate({
          inputRange: [0, 2],
          outputRange: ['0deg', item.speedDelta.rotateY * 360 * 5 + "deg"]
        });

        var rotateZ = _this2.animation.interpolate({
          inputRange: [0, 2],
          outputRange: ['0deg', item.speedDelta.rotateZ * 360 * 2 + "deg"]
        });

        var translateX = _this2.animation.interpolate({
          inputRange: [0, 0.4, 1.2, 2],
          outputRange: [0, -(item.swingDelta * 30), item.swingDelta * 30, 0]
        });

        var opacity = _this2.animation.interpolate({
          inputRange: [0, 1, 1.8, 2],
          outputRange: [1, 1, 1, fadeOut ? 0 : 1]
        });

        var containerTransform = [{
          translateX: left
        }, {
          translateY: top
        }];
        var transform = [{
          rotateX: rotateX
        }, {
          rotateY: rotateY
        }, {
          rotate: rotateZ
        }, {
          translateX: translateX
        }];

        if (_reactNative.Platform.OS === 'android') {
          transform.push({
            perspective: 100
          });
        }

        return React.createElement(_confetti.default, {
          color: item.color,
          containerTransform: containerTransform,
          transform: transform,
          opacity: opacity,
          key: index,
          testID: "confetti-" + (index + 1)
        });
      }));
    }
  }]);
  return Explosion;
}(React.PureComponent);

var _default = Explosion;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,