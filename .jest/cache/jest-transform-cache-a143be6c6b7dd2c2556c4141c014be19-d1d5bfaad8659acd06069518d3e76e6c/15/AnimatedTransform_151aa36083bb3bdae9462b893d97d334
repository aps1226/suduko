328dd9ad6805ae820d780d83d779c895










'use strict';function _createSuper(Derived) {var hasNativeReflectConstruct = _isNativeReflectConstruct();return function _createSuperInternal() {var Super = require("@babel/runtime/helpers/getPrototypeOf")(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = require("@babel/runtime/helpers/getPrototypeOf")(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return require("@babel/runtime/helpers/possibleConstructorReturn")(this, result);};}function _isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}var





AnimatedTransform = function (_AnimatedWithChildren) {require("@babel/runtime/helpers/inherits")(AnimatedTransform, _AnimatedWithChildren);var _super = _createSuper(AnimatedTransform);


  function AnimatedTransform(transforms) {var _this;require("@babel/runtime/helpers/classCallCheck")(this, AnimatedTransform);
    _this = _super.call(this);
    _this._transforms = transforms;return _this;
  }require("@babel/runtime/helpers/createClass")(AnimatedTransform, [{ key: "__makeNative", value:

    function __makeNative() {
      this._transforms.forEach(function (transform) {
        for (var key in transform) {
          var value = transform[key];
          if (value instanceof require("./AnimatedNode")) {
            value.__makeNative();
          }
        }
      });
      require("@babel/runtime/helpers/get")(require("@babel/runtime/helpers/getPrototypeOf")(AnimatedTransform.prototype), "__makeNative", this).call(this);
    } }, { key: "__getValue", value:

    function __getValue() {
      return this._transforms.map(function (transform) {
        var result = {};
        for (var key in transform) {
          var value = transform[key];
          if (value instanceof require("./AnimatedNode")) {
            result[key] = value.__getValue();
          } else {
            result[key] = value;
          }
        }
        return result;
      });
    } }, { key: "__getAnimatedValue", value:

    function __getAnimatedValue() {
      return this._transforms.map(function (transform) {
        var result = {};
        for (var key in transform) {
          var value = transform[key];
          if (value instanceof require("./AnimatedNode")) {
            result[key] = value.__getAnimatedValue();
          } else {

            result[key] = value;
          }
        }
        return result;
      });
    } }, { key: "__attach", value:

    function __attach() {var _this2 = this;
      this._transforms.forEach(function (transform) {
        for (var key in transform) {
          var value = transform[key];
          if (value instanceof require("./AnimatedNode")) {
            value.__addChild(_this2);
          }
        }
      });
    } }, { key: "__detach", value:

    function __detach() {var _this3 = this;
      this._transforms.forEach(function (transform) {
        for (var key in transform) {
          var value = transform[key];
          if (value instanceof require("./AnimatedNode")) {
            value.__removeChild(_this3);
          }
        }
      });
      require("@babel/runtime/helpers/get")(require("@babel/runtime/helpers/getPrototypeOf")(AnimatedTransform.prototype), "__detach", this).call(this);
    } }, { key: "__getNativeConfig", value:

    function __getNativeConfig() {
      var transConfigs = [];

      this._transforms.forEach(function (transform) {
        for (var key in transform) {
          var value = transform[key];
          if (value instanceof require("./AnimatedNode")) {
            transConfigs.push({
              type: 'animated',
              property: key,
              nodeTag: value.__getNativeTag() });

          } else {
            transConfigs.push({
              type: 'static',
              property: key,
              value: require("../NativeAnimatedHelper").transformDataType(value) });

          }
        }
      });

      require("../NativeAnimatedHelper").validateTransform(transConfigs);
      return {
        type: 'transform',
        transforms: transConfigs };

    } }]);return AnimatedTransform;}(require("./AnimatedWithChildren"));


module.exports = AnimatedTransform;