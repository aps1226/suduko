53a0c499ef8049351a8ce97e7e0c67f1
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _EventEmitter = _interopRequireDefault(require("../vendor/emitter/EventEmitter"));

var _RCTDeviceEventEmitter = _interopRequireDefault(require("../EventEmitter/RCTDeviceEventEmitter"));

var _NativeDeviceInfo = _interopRequireDefault(require("./NativeDeviceInfo"));

var _invariant = _interopRequireDefault(require("invariant"));

var eventEmitter = new _EventEmitter.default();
var dimensionsInitialized = false;
var dimensions;

var Dimensions = function () {
  function Dimensions() {
    (0, _classCallCheck2.default)(this, Dimensions);
  }

  (0, _createClass2.default)(Dimensions, null, [{
    key: "get",
    value: function get(dim) {
      (0, _invariant.default)(dimensions[dim], 'No dimension set for key ' + dim);
      return dimensions[dim];
    }
  }, {
    key: "set",
    value: function set(dims) {
      var screen = dims.screen,
          window = dims.window;
      var windowPhysicalPixels = dims.windowPhysicalPixels;

      if (windowPhysicalPixels) {
        window = {
          width: windowPhysicalPixels.width / windowPhysicalPixels.scale,
          height: windowPhysicalPixels.height / windowPhysicalPixels.scale,
          scale: windowPhysicalPixels.scale,
          fontScale: windowPhysicalPixels.fontScale
        };
      }

      var screenPhysicalPixels = dims.screenPhysicalPixels;

      if (screenPhysicalPixels) {
        screen = {
          width: screenPhysicalPixels.width / screenPhysicalPixels.scale,
          height: screenPhysicalPixels.height / screenPhysicalPixels.scale,
          scale: screenPhysicalPixels.scale,
          fontScale: screenPhysicalPixels.fontScale
        };
      } else if (screen == null) {
        screen = window;
      }

      dimensions = {
        window: window,
        screen: screen
      };

      if (dimensionsInitialized) {
        eventEmitter.emit('change', dimensions);
      } else {
        dimensionsInitialized = true;
      }
    }
  }, {
    key: "addEventListener",
    value: function addEventListener(type, handler) {
      (0, _invariant.default)(type === 'change', 'Trying to subscribe to unknown event: "%s"', type);
      eventEmitter.addListener(type, handler);
    }
  }, {
    key: "removeEventListener",
    value: function removeEventListener(type, handler) {
      (0, _invariant.default)(type === 'change', 'Trying to remove listener for unknown event: "%s"', type);
      eventEmitter.removeListener(type, handler);
    }
  }]);
  return Dimensions;
}();

var initialDims = global.nativeExtensions && global.nativeExtensions.DeviceInfo && global.nativeExtensions.DeviceInfo.Dimensions;

if (!initialDims) {
  _RCTDeviceEventEmitter.default.addListener('didUpdateDimensions', function (update) {
    Dimensions.set(update);
  });

  initialDims = _NativeDeviceInfo.default.getConstants().Dimensions;
}

Dimensions.set(initialDims);
module.exports = Dimensions;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkRpbWVuc2lvbnMuanMiXSwibmFtZXMiOlsiZXZlbnRFbWl0dGVyIiwiRXZlbnRFbWl0dGVyIiwiZGltZW5zaW9uc0luaXRpYWxpemVkIiwiZGltZW5zaW9ucyIsIkRpbWVuc2lvbnMiLCJkaW0iLCJkaW1zIiwic2NyZWVuIiwid2luZG93Iiwid2luZG93UGh5c2ljYWxQaXhlbHMiLCJ3aWR0aCIsInNjYWxlIiwiaGVpZ2h0IiwiZm9udFNjYWxlIiwic2NyZWVuUGh5c2ljYWxQaXhlbHMiLCJlbWl0IiwidHlwZSIsImhhbmRsZXIiLCJhZGRMaXN0ZW5lciIsInJlbW92ZUxpc3RlbmVyIiwiaW5pdGlhbERpbXMiLCJnbG9iYWwiLCJuYXRpdmVFeHRlbnNpb25zIiwiRGV2aWNlSW5mbyIsIlJDVERldmljZUV2ZW50RW1pdHRlciIsInVwZGF0ZSIsInNldCIsIk5hdGl2ZURldmljZUluZm8iLCJnZXRDb25zdGFudHMiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFVQTs7Ozs7Ozs7QUFFQTs7QUFDQTs7QUFDQTs7QUFJQTs7QUFRQSxJQUFNQSxZQUFZLEdBQUcsSUFBSUMscUJBQUosRUFBckI7QUFDQSxJQUFJQyxxQkFBcUIsR0FBRyxLQUE1QjtBQUNBLElBQUlDLFVBQUo7O0lBRU1DLFU7Ozs7Ozs7V0FrQkosYUFBV0MsR0FBWCxFQUFnQztBQUM5Qiw4QkFBVUYsVUFBVSxDQUFDRSxHQUFELENBQXBCLEVBQTJCLDhCQUE4QkEsR0FBekQ7QUFDQSxhQUFPRixVQUFVLENBQUNFLEdBQUQsQ0FBakI7QUFDRDs7O1dBUUQsYUFBV0MsSUFBWCxFQUE2RDtBQUkzRCxVQUFLQyxNQUFMLEdBQXVCRCxJQUF2QixDQUFLQyxNQUFMO0FBQUEsVUFBYUMsTUFBYixHQUF1QkYsSUFBdkIsQ0FBYUUsTUFBYjtBQUNBLFVBQU9DLG9CQUFQLEdBQStCSCxJQUEvQixDQUFPRyxvQkFBUDs7QUFDQSxVQUFJQSxvQkFBSixFQUEwQjtBQUN4QkQsUUFBQUEsTUFBTSxHQUFHO0FBQ1BFLFVBQUFBLEtBQUssRUFBRUQsb0JBQW9CLENBQUNDLEtBQXJCLEdBQTZCRCxvQkFBb0IsQ0FBQ0UsS0FEbEQ7QUFFUEMsVUFBQUEsTUFBTSxFQUFFSCxvQkFBb0IsQ0FBQ0csTUFBckIsR0FBOEJILG9CQUFvQixDQUFDRSxLQUZwRDtBQUdQQSxVQUFBQSxLQUFLLEVBQUVGLG9CQUFvQixDQUFDRSxLQUhyQjtBQUlQRSxVQUFBQSxTQUFTLEVBQUVKLG9CQUFvQixDQUFDSTtBQUp6QixTQUFUO0FBTUQ7O0FBQ0QsVUFBT0Msb0JBQVAsR0FBK0JSLElBQS9CLENBQU9RLG9CQUFQOztBQUNBLFVBQUlBLG9CQUFKLEVBQTBCO0FBQ3hCUCxRQUFBQSxNQUFNLEdBQUc7QUFDUEcsVUFBQUEsS0FBSyxFQUFFSSxvQkFBb0IsQ0FBQ0osS0FBckIsR0FBNkJJLG9CQUFvQixDQUFDSCxLQURsRDtBQUVQQyxVQUFBQSxNQUFNLEVBQUVFLG9CQUFvQixDQUFDRixNQUFyQixHQUE4QkUsb0JBQW9CLENBQUNILEtBRnBEO0FBR1BBLFVBQUFBLEtBQUssRUFBRUcsb0JBQW9CLENBQUNILEtBSHJCO0FBSVBFLFVBQUFBLFNBQVMsRUFBRUMsb0JBQW9CLENBQUNEO0FBSnpCLFNBQVQ7QUFNRCxPQVBELE1BT08sSUFBSU4sTUFBTSxJQUFJLElBQWQsRUFBb0I7QUFDekJBLFFBQUFBLE1BQU0sR0FBR0MsTUFBVDtBQUNEOztBQUVETCxNQUFBQSxVQUFVLEdBQUc7QUFBQ0ssUUFBQUEsTUFBTSxFQUFOQSxNQUFEO0FBQVNELFFBQUFBLE1BQU0sRUFBTkE7QUFBVCxPQUFiOztBQUNBLFVBQUlMLHFCQUFKLEVBQTJCO0FBRXpCRixRQUFBQSxZQUFZLENBQUNlLElBQWIsQ0FBa0IsUUFBbEIsRUFBNEJaLFVBQTVCO0FBQ0QsT0FIRCxNQUdPO0FBQ0xELFFBQUFBLHFCQUFxQixHQUFHLElBQXhCO0FBQ0Q7QUFDRjs7O1dBVUQsMEJBQXdCYyxJQUF4QixFQUF3Q0MsT0FBeEMsRUFBMkQ7QUFDekQsOEJBQ0VELElBQUksS0FBSyxRQURYLEVBRUUsNENBRkYsRUFHRUEsSUFIRjtBQUtBaEIsTUFBQUEsWUFBWSxDQUFDa0IsV0FBYixDQUF5QkYsSUFBekIsRUFBK0JDLE9BQS9CO0FBQ0Q7OztXQUtELDZCQUEyQkQsSUFBM0IsRUFBMkNDLE9BQTNDLEVBQThEO0FBQzVELDhCQUNFRCxJQUFJLEtBQUssUUFEWCxFQUVFLG1EQUZGLEVBR0VBLElBSEY7QUFLQWhCLE1BQUFBLFlBQVksQ0FBQ21CLGNBQWIsQ0FBNEJILElBQTVCLEVBQWtDQyxPQUFsQztBQUNEOzs7OztBQUdILElBQUlHLFdBQWtELEdBQ3BEQyxNQUFNLENBQUNDLGdCQUFQLElBQ0FELE1BQU0sQ0FBQ0MsZ0JBQVAsQ0FBd0JDLFVBRHhCLElBRUFGLE1BQU0sQ0FBQ0MsZ0JBQVAsQ0FBd0JDLFVBQXhCLENBQW1DbkIsVUFIckM7O0FBSUEsSUFBSSxDQUFDZ0IsV0FBTCxFQUFrQjtBQUVoQkksaUNBQXNCTixXQUF0QixDQUNFLHFCQURGLEVBRUUsVUFBQ08sTUFBRCxFQUErQjtBQUM3QnJCLElBQUFBLFVBQVUsQ0FBQ3NCLEdBQVgsQ0FBZUQsTUFBZjtBQUNELEdBSkg7O0FBTUFMLEVBQUFBLFdBQVcsR0FBR08sMEJBQWlCQyxZQUFqQixHQUFnQ3hCLFVBQTlDO0FBQ0Q7O0FBRURBLFVBQVUsQ0FBQ3NCLEdBQVgsQ0FBZU4sV0FBZjtBQUVBUyxNQUFNLENBQUNDLE9BQVAsR0FBaUIxQixVQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogQGZsb3dcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmltcG9ydCBFdmVudEVtaXR0ZXIgZnJvbSAnLi4vdmVuZG9yL2VtaXR0ZXIvRXZlbnRFbWl0dGVyJztcbmltcG9ydCBSQ1REZXZpY2VFdmVudEVtaXR0ZXIgZnJvbSAnLi4vRXZlbnRFbWl0dGVyL1JDVERldmljZUV2ZW50RW1pdHRlcic7XG5pbXBvcnQgTmF0aXZlRGV2aWNlSW5mbywge1xuICB0eXBlIERpc3BsYXlNZXRyaWNzLFxuICB0eXBlIERpbWVuc2lvbnNQYXlsb2FkLFxufSBmcm9tICcuL05hdGl2ZURldmljZUluZm8nO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICdpbnZhcmlhbnQnO1xuXG50eXBlIERpbWVuc2lvbnNWYWx1ZSA9IHtcbiAgd2luZG93PzogRGlzcGxheU1ldHJpY3MsXG4gIHNjcmVlbj86IERpc3BsYXlNZXRyaWNzLFxuICAuLi5cbn07XG5cbmNvbnN0IGV2ZW50RW1pdHRlciA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbmxldCBkaW1lbnNpb25zSW5pdGlhbGl6ZWQgPSBmYWxzZTtcbmxldCBkaW1lbnNpb25zOiBEaW1lbnNpb25zVmFsdWU7XG5cbmNsYXNzIERpbWVuc2lvbnMge1xuICAvKipcbiAgICogTk9URTogYHVzZVdpbmRvd0RpbWVuc2lvbnNgIGlzIHRoZSBwcmVmZmVyZWQgQVBJIGZvciBSZWFjdCBjb21wb25lbnRzLlxuICAgKlxuICAgKiBJbml0aWFsIGRpbWVuc2lvbnMgYXJlIHNldCBiZWZvcmUgYHJ1bkFwcGxpY2F0aW9uYCBpcyBjYWxsZWQgc28gdGhleSBzaG91bGRcbiAgICogYmUgYXZhaWxhYmxlIGJlZm9yZSBhbnkgb3RoZXIgcmVxdWlyZSdzIGFyZSBydW4sIGJ1dCBtYXkgYmUgdXBkYXRlZCBsYXRlci5cbiAgICpcbiAgICogTm90ZTogQWx0aG91Z2ggZGltZW5zaW9ucyBhcmUgYXZhaWxhYmxlIGltbWVkaWF0ZWx5LCB0aGV5IG1heSBjaGFuZ2UgKGUuZ1xuICAgKiBkdWUgdG8gZGV2aWNlIHJvdGF0aW9uKSBzbyBhbnkgcmVuZGVyaW5nIGxvZ2ljIG9yIHN0eWxlcyB0aGF0IGRlcGVuZCBvblxuICAgKiB0aGVzZSBjb25zdGFudHMgc2hvdWxkIHRyeSB0byBjYWxsIHRoaXMgZnVuY3Rpb24gb24gZXZlcnkgcmVuZGVyLCByYXRoZXJcbiAgICogdGhhbiBjYWNoaW5nIHRoZSB2YWx1ZSAoZm9yIGV4YW1wbGUsIHVzaW5nIGlubGluZSBzdHlsZXMgcmF0aGVyIHRoYW5cbiAgICogc2V0dGluZyBhIHZhbHVlIGluIGEgYFN0eWxlU2hlZXRgKS5cbiAgICpcbiAgICogRXhhbXBsZTogYGNvbnN0IHtoZWlnaHQsIHdpZHRofSA9IERpbWVuc2lvbnMuZ2V0KCd3aW5kb3cnKTtgXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBkaW0gTmFtZSBvZiBkaW1lbnNpb24gYXMgZGVmaW5lZCB3aGVuIGNhbGxpbmcgYHNldGAuXG4gICAqIEByZXR1cm5zIHtPYmplY3Q/fSBWYWx1ZSBmb3IgdGhlIGRpbWVuc2lvbi5cbiAgICovXG4gIHN0YXRpYyBnZXQoZGltOiBzdHJpbmcpOiBPYmplY3Qge1xuICAgIGludmFyaWFudChkaW1lbnNpb25zW2RpbV0sICdObyBkaW1lbnNpb24gc2V0IGZvciBrZXkgJyArIGRpbSk7XG4gICAgcmV0dXJuIGRpbWVuc2lvbnNbZGltXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIHNob3VsZCBvbmx5IGJlIGNhbGxlZCBmcm9tIG5hdGl2ZSBjb2RlIGJ5IHNlbmRpbmcgdGhlXG4gICAqIGRpZFVwZGF0ZURpbWVuc2lvbnMgZXZlbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBkaW1zIFNpbXBsZSBzdHJpbmcta2V5ZWQgb2JqZWN0IG9mIGRpbWVuc2lvbnMgdG8gc2V0XG4gICAqL1xuICBzdGF0aWMgc2V0KGRpbXM6ICRSZWFkT25seTx7W2tleTogc3RyaW5nXTogYW55LCAuLi59Pik6IHZvaWQge1xuICAgIC8vIFdlIGNhbGN1bGF0ZSB0aGUgd2luZG93IGRpbWVuc2lvbnMgaW4gSlMgc28gdGhhdCB3ZSBkb24ndCBlbmNvdW50ZXIgbG9zcyBvZlxuICAgIC8vIHByZWNpc2lvbiBpbiB0cmFuc2ZlcnJpbmcgdGhlIGRpbWVuc2lvbnMgKHdoaWNoIGNvdWxkIGJlIG5vbi1pbnRlZ2Vycykgb3ZlclxuICAgIC8vIHRoZSBicmlkZ2UuXG4gICAgbGV0IHtzY3JlZW4sIHdpbmRvd30gPSBkaW1zO1xuICAgIGNvbnN0IHt3aW5kb3dQaHlzaWNhbFBpeGVsc30gPSBkaW1zO1xuICAgIGlmICh3aW5kb3dQaHlzaWNhbFBpeGVscykge1xuICAgICAgd2luZG93ID0ge1xuICAgICAgICB3aWR0aDogd2luZG93UGh5c2ljYWxQaXhlbHMud2lkdGggLyB3aW5kb3dQaHlzaWNhbFBpeGVscy5zY2FsZSxcbiAgICAgICAgaGVpZ2h0OiB3aW5kb3dQaHlzaWNhbFBpeGVscy5oZWlnaHQgLyB3aW5kb3dQaHlzaWNhbFBpeGVscy5zY2FsZSxcbiAgICAgICAgc2NhbGU6IHdpbmRvd1BoeXNpY2FsUGl4ZWxzLnNjYWxlLFxuICAgICAgICBmb250U2NhbGU6IHdpbmRvd1BoeXNpY2FsUGl4ZWxzLmZvbnRTY2FsZSxcbiAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0IHtzY3JlZW5QaHlzaWNhbFBpeGVsc30gPSBkaW1zO1xuICAgIGlmIChzY3JlZW5QaHlzaWNhbFBpeGVscykge1xuICAgICAgc2NyZWVuID0ge1xuICAgICAgICB3aWR0aDogc2NyZWVuUGh5c2ljYWxQaXhlbHMud2lkdGggLyBzY3JlZW5QaHlzaWNhbFBpeGVscy5zY2FsZSxcbiAgICAgICAgaGVpZ2h0OiBzY3JlZW5QaHlzaWNhbFBpeGVscy5oZWlnaHQgLyBzY3JlZW5QaHlzaWNhbFBpeGVscy5zY2FsZSxcbiAgICAgICAgc2NhbGU6IHNjcmVlblBoeXNpY2FsUGl4ZWxzLnNjYWxlLFxuICAgICAgICBmb250U2NhbGU6IHNjcmVlblBoeXNpY2FsUGl4ZWxzLmZvbnRTY2FsZSxcbiAgICAgIH07XG4gICAgfSBlbHNlIGlmIChzY3JlZW4gPT0gbnVsbCkge1xuICAgICAgc2NyZWVuID0gd2luZG93O1xuICAgIH1cblxuICAgIGRpbWVuc2lvbnMgPSB7d2luZG93LCBzY3JlZW59O1xuICAgIGlmIChkaW1lbnNpb25zSW5pdGlhbGl6ZWQpIHtcbiAgICAgIC8vIERvbid0IGZpcmUgJ2NoYW5nZScgdGhlIGZpcnN0IHRpbWUgdGhlIGRpbWVuc2lvbnMgYXJlIHNldC5cbiAgICAgIGV2ZW50RW1pdHRlci5lbWl0KCdjaGFuZ2UnLCBkaW1lbnNpb25zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGltZW5zaW9uc0luaXRpYWxpemVkID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQWRkIGFuIGV2ZW50IGhhbmRsZXIuIFN1cHBvcnRlZCBldmVudHM6XG4gICAqXG4gICAqIC0gYGNoYW5nZWA6IEZpcmVzIHdoZW4gYSBwcm9wZXJ0eSB3aXRoaW4gdGhlIGBEaW1lbnNpb25zYCBvYmplY3QgY2hhbmdlcy4gVGhlIGFyZ3VtZW50XG4gICAqICAgdG8gdGhlIGV2ZW50IGhhbmRsZXIgaXMgYW4gb2JqZWN0IHdpdGggYHdpbmRvd2AgYW5kIGBzY3JlZW5gIHByb3BlcnRpZXMgd2hvc2UgdmFsdWVzXG4gICAqICAgYXJlIHRoZSBzYW1lIGFzIHRoZSByZXR1cm4gdmFsdWVzIG9mIGBEaW1lbnNpb25zLmdldCgnd2luZG93JylgIGFuZFxuICAgKiAgIGBEaW1lbnNpb25zLmdldCgnc2NyZWVuJylgLCByZXNwZWN0aXZlbHkuXG4gICAqL1xuICBzdGF0aWMgYWRkRXZlbnRMaXN0ZW5lcih0eXBlOiAnY2hhbmdlJywgaGFuZGxlcjogRnVuY3Rpb24pIHtcbiAgICBpbnZhcmlhbnQoXG4gICAgICB0eXBlID09PSAnY2hhbmdlJyxcbiAgICAgICdUcnlpbmcgdG8gc3Vic2NyaWJlIHRvIHVua25vd24gZXZlbnQ6IFwiJXNcIicsXG4gICAgICB0eXBlLFxuICAgICk7XG4gICAgZXZlbnRFbWl0dGVyLmFkZExpc3RlbmVyKHR5cGUsIGhhbmRsZXIpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBhbiBldmVudCBoYW5kbGVyLlxuICAgKi9cbiAgc3RhdGljIHJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZTogJ2NoYW5nZScsIGhhbmRsZXI6IEZ1bmN0aW9uKSB7XG4gICAgaW52YXJpYW50KFxuICAgICAgdHlwZSA9PT0gJ2NoYW5nZScsXG4gICAgICAnVHJ5aW5nIHRvIHJlbW92ZSBsaXN0ZW5lciBmb3IgdW5rbm93biBldmVudDogXCIlc1wiJyxcbiAgICAgIHR5cGUsXG4gICAgKTtcbiAgICBldmVudEVtaXR0ZXIucmVtb3ZlTGlzdGVuZXIodHlwZSwgaGFuZGxlcik7XG4gIH1cbn1cblxubGV0IGluaXRpYWxEaW1zOiA/JFJlYWRPbmx5PHtba2V5OiBzdHJpbmddOiBhbnksIC4uLn0+ID1cbiAgZ2xvYmFsLm5hdGl2ZUV4dGVuc2lvbnMgJiZcbiAgZ2xvYmFsLm5hdGl2ZUV4dGVuc2lvbnMuRGV2aWNlSW5mbyAmJlxuICBnbG9iYWwubmF0aXZlRXh0ZW5zaW9ucy5EZXZpY2VJbmZvLkRpbWVuc2lvbnM7XG5pZiAoIWluaXRpYWxEaW1zKSB7XG4gIC8vIFN1YnNjcmliZSBiZWZvcmUgY2FsbGluZyBnZXRDb25zdGFudHMgdG8gbWFrZSBzdXJlIHdlIGRvbid0IG1pc3MgYW55IHVwZGF0ZXMgaW4gYmV0d2Vlbi5cbiAgUkNURGV2aWNlRXZlbnRFbWl0dGVyLmFkZExpc3RlbmVyKFxuICAgICdkaWRVcGRhdGVEaW1lbnNpb25zJyxcbiAgICAodXBkYXRlOiBEaW1lbnNpb25zUGF5bG9hZCkgPT4ge1xuICAgICAgRGltZW5zaW9ucy5zZXQodXBkYXRlKTtcbiAgICB9LFxuICApO1xuICBpbml0aWFsRGltcyA9IE5hdGl2ZURldmljZUluZm8uZ2V0Q29uc3RhbnRzKCkuRGltZW5zaW9ucztcbn1cblxuRGltZW5zaW9ucy5zZXQoaW5pdGlhbERpbXMpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IERpbWVuc2lvbnM7XG4iXX0=