aef92310eecbd801d232b3ba82bab7f6
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _objectWithoutProperties2 = _interopRequireDefault2(require("@babel/runtime/helpers/objectWithoutProperties"));

var _excluded = ["elevation", "onLongPress", "onPress", "mode", "children", "style", "theme", "testID", "accessible"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _color = _interopRequireDefault(require("color"));

var _colors = require("../../styles/colors");

var _CardContent = _interopRequireDefault(require("./CardContent"));

var _CardActions = _interopRequireDefault(require("./CardActions"));

var _CardCover2 = _interopRequireDefault(require("./CardCover"));

var _CardTitle2 = _interopRequireDefault(require("./CardTitle"));

var _Surface = _interopRequireDefault(require("../Surface"));

var _theming = require("../../core/theming");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var Card = function Card(_ref) {
  var _ref$elevation = _ref.elevation,
      cardElevation = _ref$elevation === void 0 ? 1 : _ref$elevation,
      onLongPress = _ref.onLongPress,
      onPress = _ref.onPress,
      _ref$mode = _ref.mode,
      cardMode = _ref$mode === void 0 ? 'elevated' : _ref$mode,
      children = _ref.children,
      style = _ref.style,
      theme = _ref.theme,
      testID = _ref.testID,
      accessible = _ref.accessible,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);

  var _React$useRef = React.useRef(new _reactNative.Animated.Value(cardElevation)),
      elevation = _React$useRef.current;

  var animation = theme.animation,
      dark = theme.dark,
      mode = theme.mode,
      roundness = theme.roundness;

  var handlePressIn = function handlePressIn() {
    var dark = theme.dark,
        mode = theme.mode,
        scale = theme.animation.scale;

    _reactNative.Animated.timing(elevation, {
      toValue: 8,
      duration: 150 * scale,
      useNativeDriver: !dark || mode === 'exact'
    }).start();
  };

  var handlePressOut = function handlePressOut() {
    _reactNative.Animated.timing(elevation, {
      toValue: cardElevation,
      duration: 150 * animation.scale,
      useNativeDriver: !dark || mode === 'exact'
    }).start();
  };

  var total = React.Children.count(children);
  var siblings = React.Children.map(children, function (child) {
    return React.isValidElement(child) && child.type ? child.type.displayName : null;
  });
  var borderColor = (0, _color.default)(theme.dark ? _colors.white : _colors.black).alpha(0.12).rgb().string();
  return React.createElement(_Surface.default, _extends({
    style: [{
      borderRadius: roundness,
      elevation: elevation,
      borderColor: borderColor
    }, cardMode === 'outlined' ? styles.outlined : {}, style]
  }, rest), React.createElement(_reactNative.TouchableWithoutFeedback, {
    delayPressIn: 0,
    disabled: !(onPress || onLongPress),
    onLongPress: onLongPress,
    onPress: onPress,
    onPressIn: onPress || onLongPress ? handlePressIn : undefined,
    onPressOut: onPress || onLongPress ? handlePressOut : undefined,
    testID: testID,
    accessible: accessible
  }, React.createElement(_reactNative.View, {
    style: styles.innerContainer
  }, React.Children.map(children, function (child, index) {
    return React.isValidElement(child) ? React.cloneElement(child, {
      index: index,
      total: total,
      siblings: siblings
    }) : child;
  }))));
};

Card.Content = _CardContent.default;
Card.Actions = _CardActions.default;
Card.Cover = _CardCover2.default;
Card.Title = _CardTitle2.default;

var styles = _reactNative.StyleSheet.create({
  innerContainer: {
    flexGrow: 1,
    flexShrink: 1
  },
  outlined: {
    elevation: 0,
    borderWidth: 1
  }
});

var _default = (0, _theming.withTheme)(Card);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,