{"version":3,"sources":["Dimensions.js"],"names":["eventEmitter","EventEmitter","dimensionsInitialized","dimensions","Dimensions","dim","dims","screen","window","windowPhysicalPixels","width","scale","height","fontScale","screenPhysicalPixels","emit","type","handler","addListener","removeListener","initialDims","global","nativeExtensions","DeviceInfo","RCTDeviceEventEmitter","update","set","NativeDeviceInfo","getConstants","module","exports"],"mappings":"AAUA;;;;;;;;AAEA;;AACA;;AACA;;AAIA;;AAQA,IAAMA,YAAY,GAAG,IAAIC,qBAAJ,EAArB;AACA,IAAIC,qBAAqB,GAAG,KAA5B;AACA,IAAIC,UAAJ;;IAEMC,U;;;;;;;WAkBJ,aAAWC,GAAX,EAAgC;AAC9B,8BAAUF,UAAU,CAACE,GAAD,CAApB,EAA2B,8BAA8BA,GAAzD;AACA,aAAOF,UAAU,CAACE,GAAD,CAAjB;AACD;;;WAQD,aAAWC,IAAX,EAA6D;AAI3D,UAAKC,MAAL,GAAuBD,IAAvB,CAAKC,MAAL;AAAA,UAAaC,MAAb,GAAuBF,IAAvB,CAAaE,MAAb;AACA,UAAOC,oBAAP,GAA+BH,IAA/B,CAAOG,oBAAP;;AACA,UAAIA,oBAAJ,EAA0B;AACxBD,QAAAA,MAAM,GAAG;AACPE,UAAAA,KAAK,EAAED,oBAAoB,CAACC,KAArB,GAA6BD,oBAAoB,CAACE,KADlD;AAEPC,UAAAA,MAAM,EAAEH,oBAAoB,CAACG,MAArB,GAA8BH,oBAAoB,CAACE,KAFpD;AAGPA,UAAAA,KAAK,EAAEF,oBAAoB,CAACE,KAHrB;AAIPE,UAAAA,SAAS,EAAEJ,oBAAoB,CAACI;AAJzB,SAAT;AAMD;;AACD,UAAOC,oBAAP,GAA+BR,IAA/B,CAAOQ,oBAAP;;AACA,UAAIA,oBAAJ,EAA0B;AACxBP,QAAAA,MAAM,GAAG;AACPG,UAAAA,KAAK,EAAEI,oBAAoB,CAACJ,KAArB,GAA6BI,oBAAoB,CAACH,KADlD;AAEPC,UAAAA,MAAM,EAAEE,oBAAoB,CAACF,MAArB,GAA8BE,oBAAoB,CAACH,KAFpD;AAGPA,UAAAA,KAAK,EAAEG,oBAAoB,CAACH,KAHrB;AAIPE,UAAAA,SAAS,EAAEC,oBAAoB,CAACD;AAJzB,SAAT;AAMD,OAPD,MAOO,IAAIN,MAAM,IAAI,IAAd,EAAoB;AACzBA,QAAAA,MAAM,GAAGC,MAAT;AACD;;AAEDL,MAAAA,UAAU,GAAG;AAACK,QAAAA,MAAM,EAANA,MAAD;AAASD,QAAAA,MAAM,EAANA;AAAT,OAAb;;AACA,UAAIL,qBAAJ,EAA2B;AAEzBF,QAAAA,YAAY,CAACe,IAAb,CAAkB,QAAlB,EAA4BZ,UAA5B;AACD,OAHD,MAGO;AACLD,QAAAA,qBAAqB,GAAG,IAAxB;AACD;AACF;;;WAUD,0BAAwBc,IAAxB,EAAwCC,OAAxC,EAA2D;AACzD,8BACED,IAAI,KAAK,QADX,EAEE,4CAFF,EAGEA,IAHF;AAKAhB,MAAAA,YAAY,CAACkB,WAAb,CAAyBF,IAAzB,EAA+BC,OAA/B;AACD;;;WAKD,6BAA2BD,IAA3B,EAA2CC,OAA3C,EAA8D;AAC5D,8BACED,IAAI,KAAK,QADX,EAEE,mDAFF,EAGEA,IAHF;AAKAhB,MAAAA,YAAY,CAACmB,cAAb,CAA4BH,IAA5B,EAAkCC,OAAlC;AACD;;;;;AAGH,IAAIG,WAAkD,GACpDC,MAAM,CAACC,gBAAP,IACAD,MAAM,CAACC,gBAAP,CAAwBC,UADxB,IAEAF,MAAM,CAACC,gBAAP,CAAwBC,UAAxB,CAAmCnB,UAHrC;;AAIA,IAAI,CAACgB,WAAL,EAAkB;AAEhBI,iCAAsBN,WAAtB,CACE,qBADF,EAEE,UAACO,MAAD,EAA+B;AAC7BrB,IAAAA,UAAU,CAACsB,GAAX,CAAeD,MAAf;AACD,GAJH;;AAMAL,EAAAA,WAAW,GAAGO,0BAAiBC,YAAjB,GAAgCxB,UAA9C;AACD;;AAEDA,UAAU,CAACsB,GAAX,CAAeN,WAAf;AAEAS,MAAM,CAACC,OAAP,GAAiB1B,UAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nimport EventEmitter from '../vendor/emitter/EventEmitter';\nimport RCTDeviceEventEmitter from '../EventEmitter/RCTDeviceEventEmitter';\nimport NativeDeviceInfo, {\n  type DisplayMetrics,\n  type DimensionsPayload,\n} from './NativeDeviceInfo';\nimport invariant from 'invariant';\n\ntype DimensionsValue = {\n  window?: DisplayMetrics,\n  screen?: DisplayMetrics,\n  ...\n};\n\nconst eventEmitter = new EventEmitter();\nlet dimensionsInitialized = false;\nlet dimensions: DimensionsValue;\n\nclass Dimensions {\n  /**\n   * NOTE: `useWindowDimensions` is the preffered API for React components.\n   *\n   * Initial dimensions are set before `runApplication` is called so they should\n   * be available before any other require's are run, but may be updated later.\n   *\n   * Note: Although dimensions are available immediately, they may change (e.g\n   * due to device rotation) so any rendering logic or styles that depend on\n   * these constants should try to call this function on every render, rather\n   * than caching the value (for example, using inline styles rather than\n   * setting a value in a `StyleSheet`).\n   *\n   * Example: `const {height, width} = Dimensions.get('window');`\n   *\n   * @param {string} dim Name of dimension as defined when calling `set`.\n   * @returns {Object?} Value for the dimension.\n   */\n  static get(dim: string): Object {\n    invariant(dimensions[dim], 'No dimension set for key ' + dim);\n    return dimensions[dim];\n  }\n\n  /**\n   * This should only be called from native code by sending the\n   * didUpdateDimensions event.\n   *\n   * @param {object} dims Simple string-keyed object of dimensions to set\n   */\n  static set(dims: $ReadOnly<{[key: string]: any, ...}>): void {\n    // We calculate the window dimensions in JS so that we don't encounter loss of\n    // precision in transferring the dimensions (which could be non-integers) over\n    // the bridge.\n    let {screen, window} = dims;\n    const {windowPhysicalPixels} = dims;\n    if (windowPhysicalPixels) {\n      window = {\n        width: windowPhysicalPixels.width / windowPhysicalPixels.scale,\n        height: windowPhysicalPixels.height / windowPhysicalPixels.scale,\n        scale: windowPhysicalPixels.scale,\n        fontScale: windowPhysicalPixels.fontScale,\n      };\n    }\n    const {screenPhysicalPixels} = dims;\n    if (screenPhysicalPixels) {\n      screen = {\n        width: screenPhysicalPixels.width / screenPhysicalPixels.scale,\n        height: screenPhysicalPixels.height / screenPhysicalPixels.scale,\n        scale: screenPhysicalPixels.scale,\n        fontScale: screenPhysicalPixels.fontScale,\n      };\n    } else if (screen == null) {\n      screen = window;\n    }\n\n    dimensions = {window, screen};\n    if (dimensionsInitialized) {\n      // Don't fire 'change' the first time the dimensions are set.\n      eventEmitter.emit('change', dimensions);\n    } else {\n      dimensionsInitialized = true;\n    }\n  }\n\n  /**\n   * Add an event handler. Supported events:\n   *\n   * - `change`: Fires when a property within the `Dimensions` object changes. The argument\n   *   to the event handler is an object with `window` and `screen` properties whose values\n   *   are the same as the return values of `Dimensions.get('window')` and\n   *   `Dimensions.get('screen')`, respectively.\n   */\n  static addEventListener(type: 'change', handler: Function) {\n    invariant(\n      type === 'change',\n      'Trying to subscribe to unknown event: \"%s\"',\n      type,\n    );\n    eventEmitter.addListener(type, handler);\n  }\n\n  /**\n   * Remove an event handler.\n   */\n  static removeEventListener(type: 'change', handler: Function) {\n    invariant(\n      type === 'change',\n      'Trying to remove listener for unknown event: \"%s\"',\n      type,\n    );\n    eventEmitter.removeListener(type, handler);\n  }\n}\n\nlet initialDims: ?$ReadOnly<{[key: string]: any, ...}> =\n  global.nativeExtensions &&\n  global.nativeExtensions.DeviceInfo &&\n  global.nativeExtensions.DeviceInfo.Dimensions;\nif (!initialDims) {\n  // Subscribe before calling getConstants to make sure we don't miss any updates in between.\n  RCTDeviceEventEmitter.addListener(\n    'didUpdateDimensions',\n    (update: DimensionsPayload) => {\n      Dimensions.set(update);\n    },\n  );\n  initialDims = NativeDeviceInfo.getConstants().Dimensions;\n}\n\nDimensions.set(initialDims);\n\nmodule.exports = Dimensions;\n"]}