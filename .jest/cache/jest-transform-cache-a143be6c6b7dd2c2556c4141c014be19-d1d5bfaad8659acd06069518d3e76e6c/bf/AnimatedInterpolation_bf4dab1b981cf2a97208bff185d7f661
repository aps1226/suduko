c38432932107710299d83a27a0066f46












'use strict';function _createSuper(Derived) {var hasNativeReflectConstruct = _isNativeReflectConstruct();return function _createSuperInternal() {var Super = require("@babel/runtime/helpers/getPrototypeOf")(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = require("@babel/runtime/helpers/getPrototypeOf")(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return require("@babel/runtime/helpers/possibleConstructorReturn")(this, result);};}function _isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) {symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});}keys.push.apply(keys, symbols);}return keys;}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(Object(source), true).forEach(function (key) {require("@babel/runtime/helpers/defineProperty")(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(Object(source)).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}



















var linear = function linear(t) {return t;};





function createInterpolation(
config)
{
  if (config.outputRange && typeof config.outputRange[0] === 'string') {
    return createInterpolationFromStringOutputRange(config);
  }

  var outputRange = config.outputRange;
  checkInfiniteRange('outputRange', outputRange);

  var inputRange = config.inputRange;
  checkInfiniteRange('inputRange', inputRange);
  checkValidInputRange(inputRange);

  require('invariant')(
  inputRange.length === outputRange.length,
  'inputRange (' +
  inputRange.length +
  ') and outputRange (' +
  outputRange.length +
  ') must have the same length');


  var easing = config.easing || linear;

  var extrapolateLeft = 'extend';
  if (config.extrapolateLeft !== undefined) {
    extrapolateLeft = config.extrapolateLeft;
  } else if (config.extrapolate !== undefined) {
    extrapolateLeft = config.extrapolate;
  }

  var extrapolateRight = 'extend';
  if (config.extrapolateRight !== undefined) {
    extrapolateRight = config.extrapolateRight;
  } else if (config.extrapolate !== undefined) {
    extrapolateRight = config.extrapolate;
  }

  return function (input) {
    require('invariant')(
    typeof input === 'number',
    'Cannot interpolation an input which is not a number');


    var range = findRange(input, inputRange);
    return interpolate(
    input,
    inputRange[range],
    inputRange[range + 1],
    outputRange[range],
    outputRange[range + 1],
    easing,
    extrapolateLeft,
    extrapolateRight);

  };
}

function interpolate(
input,
inputMin,
inputMax,
outputMin,
outputMax,
easing,
extrapolateLeft,
extrapolateRight)
{
  var result = input;


  if (result < inputMin) {
    if (extrapolateLeft === 'identity') {
      return result;
    } else if (extrapolateLeft === 'clamp') {
      result = inputMin;
    } else if (extrapolateLeft === 'extend') {

    }
  }

  if (result > inputMax) {
    if (extrapolateRight === 'identity') {
      return result;
    } else if (extrapolateRight === 'clamp') {
      result = inputMax;
    } else if (extrapolateRight === 'extend') {

    }
  }

  if (outputMin === outputMax) {
    return outputMin;
  }

  if (inputMin === inputMax) {
    if (input <= inputMin) {
      return outputMin;
    }
    return outputMax;
  }


  if (inputMin === -Infinity) {
    result = -result;
  } else if (inputMax === Infinity) {
    result = result - inputMin;
  } else {
    result = (result - inputMin) / (inputMax - inputMin);
  }


  result = easing(result);


  if (outputMin === -Infinity) {
    result = -result;
  } else if (outputMax === Infinity) {
    result = result + outputMin;
  } else {
    result = result * (outputMax - outputMin) + outputMin;
  }

  return result;
}

function colorToRgba(input) {
  var normalizedColor = require("../../../StyleSheet/normalizeColor")(input);
  if (normalizedColor === null || typeof normalizedColor !== 'number') {
    return input;
  }

  normalizedColor = normalizedColor || 0;

  var r = (normalizedColor & 0xff000000) >>> 24;
  var g = (normalizedColor & 0x00ff0000) >>> 16;
  var b = (normalizedColor & 0x0000ff00) >>> 8;
  var a = (normalizedColor & 0x000000ff) / 255;

  return "rgba(" + r + ", " + g + ", " + b + ", " + a + ")";
}

var stringShapeRegex = /[+-]?(?:\d+\.?\d*|\.\d+)(?:[eE][+-]?\d+)?/g;









function createInterpolationFromStringOutputRange(
config)
{
  var outputRange = config.outputRange;
  require('invariant')(outputRange.length >= 2, 'Bad output range');
  outputRange = outputRange.map(colorToRgba);
  checkPattern(outputRange);












  var outputRanges = outputRange[0].match(stringShapeRegex).map(function () {return [];});
  outputRange.forEach(function (value) {



    value.match(stringShapeRegex).forEach(function (number, i) {
      outputRanges[i].push(+number);
    });
  });

  var interpolations = outputRange[0].
  match(stringShapeRegex).


  map(function (value, i) {
    return createInterpolation(_objectSpread(_objectSpread({},
    config), {}, {
      outputRange: outputRanges[i] }));

  });



  var shouldRound = isRgbOrRgba(outputRange[0]);

  return function (input) {
    var i = 0;



    return outputRange[0].replace(stringShapeRegex, function () {
      var val = +interpolations[i++](input);
      if (shouldRound) {
        val = i < 4 ? Math.round(val) : Math.round(val * 1000) / 1000;
      }
      return String(val);
    });
  };
}

function isRgbOrRgba(range) {
  return typeof range === 'string' && range.startsWith('rgb');
}

function checkPattern(arr) {
  var pattern = arr[0].replace(stringShapeRegex, '');
  for (var i = 1; i < arr.length; ++i) {
    require('invariant')(
    pattern === arr[i].replace(stringShapeRegex, ''),
    'invalid pattern ' + arr[0] + ' and ' + arr[i]);

  }
}

function findRange(input, inputRange) {
  var i;
  for (i = 1; i < inputRange.length - 1; ++i) {
    if (inputRange[i] >= input) {
      break;
    }
  }
  return i - 1;
}

function checkValidInputRange(arr) {
  require('invariant')(arr.length >= 2, 'inputRange must have at least 2 elements');
  for (var i = 1; i < arr.length; ++i) {
    require('invariant')(
    arr[i] >= arr[i - 1],






    'inputRange must be monotonically non-decreasing ' + arr);

  }
}

function checkInfiniteRange(name, arr) {
  require('invariant')(arr.length >= 2, name + ' must have at least 2 elements');
  require('invariant')(
  arr.length !== 2 || arr[0] !== -Infinity || arr[1] !== Infinity,






  name + 'cannot be ]-infinity;+infinity[ ' + arr);

}var

AnimatedInterpolation = function (_AnimatedWithChildren) {require("@babel/runtime/helpers/inherits")(AnimatedInterpolation, _AnimatedWithChildren);var _super = _createSuper(AnimatedInterpolation);









  function AnimatedInterpolation(parent, config) {var _this;require("@babel/runtime/helpers/classCallCheck")(this, AnimatedInterpolation);
    _this = _super.call(this);
    _this._parent = parent;
    _this._config = config;
    _this._interpolation = createInterpolation(config);return _this;
  }require("@babel/runtime/helpers/createClass")(AnimatedInterpolation, [{ key: "__makeNative", value:

    function __makeNative() {
      this._parent.__makeNative();
      require("@babel/runtime/helpers/get")(require("@babel/runtime/helpers/getPrototypeOf")(AnimatedInterpolation.prototype), "__makeNative", this).call(this);
    } }, { key: "__getValue", value:

    function __getValue() {
      var parentValue = this._parent.__getValue();
      require('invariant')(
      typeof parentValue === 'number',
      'Cannot interpolate an input which is not a number.');

      return this._interpolation(parentValue);
    } }, { key: "interpolate", value:

    function interpolate(config) {
      return new AnimatedInterpolation(this, config);
    } }, { key: "__attach", value:

    function __attach() {
      this._parent.__addChild(this);
    } }, { key: "__detach", value:

    function __detach() {
      this._parent.__removeChild(this);
      require("@babel/runtime/helpers/get")(require("@babel/runtime/helpers/getPrototypeOf")(AnimatedInterpolation.prototype), "__detach", this).call(this);
    } }, { key: "__transformDataType", value:

    function __transformDataType(range) {
      return range.map(require("../NativeAnimatedHelper").transformDataType);
    } }, { key: "__getNativeConfig", value:

    function __getNativeConfig() {
      if (__DEV__) {
        require("../NativeAnimatedHelper").validateInterpolation(this._config);
      }

      return {
        inputRange: this._config.inputRange,



        outputRange: this.__transformDataType(this._config.outputRange),
        extrapolateLeft:
        this._config.extrapolateLeft || this._config.extrapolate || 'extend',
        extrapolateRight:
        this._config.extrapolateRight || this._config.extrapolate || 'extend',
        type: 'interpolation' };

    } }]);return AnimatedInterpolation;}(require("./AnimatedWithChildren"));AnimatedInterpolation.__createInterpolation = createInterpolation;


module.exports = AnimatedInterpolation;