d32ca2c6da687a4c290aeae4312a86d0
"use strict";var _excluded = ["icon", "size", "theme", "accessibilityLabel", "disabled", "style", "value", "status", "onPress"];

Object.defineProperty(exports, "__esModule", {
  value: true });

exports.ToggleButton = exports.default = void 0;

var React = _interopRequireWildcard(require("react"));





var _color = _interopRequireDefault(require("color"));

var _IconButton = _interopRequireDefault(require("../IconButton"));





function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

function _getRequireWildcardCache() {if (typeof WeakMap !== "function") return null;var cache = new WeakMap();_getRequireWildcardCache = function _getRequireWildcardCache() {return cache;};return cache;}

function _interopRequireWildcard(obj) {if (obj && obj.__esModule) {return obj;}if (obj === null || typeof obj !== "object" && typeof obj !== "function") {return { default: obj };}var cache = _getRequireWildcardCache();if (cache && cache.has(obj)) {return cache.get(obj);}var newObj = {};var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;for (var key in obj) {if (Object.prototype.hasOwnProperty.call(obj, key)) {var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;if (desc && (desc.get || desc.set)) {Object.defineProperty(newObj, key, desc);} else {newObj[key] = obj[key];}}}newObj.default = obj;if (cache) {cache.set(obj, newObj);}return newObj;}

function _extends() {_extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};return _extends.apply(this, arguments);}



































var ToggleButton = function ToggleButton(_ref)










{var icon = _ref.icon,size = _ref.size,theme = _ref.theme,accessibilityLabel = _ref.accessibilityLabel,disabled = _ref.disabled,style = _ref.style,value = _ref.value,status = _ref.status,_onPress = _ref.onPress,rest = require("@babel/runtime/helpers/objectWithoutProperties")(_ref, _excluded);
  var borderRadius = theme.roundness;
  return React.createElement(require("./ToggleButtonGroup").ToggleButtonGroupContext.Consumer, null, function (context) {
    var backgroundColor;
    var checked = context && context.value === value || status === 'checked';

    if (checked) {
      backgroundColor = theme.dark ? 'rgba(255, 255, 255, .12)' : 'rgba(0, 0, 0, .08)';
    } else {
      backgroundColor = 'transparent';
    }

    return React.createElement(_IconButton.default, _extends({
      borderless: false,
      icon: icon,
      onPress: function onPress(e) {
        if (_onPress) {
          _onPress(e);
        }

        if (context) {
          context.onValueChange(!checked ? value : null);
        }
      },
      size: size,
      accessibilityLabel: accessibilityLabel,
      accessibilityState: {
        disabled: disabled,
        selected: checked },

      disabled: disabled,
      style: [styles.content, {
        backgroundColor: backgroundColor,
        borderRadius: borderRadius,
        borderColor: (0, _color.default)(theme.dark ? require("../../styles/colors").white : require("../../styles/colors").black).alpha(0.29).rgb().string() },
      style] },
    rest));
  });
};

var styles = require("react-native").StyleSheet.create({
  content: {
    width: 42,
    height: 42,
    margin: 0 } });



var _default = (0, require("../../core/theming").withTheme)(ToggleButton);


exports.default = _default;
var ToggleButtonWithTheme = (0, require("../../core/theming").withTheme)(ToggleButton);

exports.ToggleButton = ToggleButtonWithTheme;