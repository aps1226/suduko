5014b7d3794027271d36360a9888e167
'use strict';

function stiffnessFromOrigamiValue(oValue) {
  return (oValue - 30) * 3.62 + 194;
}

function dampingFromOrigamiValue(oValue) {
  return (oValue - 8) * 3 + 25;
}

function fromOrigamiTensionAndFriction(tension, friction) {
  return {
    stiffness: stiffnessFromOrigamiValue(tension),
    damping: dampingFromOrigamiValue(friction)
  };
}

function fromBouncinessAndSpeed(bounciness, speed) {
  function normalize(value, startValue, endValue) {
    return (value - startValue) / (endValue - startValue);
  }

  function projectNormal(n, start, end) {
    return start + n * (end - start);
  }

  function linearInterpolation(t, start, end) {
    return t * end + (1 - t) * start;
  }

  function quadraticOutInterpolation(t, start, end) {
    return linearInterpolation(2 * t - t * t, start, end);
  }

  function b3Friction1(x) {
    return 0.0007 * Math.pow(x, 3) - 0.031 * Math.pow(x, 2) + 0.64 * x + 1.28;
  }

  function b3Friction2(x) {
    return 0.000044 * Math.pow(x, 3) - 0.006 * Math.pow(x, 2) + 0.36 * x + 2;
  }

  function b3Friction3(x) {
    return 0.00000045 * Math.pow(x, 3) - 0.000332 * Math.pow(x, 2) + 0.1078 * x + 5.84;
  }

  function b3Nobounce(tension) {
    if (tension <= 18) {
      return b3Friction1(tension);
    } else if (tension > 18 && tension <= 44) {
      return b3Friction2(tension);
    } else {
      return b3Friction3(tension);
    }
  }

  var b = normalize(bounciness / 1.7, 0, 20);
  b = projectNormal(b, 0, 0.8);
  var s = normalize(speed / 1.7, 0, 20);
  var bouncyTension = projectNormal(s, 0.5, 200);
  var bouncyFriction = quadraticOutInterpolation(b, b3Nobounce(bouncyTension), 0.01);
  return {
    stiffness: stiffnessFromOrigamiValue(bouncyTension),
    damping: dampingFromOrigamiValue(bouncyFriction)
  };
}

module.exports = {
  fromOrigamiTensionAndFriction: fromOrigamiTensionAndFriction,
  fromBouncinessAndSpeed: fromBouncinessAndSpeed
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlNwcmluZ0NvbmZpZy5qcyJdLCJuYW1lcyI6WyJzdGlmZm5lc3NGcm9tT3JpZ2FtaVZhbHVlIiwib1ZhbHVlIiwiZGFtcGluZ0Zyb21PcmlnYW1pVmFsdWUiLCJmcm9tT3JpZ2FtaVRlbnNpb25BbmRGcmljdGlvbiIsInRlbnNpb24iLCJmcmljdGlvbiIsInN0aWZmbmVzcyIsImRhbXBpbmciLCJmcm9tQm91bmNpbmVzc0FuZFNwZWVkIiwiYm91bmNpbmVzcyIsInNwZWVkIiwibm9ybWFsaXplIiwidmFsdWUiLCJzdGFydFZhbHVlIiwiZW5kVmFsdWUiLCJwcm9qZWN0Tm9ybWFsIiwibiIsInN0YXJ0IiwiZW5kIiwibGluZWFySW50ZXJwb2xhdGlvbiIsInQiLCJxdWFkcmF0aWNPdXRJbnRlcnBvbGF0aW9uIiwiYjNGcmljdGlvbjEiLCJ4IiwiTWF0aCIsInBvdyIsImIzRnJpY3Rpb24yIiwiYjNGcmljdGlvbjMiLCJiM05vYm91bmNlIiwiYiIsInMiLCJib3VuY3lUZW5zaW9uIiwiYm91bmN5RnJpY3Rpb24iLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFVQTs7QUFRQSxTQUFTQSx5QkFBVCxDQUFtQ0MsTUFBbkMsRUFBMkM7QUFDekMsU0FBTyxDQUFDQSxNQUFNLEdBQUcsRUFBVixJQUFnQixJQUFoQixHQUF1QixHQUE5QjtBQUNEOztBQUVELFNBQVNDLHVCQUFULENBQWlDRCxNQUFqQyxFQUF5QztBQUN2QyxTQUFPLENBQUNBLE1BQU0sR0FBRyxDQUFWLElBQWUsQ0FBZixHQUFtQixFQUExQjtBQUNEOztBQUVELFNBQVNFLDZCQUFULENBQ0VDLE9BREYsRUFFRUMsUUFGRixFQUdvQjtBQUNsQixTQUFPO0FBQ0xDLElBQUFBLFNBQVMsRUFBRU4seUJBQXlCLENBQUNJLE9BQUQsQ0FEL0I7QUFFTEcsSUFBQUEsT0FBTyxFQUFFTCx1QkFBdUIsQ0FBQ0csUUFBRDtBQUYzQixHQUFQO0FBSUQ7O0FBRUQsU0FBU0csc0JBQVQsQ0FDRUMsVUFE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YUFBRCxDQUQvQjtBQUVMeEIsSUFBQUEsT0FBTyxFQUFFTCx1QkFBdUIsQ0FBQzhCLGNBQUQ7QUFGM0IsR0FBUDtBQUlEOztBQUVEQyxNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFDZi9CLEVBQUFBLDZCQUE2QixFQUE3QkEsNkJBRGU7QUFFZkssRUFBQUEsc0JBQXNCLEVBQXRCQTtBQUZlLENBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBAZmxvdyBzdHJpY3RcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnR5cGUgU3ByaW5nQ29uZmlnVHlwZSA9IHtcbiAgc3RpZmZuZXNzOiBudW1iZXIsXG4gIGRhbXBpbmc6IG51bWJlcixcbiAgLi4uXG59O1xuXG5mdW5jdGlvbiBzdGlmZm5lc3NGcm9tT3JpZ2FtaVZhbHVlKG9WYWx1ZSkge1xuICByZXR1cm4gKG9WYWx1ZSAtIDMwKSAqIDMuNjIgKyAxOTQ7XG59XG5cbmZ1bmN0aW9uIGRhbXBpbmdGcm9tT3JpZ2FtaVZhbHVlKG9WYWx1ZSkge1xuICByZXR1cm4gKG9WYWx1ZSAtIDgpICogMyArIDI1O1xufVxuXG5mdW5jdGlvbiBmcm9tT3JpZ2FtaVRlbnNpb25BbmRGcmljdGlvbihcbiAgdGVuc2lvbjogbnVtYmVyLFxuICBmcmljdGlvbjogbnVtYmVyLFxuKTogU3ByaW5nQ29uZmlnVHlwZSB7XG4gIHJldHVybiB7XG4gICAgc3RpZmZuZXNzOiBzdGlmZm5lc3NGcm9tT3JpZ2FtaVZhbHVlKHRlbnNpb24pLFxuICAgIGRhbXBpbmc6IGRhbXBpbmdGcm9tT3JpZ2FtaVZhbHVlKGZyaWN0aW9uKSxcbiAgfTtcbn1cblxuZnVuY3Rpb24gZnJvbUJvdW5jaW5lc3NBbmRTcGVlZChcbiAgYm91bmNpbmVzczogbnVtYmVyLFxuICBzcGVlZDogbnVtYmVyLFxuKTogU3ByaW5nQ29uZmlnVHlwZSB7XG4gIGZ1bmN0aW9uIG5vcm1hbGl6ZSh2YWx1ZSwgc3RhcnRWYWx1ZSwgZW5kVmFsdWUpIHtcbiAgICByZXR1cm4gKHZhbHVlIC0gc3RhcnRWYWx1ZSkgLyAoZW5kVmFsdWUgLSBzdGFydFZhbHVlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHByb2plY3ROb3JtYWwobiwgc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiBzdGFydCArIG4gKiAoZW5kIC0gc3RhcnQpO1xuICB9XG5cbiAgZnVuY3Rpb24gbGluZWFySW50ZXJwb2xhdGlvbih0LCBzdGFydCwgZW5kKSB7XG4gICAgcmV0dXJuIHQgKiBlbmQgKyAoMSAtIHQpICogc3RhcnQ7XG4gIH1cblxuICBmdW5jdGlvbiBxdWFkcmF0aWNPdXRJbnRlcnBvbGF0aW9uKHQsIHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4gbGluZWFySW50ZXJwb2xhdGlvbigyICogdCAtIHQgKiB0LCBzdGFydCwgZW5kKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGIzRnJpY3Rpb24xKHgpIHtcbiAgICByZXR1cm4gMC4wMDA3ICogTWF0aC5wb3coeCwgMykgLSAwLjAzMSAqIE1hdGgucG93KHgsIDIpICsgMC42NCAqIHggKyAxLjI4O1xuICB9XG5cbiAgZnVuY3Rpb24gYjNGcmljdGlvbjIoeCkge1xuICAgIHJldHVybiAwLjAwMDA0NCAqIE1hdGgucG93KHgsIDMpIC0gMC4wMDYgKiBNYXRoLnBvdyh4LCAyKSArIDAuMzYgKiB4ICsgMjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGIzRnJpY3Rpb24zKHgpIHtcbiAgICByZXR1cm4gKFxuICAgICAgMC4wMDAwMDA0NSAqIE1hdGgucG93KHgsIDMpIC1cbiAgICAgIDAuMDAwMzMyICogTWF0aC5wb3coeCwgMikgK1xuICAgICAgMC4xMDc4ICogeCArXG4gICAgICA1Ljg0XG4gICAgKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGIzTm9ib3VuY2UodGVuc2lvbikge1xuICAgIGlmICh0ZW5zaW9uIDw9IDE4KSB7XG4gICAgICByZXR1cm4gYjNGcmljdGlvbjEodGVuc2lvbik7XG4gICAgfSBlbHNlIGlmICh0ZW5zaW9uID4gMTggJiYgdGVuc2lvbiA8PSA0NCkge1xuICAgICAgcmV0dXJuIGIzRnJpY3Rpb24yKHRlbnNpb24pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYjNGcmljdGlvbjModGVuc2lvbik7XG4gICAgfVxuICB9XG5cbiAgbGV0IGIgPSBub3JtYWxpemUoYm91bmNpbmVzcyAvIDEuNywgMCwgMjApO1xuICBiID0gcHJvamVjdE5vcm1hbChiLCAwLCAwLjgpO1xuICBjb25zdCBzID0gbm9ybWFsaXplKHNwZWVkIC8gMS43LCAwLCAyMCk7XG4gIGNvbnN0IGJvdW5jeVRlbnNpb24gPSBwcm9qZWN0Tm9ybWFsKHMsIDAuNSwgMjAwKTtcbiAgY29uc3QgYm91bmN5RnJpY3Rpb24gPSBxdWFkcmF0aWNPdXRJbnRlcnBvbGF0aW9uKFxuICAgIGIsXG4gICAgYjNOb2JvdW5jZShib3VuY3lUZW5zaW9uKSxcbiAgICAwLjAxLFxuICApO1xuXG4gIHJldHVybiB7XG4gICAgc3RpZmZuZXNzOiBzdGlmZm5lc3NGcm9tT3JpZ2FtaVZhbHVlKGJvdW5jeVRlbnNpb24pLFxuICAgIGRhbXBpbmc6IGRhbXBpbmdGcm9tT3JpZ2FtaVZhbHVlKGJvdW5jeUZyaWN0aW9uKSxcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGZyb21PcmlnYW1pVGVuc2lvbkFuZEZyaWN0aW9uLFxuICBmcm9tQm91bmNpbmVzc0FuZFNwZWVkLFxufTtcbiJdfQ==