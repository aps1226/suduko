7060f1ad7919fa45c6854ef04a25b4cb
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CardTitle = exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _theming = require("../../core/theming");

var _Caption = _interopRequireDefault(require("./../Typography/Caption"));

var _Title = _interopRequireDefault(require("./../Typography/Title"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

var LEFT_SIZE = 40;

var CardTitle = function CardTitle(_ref) {
  var title = _ref.title,
      titleStyle = _ref.titleStyle,
      _ref$titleNumberOfLin = _ref.titleNumberOfLines,
      titleNumberOfLines = _ref$titleNumberOfLin === void 0 ? 1 : _ref$titleNumberOfLin,
      subtitle = _ref.subtitle,
      subtitleStyle = _ref.subtitleStyle,
      _ref$subtitleNumberOf = _ref.subtitleNumberOfLines,
      subtitleNumberOfLines = _ref$subtitleNumberOf === void 0 ? 1 : _ref$subtitleNumberOf,
      left = _ref.left,
      leftStyle = _ref.leftStyle,
      right = _ref.right,
      rightStyle = _ref.rightStyle,
      style = _ref.style;
  return React.createElement(_reactNative.View, {
    style: [styles.container, {
      minHeight: subtitle || left || right ? 72 : 50
    }, style]
  }, left ? React.createElement(_reactNative.View, {
    style: [styles.left, leftStyle]
  }, left({
    size: LEFT_SIZE
  })) : null, React.createElement(_reactNative.View, {
    style: [styles.titles]
  }, title ? React.createElement(_Title.default, {
    style: [styles.title, {
      marginBottom: subtitle ? 0 : 2
    }, titleStyle],
    numberOfLines: titleNumberOfLines
  }, title) : null, subtitle ? React.createElement(_Caption.default, {
    style: [styles.subtitle, subtitleStyle],
    numberOfLines: subtitleNumberOfLines
  }, subtitle) : null), React.createElement(_reactNative.View, {
    style: rightStyle
  }, right ? right({
    size: 24
  }) : null));
};

exports.CardTitle = CardTitle;
CardTitle.displayName = 'Card.Title';

var styles = _reactNative.StyleSheet.create({
  container: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingLeft: 16
  },
  left: {
    justifyContent: 'center',
    marginRight: 16,
    height: LEFT_SIZE,
    width: LEFT_SIZE
  },
  titles: {
    flex: 1,
    flexDirection: 'column',
    justifyContent: 'center'
  },
  title: {
    minHeight: 30
  },
  subtitle: {
    minHeight: 20,
    marginVertical: 0
  }
});

var _default = (0, _theming.withTheme)(CardTitle);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNhcmRUaXRsZS50c3giXSwibmFtZXMiOlsiTEVGVF9TSVpFIiwiQ2FyZFRpdGxlIiwidGl0bGVOdW1iZXJPZkxpbmVzIiwic3VidGl0bGVOdW1iZXJPZkxpbmVzIiwic3R5bGUiLCJzdHlsZXMiLCJtaW5IZWlnaHQiLCJzdWJ0aXRsZSIsImxlZnQiLCJzaXplIiwidGl0bGUiLCJtYXJnaW5Cb3R0b20iLCJyaWdodFN0eWxlIiwicmlnaHQiLCJjb250YWluZXIiLCJmbGV4RGlyZWN0aW9uIiwiYWxpZ25JdGVtcyIsImp1c3RpZnlDb250ZW50IiwicGFkZGluZ0xlZnQiLCJtYXJnaW5SaWdodCIsImhlaWdodCIsIndpZHRoIiwidGl0bGVzIiwiZmxleCIsIm1hcmdpblZlcnRpY2FsIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsSUFBQSxLQUFBLEdBQUEsdUJBQUEsQ0FBQSxPQUFBLENBQUEsT0FBQSxDQUFBLENBQUE7O0FBQ0EsSUFBQSxZQUFBLEdBQUEsT0FBQSxDQUFBLGNBQUEsQ0FBQTs7QUFRQSxJQUFBLFFBQUEsR0FBQSxPQUFBLHNCQUFBOztBQUNBLElBQUEsUUFBQSxHQUFBLHNCQUFBLENBQUEsT0FBQSwyQkFBQSxDQUFBOztBQUNBLElBQUEsTUFBQSxHQUFBLHNCQUFBLENBQUEsT0FBQSx5QkFBQSxDQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUEwREEsSUFBTUEsU0FBUyxHQUFmLEVBQUE7O0FBMEJBLElBQU1DLFNBQVMsR0FBRyxTQUFaQSxTQUFZLE9BWUw7QUFBQSxNQVpNLEtBWU4sUUFaTSxLQVlOO0FBQUEsTUFaTSxVQVlOLFFBWk0sVUFZTjtBQUFBLG1DQVRYQyxrQkFTVztBQUFBLE1BVFhBLGtCQVNXLHNDQVpNLENBWU47QUFBQSxNQVpNLFFBWU4sUUFaTSxRQVlOO0FBQUEsTUFaTSxhQVlOLFFBWk0sYUFZTjtBQUFBLG1DQU5YQyxxQkFNVztBQUFBLE1BTlhBLHFC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Y0FBYyxFQUFFO0FBRlI7QUF6QnFCLENBQWxCLENBQWY7O2VBK0JlLENBQUEsR0FBQSxRQUFBLENBQUEsU0FBQSxFQUFBLFNBQUEsQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7XG4gIFN0eWxlUHJvcCxcbiAgU3R5bGVTaGVldCxcbiAgVGV4dFN0eWxlLFxuICBWaWV3LFxuICBWaWV3U3R5bGUsXG59IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5cbmltcG9ydCB7IHdpdGhUaGVtZSB9IGZyb20gJy4uLy4uL2NvcmUvdGhlbWluZyc7XG5pbXBvcnQgQ2FwdGlvbiBmcm9tICcuLy4uL1R5cG9ncmFwaHkvQ2FwdGlvbic7XG5pbXBvcnQgVGl0bGUgZnJvbSAnLi8uLi9UeXBvZ3JhcGh5L1RpdGxlJztcblxudHlwZSBQcm9wcyA9IFJlYWN0LkNvbXBvbmVudFByb3BzV2l0aFJlZjx0eXBlb2YgVmlldz4gJiB7XG4gIC8qKlxuICAgKiBUZXh0IGZvciB0aGUgdGl0bGUuIE5vdGUgdGhhdCB0aGlzIHdpbGwgb25seSBhY2NlcHQgYSBzdHJpbmcgb3IgYDxUZXh0PmAtYmFzZWQgbm9kZS5cbiAgICovXG4gIHRpdGxlOiBSZWFjdC5SZWFjdE5vZGU7XG4gIC8qKlxuICAgKiBTdHlsZSBmb3IgdGhlIHRpdGxlLlxuICAgKi9cbiAgdGl0bGVTdHlsZT86IFN0eWxlUHJvcDxUZXh0U3R5bGU+O1xuICAvKipcbiAgICogTnVtYmVyIG9mIGxpbmVzIGZvciB0aGUgdGl0bGUuXG4gICAqL1xuICB0aXRsZU51bWJlck9mTGluZXM/OiBudW1iZXI7XG4gIC8qKlxuICAgKiBUZXh0IGZvciB0aGUgc3VidGl0bGUuIE5vdGUgdGhhdCB0aGlzIHdpbGwgb25seSBhY2NlcHQgYSBzdHJpbmcgb3IgYDxUZXh0PmAtYmFzZWQgbm9kZS5cbiAgICovXG4gIHN1YnRpdGxlPzogUmVhY3QuUmVhY3ROb2RlO1xuICAvKipcbiAgICogU3R5bGUgZm9yIHRoZSBzdWJ0aXRsZS5cbiAgICovXG4gIHN1YnRpdGxlU3R5bGU/OiBTdHlsZVByb3A8VGV4dFN0eWxlPjtcbiAgLyoqXG4gICAqIE51bWJlciBvZiBsaW5lcyBmb3IgdGhlIHN1YnRpdGxlLlxuICAgKi9cbiAgc3VidGl0bGVOdW1iZXJPZkxpbmVzPzogbnVtYmVyO1xuICAvKipcbiAgICogQ2FsbGJhY2sgd2hpY2ggcmV0dXJucyBhIFJlYWN0IGVsZW1lbnQgdG8gZGlzcGxheSBvbiB0aGUgbGVmdCBzaWRlLlxuICAgKi9cbiAgbGVmdD86IChwcm9wczogeyBzaXplOiBudW1iZXIgfSkgPT4gUmVhY3QuUmVhY3ROb2RlO1xuICAvKipcbiAgICogU3R5bGUgZm9yIHRoZSBsZWZ0IGVsZW1lbnQgd3JhcHBlci5cbiAgICovXG4gIGxlZnRTdHlsZT86IFN0eWxlUHJvcDxWaWV3U3R5bGU+O1xuICAvKipcbiAgICogQ2FsbGJhY2sgd2hpY2ggcmV0dXJucyBhIFJlYWN0IGVsZW1lbnQgdG8gZGlzcGxheSBvbiB0aGUgcmlnaHQgc2lkZS5cbiAgICovXG4gIHJpZ2h0PzogKHByb3BzOiB7IHNpemU6IG51bWJlciB9KSA9PiBSZWFjdC5SZWFjdE5vZGU7XG4gIC8qKlxuICAgKiBTdHlsZSBmb3IgdGhlIHJpZ2h0IGVsZW1lbnQgd3JhcHBlci5cbiAgICovXG4gIHJpZ2h0U3R5bGU/OiBTdHlsZVByb3A8Vmlld1N0eWxlPjtcbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgaW5kZXg/OiBudW1iZXI7XG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHRvdGFsPzogbnVtYmVyO1xuICBzdHlsZT86IFN0eWxlUHJvcDxWaWV3U3R5bGU+O1xuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqL1xuICB0aGVtZTogUmVhY3ROYXRpdmVQYXBlci5UaGVtZTtcbn07XG5cbmNvbnN0IExFRlRfU0laRSA9IDQwO1xuXG4vKipcbiAqIEEgY29tcG9uZW50IHRvIHNob3cgYSB0aXRsZSwgc3VidGl0bGUgYW5kIGFuIGF2YXRhciBpbnNpZGUgYSBDYXJkLlxuICpcbiAqIDxkaXYgY2xhc3M9XCJzY3JlZW5zaG90c1wiPlxuICogICA8aW1nIGNsYXNzPVwibWVkaXVtXCIgc3JjPVwic2NyZWVuc2hvdHMvY2FyZC10aXRsZS0xLnBuZ1wiIC8+XG4gKiA8L2Rpdj5cbiAqXG4gKiAjIyBVc2FnZVxuICogYGBganNcbiAqIGltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbiAqIGltcG9ydCB7IEF2YXRhciwgQ2FyZCwgSWNvbkJ1dHRvbiB9IGZyb20gJ3JlYWN0LW5hdGl2ZS1wYXBlcic7XG4gKlxuICogY29uc3QgTXlDb21wb25lbnQgPSAoKSA9PiAoXG4gKiAgIDxDYXJkLlRpdGxlXG4gKiAgICAgdGl0bGU9XCJDYXJkIFRpdGxlXCJcbiAqICAgICBzdWJ0aXRsZT1cIkNhcmQgU3VidGl0bGVcIlxuICogICAgIGxlZnQ9eyhwcm9wcykgPT4gPEF2YXRhci5JY29uIHsuLi5wcm9wc30gaWNvbj1cImZvbGRlclwiIC8+fVxuICogICAgIHJpZ2h0PXsocHJvcHMpID0+IDxJY29uQnV0dG9uIHsuLi5wcm9wc30gaWNvbj1cIm1vcmUtdmVydFwiIG9uUHJlc3M9eygpID0+IHt9fSAvPn1cbiAqICAgLz5cbiAqICk7XG4gKlxuICogZXhwb3J0IGRlZmF1bHQgTXlDb21wb25lbnQ7XG4gKiBgYGBcbiAqL1xuY29uc3QgQ2FyZFRpdGxlID0gKHtcbiAgdGl0bGUsXG4gIHRpdGxlU3R5bGUsXG4gIHRpdGxlTnVtYmVyT2ZMaW5lcyA9IDEsXG4gIHN1YnRpdGxlLFxuICBzdWJ0aXRsZVN0eWxlLFxuICBzdWJ0aXRsZU51bWJlck9mTGluZXMgPSAxLFxuICBsZWZ0LFxuICBsZWZ0U3R5bGUsXG4gIHJpZ2h0LFxuICByaWdodFN0eWxlLFxuICBzdHlsZSxcbn06IFByb3BzKSA9PiB7XG4gIHJldHVybiAoXG4gICAgPFZpZXdcbiAgICAgIHN0eWxlPXtbXG4gICAgICAgIHN0eWxlcy5jb250YWluZXIsXG4gICAgICAgIHsgbWluSGVpZ2h0OiBzdWJ0aXRsZSB8fCBsZWZ0IHx8IHJpZ2h0ID8gNzIgOiA1MCB9LFxuICAgICAgICBzdHlsZSxcbiAgICAgIF19XG4gICAgPlxuICAgICAge2xlZnQgPyAoXG4gICAgICAgIDxWaWV3IHN0eWxlPXtbc3R5bGVzLmxlZnQsIGxlZnRTdHlsZV19PlxuICAgICAgICAgIHtsZWZ0KHtcbiAgICAgICAgICAgIHNpemU6IExFRlRfU0laRSxcbiAgICAgICAgICB9KX1cbiAgICAgICAgPC9WaWV3PlxuICAgICAgKSA6IG51bGx9XG5cbiAgICAgIDxWaWV3IHN0eWxlPXtbc3R5bGVzLnRpdGxlc119PlxuICAgICAgICB7dGl0bGUgPyAoXG4gICAgICAgICAgPFRpdGxlXG4gICAgICAgICAgICBzdHlsZT17W1xuICAgICAgICAgICAgICBzdHlsZXMudGl0bGUsXG4gICAgICAgICAgICAgIHsgbWFyZ2luQm90dG9tOiBzdWJ0aXRsZSA/IDAgOiAyIH0sXG4gICAgICAgICAgICAgIHRpdGxlU3R5bGUsXG4gICAgICAgICAgICBdfVxuICAgICAgICAgICAgbnVtYmVyT2ZMaW5lcz17dGl0bGVOdW1iZXJPZkxpbmVzfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHt0aXRsZX1cbiAgICAgICAgICA8L1RpdGxlPlxuICAgICAgICApIDogbnVsbH1cblxuICAgICAgICB7c3VidGl0bGUgPyAoXG4gICAgICAgICAgPENhcHRpb25cbiAgICAgICAgICAgIHN0eWxlPXtbc3R5bGVzLnN1YnRpdGxlLCBzdWJ0aXRsZVN0eWxlXX1cbiAgICAgICAgICAgIG51bWJlck9mTGluZXM9e3N1YnRpdGxlTnVtYmVyT2ZMaW5lc31cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7c3VidGl0bGV9XG4gICAgICAgICAgPC9DYXB0aW9uPlxuICAgICAgICApIDogbnVsbH1cbiAgICAgIDwvVmlldz5cblxuICAgICAgPFZpZXcgc3R5bGU9e3JpZ2h0U3R5bGV9PntyaWdodCA/IHJpZ2h0KHsgc2l6ZTogMjQgfSkgOiBudWxsfTwvVmlldz5cbiAgICA8L1ZpZXc+XG4gICk7XG59O1xuXG5DYXJkVGl0bGUuZGlzcGxheU5hbWUgPSAnQ2FyZC5UaXRsZSc7XG5cbmNvbnN0IHN0eWxlcyA9IFN0eWxlU2hlZXQuY3JlYXRlKHtcbiAgY29udGFpbmVyOiB7XG4gICAgZmxleERpcmVjdGlvbjogJ3JvdycsXG4gICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAganVzdGlmeUNvbnRlbnQ6ICdzcGFjZS1iZXR3ZWVuJyxcbiAgICBwYWRkaW5nTGVmdDogMTYsXG4gIH0sXG5cbiAgbGVmdDoge1xuICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICBtYXJnaW5SaWdodDogMTYsXG4gICAgaGVpZ2h0OiBMRUZUX1NJWkUsXG4gICAgd2lkdGg6IExFRlRfU0laRSxcbiAgfSxcblxuICB0aXRsZXM6IHtcbiAgICBmbGV4OiAxLFxuICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgfSxcblxuICB0aXRsZToge1xuICAgIG1pbkhlaWdodDogMzAsXG4gIH0sXG5cbiAgc3VidGl0bGU6IHtcbiAgICBtaW5IZWlnaHQ6IDIwLFxuICAgIG1hcmdpblZlcnRpY2FsOiAwLFxuICB9LFxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhUaGVtZShDYXJkVGl0bGUpO1xuXG4vLyBAY29tcG9uZW50LWRvY3MgaWdub3JlLW5leHQtbGluZVxuZXhwb3J0IHsgQ2FyZFRpdGxlIH07XG4iXX0=