eb9c55bce2cea3e3747fabb124e3ebad
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.reversePercentage = exports.buildAnimations = exports.makeSlideTranslation = exports.initializeAnimations = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _reactNative = require("react-native");

var animatable = _interopRequireWildcard(require("react-native-animatable"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var _Dimensions$get = _reactNative.Dimensions.get('window'),
    height = _Dimensions$get.height,
    width = _Dimensions$get.width;

var initializeAnimations = function initializeAnimations() {
  var animationDefinitions = {
    slideInDown: makeSlideTranslation('translateY', -height, 0),
    slideInUp: makeSlideTranslation('translateY', height, 0),
    slideInLeft: makeSlideTranslation('translateX', -width, 0),
    slideInRight: makeSlideTranslation('translateX', width, 0),
    slideOutDown: makeSlideTranslation('translateY', 0, height),
    slideOutUp: makeSlideTranslation('translateY', 0, -height),
    slideOutLeft: makeSlideTranslation('translateX', 0, -width),
    slideOutRight: makeSlideTranslation('translateX', 0, width)
  };
  animatable.initializeRegistryWithDefinitions(animationDefinitions);
};

exports.initializeAnimations = initializeAnimations;

var makeSlideTranslation = function makeSlideTranslation(translationType, fromValue, toValue) {
  return {
    from: (0, _defineProperty2.default)({}, translationType, fromValue),
    to: (0, _defineProperty2.default)({}, translationType, toValue)
  };
};

exports.makeSlideTranslation = makeSlideTranslation;

var buildAnimations = function buildAnimations(_ref) {
  var animationIn = _ref.animationIn,
      animationOut = _ref.animationOut;
  var updatedAnimationIn;
  var updatedAnimationOut;

  if (isObject(animationIn)) {
    var animationName = JSON.stringify(animationIn);
    makeAnimation(animationName, animationIn);
    updatedAnimationIn = animationName;
  } else {
    updatedAnimationIn = animationIn;
  }

  if (isObject(animationOut)) {
    var _animationName = JSON.stringify(animationOut);

    makeAnimation(_animationName, animationOut);
    updatedAnimationOut = _animationName;
  } else {
    updatedAnimationOut = animationOut;
  }

  return {
    animationIn: updatedAnimationIn,
    animationOut: updatedAnimationOut
  };
};

exports.buildAnimations = buildAnimations;

var reversePercentage = function reversePercentage(x) {
  return -(x - 1);
};

exports.reversePercentage = reversePercentage;

var makeAnimation = function makeAnimation(name, obj) {
  animatable.registerAnimation(name, animatable.createAnimation(obj));
};

var isObject = function isObject(obj) {
  return obj !== null && typeof obj === 'object';
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWxzLmpzIl0sIm5hbWVzIjpbIkRpbWVuc2lvbnMiLCJnZXQiLCJoZWlnaHQiLCJ3aWR0aCIsImluaXRpYWxpemVBbmltYXRpb25zIiwiYW5pbWF0aW9uRGVmaW5pdGlvbnMiLCJzbGlkZUluRG93biIsIm1ha2VTbGlkZVRyYW5zbGF0aW9uIiwic2xpZGVJblVwIiwic2xpZGVJbkxlZnQiLCJzbGlkZUluUmlnaHQiLCJzbGlkZU91dERvd24iLCJzbGlkZU91dFVwIiwic2xpZGVPdXRMZWZ0Iiwic2xpZGVPdXRSaWdodCIsImFuaW1hdGFibGUiLCJpbml0aWFsaXplUmVnaXN0cnlXaXRoRGVmaW5pdGlvbnMiLCJ0cmFuc2xhdGlvblR5cGUiLCJmcm9tVmFsdWUiLCJ0b1ZhbHVlIiwiZnJvbSIsInRvIiwiYnVpbGRBbmltYXRpb25zIiwiYW5pbWF0aW9uSW4iLCJhbmltYXRpb25PdXQiLCJ1cGRhdGVkQW5pbWF0aW9uSW4iLCJ1cGRhdGVkQW5pbWF0aW9uT3V0IiwiaXNPYmplY3QiLCJhbmltYXRpb25OYW1lIiwiSlNPTiIsInN0cmluZ2lmeSIsIm1ha2VBbmltYXRpb24iLCJyZXZlcnNlUGVyY2VudGFnZSIsIngiLCJuYW1lIiwib2JqIiwicmVnaXN0ZXJBbmltYXRpb24iLCJjcmVhdGVBbmltYXRpb24iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUNBOzs7Ozs7QUFDQSxzQkFBMEJBLHdCQUFXQyxHQUFYLENBQWUsUUFBZixDQUExQjtBQUFBLElBQVFDLE1BQVIsbUJBQVFBLE1BQVI7QUFBQSxJQUFnQkMsS0FBaEIsbUJBQWdCQSxLQUFoQjs7QUFDTyxJQUFNQyxvQkFBb0IsR0FBRyxTQUF2QkEsb0JBQXVCLEdBQU07QUFHdEMsTUFBTUMsb0JBQW9CLEdBQUc7QUFDekJDLElBQUFBLFdBQVcsRUFBRUMsb0JBQW9CLENBQUMsWUFBRCxFQUFlLENBQUNMLE1BQWhCLEVBQXdCLENBQXhCLENBRFI7QUFFekJNLElBQUFBLFNBQVMsRUFBRUQsb0JBQW9CLENBQUMsWUFBRCxFQUFlTCxNQUFmLEVBQXVCLENBQXZCLENBRk47QUFHekJPLElBQUFBLFdBQVcsRUFBRUYsb0JBQW9CLENBQUMsWUFBRCxFQUFlLENBQUNKLEtBQWhCLEVBQXVCLENBQXZCLENBSFI7QUFJekJPLElBQUFBLFlBQVksRUFBRUgsb0JBQW9CLENBQUMsWUFBRCxFQUFlSixLQUFmLEVBQXNCLENBQXRCLENBSlQ7QUFLekJRLElBQUFBLFlBQVksRUFBRUosb0JBQW9CLENBQUMsWUFBRCxFQUFlLENBQWYsRUFBa0JMLE1BQWxCLENBTFQ7QUFNekJVLElBQUFBLFVBQVUsRUFBRUwsb0JBQW9CLENBQUMsWUFBRCxFQUFlLENBQWYsRUFBa0IsQ0FBQ0wsTUFBbkIsQ0FOUDtBQU96QlcsSUFBQUEsWUFBWSxFQUFFTixvQkFBb0IsQ0FBQyxZQUFELEVBQWUsQ0FBZixFQUFrQixDQUFDSixLQUFuQixDQVBUO0FBUXpCVyxJQUFBQSxhQUFhLEVBQUVQLG9CQUFvQixDQUFDLFlBQUQsRUFBZSxDQUFmLEVBQWtCSixLQUFsQjtBQVJWLEdBQTdCO0FBVUFZLEVBQUFBLFVBQVUsQ0FBQ0MsaUNBQVgsQ0FBNkNYLG9CQUE3QztBQUNILENBZE07Ozs7QUFlQSxJQUFNRSxvQkFBb0IsR0FBRyxTQUF2QkEsb0JBQXVCLENBQUNVLGVBQUQsRUFBa0JDLFNBQWxCLEVBQTZCQyxPQUE3QjtBQUFBLFNBQTBDO0FBQzFFQyxJQUFBQSxJQUFJLG9DQUNDSCxlQURELEVBQ21CQyxTQURuQixDQURzRTtBQUkxRUcsSUFBQUEsRUFBRSxvQ0FDR0osZUFESCxFQUNxQkUsT0FEckI7QUFKd0UsR0FBMUM7QUFBQSxDQUE3Qjs7OztBQVVBLElBQU1HLGVBQWUsR0FBRyxTQUFsQkEsZUFBa0IsT0FBb0M7QUFBQSxNQUFqQ0MsV0FBaUMsUUFBakNBLFdBQWlDO0FBQUEsTUFBcEJDLFlBQW9CLFFBQXBCQSxZQUFvQjtBQUMvRCxNQUFJQyxrQkFBSjtBQUNBLE1BQUlDLG1CQUFKOztBQUNBLE1BQUlDLFFBQVEsQ0FBQ0osV0FBRCxDQUFaLEVBQTJCO0FBQ3ZCLFFBQU1LLGFBQWEsR0FBR0MsSUFBSSxDQUFDQyxTQUFMLENBQWVQLFdBQWYsQ0FBdEI7QUFDQVEsSUFBQUEsYUFBYSxDQUFDSCxhQUFELEVBQWdCTCxXQUFoQixDQUFiO0FBQ0FFLElBQUFBLGtCQUFrQixHQUFHRyxhQUFyQjtBQUNILEdBSkQsTUFLSztBQUNESCxJQUFBQSxrQkFBa0IsR0FBR0YsV0FBckI7QUFDSDs7QUFDRCxNQUFJSSxRQUFRLENBQUNILFlBQUQsQ0FBWixFQUE0QjtBQUN4QixRQUFNSSxjQUFhLEdBQUdDLElBQUksQ0FBQ0MsU0FBTCxDQUFlTixZQUFmLENBQXRCOztBQUNBTyxJQUFBQSxhQUFhLENBQUNILGNBQUQsRUFBZ0JKLFlBQWhCLENBQWI7QUFDQUUsSUFBQUEsbUJBQW1CLEdBQUdFLGNBQXRCO0FBQ0gsR0FKRCxNQUtLO0FBQ0RGLElBQUFBLG1CQUFtQixHQUFHRixZQUF0QjtBQUNIOztBQUNELFNBQU87QUFDSEQsSUFBQUEsV0FBVyxFQUFFRSxrQkFEVjtBQUVIRCxJQUFBQSxZQUFZLEVBQUVFO0FBRlgsR0FBUDtBQUlILENBdkJNOzs7O0FBd0JBLElBQU1NLGlCQUFpQixHQUFHLFNBQXBCQSxpQkFBb0IsQ0FBQ0MsQ0FBRDtBQUFBLFNBQU8sRUFBRUEsQ0FBQyxHQUFHLENBQU4sQ0FBUDtBQUFBLENBQTFCOzs7O0FBQ1AsSUFBTUYsYUFBYSxHQUFHLFNBQWhCQSxhQUFnQixDQUFDRyxJQUFELEVBQU9DLEdBQVAsRUFBZTtBQUNqQ3BCLEVBQUFBLFVBQVUsQ0FBQ3FCLGlCQUFYLENBQTZCRixJQUE3QixFQUFtQ25CLFVBQVUsQ0FBQ3NCLGVBQVgsQ0FBMkJGLEdBQTNCLENBQW5DO0FBQ0gsQ0FGRDs7QUFHQSxJQUFNUixRQUFRLEdBQUcsU0FBWEEsUUFBVyxDQUFDUSxHQUFELEVBQVM7QUFDdEIsU0FBT0EsR0FBRyxLQUFLLElBQVIsSUFBZ0IsT0FBT0EsR0FBUCxLQUFlLFFBQXRDO0FBQ0gsQ0FGRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpbWVuc2lvbnMgfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuaW1wb3J0ICogYXMgYW5pbWF0YWJsZSBmcm9tICdyZWFjdC1uYXRpdmUtYW5pbWF0YWJsZSc7XG5jb25zdCB7IGhlaWdodCwgd2lkdGggfSA9IERpbWVuc2lvbnMuZ2V0KCd3aW5kb3cnKTtcbmV4cG9ydCBjb25zdCBpbml0aWFsaXplQW5pbWF0aW9ucyA9ICgpID0+IHtcbiAgICAvLyBTaW5jZSByZWFjdC1uYXRpdmUtYW5pbWF0YWJsZSBhcHBsaWVzIGJ5IGRlZmF1bHQgYSBtYXJnaW4gb2YgMTAwIHRvIGl0c1xuICAgIC8vIHNsaWRpbmcgYW5pbWF0aW9uLCB3ZSByZXNldCB0aGVtIGhlcmUgb3ZlcnJpZGluZyB0aGUgbWFyZ2luIHRvIDAuXG4gICAgY29uc3QgYW5pbWF0aW9uRGVmaW5pdGlvbnMgPSB7XG4gICAgICAgIHNsaWRlSW5Eb3duOiBtYWtlU2xpZGVUcmFuc2xhdGlvbigndHJhbnNsYXRlWScsIC1oZWlnaHQsIDApLFxuICAgICAgICBzbGlkZUluVXA6IG1ha2VTbGlkZVRyYW5zbGF0aW9uKCd0cmFuc2xhdGVZJywgaGVpZ2h0LCAwKSxcbiAgICAgICAgc2xpZGVJbkxlZnQ6IG1ha2VTbGlkZVRyYW5zbGF0aW9uKCd0cmFuc2xhdGVYJywgLXdpZHRoLCAwKSxcbiAgICAgICAgc2xpZGVJblJpZ2h0OiBtYWtlU2xpZGVUcmFuc2xhdGlvbigndHJhbnNsYXRlWCcsIHdpZHRoLCAwKSxcbiAgICAgICAgc2xpZGVPdXREb3duOiBtYWtlU2xpZGVUcmFuc2xhdGlvbigndHJhbnNsYXRlWScsIDAsIGhlaWdodCksXG4gICAgICAgIHNsaWRlT3V0VXA6IG1ha2VTbGlkZVRyYW5zbGF0aW9uKCd0cmFuc2xhdGVZJywgMCwgLWhlaWdodCksXG4gICAgICAgIHNsaWRlT3V0TGVmdDogbWFrZVNsaWRlVHJhbnNsYXRpb24oJ3RyYW5zbGF0ZVgnLCAwLCAtd2lkdGgpLFxuICAgICAgICBzbGlkZU91dFJpZ2h0OiBtYWtlU2xpZGVUcmFuc2xhdGlvbigndHJhbnNsYXRlWCcsIDAsIHdpZHRoKSxcbiAgICB9O1xuICAgIGFuaW1hdGFibGUuaW5pdGlhbGl6ZVJlZ2lzdHJ5V2l0aERlZmluaXRpb25zKGFuaW1hdGlvbkRlZmluaXRpb25zKTtcbn07XG5leHBvcnQgY29uc3QgbWFrZVNsaWRlVHJhbnNsYXRpb24gPSAodHJhbnNsYXRpb25UeXBlLCBmcm9tVmFsdWUsIHRvVmFsdWUpID0+ICh7XG4gICAgZnJvbToge1xuICAgICAgICBbdHJhbnNsYXRpb25UeXBlXTogZnJvbVZhbHVlLFxuICAgIH0sXG4gICAgdG86IHtcbiAgICAgICAgW3RyYW5zbGF0aW9uVHlwZV06IHRvVmFsdWUsXG4gICAgfSxcbn0pO1xuLy8gVXNlciBjYW4gZGVmaW5lIGN1c3RvbSByZWFjdC1uYXRpdmUtYW5pbWF0YWJsZSBhbmltYXRpb25zLCBzZWUgUFIgIzcyXG4vLyBVdGlsaXR5IGZvciBjcmVhdGluZyBvdXIgb3duIGN1c3RvbSByZWFjdC1uYXRpdmUtYW5pbWF0YWJsZSBhbmltYXRpb25zXG5leHBvcnQgY29uc3QgYnVpbGRBbmltYXRpb25zID0gKHsgYW5pbWF0aW9uSW4sIGFuaW1hdGlvbk91dCwgfSkgPT4ge1xuICAgIGxldCB1cGRhdGVkQW5pbWF0aW9uSW47XG4gICAgbGV0IHVwZGF0ZWRBbmltYXRpb25PdXQ7XG4gICAgaWYgKGlzT2JqZWN0KGFuaW1hdGlvbkluKSkge1xuICAgICAgICBjb25zdCBhbmltYXRpb25OYW1lID0gSlNPTi5zdHJpbmdpZnkoYW5pbWF0aW9uSW4pO1xuICAgICAgICBtYWtlQW5pbWF0aW9uKGFuaW1hdGlvbk5hbWUsIGFuaW1hdGlvbkluKTtcbiAgICAgICAgdXBkYXRlZEFuaW1hdGlvbkluID0gYW5pbWF0aW9uTmFtZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHVwZGF0ZWRBbmltYXRpb25JbiA9IGFuaW1hdGlvbkluO1xuICAgIH1cbiAgICBpZiAoaXNPYmplY3QoYW5pbWF0aW9uT3V0KSkge1xuICAgICAgICBjb25zdCBhbmltYXRpb25OYW1lID0gSlNPTi5zdHJpbmdpZnkoYW5pbWF0aW9uT3V0KTtcbiAgICAgICAgbWFrZUFuaW1hdGlvbihhbmltYXRpb25OYW1lLCBhbmltYXRpb25PdXQpO1xuICAgICAgICB1cGRhdGVkQW5pbWF0aW9uT3V0ID0gYW5pbWF0aW9uTmFtZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHVwZGF0ZWRBbmltYXRpb25PdXQgPSBhbmltYXRpb25PdXQ7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGFuaW1hdGlvbkluOiB1cGRhdGVkQW5pbWF0aW9uSW4sXG4gICAgICAgIGFuaW1hdGlvbk91dDogdXBkYXRlZEFuaW1hdGlvbk91dCxcbiAgICB9O1xufTtcbmV4cG9ydCBjb25zdCByZXZlcnNlUGVyY2VudGFnZSA9ICh4KSA9PiAtKHggLSAxKTtcbmNvbnN0IG1ha2VBbmltYXRpb24gPSAobmFtZSwgb2JqKSA9PiB7XG4gICAgYW5pbWF0YWJsZS5yZWdpc3RlckFuaW1hdGlvbihuYW1lLCBhbmltYXRhYmxlLmNyZWF0ZUFuaW1hdGlvbihvYmopKTtcbn07XG5jb25zdCBpc09iamVjdCA9IChvYmopID0+IHtcbiAgICByZXR1cm4gb2JqICE9PSBudWxsICYmIHR5cGVvZiBvYmogPT09ICdvYmplY3QnO1xufTtcbiJdfQ==