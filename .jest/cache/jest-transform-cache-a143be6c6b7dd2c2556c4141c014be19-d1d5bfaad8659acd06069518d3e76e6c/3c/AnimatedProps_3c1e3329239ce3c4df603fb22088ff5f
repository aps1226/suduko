cc43fef7a7d5a7ae8499da0838049128
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var _require = require("../AnimatedEvent"),
    AnimatedEvent = _require.AnimatedEvent;

var AnimatedNode = require("./AnimatedNode");

var AnimatedStyle = require("./AnimatedStyle");

var NativeAnimatedHelper = require("../NativeAnimatedHelper");

var ReactNative = require("../../../Renderer/shims/ReactNative");

var invariant = require('invariant');

var AnimatedProps = function (_AnimatedNode) {
  (0, _inherits2.default)(AnimatedProps, _AnimatedNode);

  var _super = _createSuper(AnimatedProps);

  function AnimatedProps(props, callback) {
    var _this;

    (0, _classCallCheck2.default)(this, AnimatedProps);
    _this = _super.call(this);

    if (props.style) {
      props = _objectSpread(_objectSpread({}, props), {}, {
        style: new AnimatedStyle(props.style)
      });
    }

    _this._props = props;
    _this._callback = callback;

    _this.__attach();

    return _this;
  }

  (0, _createClass2.default)(AnimatedProps, [{
    key: "__getValue",
    value: function __getValue() {
      var props = {};

      for (var key in this._props) {
        var value = this._props[key];

        if (value instanceof AnimatedNode) {
          if (!value.__isNative || value instanceof AnimatedStyle) {
            props[key] = value.__getValue();
          }
        } else if (value instanceof AnimatedEvent) {
          props[key] = value.__getHandler();
        } else {
          props[key] = value;
        }
      }

      return props;
    }
  }, {
    key: "__getAnimatedValue",
    value: function __getAnimatedValue() {
      var props = {};

      for (var key in this._props) {
        var value = this._props[key];

        if (value instanceof AnimatedNode) {
          props[key] = value.__getAnimatedValue();
        }
      }

      return props;
    }
  }, {
    key: "__attach",
    value: function __attach() {
      for (var key in this._props) {
        var value = this._props[key];

        if (value instanceof AnimatedNode) {
          value.__addChild(this);
        }
      }
    }
  }, {
    key: "__detach",
    value: function __detach() {
      if (this.__isNative && this._animatedView) {
        this.__disconnectAnimatedView();
      }

      for (var key in this._props) {
        var value = this._props[key];

        if (value instanceof AnimatedNode) {
          value.__removeChild(this);
        }
      }

      (0, _get2.default)((0, _getPrototypeOf2.default)(AnimatedProps.prototype), "__detach", this).call(this);
    }
  }, {
    key: "update",
    value: function update() {
      this._callback();
    }
  }, {
    key: "__makeNative",
    value: function __makeNative() {
      if (!this.__isNative) {
        this.__isNative = true;

        for (var key in this._props) {
          var value = this._props[key];

          if (value instanceof AnimatedNode) {
            value.__makeNative();
          }
        }

        if (this._animatedView) {
          this.__connectAnimatedView();
        }
      }
    }
  }, {
    key: "setNativeView",
    value: function setNativeView(animatedView) {
      if (this._animatedView === animatedView) {
        return;
      }

      this._animatedView = animatedView;

      if (this.__isNative) {
        this.__connectAnimatedView();
      }
    }
  }, {
    key: "__connectAnimatedView",
    value: function __connectAnimatedView() {
      invariant(this.__isNative, 'Expected node to be marked as "native"');
      var nativeViewTag = ReactNative.findNodeHandle(this._animatedView);
      invariant(nativeViewTag != null, 'Unable to locate attached view in the native tree');
      NativeAnimatedHelper.API.connectAnimatedNodeToView(this.__getNativeTag(), nativeViewTag);
    }
  }, {
    key: "__disconnectAnimatedView",
    value: function __disconnectAnimatedView() {
      invariant(this.__isNative, 'Expected node to be marked as "native"');
      var nativeViewTag = ReactNative.findNodeHandle(this._animatedView);
      invariant(nativeViewTag != null, 'Unable to locate attached view in the native tree');
      NativeAnimatedHelper.API.disconnectAnimatedNodeFromView(this.__getNativeTag(), nativeViewTag);
    }
  }, {
    key: "__restoreDefaultValues",
    value: function __restoreDefaultValues() {
      if (this.__isNative) {
        NativeAnimatedHelper.API.restoreDefaultValues(this.__getNativeTag());
      }
    }
  }, {
    key: "__getNativeConfig",
    value: function __getNativeConfig() {
      var propsConfig = {};

      for (var propKey in this._props) {
        var value = this._props[propKey];

        if (value instanceof AnimatedNode) {
          value.__makeNative();

          propsConfig[propKey] = value.__getNativeTag();
        }
      }

      return {
        type: 'props',
        props: propsConfig
      };
    }
  }]);
  return AnimatedProps;
}(AnimatedNode);

module.exports = AnimatedProps;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,