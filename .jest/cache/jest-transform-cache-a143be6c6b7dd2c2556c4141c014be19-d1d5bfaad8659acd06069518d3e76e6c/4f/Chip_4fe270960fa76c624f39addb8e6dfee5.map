{"version":3,"sources":["Chip.tsx"],"names":["Chip","mode","selected","disabled","closeIconAccessibilityLabel","rest","current","elevation","React","Animated","handlePressIn","scale","theme","toValue","duration","useNativeDriver","handlePressOut","colors","defaultBackgroundColor","dark","backgroundColor","borderRadius","StyleSheet","borderColor","selectedColor","white","black","textColor","iconColor","backgroundColorString","selectedBackgroundColor","underlayColor","accessibilityTraits","accessibilityState","styles","Platform","testID","paddingRight","onClose","avatar","opacity","style","icon","color","marginRight","marginLeft","ellipsizeMode","closeButtonStyle","container","borderWidth","borderStyle","flexDirection","content","alignItems","paddingLeft","position","padding","alignSelf","closeIcon","text","minHeight","lineHeight","textAlignVertical","marginVertical","width","height","avatarWrapper","avatarSelected","top","left","right","justifyContent"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  AccessibilityState,\n  Animated,\n  Platform,\n  StyleProp,\n  StyleSheet,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport color from 'color';\nimport type { IconSource } from './Icon';\nimport Icon from './Icon';\nimport MaterialCommunityIcon from './MaterialCommunityIcon';\nimport Surface from './Surface';\nimport Text from './Typography/Text';\nimport TouchableRipple from './TouchableRipple/TouchableRipple';\nimport { withTheme } from '../core/theming';\nimport { black, white } from '../styles/colors';\nimport type { EllipsizeProp } from '../types';\n\ntype Props = React.ComponentProps<typeof Surface> & {\n  /**\n   * Mode of the chip.\n   * - `flat` - flat chip without outline.\n   * - `outlined` - chip with an outline.\n   */\n  mode?: 'flat' | 'outlined';\n  /**\n   * Text content of the `Chip`.\n   */\n  children: React.ReactNode;\n  /**\n   * Icon to display for the `Chip`. Both icon and avatar cannot be specified.\n   */\n  icon?: IconSource;\n  /**\n   * Avatar to display for the `Chip`. Both icon and avatar cannot be specified.\n   */\n  avatar?: React.ReactNode;\n  /**\n   * Whether chip is selected.\n   */\n  selected?: boolean;\n  /**\n   * Whether to style the chip color as selected.\n   */\n  selectedColor?: string;\n  /**\n   * Whether the chip is disabled. A disabled chip is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Accessibility label for the chip. This is read by the screen reader when the user taps the chip.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Accessibility label for the close icon. This is read by the screen reader when the user taps the close icon.\n   */\n  closeIconAccessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Function to execute on close button press. The close button appears only when this prop is specified.\n   */\n  onClose?: () => void;\n  /**\n   * Style of chip's text\n   */\n  textStyle?: any;\n  style?: StyleProp<ViewStyle>;\n\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Pass down testID from chip props to touchable for Detox tests.\n   */\n  testID?: string;\n  /**\n   * Ellipsize Mode for the children text\n   */\n  ellipsizeMode?: EllipsizeProp;\n};\n\n/**\n * Chips can be used to display entities in small blocks.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/chip-1.png\" />\n *     <figcaption>Flat chip</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/chip-2.png\" />\n *     <figcaption>Outlined chip</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Chip } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Chip icon=\"information\" onPress={() => console.log('Pressed')}>Example Chip</Chip>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Chip = ({\n  mode = 'flat',\n  children,\n  icon,\n  avatar,\n  selected = false,\n  disabled = false,\n  accessibilityLabel,\n  closeIconAccessibilityLabel = 'Close',\n  onPress,\n  onLongPress,\n  onClose,\n  textStyle,\n  style,\n  theme,\n  testID,\n  selectedColor,\n  ellipsizeMode,\n  ...rest\n}: Props) => {\n  const { current: elevation } = React.useRef<Animated.Value>(\n    new Animated.Value(0)\n  );\n\n  const handlePressIn = () => {\n    const { scale } = theme.animation;\n    Animated.timing(elevation, {\n      toValue: 4,\n      duration: 200 * scale,\n      useNativeDriver: true,\n    }).start();\n  };\n\n  const handlePressOut = () => {\n    const { scale } = theme.animation;\n    Animated.timing(elevation, {\n      toValue: 0,\n      duration: 150 * scale,\n      useNativeDriver: true,\n    }).start();\n  };\n\n  const { dark, colors } = theme;\n  const defaultBackgroundColor =\n    mode === 'outlined' ? colors.surface : dark ? '#383838' : '#ebebeb';\n\n  const {\n    backgroundColor = defaultBackgroundColor,\n    borderRadius = 16,\n  } = (StyleSheet.flatten(style) || {}) as ViewStyle;\n\n  const borderColor =\n    mode === 'outlined'\n      ? color(\n          selectedColor !== undefined\n            ? selectedColor\n            : color(dark ? white : black)\n        )\n          .alpha(0.29)\n          .rgb()\n          .string()\n      : backgroundColor;\n  const textColor = disabled\n    ? colors.disabled\n    : color(selectedColor !== undefined ? selectedColor : colors.text)\n        .alpha(0.87)\n        .rgb()\n        .string();\n  const iconColor = disabled\n    ? colors.disabled\n    : color(selectedColor !== undefined ? selectedColor : colors.text)\n        .alpha(0.54)\n        .rgb()\n        .string();\n\n  const backgroundColorString =\n    typeof backgroundColor === 'string'\n      ? backgroundColor\n      : defaultBackgroundColor;\n  const selectedBackgroundColor = (dark\n    ? color(backgroundColorString).lighten(mode === 'outlined' ? 0.2 : 0.4)\n    : color(backgroundColorString).darken(mode === 'outlined' ? 0.08 : 0.2)\n  )\n    .rgb()\n    .string();\n\n  const underlayColor = selectedColor\n    ? color(selectedColor).fade(0.5).rgb().string()\n    : selectedBackgroundColor;\n\n  const accessibilityTraits = ['button'];\n  const accessibilityState: AccessibilityState = {\n    selected,\n    disabled,\n  };\n\n  if (selected) {\n    accessibilityTraits.push('selected');\n  }\n\n  if (disabled) {\n    accessibilityTraits.push('disabled');\n  }\n\n  return (\n    <Surface\n      style={\n        [\n          styles.container,\n          {\n            elevation: Platform.OS === 'android' ? elevation : 0,\n            backgroundColor: selected\n              ? selectedBackgroundColor\n              : backgroundColor,\n            borderColor,\n            borderRadius,\n          },\n          style,\n        ] as StyleProp<ViewStyle>\n      }\n      {...rest}\n    >\n      <TouchableRipple\n        borderless\n        delayPressIn={0}\n        style={{ borderRadius }}\n        onPress={onPress}\n        onLongPress={onLongPress}\n        onPressIn={handlePressIn}\n        onPressOut={handlePressOut}\n        underlayColor={underlayColor}\n        disabled={disabled}\n        accessibilityLabel={accessibilityLabel}\n        // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n        accessibilityTraits={accessibilityTraits}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityState={accessibilityState}\n        testID={testID}\n      >\n        <View style={[styles.content, { paddingRight: onClose ? 32 : 4 }]}>\n          {avatar && !icon ? (\n            <View style={[styles.avatarWrapper, disabled && { opacity: 0.26 }]}>\n              {React.isValidElement(avatar)\n                ? React.cloneElement(avatar, {\n                    style: [styles.avatar, avatar.props.style],\n                  })\n                : avatar}\n            </View>\n          ) : null}\n          {icon || selected ? (\n            <View\n              style={[\n                styles.icon,\n                avatar ? [styles.avatar, styles.avatarSelected] : null,\n              ]}\n            >\n              {icon ? (\n                <Icon\n                  source={icon}\n                  color={avatar ? white : iconColor}\n                  size={18}\n                />\n              ) : (\n                <MaterialCommunityIcon\n                  name=\"check\"\n                  color={avatar ? white : iconColor}\n                  size={18}\n                  direction=\"ltr\"\n                />\n              )}\n            </View>\n          ) : null}\n          <Text\n            selectable={false}\n            numberOfLines={1}\n            style={[\n              styles.text,\n              {\n                ...theme.fonts.regular,\n                color: textColor,\n                marginRight: onClose ? 0 : 8,\n                marginLeft: avatar || icon || selected ? 4 : 8,\n              },\n              textStyle,\n            ]}\n            ellipsizeMode={ellipsizeMode}\n          >\n            {children}\n          </Text>\n        </View>\n      </TouchableRipple>\n      {onClose ? (\n        <View style={styles.closeButtonStyle}>\n          <TouchableWithoutFeedback\n            onPress={onClose}\n            // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n            accessibilityTraits=\"button\"\n            accessibilityComponentType=\"button\"\n            accessibilityRole=\"button\"\n            accessibilityLabel={closeIconAccessibilityLabel}\n          >\n            <View style={[styles.icon, styles.closeIcon]}>\n              <MaterialCommunityIcon\n                name=\"close-circle\"\n                size={16}\n                color={iconColor}\n                direction=\"ltr\"\n              />\n            </View>\n          </TouchableWithoutFeedback>\n        </View>\n      ) : null}\n    </Surface>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    borderWidth: StyleSheet.hairlineWidth,\n    borderStyle: 'solid',\n    flexDirection: 'row',\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingLeft: 4,\n    position: 'relative',\n  },\n  icon: {\n    padding: 4,\n    alignSelf: 'center',\n  },\n  closeIcon: {\n    marginRight: 4,\n  },\n  text: {\n    minHeight: 24,\n    lineHeight: 24,\n    textAlignVertical: 'center',\n    marginVertical: 4,\n  },\n  avatar: {\n    width: 24,\n    height: 24,\n    borderRadius: 12,\n  },\n  avatarWrapper: {\n    marginRight: 4,\n  },\n  avatarSelected: {\n    position: 'absolute',\n    top: 4,\n    left: 4,\n    backgroundColor: 'rgba(0, 0, 0, .29)',\n  },\n  closeButtonStyle: {\n    position: 'absolute',\n    right: 0,\n    height: '100%',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n\nexport default withTheme(Chip);\n"]}