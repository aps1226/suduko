{"version":3,"sources":["C:\\Users\\ashee\\Documents\\Javascript\\React\\React Native\\suduko\\src\\__tests__\\Component Tests\\Home.test.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react';\nimport renderWithRedux from './renderWithRedux';\nimport { createMemoryHistory, createLocation } from 'history';\nimport { match } from 'react-router'; \nimport { act, fireEvent, render, waitFor} from '@testing-library/react-native';\nimport renderer from 'react-test-renderer';\nimport {GameState} from '../../../types';\nimport {RootState} from '../../state/reducers/index';\n\nimport Home from '../../../components/Home';\n\n//Mock props for routing.\nconst history = createMemoryHistory();\nconst path = `/route/:id`;\nconst match: match<{ id: string }> = {\n    isExact: false,\n    path,\n    url: path.replace(':id', '1'),\n    params: { id: \"1\" }\n};\nconst location = createLocation(match.url);\n\n//Home component testing.\ndescribe('Home', () =>{\n  //Mock store object for state management.\n  const mockStore:RootState = {};\n  //Render Home component with routing and redux.\n  let homeComponent:any;\n  beforeEach(() =>{\n    homeComponent = renderWithRedux(\n      <Home\n        history = {history}\n        match = {match}\n        location = {location}\n      />,\n      {\n        initialState: mockStore\n      }\n    );\n  })\n\n  //Home component should match current screenshot.\n  it('renders without crashing', () => {\n    expect(homeComponent.toJSON()).toMatchSnapshot();\n  });\n\n  //Home component should route to the difficulty selection menu when the 'Play New Game' button is selected.\n  it(`routes to difficulty selection menu when pressing 'Play New Game'.`, () => {\n    const {getByTestId} = homeComponent;\n    const newGameButton = getByTestId('newGameButton');\n    const curHistory = history.length;\n    expect(history.length).toBe(curHistory);\n    //Press 'Play New Game' button.\n    fireEvent.press(newGameButton);\n    //History length should increase by 1.\n    expect(history.length).toBe(curHistory + 1);\n    //Location pathname should be 'DifficultySelection'.\n    expect(history.location.pathname).toBe('/DifficultySelection')\n  });\n\n  //Home component should not route to GameDisplay component when pressing 'Load Game' if a game does not exist.\n  it(`does not route to GameDisplay when pressing 'Load Game' if a game does not exist.`, () => {\n    const {getByTestId} = homeComponent;\n    const loadGameButton = getByTestId('loadGameButton');\n    const curHistory = history.length;\n    expect(history.length).toBe(curHistory);\n    //Location pathname should initially be '/DifficultySelection'.\n    expect(history.location.pathname).toBe('/DifficultySelection')\n    //Press 'Load Game Button'.\n    fireEvent.press(loadGameButton);\n    //History length should not change.\n    expect(history.length).toBe(curHistory);\n    //Location pathname should remain as '/DifficultySelection'.\n    expect(history.location.pathname).toBe('/DifficultySelection')\n  });\n\n  //A pop-up prompt should appear when the 'Load Game' button is pressed when no current game exists.\n  it(`prompt appears when attempting to load a game when none exists.`, () => {\n    const {getByTestId} = homeComponent;\n    const loadGameButton = getByTestId('loadGameButton');\n    const loadGamePopUp = getByTestId('loadGamePopUp');\n    //Popup should initially not be visible.\n    expect(loadGamePopUp.props.visible).toBeFalsy();\n    //Press 'Load Game' button.\n    fireEvent.press(loadGameButton);\n    //Popup should no longer be visible.\n    expect(loadGamePopUp.props.visible).toBeTruthy();\n    \n    //Secondary test to ensure that the 'Play New Game' popup does not appear given current state.\n    const newGameButton = getByTestId('newGameButton');\n    const newGamePopUp = getByTestId('newGamePopUp');\n    //Popup should initially not be visible.\n    expect(newGamePopUp.props.visible).toBeFalsy();\n    //Press 'Play New Game' button.\n    fireEvent.press(newGameButton);\n    //Popup should remain not visible.\n    expect(newGamePopUp.props.visible).toBeFalsy();\n  });\n  \n  //Load game prompt should disappear after the screen is pressed.\n  it(`prompt disappears when pressing the screen.`, async ()=>{\n    const {getByTestId} = homeComponent;\n    const loadGameButton = getByTestId('loadGameButton');\n    const loadGamePopUp = getByTestId('loadGamePopUp');\n    const loadGamePopUpHide = getByTestId('loadGamePopUpHide');\n    //Prompt should initially be invisible.\n    expect(loadGamePopUp.props.visible).toBeFalsy();\n    //Press 'Load Game' button.\n    fireEvent.press(loadGameButton);\n    //Prompt should be visible.\n    expect(loadGamePopUp.props.visible).toBeTruthy();\n    //Press screen after prompt appears.\n    fireEvent.press(loadGamePopUpHide);\n    //Wait for component to update after press event.\n    await waitFor(() => {\n      //Prompt should not be visible.\n      expect(getByTestId('loadGamePopUp').props.visible).toBeFalsy();\n    })\n\n    //Update state for the next series of tests.\n    mockStore['gameState'] = {\n      'isCompleted':false,\n      'gameExists':true\n    }\n\n  })\n\n  \n  //Home component should route to GameDisplay component if a current game exists.\n  it(`routes to GameDisplay when pressing 'Load Game' if a game does exist.`, () => {\n    const {getByTestId, store} = homeComponent;\n    const loadGameButton = getByTestId('loadGameButton');\n    const curHistory = history.length;\n    expect(history.length).toBe(curHistory);\n    //Location pathname should initially be 'DifficultySelection'.\n    expect(history.location.pathname).toBe('/DifficultySelection')\n    //Press 'Load Game' button.\n    fireEvent.press(loadGameButton);\n    //History length should increase by 1.\n    expect(history.length).toBe(curHistory + 1);\n    //Location pathname should be 'GameDisplay'.\n    expect(history.location.pathname).toBe('/GameDisplay')\n  });\n  \n  //Home component should not immediately route to DifficultySelection component if a game exists.\n  it(`does not route to difficulty selection menu when pressing 'Play New Game' if a game currently exists.`, () => {\n    const {getByTestId} = homeComponent;\n    const newGameButton = getByTestId('newGameButton');\n    const curHistory = history.length;\n    expect(history.length).toBe(curHistory);\n    //Location pathname should initially be 'GameDisplay'.\n    expect(history.location.pathname).toBe('/GameDisplay')\n    //Press 'Play New Game'.\n    fireEvent.press(newGameButton);\n    //History length should remain the same.\n    expect(history.length).toBe(curHistory);\n    //Location pathname should remain as 'GameDisplay'.\n    expect(history.location.pathname).toBe('/GameDisplay')\n  });\n  \n  //Prompt should appear when attempting to play a new game when one currently exists.\n  it(`prompt appears when attempting to play a new game when one exists.`, () => {\n    const {getByTestId} = homeComponent;\n    const newGameButton = getByTestId('newGameButton');\n    const newGamePopUp = getByTestId('newGamePopUp');\n    //Prompt should initially not be visible.\n    expect(newGamePopUp.props.visible).toBeFalsy();\n    //Press 'Play New Game' button.\n    fireEvent.press(newGameButton);\n    //Prompt should be visible.\n    expect(newGamePopUp.props.visible).toBeTruthy();\n    \n    //Secondary test to ensure that the 'Play New Game' popup does not appear given current state.\n    const loadGameButton = getByTestId('loadGameButton');\n    const loadGamePopUp = getByTestId('loadGamePopUp');\n    //Prompt should initially not be visible.\n    expect(loadGamePopUp.props.visible).toBeFalsy();\n    //Press 'Load Game' button.\n    fireEvent.press(loadGameButton);\n    //Prompt should remain not visible.\n    expect(loadGamePopUp.props.visible).toBeFalsy();\n  });\n\n  //Home component should route to difficulty selection menu when the 'yes' button is selected within the prompt.\n  it(`should route to the difficulty selection menu when the 'yes' button is selected on the 'Play New Game' popup.`, () =>{\n    const {getByTestId} = homeComponent;\n    const newGameButton = getByTestId('newGameButton');\n    const newGamePopUp = getByTestId('newGamePopUp');\n    const yesButton = getByTestId('newGamePopUpYes');\n    const curHistory = history.length;\n    expect(history.length).toBe(curHistory);\n    //Location pathname should initially be 'GameDisplay'.\n    expect(history.location.pathname).toBe('/GameDisplay');\n    //Press 'Play New Game' button.\n    fireEvent.press(newGameButton);\n    //Press 'Yes' button.\n    fireEvent.press(yesButton);\n    //History length should initially be 6.\n    expect(history.length).toBe(curHistory + 1);\n    //Location pathname should be 'DifficultySelection'.\n    expect(history.location.pathname).toBe('/DifficultySelection');\n  })\n\n  //When the 'No' button is selected on the prompt it should disappear\n  //and not route to another component.\n  it(`prompt should disappear and not route to any other component when the 'No' button is selected on the prompt.`, async ()=>{\n    const {getByTestId, findByTestId} = homeComponent;\n    const newGameButton = getByTestId('newGameButton');\n    const newGamePopUp = getByTestId('newGamePopUp');\n    const noButton = getByTestId('newGamePopUpNo');\n    const curHistory = history.length;\n    expect(history.length).toBe(curHistory);\n    //Location pathname should initially be 'DifficultySelection'.\n    expect(history.location.pathname).toBe('/DifficultySelection');\n    //Press 'Play New Game' button.\n    fireEvent.press(newGameButton);\n    //Wait for component to update after press event.\n    //'Play New Game' prompt should be visible.\n    expect(getByTestId('newGamePopUp').props.visible).toBeTruthy();\n    //Press 'No' button.\n    act(()=>{\n      fireEvent.press(noButton);\n    })\n    //Wait for component to update after press event.\n    //'Play New Game' prompt should not be visible.\n    expect(getByTestId('newGamePopUp').props.visible).toBeFalsy();\n    //History length should remain the same.\n    expect(history.length).toBe(curHistory);\n    //Location pathname should initially be 'DifficultySelection'.\n    expect(history.location.pathname).toBe('/DifficultySelection');\n  })\n});\n"]}