bafca1dc5a16d0288154edd9faa54cb1
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _react = _interopRequireDefault(require("react"));

var _renderWithRedux = _interopRequireDefault(require("./renderWithRedux"));

var _history = require("history");

var _reactNative = require("@testing-library/react-native");

var _DifficultySelection = _interopRequireDefault(require("../../../components/DifficultySelection"));

var history = (0, _history.createMemoryHistory)();
var path = "/route/:id";
var match = {
  isExact: false,
  path: path,
  url: path.replace(':id', '1'),
  params: {
    id: '1'
  }
};
var location = (0, _history.createLocation)(match.url);
describe('DifficultySelection', function () {
  var mockStore = {};
  var difficultySelection;
  beforeEach(function _callee() {
    return _regenerator.default.async(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return _regenerator.default.awrap((0, _reactNative.waitFor)(function () {
              difficultySelection = (0, _renderWithRedux.default)(_react.default.createElement(_DifficultySelection.default, {
                history: history,
                location: location,
                match: match
              }), {
                initialState: mockStore
              });
            }));

          case 2:
          case "end":
            return _context.stop();
        }
      }
    }, null, null, null, Promise);
  });
  afterEach(_reactNative.cleanup);
  it('renders without crashing', function _callee2() {
    return _regenerator.default.async(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            expect(difficultySelection.toJSON()).toMatchSnapshot();

          case 1:
          case "end":
            return _context2.stop();
        }
      }
    }, null, null, null, Promise);
  });
  it("correctly initializes board when the easy button is selected", function _callee3() {
    var _difficultySelection, getByTestId, store, easyButton, curHistory;

    return _regenerator.default.async(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _difficultySelection = difficultySelection, getByTestId = _difficultySelection.getByTestId, store = _difficultySelection.store;
            easyButton = getByTestId('easyButton');
            curHistory = history.length;

            _reactNative.fireEvent.press(easyButton);

            _context3.next = 6;
            return _regenerator.default.awrap((0, _reactNative.waitFor)(function () {
              expect(history.length).toBe(curHistory + 1);
              expect(history.location.pathname).toBe('/GameDisplay');
              var boardState = store.getState().board;
              var valueCount = 0;
              boardState.forEach(function (arr) {
                arr.forEach(function (num) {
                  if (num !== null) valueCount += 1;
                });
              });
              console.log('easy:', valueCount);
              expect(valueCount >= 37 && valueCount <= 46).toBeTruthy();
            }));

          case 6:
          case "end":
            return _context3.stop();
        }
      }
    }, null, null, null, Promise);
  });
  it("correctly initializes board when the medium button is selected", function _callee4() {
    var _difficultySelection2, getByTestId, store, mediumButton, curHistory;

    return _regenerator.default.async(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _difficultySelection2 = difficultySelection, getByTestId = _difficultySelection2.getByTestId, store = _difficultySelection2.store;
            mediumButton = getByTestId('mediumButton');
            curHistory = history.length;

            _reactNative.fireEvent.press(mediumButton);

            _context4.next = 6;
            return _regenerator.default.awrap((0, _reactNative.waitFor)(function () {
              expect(history.length).toBe(curHistory + 1);
              expect(history.location.pathname).toBe('/GameDisplay');
              var boardState = store.getState().board;
              var valueCount = 0;
              boardState.forEach(function (arr) {
                arr.forEach(function (num) {
                  if (num !== null) valueCount += 1;
                });
              });
              console.log('medium:', valueCount);
              expect(valueCount >= 27 && valueCount <= 36).toBeTruthy();
            }));

          case 6:
          case "end":
            return _context4.stop();
        }
      }
    }, null, null, null, Promise);
  });
  it("correctly initializes board when the hard button is selected", function _callee5() {
    var _difficultySelection3, getByTestId, store, hardButton, curHistory;

    return _regenerator.default.async(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _difficultySelection3 = difficultySelection, getByTestId = _difficultySelection3.getByTestId, store = _difficultySelection3.store;
            hardButton = getByTestId('hardButton');
            curHistory = history.length;

            _reactNative.fireEvent.press(hardButton);

            _context5.next = 6;
            return _regenerator.default.awrap((0, _reactNative.waitFor)(function () {
              expect(history.length).toBe(curHistory + 1);
              expect(history.location.pathname).toBe('/GameDisplay');
              var boardState = store.getState().board;
              var valueCount = 0;
              boardState.forEach(function (arr) {
                arr.forEach(function (num) {
                  if (num !== null) valueCount += 1;
                });
              });
              console.log('hard:', valueCount);
              expect(valueCount >= 17 && valueCount <= 26).toBeTruthy();
            }));

          case 6:
          case "end":
            return _context5.stop();
        }
      }
    }, null, null, null, Promise);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,