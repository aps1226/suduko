{"version":3,"sources":["CheckboxAndroid.tsx"],"names":["ANIMATION_DURATION","CheckboxAndroid","rest","current","scaleAnim","React","Animated","isFirstRendering","animation","scale","checked","status","toValue","duration","useNativeDriver","indeterminate","checkedColor","theme","uncheckedColor","rippleColor","checkboxColor","borderWidth","inputRange","outputRange","icon","disabled","styles","testID","transform","StyleSheet","borderColor","container","borderRadius","width","height","padding","fillContainer","alignItems","justifyContent","fill","CheckboxAndroidWithTheme"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Animated, View, StyleSheet } from 'react-native';\nimport color from 'color';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport type { $RemoveChildren } from '../../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Status of checkbox.\n   */\n  status: 'checked' | 'unchecked' | 'indeterminate';\n  /**\n   * Whether checkbox is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for unchecked checkbox.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for checkbox.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\n// From https://material.io/design/motion/speed.html#duration\nconst ANIMATION_DURATION = 100;\n\n/**\n * Checkboxes allow the selection of multiple options from a set.\n * This component follows platform guidelines for Android, but can be used\n * on any platform.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/checkbox-enabled.android.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/checkbox-disabled.android.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nconst CheckboxAndroid = ({\n  status,\n  theme,\n  disabled,\n  onPress,\n  testID,\n  ...rest\n}: Props) => {\n  const { current: scaleAnim } = React.useRef<Animated.Value>(\n    new Animated.Value(1)\n  );\n  const isFirstRendering = React.useRef<boolean>(true);\n\n  const {\n    animation: { scale },\n  } = theme;\n\n  React.useEffect(() => {\n    // Do not run animation on very first rendering\n    if (isFirstRendering.current) {\n      isFirstRendering.current = false;\n      return;\n    }\n\n    const checked = status === 'checked';\n\n    Animated.sequence([\n      Animated.timing(scaleAnim, {\n        toValue: 0.85,\n        duration: checked ? ANIMATION_DURATION * scale : 0,\n        useNativeDriver: false,\n      }),\n      Animated.timing(scaleAnim, {\n        toValue: 1,\n        duration: checked\n          ? ANIMATION_DURATION * scale\n          : ANIMATION_DURATION * scale * 1.75,\n        useNativeDriver: false,\n      }),\n    ]).start();\n  }, [status, scaleAnim, scale]);\n\n  const checked = status === 'checked';\n  const indeterminate = status === 'indeterminate';\n  const checkedColor = rest.color || theme.colors.accent;\n  const uncheckedColor =\n    rest.uncheckedColor ||\n    color(theme.colors.text)\n      .alpha(theme.dark ? 0.7 : 0.54)\n      .rgb()\n      .string();\n\n  let rippleColor, checkboxColor;\n\n  if (disabled) {\n    rippleColor = color(theme.colors.text).alpha(0.16).rgb().string();\n    checkboxColor = theme.colors.disabled;\n  } else {\n    rippleColor = color(checkedColor).fade(0.32).rgb().string();\n    checkboxColor = checked ? checkedColor : uncheckedColor;\n  }\n\n  const borderWidth = scaleAnim.interpolate({\n    inputRange: [0.8, 1],\n    outputRange: [7, 0],\n  });\n\n  const icon = indeterminate\n    ? 'minus-box'\n    : checked\n    ? 'checkbox-marked'\n    : 'checkbox-blank-outline';\n\n  return (\n    <TouchableRipple\n      {...rest}\n      borderless\n      rippleColor={rippleColor}\n      onPress={onPress}\n      disabled={disabled}\n      // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n      accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n      accessibilityComponentType=\"button\"\n      accessibilityRole=\"checkbox\"\n      accessibilityState={{ disabled, checked }}\n      accessibilityLiveRegion=\"polite\"\n      style={styles.container}\n      testID={testID}\n    >\n      <Animated.View style={{ transform: [{ scale: scaleAnim }] }}>\n        <MaterialCommunityIcon\n          allowFontScaling={false}\n          name={icon}\n          size={24}\n          color={checkboxColor}\n          direction=\"ltr\"\n        />\n        <View style={[StyleSheet.absoluteFill, styles.fillContainer]}>\n          <Animated.View\n            style={[\n              styles.fill,\n              { borderColor: checkboxColor },\n              { borderWidth },\n            ]}\n          />\n        </View>\n      </Animated.View>\n    </TouchableRipple>\n  );\n};\n\nCheckboxAndroid.displayName = 'Checkbox.Android';\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    width: 36,\n    height: 36,\n    padding: 6,\n  },\n  fillContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  fill: {\n    height: 14,\n    width: 14,\n  },\n});\n\nexport default withTheme(CheckboxAndroid);\n\n// @component-docs ignore-next-line\nconst CheckboxAndroidWithTheme = withTheme(CheckboxAndroid);\n// @component-docs ignore-next-line\nexport { CheckboxAndroidWithTheme as CheckboxAndroid };\n"]}