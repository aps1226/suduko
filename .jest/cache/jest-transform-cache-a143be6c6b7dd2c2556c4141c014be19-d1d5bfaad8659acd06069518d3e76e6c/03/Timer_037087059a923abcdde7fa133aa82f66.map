{"version":3,"sources":["C:\\Users\\ashee\\Documents\\Javascript\\React\\React Native\\suduko\\components\\Timer.tsx"],"names":[],"mappings":";;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;AAKc,SAAU,KAAV,GAAe;AAG3B,qBAA2B,6BAAY,UAAC,KAAD;AAAA,WAAqB,KAArB;AAAA,GAAZ,CAA3B;AAAA,MAAO,SAAP,gBAAO,SAAP;AAAA,MAAkB,KAAlB,gBAAkB,KAAlB;;AACA,MAAO,IAAP,GAA4B,KAA5B,CAAO,IAAP;AAAA,MAAa,WAAb,GAA4B,KAA5B,CAAa,WAAb;AACA,MAAO,WAAP,GAAkC,SAAlC,CAAO,WAAP;AAAA,MAAoB,UAApB,GAAkC,SAAlC,CAAoB,UAApB;AACA,MAAM,QAAQ,GAAG,8BAAjB;;AACA,4BAAqB,+BAAmB,cAAnB,EAAkC,QAAlC,CAArB;AAAA,MAAQ,QAAR,uBAAQ,QAAR;;AAGA,MAAM,QAAQ,GAAG,SAAX,QAAW,GAAY;AAC3B,QAAI,SAAS,GAAU,IAAvB;AACA,QAAM,SAAS,GAAU,IAAI,CAAC,KAAL,CAAW,IAAI,GAAG,KAAlB,CAAzB;AACA,IAAA,SAAS,IAAI,KAAb;AACA,QAAM,SAAS,GAAU,IAAI,CAAC,KAAL,CAAW,SAAS,GAAG,IAAvB,CAAzB;AACA,IAAA,SAAS,IAAI,IAAb;AACA,QAAM,WAAW,GAAU,IAAI,CAAC,KAAL,CAAW,SAAS,GAAG,GAAvB,CAA3B;AACA,IAAA,SAAS,IAAI,GAAb;AACA,QAAM,WAAW,GAAU,IAAI,CAAC,KAAL,CAAW,SAAS,GAAG,EAAvB,CAA3B;AACA,IAAA,SAAS,IAAI,EAAb;AACA,QAAM,WAAW,GAAU,IAAI,CAAC,KAAL,CAAW,SAAS,GAAG,EAAvB,CAA3B;AACA,IAAA,SAAS,IAAI,EAAb;AACA,QAAM,WAAW,GAAU,IAAI,CAAC,KAAL,CAAW,SAAX,CAA3B;AACA,QAAI,OAAO,QAAa,SAAb,GAAyB,SAAzB,SAAsC,WAAtC,GAAoD,WAApD,SAAmE,WAAnE,GAAiF,WAA5F;AACA,WAAO,OAAP;AACD,GAfD;;AAkBA,wBAAU,YAAK;AAEb,QAAG,CAAC,WAAJ,EAAgB;AACd,UAAM,SAAS,GAAG,UAAU,CAAC,YAAK;AAChC,YAAM,OAAO,GAAU,IAAI,GAAG,WAA9B;AACA,YAAM,QAAQ,GAAa;AACzB,kBAAO,OADkB;AAEzB,yBAAc;AAFW,SAA3B;AAIA,QAAA,QAAQ,CAAC,QAAD,CAAR;AACD,OAP2B,EAOzB,IAPyB,CAA5B;AAQA,aAAO;AAAA,eAAM,YAAY,CAAC,SAAD,CAAlB;AAAA,OAAP;AACD;AACF,GAbD,EAaE,CAAC,KAAD,CAbF;AAeA,SACE,eAAA,aAAA,CAAC,iBAAD,EAAK;AAAC,IAAA,KAAK,EAAE,MAAM,CAAC;AAAf,GAAL,EACE,eAAA,aAAA,CAAC,iBAAD,EAAK;AAAC,IAAA,KAAK,EAAE,MAAM,CAAC;AAAf,GAAL,EACG,QAAQ,EADX,CADF,CADF;AAOD;;AAED,IAAM,MAAM,GAAG,wBAAW,MAAX,CAAkB;AAC/B,EAAA,SAAS,EAAE;AACT,IAAA,IAAI,EAAC,CADI;AAET,IAAA,UAAU,EAAE,QAFH;AAGT,IAAA,cAAc,EAAC;AAHN,GADoB;AAM/B,EAAA,IAAI,EAAC;AACH,IAAA,QAAQ,EAAE,EADP;AAEH,IAAA,UAAU,EAAE,EAFT;AAGH,IAAA,UAAU,EAAE,MAHT;AAIH,IAAA,aAAa,EAAE,IAJZ;AAKH,IAAA,KAAK,EAAE;AALJ;AAN0B,CAAlB,CAAf","sourcesContent":["import React,{useEffect} from \"react\";\r\nimport { StyleSheet, Text, View } from \"react-native\";\r\nimport { useSelector, useDispatch } from \"react-redux\"; \r\nimport { bindActionCreators } from \"redux\";\r\nimport * as actionCreators from '../src/state/index';\r\n\r\nimport {IProps,Timer as TimerType} from '../types';\r\nimport {RootState} from '../src/state/reducers/index';\r\n\r\nexport default function Timer() {\r\n\r\n  //Redux state.\r\n  const {gameState, timer} = useSelector((state:RootState) => state);\r\n  const {time, decrementor} = timer;\r\n  const {isCompleted, gameExists} = gameState;\r\n  const dispatch = useDispatch();\r\n  const { setTimer } = bindActionCreators(actionCreators,dispatch);\r\n\r\n  //Method to configure current time display.\r\n  const onRender = ():string =>{\r\n    let remainder:number = time;\r\n    const tensHours:number = Math.floor(time / 36000);\r\n    remainder %= 36000;\r\n    const onesHours:number = Math.floor(remainder / 3600);\r\n    remainder %= 3600;\r\n    const tensMinutes:number = Math.floor(remainder / 600);\r\n    remainder %= 600;\r\n    const onesMinutes:number = Math.floor(remainder / 60);\r\n    remainder %= 60;\r\n    const tensSeconds:number = Math.floor(remainder / 10);\r\n    remainder %= 10;\r\n    const onesSeconds:number = Math.floor(remainder);\r\n    let curTime:string = `${tensHours}${onesHours}:${tensMinutes}${onesMinutes}:${tensSeconds}${onesSeconds}`;\r\n    return curTime;\r\n  }\r\n\r\n  //Update timer state property every second.\r\n  useEffect(() => {\r\n    //Pause timer if game is over.\r\n    if(!isCompleted){\r\n      const countDown = setTimeout(() => {\r\n        const newTime:number = time + decrementor;\r\n        const newTimer:TimerType = {\r\n          'time':newTime,\r\n          'decrementor':1\r\n        }\r\n        setTimer(newTimer);\r\n      }, 1000);\r\n      return () => clearTimeout(countDown);\r\n    }\r\n  },[timer]);\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <Text style={styles.text}>\r\n        {onRender()}\r\n      </Text>\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex:1,\r\n    alignItems: 'center',\r\n    justifyContent:'center'\r\n  },\r\n  text:{\r\n    fontSize: 16,\r\n    lineHeight: 21,\r\n    fontWeight: 'bold',\r\n    letterSpacing: 0.25,\r\n    color: 'white',\r\n  }\r\n});"]}