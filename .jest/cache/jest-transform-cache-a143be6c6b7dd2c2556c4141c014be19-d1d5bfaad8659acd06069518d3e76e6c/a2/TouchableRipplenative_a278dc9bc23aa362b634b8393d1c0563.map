{"version":3,"sources":["TouchableRipple.native.tsx"],"names":["ANDROID_VERSION_LOLLIPOP","ANDROID_VERSION_PIE","TouchableRipple","borderless","disabled","rest","colors","disabledProp","calculatedRippleColor","rippleColor","dark","useForeground","Platform","background","TouchableNativeFeedback","styles","React","underlayColor","overflowHidden","overflow"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  BackgroundPropType,\n  StyleProp,\n  Platform,\n  TouchableHighlight,\n  TouchableNativeFeedback,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n  StyleSheet,\n} from 'react-native';\nimport color from 'color';\nimport { withTheme } from '../../core/theming';\n\nconst ANDROID_VERSION_LOLLIPOP = 21;\nconst ANDROID_VERSION_PIE = 28;\n\ntype Props = React.ComponentProps<typeof TouchableWithoutFeedback> & {\n  borderless?: boolean;\n  background?: BackgroundPropType;\n  disabled?: boolean;\n  onPress?: () => void | null;\n  rippleColor?: string;\n  underlayColor?: string;\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  theme: ReactNativePaper.Theme;\n};\n\nconst TouchableRipple = ({\n  style,\n  background,\n  borderless = false,\n  disabled: disabledProp,\n  rippleColor,\n  underlayColor,\n  children,\n  theme,\n  ...rest\n}: Props) => {\n  const { dark, colors } = theme;\n  const disabled = disabledProp || !rest.onPress;\n  const calculatedRippleColor =\n    rippleColor ||\n    color(colors.text)\n      .alpha(dark ? 0.32 : 0.2)\n      .rgb()\n      .string();\n\n  // A workaround for ripple on Android P is to use useForeground + overflow: 'hidden'\n  // https://github.com/facebook/react-native/issues/6480\n  const useForeground =\n    Platform.OS === 'android' &&\n    Platform.Version >= ANDROID_VERSION_PIE &&\n    borderless;\n\n  if (TouchableRipple.supported) {\n    return (\n      <TouchableNativeFeedback\n        {...rest}\n        disabled={disabled}\n        useForeground={useForeground}\n        background={\n          background != null\n            ? background\n            : TouchableNativeFeedback.Ripple(calculatedRippleColor, borderless)\n        }\n      >\n        <View style={[borderless && styles.overflowHidden, style]}>\n          {React.Children.only(children)}\n        </View>\n      </TouchableNativeFeedback>\n    );\n  }\n\n  return (\n    <TouchableHighlight\n      {...rest}\n      disabled={disabled}\n      style={[borderless && styles.overflowHidden, style]}\n      underlayColor={\n        underlayColor != null\n          ? underlayColor\n          : color(calculatedRippleColor).fade(0.5).rgb().string()\n      }\n    >\n      {React.Children.only(children)}\n    </TouchableHighlight>\n  );\n};\n\nTouchableRipple.supported =\n  Platform.OS === 'android' && Platform.Version >= ANDROID_VERSION_LOLLIPOP;\n\nconst styles = StyleSheet.create({\n  overflowHidden: {\n    overflow: 'hidden',\n  },\n});\n\nexport default withTheme(TouchableRipple);\n"]}