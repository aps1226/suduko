0633cdb10bb285362c06f5dfdab31c7a
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _excluded = ["source", "color", "size", "theme"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.isEqualIcon = exports.isValidIcon = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _settings = require("../core/settings");

var _MaterialCommunityIcon = require("./MaterialCommunityIcon");

var _theming = require("../core/theming");

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var isImageSource = function isImageSource(source) {
  return typeof source === 'object' && source !== null && Object.prototype.hasOwnProperty.call(source, 'uri') && typeof source.uri === 'string' || typeof source === 'number' || _reactNative.Platform.OS === 'web' && typeof source === 'string' && (source.startsWith('data:image') || /\.(bmp|jpg|jpeg|png|gif|svg)$/.test(source));
};

var getIconId = function getIconId(source) {
  if (typeof source === 'object' && source !== null && Object.prototype.hasOwnProperty.call(source, 'uri') && typeof source.uri === 'string') {
    return source.uri;
  }

  return source;
};

var isValidIcon = function isValidIcon(source) {
  return typeof source === 'string' || typeof source === 'function' || isImageSource(source);
};

exports.isValidIcon = isValidIcon;

var isEqualIcon = function isEqualIcon(a, b) {
  return a === b || getIconId(a) === getIconId(b);
};

exports.isEqualIcon = isEqualIcon;

var Icon = function Icon(_ref) {
  var source = _ref.source,
      color = _ref.color,
      size = _ref.size,
      theme = _ref.theme,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var direction = typeof source === 'object' && source.direction && source.source ? source.direction === 'auto' ? _reactNative.I18nManager.isRTL ? 'rtl' : 'ltr' : source.direction : null;
  var s = typeof source === 'object' && source.direction && source.source ? source.source : source;
  var iconColor = color || theme.colors.text;

  if (isImageSource(s)) {
    return React.createElement(_reactNative.Image, _extends({}, rest, {
      source: s,
      style: [{
        transform: [{
          scaleX: direction === 'rtl' ? -1 : 1
        }]
      }, {
        width: size,
        height: size,
        tintColor: color,
        resizeMode: 'contain'
      }]
    }, _MaterialCommunityIcon.accessibilityProps));
  } else if (typeof s === 'string') {
    return React.createElement(_settings.Consumer, null, function (_ref2) {
      var icon = _ref2.icon;
      return icon({
        name: s,
        color: iconColor,
        size: size,
        direction: direction
      });
    });
  } else if (typeof s === 'function') {
    return s({
      color: iconColor,
      size: size,
      direction: direction
    });
  }

  return null;
};

var _default = (0, _theming.withTheme)(Icon);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,