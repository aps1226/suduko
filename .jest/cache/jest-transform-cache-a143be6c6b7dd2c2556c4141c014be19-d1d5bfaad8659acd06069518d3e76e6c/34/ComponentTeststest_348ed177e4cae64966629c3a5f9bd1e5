3c46e054ee77d1de28a260ebc5267356
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _redux = require("redux");

var _reactRedux = require("react-redux");

var _index = _interopRequireDefault(require("../state/reducers/index"));

var _history = require("history");

var _reactNative = require("@testing-library/react-native");

var _Title = _interopRequireDefault(require("../../components/Title"));

var _Home = _interopRequireDefault(require("../../components/Home"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var history = (0, _history.createMemoryHistory)();
var path = "/route/:id";
var match = {
  isExact: false,
  path: path,
  url: path.replace(':id', '1'),
  params: {
    id: "1"
  }
};
var location = (0, _history.createLocation)(match.url);

function renderWithRedux(component) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      initialState = _ref.initialState,
      _ref$store = _ref.store,
      store = _ref$store === void 0 ? (0, _redux.createStore)(_index.default, initialState) : _ref$store;

  return _objectSpread(_objectSpread({}, (0, _reactNative.render)(_react.default.createElement(_reactRedux.Provider, {
    store: store
  }, component))), {}, {
    store: store
  });
}

describe('Home component', function () {
  var mockStore = {};
  var homeComponent;
  beforeEach(function () {
    homeComponent = renderWithRedux(_react.default.createElement(_Home.default, {
      history: history,
      location: location,
      match: match
    }), {
      initialState: mockStore
    });
  });
  it('renders without crashing', function () {
    expect(homeComponent.toJSON()).toMatchSnapshot();
  });
  it("routes to difficulty selection menu when pressing 'Play New Game'.", function () {
    var _homeComponent = homeComponent,
        getByTestId = _homeComponent.getByTestId;
    var newGameButton = getByTestId('newGameButton');
    expect(history.length).toBe(1);

    _reactNative.fireEvent.press(newGameButton);

    expect(history.length).toBe(2);
    expect(history.location.pathname).toBe('/DifficultySelection');
  });
  it("does not route to GameDisplay when pressing 'Load Game' if a game does not exist.", function () {
    var _homeComponent2 = homeComponent,
        getByTestId = _homeComponent2.getByTestId;
    var loadGameButton = getByTestId('loadGameButton');
    expect(history.length).toBe(2);
    expect(history.location.pathname).toBe('/DifficultySelection');

    _reactNative.fireEvent.press(loadGameButton);

    expect(history.length).toBe(2);
    expect(history.location.pathname).toBe('/DifficultySelection');
  });
  it("prompt appears when attempting to load a game when none exists.", function () {
    var _homeComponent3 = homeComponent,
        getByTestId = _homeComponent3.getByTestId;
    var loadGameButton = getByTestId('loadGameButton');
    var loadGamePopUp = getByTestId('loadGamePopUp');
    expect(loadGamePopUp.props.visible).toBeFalsy();

    _reactNative.fireEvent.press(loadGameButton);

    expect(loadGamePopUp.props.visible).toBeTruthy();
    var newGameButton = getByTestId('newGameButton');
    var newGamePopUp = getByTestId('newGamePopUp');
    expect(newGamePopUp.props.visible).toBeFalsy();

    _reactNative.fireEvent.press(newGameButton);

    expect(newGamePopUp.props.visible).toBeFalsy();
  });
  it("prompt disappears when pressing the screen.", function () {
    var _homeComponent4 = homeComponent,
        getByTestId = _homeComponent4.getByTestId;
    var loadGameButton = getByTestId('loadGameButton');
    var loadGamePopUp = getByTestId('loadGamePopUp');
    var loadGamePopUpHide = getByTestId('loadGamePopUpHide');
    expect(loadGamePopUp.props.visible).toBeFalsy();

    _reactNative.fireEvent.press(loadGameButton);

    expect(loadGamePopUp.props.visible).toBeTruthy();

    _reactNative.fireEvent.press(loadGamePopUpHide);

    mockStore['gameState'] = {
      'isCompleted': false,
      'gameExists': true
    };
  });
  it("routes to GameDisplay when pressing 'Load Game' if a game does exist.", function () {
    var _homeComponent5 = homeComponent,
        getByTestId = _homeComponent5.getByTestId;
    var loadGameButton = getByTestId('loadGameButton');
    expect(history.length).toBe(3);
    expect(history.location.pathname).toBe('/DifficultySelection');

    _reactNative.fireEvent.press(loadGameButton);

    expect(history.length).toBe(4);
    expect(history.location.pathname).toBe('/GameDisplay');
  });
  it("does not route to difficulty selection menu when pressing 'Play New Game' if a game currently exists.", function () {
    var _homeComponent6 = homeComponent,
        getByTestId = _homeComponent6.getByTestId;
    var newGameButton = getByTestId('newGameButton');
    expect(history.length).toBe(4);
    expect(history.location.pathname).toBe('/GameDisplay');

    _reactNative.fireEvent.press(newGameButton);

    expect(history.length).toBe(4);
    expect(history.location.pathname).toBe('/GameDisplay');
  });
  it("prompt appears when attempting to play a new game when one exists.", function () {
    var _homeComponent7 = homeComponent,
        getByTestId = _homeComponent7.getByTestId;
    var newGameButton = getByTestId('newGameButton');
    var newGamePopUp = getByTestId('newGamePopUp');
    expect(newGamePopUp.props.visible).toBeFalsy();

    _reactNative.fireEvent.press(newGameButton);

    expect(newGamePopUp.props.visible).toBeTruthy();
    var loadGameButton = getByTestId('loadGameButton');
    var loadGamePopUp = getByTestId('loadGamePopUp');
    expect(loadGamePopUp.props.visible).toBeFalsy();

    _reactNative.fireEvent.press(loadGameButton);

    expect(loadGamePopUp.props.visible).toBeFalsy();
  });
  it("should route to the difficulty selection menu when the 'yes' button is selected on the 'Play New Game' popup.", function () {
    var _homeComponent8 = homeComponent,
        getByTestId = _homeComponent8.getByTestId;
    var newGameButton = getByTestId('newGameButton');
    var newGamePopUp = getByTestId('newGamePopUp');
    var yesButton = getByTestId('newGamePopUpYes');
    expect(history.length).toBe(5);
    expect(history.location.pathname).toBe('/GameDisplay');

    _reactNative.fireEvent.press(newGameButton);

    _reactNative.fireEvent.press(yesButton);

    expect(history.length).toBe(6);
    expect(history.location.pathname).toBe('/DifficultySelection');
  });
  it("prompt should disappear and not route to any other component when the 'No' button is selected on the prompt.", function () {
    var _homeComponent9 = homeComponent,
        getByTestId = _homeComponent9.getByTestId;
    var newGameButton = getByTestId('newGameButton');
    var newGamePopUp = getByTestId('newGamePopUp');
    var noButton = getByTestId('newGamePopUpNo');
    expect(history.length).toBe(6);
    expect(history.location.pathname).toBe('/DifficultySelection');

    _reactNative.fireEvent.press(newGameButton);

    expect(newGamePopUp.props.visible).toBeTruthy();

    _reactNative.fireEvent.press(noButton);

    expect(history.length).toBe(6);
    expect(history.location.pathname).toBe('/DifficultySelection');
  });
});
describe('Title component', function () {
  it('renders without crashing', function () {
    var titleComponent = (0, _reactNative.render)(_react.default.createElement(_Title.default, null)).toJSON();
    expect(titleComponent).toMatchSnapshot();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,