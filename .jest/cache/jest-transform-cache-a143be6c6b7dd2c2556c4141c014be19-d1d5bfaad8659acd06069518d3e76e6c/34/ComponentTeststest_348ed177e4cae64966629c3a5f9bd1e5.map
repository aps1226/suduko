{"version":3,"sources":["C:\\Users\\ashee\\Documents\\Javascript\\React\\React Native\\suduko\\src\\__tests__\\ComponentTests.test.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport reducers from '../state/reducers/index';\nimport { createMemoryHistory, createLocation } from 'history';\nimport { match } from 'react-router'; \nimport { RouteComponentProps, Router } from 'react-router-native';\nimport { fireEvent, render} from '@testing-library/react-native';\nimport renderer from 'react-test-renderer';\n// import { shallow } from 'enzyme'\n// import toJson from 'enzyme-to-json';\nimport {GameState} from '../../types'\nimport {RootState} from '../state/reducers/index'\nimport Title from '../../components/Title';\nimport Home from '../../components/Home';\nimport App from '../../App';\n\n//Mock props for components with routing.\nconst history = createMemoryHistory();\nconst path = `/route/:id`;\nconst match: match<{ id: string }> = {\n    isExact: false,\n    path,\n    url: path.replace(':id', '1'),\n    params: { id: \"1\" }\n};\nconst location = createLocation(match.url);\n\n//Function to provide mockStore for components managed by redux.\nfunction renderWithRedux(\n  component:JSX.Element,\n  //@ts-ignore\n  {initialState,store = createStore(reducers,initialState)} = {}\n){\n  return {\n    ...render(<Provider store = {store}>{component}</Provider>),\n    store\n  }\n}\n\n//Home component testing.\ndescribe('Home component', () =>{\n  //Mock store object for state management.\n  const mockStore:RootState = {};\n\n  let homeComponent:any;\n  beforeEach(() =>{\n    homeComponent = renderWithRedux(\n      <Home\n        history={history}\n        location={location}\n        match={match}\n      />,\n      {\n        initialState:mockStore\n      }\n    );\n  })\n\n  //Home component should match current screenshot.\n  it('renders without crashing', () => {\n    expect(homeComponent.toJSON()).toMatchSnapshot();\n  });\n\n  //Home component should route to the difficulty selection menu when the 'Play New Game' button is selected.\n  it(`routes to difficulty selection menu when pressing 'Play New Game'.`, () => {\n    const {getByTestId} = homeComponent;\n    const newGameButton = getByTestId('newGameButton');\n    //History length should initially be 1.\n    expect(history.length).toBe(1);\n    //Press 'Play New Game' button.\n    fireEvent.press(newGameButton);\n    //History length should be 2.\n    expect(history.length).toBe(2);\n    //Location pathname should be 'DifficultySelection'.\n    expect(history.location.pathname).toBe('/DifficultySelection')\n  });\n\n  //Home component should not route to GameDisplay component when pressing 'Load Game' if a game does not exist.\n  it(`does not route to GameDisplay when pressing 'Load Game' if a game does not exist.`, () => {\n    const {getByTestId} = homeComponent;\n    const loadGameButton = getByTestId('loadGameButton');\n    //History length should initially be 2.\n    expect(history.length).toBe(2);\n    //Location pathname should initially be '/DifficultySelection'.\n    expect(history.location.pathname).toBe('/DifficultySelection')\n    //Press 'Load Game Button'.\n    fireEvent.press(loadGameButton);\n    //History length should remain as 2.\n    expect(history.length).toBe(2);\n    //Location pathname should remain as '/DifficultySelection'.\n    expect(history.location.pathname).toBe('/DifficultySelection')\n  });\n\n  //A pop-up prompt should appear when the 'Load Game' button is pressed when no current game exists.\n  it(`prompt appears when attempting to load a game when none exists.`, () => {\n    const {getByTestId} = homeComponent;\n    const loadGameButton = getByTestId('loadGameButton');\n    const loadGamePopUp = getByTestId('loadGamePopUp');\n    //Popup should initially not be visible.\n    expect(loadGamePopUp.props.visible).toBeFalsy();\n    //Press 'Load Game' button.\n    fireEvent.press(loadGameButton);\n    //Popup should no longer be visible.\n    expect(loadGamePopUp.props.visible).toBeTruthy();\n    \n    //Secondary test to ensure that the 'Play New Game' popup does not appear given current state.\n    const newGameButton = getByTestId('newGameButton');\n    const newGamePopUp = getByTestId('newGamePopUp');\n    //Popup should initially not be visible.\n    expect(newGamePopUp.props.visible).toBeFalsy();\n    //Press 'Play New Game' button.\n    fireEvent.press(newGameButton);\n    //Popup should remain not visible.\n    expect(newGamePopUp.props.visible).toBeFalsy();\n  });\n  \n  //Load game prompt should disappear after the screen is pressed.\n  it(`prompt disappears when pressing the screen.`, ()=>{\n    const {getByTestId} = homeComponent;\n    const loadGameButton = getByTestId('loadGameButton');\n    const loadGamePopUp = getByTestId('loadGamePopUp');\n    const loadGamePopUpHide = getByTestId('loadGamePopUpHide');\n    //Prompt should initially be invisible.\n    expect(loadGamePopUp.props.visible).toBeFalsy();\n    //Press 'Load Game' button.\n    fireEvent.press(loadGameButton);\n    //Prompt should be visible.\n    expect(loadGamePopUp.props.visible).toBeTruthy();\n    //Press screen after prompt appears.\n    fireEvent.press(loadGamePopUpHide);\n    //Prompt should not be visible.\n    \n    //Update state for the next series of tests.\n    mockStore['gameState'] = {\n      'isCompleted':false,\n      'gameExists':true\n    }\n  })\n  \n  //Home component should route to GameDisplay component if a current game exists.\n  it(`routes to GameDisplay when pressing 'Load Game' if a game does exist.`, () => {\n    const {getByTestId} = homeComponent;\n    const loadGameButton = getByTestId('loadGameButton');\n    //History length should initially be 3.\n    expect(history.length).toBe(3);\n    //Location pathname should initially be 'DifficultySelection'.\n    expect(history.location.pathname).toBe('/DifficultySelection')\n    //Press 'Load Game' button.\n    fireEvent.press(loadGameButton);\n    //History length should be 4.\n    expect(history.length).toBe(4);\n    //Location pathname should be 'GameDisplay'.\n    expect(history.location.pathname).toBe('/GameDisplay')\n  });\n  \n  //Home component should not immediately route to DifficultySelection component if a game exists.\n  it(`does not route to difficulty selection menu when pressing 'Play New Game' if a game currently exists.`, () => {\n    const {getByTestId} = homeComponent;\n    const newGameButton = getByTestId('newGameButton');\n    //History length should initially be 4.\n    expect(history.length).toBe(4);\n    //Location pathname should initially be 'GameDisplay'.\n    expect(history.location.pathname).toBe('/GameDisplay')\n    //Press 'Play New Game'.\n    fireEvent.press(newGameButton);\n    //History length remain as 4.\n    expect(history.length).toBe(4);\n    //Location pathname should remain as 'GameDisplay'.\n    expect(history.location.pathname).toBe('/GameDisplay')\n  });\n  \n  //Prompt should appear when attempting to play a new game when one currently exists.\n  it(`prompt appears when attempting to play a new game when one exists.`, () => {\n    const {getByTestId} = homeComponent;\n    const newGameButton = getByTestId('newGameButton');\n    const newGamePopUp = getByTestId('newGamePopUp');\n    //Prompt should initially not be visible.\n    expect(newGamePopUp.props.visible).toBeFalsy();\n    //Press 'Play New Game' button.\n    fireEvent.press(newGameButton);\n    //Prompt should be visible.\n    expect(newGamePopUp.props.visible).toBeTruthy();\n    \n    //Secondary test to ensure that the 'Play New Game' popup does not appear given current state.\n    const loadGameButton = getByTestId('loadGameButton');\n    const loadGamePopUp = getByTestId('loadGamePopUp');\n    //Prompt should initially not be visible.\n    expect(loadGamePopUp.props.visible).toBeFalsy();\n    //Press 'Load Game' button.\n    fireEvent.press(loadGameButton);\n    //Prompt should remain not visible.\n    expect(loadGamePopUp.props.visible).toBeFalsy();\n  });\n\n  it(`should route to the difficulty selection menu when the 'yes' button is selected on the 'Play New Game' popup.`, () =>{\n    const {getByTestId} = homeComponent;\n    const newGameButton = getByTestId('newGameButton');\n    const newGamePopUp = getByTestId('newGamePopUp');\n    const yesButton = getByTestId('newGamePopUpYes');\n    //History length should initially be 5.\n    expect(history.length).toBe(5);\n    //Location pathname should initially be 'GameDisplay'.\n    expect(history.location.pathname).toBe('/GameDisplay');\n    //Press 'Play New Game' button.\n    fireEvent.press(newGameButton);\n    //Press 'Yes' button.\n    fireEvent.press(yesButton);\n    //History length should initially be 6.\n    expect(history.length).toBe(6);\n    //Location pathname should be 'DifficultySelection'.\n    expect(history.location.pathname).toBe('/DifficultySelection');\n  })\n\n  it(`prompt should disappear and not route to any other component when the 'No' button is selected on the prompt.`, ()=>{\n    const {getByTestId} = homeComponent;\n    const newGameButton = getByTestId('newGameButton');\n    const newGamePopUp = getByTestId('newGamePopUp');\n    const noButton = getByTestId('newGamePopUpNo');\n    //History length should initially be 6.\n    expect(history.length).toBe(6);\n    //Location pathname should initially be 'DifficultySelection'.\n    expect(history.location.pathname).toBe('/DifficultySelection');\n    //Press 'Play New Game' button.\n    fireEvent.press(newGameButton);\n    //'Play New Game' prompt should be visible.\n    expect(newGamePopUp.props.visible).toBeTruthy();\n    //Press 'No' button.\n    fireEvent.press(noButton);\n    //History length should initially be 6.\n    expect(history.length).toBe(6);\n    //Location pathname should initially be 'DifficultySelection'.\n    expect(history.location.pathname).toBe('/DifficultySelection');\n  })\n\n});\n\n//Title component tests.\ndescribe('Title component', () =>{\n  it('renders without crashing', () => {\n    const titleComponent = render(<Title/>).toJSON();\n    expect(titleComponent).toMatchSnapshot();\n  });\n});\n"]}