{"version":3,"sources":["../src/AssetSources.ts"],"names":[],"mappings":"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","sourcesContent":["import { Platform } from '@unimodules/core';\nimport path from 'path-browserify';\nimport { PixelRatio } from 'react-native';\nimport URL from 'url-parse';\n\nimport AssetSourceResolver from './AssetSourceResolver';\nimport { manifestBaseUrl, getManifest } from './PlatformUtils';\n\nexport type AssetMetadata = {\n  hash: string;\n  name: string;\n  type: string;\n  width?: number;\n  height?: number;\n  scales: number[];\n  httpServerLocation: string;\n  uri?: string;\n  fileHashes?: string[];\n  fileUris?: string[];\n};\n\nexport type AssetSource = {\n  uri: string;\n  hash: string;\n};\n\n// Fast lookup check if asset map has any overrides in the manifest\nconst assetMapOverride = getManifest().assetMapOverride;\n\n/**\n * Selects the best file for the given asset (ex: choosing the best scale for images) and returns\n * a { uri, hash } pair for the specific asset file.\n *\n * If the asset isn't an image with multiple scales, the first file is selected.\n */\nexport function selectAssetSource(meta: AssetMetadata): AssetSource {\n  // Override with the asset map in manifest if available\n  if (assetMapOverride && assetMapOverride.hasOwnProperty(meta.hash)) {\n    meta = { ...meta, ...assetMapOverride[meta.hash] };\n  }\n\n  // This logic is based on that of AssetSourceResolver, with additional support for file hashes and\n  // explicitly provided URIs\n  const scale = AssetSourceResolver.pickScale(meta.scales, PixelRatio.get());\n  const index = meta.scales.findIndex(s => s === scale);\n  const hash = meta.fileHashes ? meta.fileHashes[index] || meta.fileHashes[0] : meta.hash;\n\n  // Allow asset processors to directly provide the URL to load\n  const uri = meta.fileUris ? meta.fileUris[index] || meta.fileUris[0] : meta.uri;\n  if (uri) {\n    return { uri: resolveUri(uri), hash };\n  }\n\n  // Check if the assetUrl was overridden in the manifest\n  const assetUrlOverride = getManifest().assetUrlOverride;\n  if (assetUrlOverride) {\n    const uri = path.join(assetUrlOverride, hash);\n    return { uri: resolveUri(uri), hash };\n  }\n\n  const fileScale = scale === 1 ? '' : `@${scale}x`;\n  const fileExtension = meta.type ? `.${encodeURIComponent(meta.type)}` : '';\n  const suffix = `/${encodeURIComponent(\n    meta.name\n  )}${fileScale}${fileExtension}?platform=${encodeURIComponent(\n    Platform.OS\n  )}&hash=${encodeURIComponent(meta.hash)}`;\n\n  // For assets with a specified absolute URL, we use the existing origin instead of prepending the\n  // development server or production CDN URL origin\n  if (/^https?:\\/\\//.test(meta.httpServerLocation)) {\n    const uri = meta.httpServerLocation + suffix;\n    return { uri, hash };\n  }\n\n  // For assets during development, we use the development server's URL origin\n  if (getManifest().developer) {\n    const baseUrl = new URL(getManifest().bundleUrl);\n    baseUrl.set('pathname', meta.httpServerLocation + suffix);\n    return { uri: baseUrl.href, hash };\n  }\n\n  // Production CDN URIs are based on each asset file hash\n  return {\n    uri: `https://d1wp6m56sqw74a.cloudfront.net/~assets/${encodeURIComponent(hash)}`,\n    hash,\n  };\n}\n\n/**\n * Resolves the given URI to an absolute URI. If the given URI is already an absolute URI, it is\n * simply returned. Otherwise, if it is a relative URI, it is resolved relative to the manifest's\n * base URI.\n */\nexport function resolveUri(uri: string): string {\n  if (!manifestBaseUrl) {\n    return uri;\n  }\n\n  const { protocol } = new URL(uri);\n  if (protocol !== '') {\n    return uri;\n  }\n\n  const baseUrl = new URL(manifestBaseUrl);\n  const resolvedPath = uri.startsWith('/') ? uri : path.join(baseUrl.pathname, uri);\n  baseUrl.set('pathname', resolvedPath);\n  return baseUrl.href;\n}\n"],"sourceRoot":""}