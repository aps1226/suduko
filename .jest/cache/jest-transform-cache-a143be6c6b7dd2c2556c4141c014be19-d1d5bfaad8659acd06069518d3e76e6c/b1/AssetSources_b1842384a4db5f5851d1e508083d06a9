f82cd789d7fc98a95ff11d1d3b896c72
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.selectAssetSource = selectAssetSource;
exports.resolveUri = resolveUri;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _core = require("@unimodules/core");

var _pathBrowserify = _interopRequireDefault(require("path-browserify"));

var _reactNative = require("react-native");

var _urlParse = _interopRequireDefault(require("url-parse"));

var _AssetSourceResolver = _interopRequireDefault(require("./AssetSourceResolver"));

var _PlatformUtils = require("./PlatformUtils");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var assetMapOverride = (0, _PlatformUtils.getManifest)().assetMapOverride;

function selectAssetSource(meta) {
  if (assetMapOverride && assetMapOverride.hasOwnProperty(meta.hash)) {
    meta = _objectSpread(_objectSpread({}, meta), assetMapOverride[meta.hash]);
  }

  var scale = _AssetSourceResolver.default.pickScale(meta.scales, _reactNative.PixelRatio.get());

  var index = meta.scales.findIndex(function (s) {
    return s === scale;
  });
  var hash = meta.fileHashes ? meta.fileHashes[index] || meta.fileHashes[0] : meta.hash;
  var uri = meta.fileUris ? meta.fileUris[index] || meta.fileUris[0] : meta.uri;

  if (uri) {
    return {
      uri: resolveUri(uri),
      hash: hash
    };
  }

  var assetUrlOverride = (0, _PlatformUtils.getManifest)().assetUrlOverride;

  if (assetUrlOverride) {
    var _uri = _pathBrowserify.default.join(assetUrlOverride, hash);

    return {
      uri: resolveUri(_uri),
      hash: hash
    };
  }

  var fileScale = scale === 1 ? '' : "@" + scale + "x";
  var fileExtension = meta.type ? "." + encodeURIComponent(meta.type) : '';
  var suffix = "/" + encodeURIComponent(meta.name) + fileScale + fileExtension + "?platform=" + encodeURIComponent(_core.Platform.OS) + "&hash=" + encodeURIComponent(meta.hash);

  if (/^https?:\/\//.test(meta.httpServerLocation)) {
    var _uri2 = meta.httpServerLocation + suffix;

    return {
      uri: _uri2,
      hash: hash
    };
  }

  if ((0, _PlatformUtils.getManifest)().developer) {
    var baseUrl = new _urlParse.default((0, _PlatformUtils.getManifest)().bundleUrl);
    baseUrl.set('pathname', meta.httpServerLocation + suffix);
    return {
      uri: baseUrl.href,
      hash: hash
    };
  }

  return {
    uri: "https://d1wp6m56sqw74a.cloudfront.net/~assets/" + encodeURIComponent(hash),
    hash: hash
  };
}

function resolveUri(uri) {
  if (!_PlatformUtils.manifestBaseUrl) {
    return uri;
  }

  var _URL = new _urlParse.default(uri),
      protocol = _URL.protocol;

  if (protocol !== '') {
    return uri;
  }

  var baseUrl = new _urlParse.default(_PlatformUtils.manifestBaseUrl);
  var resolvedPath = uri.startsWith('/') ? uri : _pathBrowserify.default.join(baseUrl.pathname, uri);
  baseUrl.set('pathname', resolvedPath);
  return baseUrl.href;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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ckIsS0FBUDtBQUNEOztBQUdELFNBQU87QUFDTCxJQUFBLEdBQUcscURBQW1ELGtCQUFrQixDQUFDLElBQUQsQ0FEbkU7QUFFTCxJQUFBLElBQUksRUFBSjtBQUZLLEdBQVA7QUFJRDs7QUFPSyxTQUFVLFVBQVYsQ0FBcUIsR0FBckIsRUFBZ0M7QUFDcEMsTUFBSSxDQUFDLDhCQUFMLEVBQXNCO0FBQ3BCLFdBQU8sR0FBUDtBQUNEOztBQUVELGFBQXFCLElBQUksaUJBQUosQ0FBUSxHQUFSLENBQXJCO0FBQUEsTUFBUSxRQUFSLFFBQVEsUUFBUjs7QUFDQSxNQUFJLFFBQVEsS0FBSyxFQUFqQixFQUFxQjtBQUNuQixXQUFPLEdBQVA7QUFDRDs7QUFFRCxNQUFNLE9BQU8sR0FBRyxJQUFJLGlCQUFKLENBQVEsOEJBQVIsQ0FBaEI7QUFDQSxNQUFNLFlBQVksR0FBRyxHQUFHLENBQUMsVUFBSixDQUFlLEdBQWYsSUFBc0IsR0FBdEIsR0FBNEIsd0JBQUssSUFBTCxDQUFVLE9BQU8sQ0FBQyxRQUFsQixFQUE0QixHQUE1QixDQUFqRDtBQUNBLEVBQUEsT0FBTyxDQUFDLEdBQVIsQ0FBWSxVQUFaLEVBQXdCLFlBQXhCO0FBQ0EsU0FBTyxPQUFPLENBQUMsSUFBZjtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGxhdGZvcm0gfSBmcm9tICdAdW5pbW9kdWxlcy9jb3JlJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgtYnJvd3NlcmlmeSc7XG5pbXBvcnQgeyBQaXhlbFJhdGlvIH0gZnJvbSAncmVhY3QtbmF0aXZlJztcbmltcG9ydCBVUkwgZnJvbSAndXJsLXBhcnNlJztcblxuaW1wb3J0IEFzc2V0U291cmNlUmVzb2x2ZXIgZnJvbSAnLi9Bc3NldFNvdXJjZVJlc29sdmVyJztcbmltcG9ydCB7IG1hbmlmZXN0QmFzZVVybCwgZ2V0TWFuaWZlc3QgfSBmcm9tICcuL1BsYXRmb3JtVXRpbHMnO1xuXG5leHBvcnQgdHlwZSBBc3NldE1ldGFkYXRhID0ge1xuICBoYXNoOiBzdHJpbmc7XG4gIG5hbWU6IHN0cmluZztcbiAgdHlwZTogc3RyaW5nO1xuICB3aWR0aD86IG51bWJlcjtcbiAgaGVpZ2h0PzogbnVtYmVyO1xuICBzY2FsZXM6IG51bWJlcltdO1xuICBodHRwU2VydmVyTG9jYXRpb246IHN0cmluZztcbiAgdXJpPzogc3RyaW5nO1xuICBmaWxlSGFzaGVzPzogc3RyaW5nW107XG4gIGZpbGVVcmlzPzogc3RyaW5nW107XG59O1xuXG5leHBvcnQgdHlwZSBBc3NldFNvdXJjZSA9IHtcbiAgdXJpOiBzdHJpbmc7XG4gIGhhc2g6IHN0cmluZztcbn07XG5cbi8vIEZhc3QgbG9va3VwIGNoZWNrIGlmIGFzc2V0IG1hcCBoYXMgYW55IG92ZXJyaWRlcyBpbiB0aGUgbWFuaWZlc3RcbmNvbnN0IGFzc2V0TWFwT3ZlcnJpZGUgPSBnZXRNYW5pZmVzdCgpLmFzc2V0TWFwT3ZlcnJpZGU7XG5cbi8qKlxuICogU2VsZWN0cyB0aGUgYmVzdCBmaWxlIGZvciB0aGUgZ2l2ZW4gYXNzZXQgKGV4OiBjaG9vc2luZyB0aGUgYmVzdCBzY2FsZSBmb3IgaW1hZ2VzKSBhbmQgcmV0dXJuc1xuICogYSB7IHVyaSwgaGFzaCB9IHBhaXIgZm9yIHRoZSBzcGVjaWZpYyBhc3NldCBmaWxlLlxuICpcbiAqIElmIHRoZSBhc3NldCBpc24ndCBhbiBpbWFnZSB3aXRoIG11bHRpcGxlIHNjYWxlcywgdGhlIGZpcnN0IGZpbGUgaXMgc2VsZWN0ZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZWxlY3RBc3NldFNvdXJjZShtZXRhOiBBc3NldE1ldGFkYXRhKTogQXNzZXRTb3VyY2Uge1xuICAvLyBPdmVycmlkZSB3aXRoIHRoZSBhc3NldCBtYXAgaW4gbWFuaWZlc3QgaWYgYXZhaWxhYmxlXG4gIGlmIChhc3NldE1hcE92ZXJyaWRlICYmIGFzc2V0TWFwT3ZlcnJpZGUuaGFzT3duUHJvcGVydHkobWV0YS5oYXNoKSkge1xuICAgIG1ldGEgPSB7IC4uLm1ldGEsIC4uLmFzc2V0TWFwT3ZlcnJpZGVbbWV0YS5oYXNoXSB9O1xuICB9XG5cbiAgLy8gVGhpcyBsb2dpYyBpcyBiYXNlZCBvbiB0aGF0IG9mIEFzc2V0U291cmNlUmVzb2x2ZXIsIHdpdGggYWRkaXRpb25hbCBzdXBwb3J0IGZvciBmaWxlIGhhc2hlcyBhbmRcbiAgLy8gZXhwbGljaXRseSBwcm92aWRlZCBVUklzXG4gIGNvbnN0IHNjYWxlID0gQXNzZXRTb3VyY2VSZXNvbHZlci5waWNrU2NhbGUobWV0YS5zY2FsZXMsIFBpeGVsUmF0aW8uZ2V0KCkpO1xuICBjb25zdCBpbmRleCA9IG1ldGEuc2NhbGVzLmZpbmRJbmRleChzID0+IHMgPT09IHNjYWxlKTtcbiAgY29uc3QgaGFzaCA9IG1ldGEuZmlsZUhhc2hlcyA/IG1ldGEuZmlsZUhhc2hlc1tpbmRleF0gfHwgbWV0YS5maWxlSGFzaGVzWzBdIDogbWV0YS5oYXNoO1xuXG4gIC8vIEFsbG93IGFzc2V0IHByb2Nlc3NvcnMgdG8gZGlyZWN0bHkgcHJvdmlkZSB0aGUgVVJMIHRvIGxvYWRcbiAgY29uc3QgdXJpID0gbWV0YS5maWxlVXJpcyA/IG1ldGEuZmlsZVVyaXNbaW5kZXhdIHx8IG1ldGEuZmlsZVVyaXNbMF0gOiBtZXRhLnVyaTtcbiAgaWYgKHVyaSkge1xuICAgIHJldHVybiB7IHVyaTogcmVzb2x2ZVVyaSh1cmkpLCBoYXNoIH07XG4gIH1cblxuICAvLyBDaGVjayBpZiB0aGUgYXNzZXRVcmwgd2FzIG92ZXJyaWRkZW4gaW4gdGhlIG1hbmlmZXN0XG4gIGNvbnN0IGFzc2V0VXJsT3ZlcnJpZGUgPSBnZXRNYW5pZmVzdCgpLmFzc2V0VXJsT3ZlcnJpZGU7XG4gIGlmIChhc3NldFVybE92ZXJyaWRlKSB7XG4gICAgY29uc3QgdXJpID0gcGF0aC5qb2luKGFzc2V0VXJsT3ZlcnJpZGUsIGhhc2gpO1xuICAgIHJldHVybiB7IHVyaTogcmVzb2x2ZVVyaSh1cmkpLCBoYXNoIH07XG4gIH1cblxuICBjb25zdCBmaWxlU2NhbGUgPSBzY2FsZSA9PT0gMSA/ICcnIDogYEAke3NjYWxlfXhgO1xuICBjb25zdCBmaWxlRXh0ZW5zaW9uID0gbWV0YS50eXBlID8gYC4ke2VuY29kZVVSSUNvbXBvbmVudChtZXRhLnR5cGUpfWAgOiAnJztcbiAgY29uc3Qgc3VmZml4ID0gYC8ke2VuY29kZVVSSUNvbXBvbmVudChcbiAgICBtZXRhLm5hbWVcbiAgKX0ke2ZpbGVTY2FsZX0ke2ZpbGVFeHRlbnNpb259P3BsYXRmb3JtPSR7ZW5jb2RlVVJJQ29tcG9uZW50KFxuICAgIFBsYXRmb3JtLk9TXG4gICl9Jmhhc2g9JHtlbmNvZGVVUklDb21wb25lbnQobWV0YS5oYXNoKX1gO1xuXG4gIC8vIEZvciBhc3NldHMgd2l0aCBhIHNwZWNpZmllZCBhYnNvbHV0ZSBVUkwsIHdlIHVzZSB0aGUgZXhpc3Rpbmcgb3JpZ2luIGluc3RlYWQgb2YgcHJlcGVuZGluZyB0aGVcbiAgLy8gZGV2ZWxvcG1lbnQgc2VydmVyIG9yIHByb2R1Y3Rpb24gQ0ROIFVSTCBvcmlnaW5cbiAgaWYgKC9eaHR0cHM/OlxcL1xcLy8udGVzdChtZXRhLmh0dHBTZXJ2ZXJMb2NhdGlvbikpIHtcbiAgICBjb25zdCB1cmkgPSBtZXRhLmh0dHBTZXJ2ZXJMb2NhdGlvbiArIHN1ZmZpeDtcbiAgICByZXR1cm4geyB1cmksIGhhc2ggfTtcbiAgfVxuXG4gIC8vIEZvciBhc3NldHMgZHVyaW5nIGRldmVsb3BtZW50LCB3ZSB1c2UgdGhlIGRldmVsb3BtZW50IHNlcnZlcidzIFVSTCBvcmlnaW5cbiAgaWYgKGdldE1hbmlmZXN0KCkuZGV2ZWxvcGVyKSB7XG4gICAgY29uc3QgYmFzZVVybCA9IG5ldyBVUkwoZ2V0TWFuaWZlc3QoKS5idW5kbGVVcmwpO1xuICAgIGJhc2VVcmwuc2V0KCdwYXRobmFtZScsIG1ldGEuaHR0cFNlcnZlckxvY2F0aW9uICsgc3VmZml4KTtcbiAgICByZXR1cm4geyB1cmk6IGJhc2VVcmwuaHJlZiwgaGFzaCB9O1xuICB9XG5cbiAgLy8gUHJvZHVjdGlvbiBDRE4gVVJJcyBhcmUgYmFzZWQgb24gZWFjaCBhc3NldCBmaWxlIGhhc2hcbiAgcmV0dXJuIHtcbiAgICB1cmk6IGBodHRwczovL2Qxd3A2bTU2c3F3NzRhLmNsb3VkZnJvbnQubmV0L35hc3NldHMvJHtlbmNvZGVVUklDb21wb25lbnQoaGFzaCl9YCxcbiAgICBoYXNoLFxuICB9O1xufVxuXG4vKipcbiAqIFJlc29sdmVzIHRoZSBnaXZlbiBVUkkgdG8gYW4gYWJzb2x1dGUgVVJJLiBJZiB0aGUgZ2l2ZW4gVVJJIGlzIGFscmVhZHkgYW4gYWJzb2x1dGUgVVJJLCBpdCBpc1xuICogc2ltcGx5IHJldHVybmVkLiBPdGhlcndpc2UsIGlmIGl0IGlzIGEgcmVsYXRpdmUgVVJJLCBpdCBpcyByZXNvbHZlZCByZWxhdGl2ZSB0byB0aGUgbWFuaWZlc3Qnc1xuICogYmFzZSBVUkkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZXNvbHZlVXJpKHVyaTogc3RyaW5nKTogc3RyaW5nIHtcbiAgaWYgKCFtYW5pZmVzdEJhc2VVcmwpIHtcbiAgICByZXR1cm4gdXJpO1xuICB9XG5cbiAgY29uc3QgeyBwcm90b2NvbCB9ID0gbmV3IFVSTCh1cmkpO1xuICBpZiAocHJvdG9jb2wgIT09ICcnKSB7XG4gICAgcmV0dXJuIHVyaTtcbiAgfVxuXG4gIGNvbnN0IGJhc2VVcmwgPSBuZXcgVVJMKG1hbmlmZXN0QmFzZVVybCk7XG4gIGNvbnN0IHJlc29sdmVkUGF0aCA9IHVyaS5zdGFydHNXaXRoKCcvJykgPyB1cmkgOiBwYXRoLmpvaW4oYmFzZVVybC5wYXRobmFtZSwgdXJpKTtcbiAgYmFzZVVybC5zZXQoJ3BhdGhuYW1lJywgcmVzb2x2ZWRQYXRoKTtcbiAgcmV0dXJuIGJhc2VVcmwuaHJlZjtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=