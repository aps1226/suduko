d819b8c18ccfb17917dc21b630d3baea
"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });Object.defineProperty(exports, "AppOwnership", { enumerable: true, get: function get() {return _Constants.AppOwnership;} });Object.defineProperty(exports, "ExecutionEnvironment", { enumerable: true, get: function get() {return _Constants.ExecutionEnvironment;} });Object.defineProperty(exports, "UserInterfaceIdiom", { enumerable: true, get: function get() {return _Constants.UserInterfaceIdiom;} });exports.default = void 0;var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));var _core = require("@unimodules/core");
var _reactNative = require("react-native");
var _Constants = require("./Constants.types");
var _ExponentConstants = _interopRequireDefault(require("./ExponentConstants"));function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) {symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});}keys.push.apply(keys, symbols);}return keys;}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(Object(source), true).forEach(function (key) {(0, _defineProperty2.default)(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(Object(source)).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}

if (!_ExponentConstants.default) {
  console.warn("No native ExponentConstants module found, are you sure the expo-constants's module is linked properly?");
}
var rawManifest = null;

if (_core.NativeModulesProxy.ExpoUpdates) {
  var updatesManifest;
  if (_core.NativeModulesProxy.ExpoUpdates.manifest) {
    updatesManifest = _core.NativeModulesProxy.ExpoUpdates.manifest;
  } else
  if (_core.NativeModulesProxy.ExpoUpdates.manifestString) {
    updatesManifest = JSON.parse(_core.NativeModulesProxy.ExpoUpdates.manifestString);
  }
  if (updatesManifest && Object.keys(updatesManifest).length > 0) {
    rawManifest = updatesManifest;
  }
}

if (_reactNative.NativeModules.EXDevLauncher) {
  var devLauncherManifest;
  if (_reactNative.NativeModules.EXDevLauncher.manifestString) {
    devLauncherManifest = JSON.parse(_reactNative.NativeModules.EXDevLauncher.manifestString);
  }
  if (devLauncherManifest && Object.keys(devLauncherManifest).length > 0) {
    rawManifest = devLauncherManifest;
  }
}

if (!rawManifest && _ExponentConstants.default && _ExponentConstants.default.manifest) {
  rawManifest = _ExponentConstants.default.manifest;

  if (typeof rawManifest === 'string') {
    rawManifest = JSON.parse(rawManifest);
  }
}
var _ref = _ExponentConstants.default || {},name = _ref.name,appOwnership = _ref.appOwnership,nativeConstants = (0, _objectWithoutProperties2.default)(_ref, ["name", "appOwnership"]);
var warnedAboutInstallationId = false;
var warnedAboutDeviceId = false;
var warnedAboutLinkingUrl = false;
var constants = _objectSpread(_objectSpread({},
nativeConstants), {}, {

  appOwnership: appOwnership != null ? appOwnership : null,

  get installationId() {
    if (!warnedAboutInstallationId) {
      console.warn("Constants.installationId has been deprecated in favor of generating and storing your own ID. Implement it using expo-application's androidId on Android and a storage API such as expo-secure-store on iOS and localStorage on the web. This API will be removed in SDK 44.");
      warnedAboutInstallationId = true;
    }
    return nativeConstants.installationId;
  },

  get deviceId() {
    if (!warnedAboutDeviceId) {
      console.warn("Constants.deviceId has been deprecated in favor of generating and storing your own ID. This API will be removed in SDK 44.");
      warnedAboutDeviceId = true;
    }
    return nativeConstants.installationId;
  },
  get linkingUrl() {
    if (!warnedAboutLinkingUrl) {
      console.warn("Constants.linkingUrl has been renamed to Constants.linkingUri. Consider using the Linking API directly. Constants.linkingUrl will be removed in SDK 44.");
      warnedAboutLinkingUrl = true;
    }
    return nativeConstants.linkingUri;
  },
  get manifest() {
    var maybeManifest = getManifest();
    if (!maybeManifest || !isAppManifest(maybeManifest)) {
      return null;
    }
    return maybeManifest;
  },
  get manifest2() {
    var maybeManifest = getManifest();
    if (!maybeManifest || !isManifest(maybeManifest)) {
      return null;
    }
    return maybeManifest;
  },






  get __unsafeNoWarnManifest() {
    return getManifest(true);
  },
  get __rawManifest_TEST() {
    return rawManifest;
  },
  set __rawManifest_TEST(value) {
    rawManifest = value;
  } });

function isAppManifest(manifest) {
  return !isManifest(manifest);
}
function isManifest(manifest) {
  return 'metadata' in manifest;
}
function getManifest() {var suppressWarning = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  if (!rawManifest) {
    var invalidManifestType = rawManifest === null ? 'null' : 'undefined';
    if (nativeConstants.executionEnvironment === _Constants.ExecutionEnvironment.Bare &&
    _reactNative.Platform.OS !== 'web') {
      if (!suppressWarning) {
        console.warn("Constants.manifest is " + invalidManifestType + " because the embedded app.config could not be read. Ensure that you have installed the expo-constants build scripts if you need to read from Constants.manifest.");
      }
    } else
    if (nativeConstants.executionEnvironment === _Constants.ExecutionEnvironment.StoreClient ||
    nativeConstants.executionEnvironment === _Constants.ExecutionEnvironment.Standalone) {


      throw new _core.CodedError('ERR_CONSTANTS_MANIFEST_UNAVAILABLE', "Constants.manifest is " + invalidManifestType + ", must be an object.");
    }
  }
  return rawManifest;
}var _default =
constants;exports.default = _default;