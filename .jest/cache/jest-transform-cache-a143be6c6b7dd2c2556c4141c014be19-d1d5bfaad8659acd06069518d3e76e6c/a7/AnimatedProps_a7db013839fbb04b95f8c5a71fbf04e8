d7f62fc6a64174dc1dcc9117b686abb3










'use strict';function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) {symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});}keys.push.apply(keys, symbols);}return keys;}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(Object(source), true).forEach(function (key) {require("@babel/runtime/helpers/defineProperty")(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(Object(source)).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}function _createSuper(Derived) {var hasNativeReflectConstruct = _isNativeReflectConstruct();return function _createSuperInternal() {var Super = require("@babel/runtime/helpers/getPrototypeOf")(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = require("@babel/runtime/helpers/getPrototypeOf")(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return require("@babel/runtime/helpers/possibleConstructorReturn")(this, result);};}function _isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}var









AnimatedProps = function (_AnimatedNode) {require("@babel/runtime/helpers/inherits")(AnimatedProps, _AnimatedNode);var _super = _createSuper(AnimatedProps);




  function AnimatedProps(props, callback) {var _this;require("@babel/runtime/helpers/classCallCheck")(this, AnimatedProps);
    _this = _super.call(this);
    if (props.style) {
      props = _objectSpread(_objectSpread({},
      props), {}, {
        style: new (require("./AnimatedStyle"))(props.style) });

    }
    _this._props = props;
    _this._callback = callback;
    _this.__attach();return _this;
  }require("@babel/runtime/helpers/createClass")(AnimatedProps, [{ key: "__getValue", value:

    function __getValue() {
      var props = {};
      for (var key in this._props) {
        var value = this._props[key];
        if (value instanceof require("./AnimatedNode")) {
          if (!value.__isNative || value instanceof require("./AnimatedStyle")) {


            props[key] = value.__getValue();
          }
        } else if (value instanceof require("../AnimatedEvent").AnimatedEvent) {
          props[key] = value.__getHandler();
        } else {
          props[key] = value;
        }
      }
      return props;
    } }, { key: "__getAnimatedValue", value:

    function __getAnimatedValue() {
      var props = {};
      for (var key in this._props) {
        var value = this._props[key];
        if (value instanceof require("./AnimatedNode")) {
          props[key] = value.__getAnimatedValue();
        }
      }
      return props;
    } }, { key: "__attach", value:

    function __attach() {
      for (var key in this._props) {
        var value = this._props[key];
        if (value instanceof require("./AnimatedNode")) {
          value.__addChild(this);
        }
      }
    } }, { key: "__detach", value:

    function __detach() {
      if (this.__isNative && this._animatedView) {
        this.__disconnectAnimatedView();
      }
      for (var key in this._props) {
        var value = this._props[key];
        if (value instanceof require("./AnimatedNode")) {
          value.__removeChild(this);
        }
      }
      require("@babel/runtime/helpers/get")(require("@babel/runtime/helpers/getPrototypeOf")(AnimatedProps.prototype), "__detach", this).call(this);
    } }, { key: "update", value:

    function update() {
      this._callback();
    } }, { key: "__makeNative", value:

    function __makeNative() {
      if (!this.__isNative) {
        this.__isNative = true;
        for (var key in this._props) {
          var value = this._props[key];
          if (value instanceof require("./AnimatedNode")) {
            value.__makeNative();
          }
        }
        if (this._animatedView) {
          this.__connectAnimatedView();
        }
      }
    } }, { key: "setNativeView", value:

    function setNativeView(animatedView) {
      if (this._animatedView === animatedView) {
        return;
      }
      this._animatedView = animatedView;
      if (this.__isNative) {
        this.__connectAnimatedView();
      }
    } }, { key: "__connectAnimatedView", value:

    function __connectAnimatedView() {
      require('invariant')(this.__isNative, 'Expected node to be marked as "native"');
      var nativeViewTag = require("../../../Renderer/shims/ReactNative").findNodeHandle(
      this._animatedView);

      require('invariant')(
      nativeViewTag != null,
      'Unable to locate attached view in the native tree');

      require("../NativeAnimatedHelper").API.connectAnimatedNodeToView(
      this.__getNativeTag(),
      nativeViewTag);

    } }, { key: "__disconnectAnimatedView", value:

    function __disconnectAnimatedView() {
      require('invariant')(this.__isNative, 'Expected node to be marked as "native"');
      var nativeViewTag = require("../../../Renderer/shims/ReactNative").findNodeHandle(
      this._animatedView);

      require('invariant')(
      nativeViewTag != null,
      'Unable to locate attached view in the native tree');

      require("../NativeAnimatedHelper").API.disconnectAnimatedNodeFromView(
      this.__getNativeTag(),
      nativeViewTag);

    } }, { key: "__restoreDefaultValues", value:

    function __restoreDefaultValues() {




      if (this.__isNative) {
        require("../NativeAnimatedHelper").API.restoreDefaultValues(this.__getNativeTag());
      }
    } }, { key: "__getNativeConfig", value:

    function __getNativeConfig() {
      var propsConfig = {};
      for (var propKey in this._props) {
        var value = this._props[propKey];
        if (value instanceof require("./AnimatedNode")) {
          value.__makeNative();
          propsConfig[propKey] = value.__getNativeTag();
        }
      }
      return {
        type: 'props',
        props: propsConfig };

    } }]);return AnimatedProps;}(require("./AnimatedNode"));


module.exports = AnimatedProps;