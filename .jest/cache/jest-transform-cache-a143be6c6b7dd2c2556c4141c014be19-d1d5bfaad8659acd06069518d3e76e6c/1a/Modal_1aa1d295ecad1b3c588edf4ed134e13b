7a5eb9b14aa19f2a90cb8f5e0a84a47e
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty3 = _interopRequireDefault2(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault2(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault2(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault2(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault2(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault2(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault2(require("@babel/runtime/helpers/getPrototypeOf"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty3.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _reactNativeIphoneXHelper = require("react-native-iphone-x-helper");

var _Surface = _interopRequireDefault(require("./Surface"));

var _theming = require("../core/theming");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var DEFAULT_DURATION = 220;
var TOP_INSET = (0, _reactNativeIphoneXHelper.getStatusBarHeight)(true);
var BOTTOM_INSET = (0, _reactNativeIphoneXHelper.getBottomSpace)();

var Modal = function (_React$Component) {
  (0, _inherits2.default)(Modal, _React$Component);

  var _super = _createSuper(Modal);

  function Modal() {
    var _this;

    (0, _classCallCheck2.default)(this, Modal);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty((0, _assertThisInitialized2.default)(_this), "state", {
      opacity: new _reactNative.Animated.Value(_this.props.visible ? 1 : 0),
      rendered: _this.props.visible
    });

    _defineProperty((0, _assertThisInitialized2.default)(_this), "handleBack", function () {
      if (_this.props.dismissable) {
        _this.hideModal();
      }

      return true;
    });

    _defineProperty((0, _assertThisInitialized2.default)(_this), "showModal", function () {
      _reactNative.BackHandler.removeEventListener('hardwareBackPress', _this.handleBack);

      _reactNative.BackHandler.addEventListener('hardwareBackPress', _this.handleBack);

      var opacity = _this.state.opacity;
      var scale = _this.props.theme.animation.scale;

      _reactNative.Animated.timing(opacity, {
        toValue: 1,
        duration: scale * DEFAULT_DURATION,
        easing: _reactNative.Easing.out(_reactNative.Easing.cubic),
        useNativeDriver: true
      }).start();
    });

    _defineProperty((0, _assertThisInitialized2.default)(_this), "hideModal", function () {
      _reactNative.BackHandler.removeEventListener('hardwareBackPress', _this.handleBack);

      var opacity = _this.state.opacity;
      var scale = _this.props.theme.animation.scale;

      _reactNative.Animated.timing(opacity, {
        toValue: 0,
        duration: scale * DEFAULT_DURATION,
        easing: _reactNative.Easing.out(_reactNative.Easing.cubic),
        useNativeDriver: true
      }).start(function (_ref) {
        var finished = _ref.finished;

        if (!finished) {
          return;
        }

        if (_this.props.visible && _this.props.onDismiss) {
          _this.props.onDismiss();
        }

        if (_this.props.visible) {
          _this.showModal();
        } else {
          _this.setState({
            rendered: false
          });
        }
      });
    });

    return _this;
  }

  (0, _createClass2.default)(Modal, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (prevProps.visible !== this.props.visible) {
        if (this.props.visible) {
          this.showModal();
        } else {
          this.hideModal();
        }
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      _reactNative.BackHandler.removeEventListener('hardwareBackPress', this.handleBack);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$state = this.state,
          rendered = _this$state.rendered,
          opacity = _this$state.opacity;
      if (!rendered) return null;
      var _this$props = this.props,
          children = _this$props.children,
          dismissable = _this$props.dismissable,
          style = _this$props.style,
          theme = _this$props.theme,
          contentContainerStyle = _this$props.contentContainerStyle,
          overlayAccessibilityLabel = _this$props.overlayAccessibilityLabel;
      var colors = theme.colors;
      return React.createElement(_reactNative.Animated.View, {
        pointerEvents: this.props.visible ? 'auto' : 'none',
        accessibilityViewIsModal: true,
        accessibilityLiveRegion: "polite",
        style: _reactNative.StyleSheet.absoluteFill,
        onAccessibilityEscape: this.hideModal
      }, React.createElement(_reactNative.TouchableWithoutFeedback, {
        accessibilityLabel: overlayAccessibilityLabel,
        accessibilityRole: "button",
        disabled: !dismissable,
        onPress: dismissable ? this.hideModal : undefined,
        importantForAccessibility: "no"
      }, React.createElement(_reactNative.Animated.View, {
        style: [styles.backdrop, {
          backgroundColor: colors.backdrop,
          opacity: opacity
        }]
      })), React.createElement(_reactNative.View, {
        style: [styles.wrapper, {
          marginTop: TOP_INSET,
          marginBottom: BOTTOM_INSET
        }, style],
        pointerEvents: "box-none"
      }, React.createElement(_Surface.default, {
        style: [{
          opacity: opacity
        }, styles.content, contentContainerStyle]
      }, children)));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps, prevState) {
      if (nextProps.visible && !prevState.rendered) {
        return {
          rendered: true
        };
      }

      return null;
    }
  }]);
  return Modal;
}(React.Component);

_defineProperty(Modal, "defaultProps", {
  dismissable: true,
  visible: false,
  overlayAccessibilityLabel: 'Close modal'
});

var _default = (0, _theming.withTheme)(Modal);

exports.default = _default;

var styles = _reactNative.StyleSheet.create({
  backdrop: {
    flex: 1
  },
  wrapper: _objectSpread(_objectSpread({}, _reactNative.StyleSheet.absoluteFillObject), {}, {
    justifyContent: 'center'
  }),
  content: {
    backgroundColor: 'transparent',
    justifyContent: 'center'
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,