{"version":3,"sources":["Modal.tsx"],"names":["DEFAULT_DURATION","TOP_INSET","BOTTOM_INSET","Modal","React","dismissable","visible","overlayAccessibilityLabel","nextProps","prevState","rendered","opacity","Animated","componentDidUpdate","prevProps","BackHandler","scale","toValue","duration","easing","Easing","useNativeDriver","finished","componentWillUnmount","render","colors","StyleSheet","hideModal","styles","backgroundColor","marginTop","marginBottom","backdrop","flex","wrapper","justifyContent","content"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  BackHandler,\n  Easing,\n  StyleProp,\n  StyleSheet,\n  TouchableWithoutFeedback,\n  ViewStyle,\n  View,\n} from 'react-native';\nimport {\n  getStatusBarHeight,\n  getBottomSpace,\n} from 'react-native-iphone-x-helper';\nimport Surface from './Surface';\nimport { withTheme } from '../core/theming';\n\ntype Props = {\n  /**\n   * Determines whether clicking outside the modal dismiss it.\n   */\n  dismissable?: boolean;\n  /**\n   * Callback that is called when the user dismisses the modal.\n   */\n  onDismiss?: () => void;\n  /**\n   * Accessibility label for the overlay. This is read by the screen reader when the user taps outside the modal.\n   */\n  overlayAccessibilityLabel?: string;\n  /**\n   * Determines Whether the modal is visible.\n   */\n  visible: boolean;\n  /**\n   * Content of the `Modal`.\n   */\n  children: React.ReactNode;\n  /**\n   * Style for the content of the modal\n   */\n  contentContainerStyle?: StyleProp<ViewStyle>;\n  /**\n   * Style for the wrapper of the modal.\n   * Use this prop to change the default wrapper style or to override safe area insets with marginTop and marginBottom.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\ntype State = {\n  opacity: Animated.Value;\n  rendered: boolean;\n};\n\nconst DEFAULT_DURATION = 220;\nconst TOP_INSET = getStatusBarHeight(true);\nconst BOTTOM_INSET = getBottomSpace();\n\n/**\n * The Modal component is a simple way to present content above an enclosing view.\n * To render the `Modal` above other components, you'll need to wrap it with the [`Portal`](portal.html) component.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/modal.gif\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Modal, Portal, Text, Button, Provider } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [visible, setVisible] = React.useState(false);\n *\n *   const showModal = () => setVisible(true);\n *   const hideModal = () => setVisible(false);\n *   const containerStyle = {backgroundColor: 'white', padding: 20};\n *\n *   return (\n *     <Provider>\n *       <Portal>\n *         <Modal visible={visible} onDismiss={hideModal} contentContainerStyle={containerStyle}>\n *           <Text>Example Modal.  Click outside this area to dismiss.</Text>\n *         </Modal>\n *       </Portal>\n *       <Button style={{marginTop: 30}} onPress={showModal}>\n *         Show\n *       </Button>\n *     </Provider>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nclass Modal extends React.Component<Props, State> {\n  static defaultProps = {\n    dismissable: true,\n    visible: false,\n    overlayAccessibilityLabel: 'Close modal',\n  };\n\n  static getDerivedStateFromProps(nextProps: Props, prevState: State) {\n    if (nextProps.visible && !prevState.rendered) {\n      return {\n        rendered: true,\n      };\n    }\n\n    return null;\n  }\n\n  state = {\n    opacity: new Animated.Value(this.props.visible ? 1 : 0),\n    rendered: this.props.visible,\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.visible !== this.props.visible) {\n      if (this.props.visible) {\n        this.showModal();\n      } else {\n        this.hideModal();\n      }\n    }\n  }\n\n  private handleBack = () => {\n    if (this.props.dismissable) {\n      this.hideModal();\n    }\n    return true;\n  };\n\n  private showModal = () => {\n    BackHandler.removeEventListener('hardwareBackPress', this.handleBack);\n    BackHandler.addEventListener('hardwareBackPress', this.handleBack);\n\n    const { opacity } = this.state;\n    const { scale } = this.props.theme.animation;\n\n    Animated.timing(opacity, {\n      toValue: 1,\n      duration: scale * DEFAULT_DURATION,\n      easing: Easing.out(Easing.cubic),\n      useNativeDriver: true,\n    }).start();\n  };\n\n  private hideModal = () => {\n    BackHandler.removeEventListener('hardwareBackPress', this.handleBack);\n\n    const { opacity } = this.state;\n    const { scale } = this.props.theme.animation;\n\n    Animated.timing(opacity, {\n      toValue: 0,\n      duration: scale * DEFAULT_DURATION,\n      easing: Easing.out(Easing.cubic),\n      useNativeDriver: true,\n    }).start(({ finished }) => {\n      if (!finished) {\n        return;\n      }\n\n      if (this.props.visible && this.props.onDismiss) {\n        this.props.onDismiss();\n      }\n\n      if (this.props.visible) {\n        this.showModal();\n      } else {\n        this.setState({\n          rendered: false,\n        });\n      }\n    });\n  };\n\n  componentWillUnmount() {\n    BackHandler.removeEventListener('hardwareBackPress', this.handleBack);\n  }\n\n  render() {\n    const { rendered, opacity } = this.state;\n\n    if (!rendered) return null;\n\n    const {\n      children,\n      dismissable,\n      style,\n      theme,\n      contentContainerStyle,\n      overlayAccessibilityLabel,\n    } = this.props;\n    const { colors } = theme;\n    return (\n      <Animated.View\n        pointerEvents={this.props.visible ? 'auto' : 'none'}\n        accessibilityViewIsModal\n        accessibilityLiveRegion=\"polite\"\n        style={StyleSheet.absoluteFill}\n        onAccessibilityEscape={this.hideModal}\n      >\n        <TouchableWithoutFeedback\n          accessibilityLabel={overlayAccessibilityLabel}\n          accessibilityRole=\"button\"\n          disabled={!dismissable}\n          onPress={dismissable ? this.hideModal : undefined}\n          importantForAccessibility=\"no\"\n        >\n          <Animated.View\n            style={[\n              styles.backdrop,\n              { backgroundColor: colors.backdrop, opacity },\n            ]}\n          />\n        </TouchableWithoutFeedback>\n        <View\n          style={[\n            styles.wrapper,\n            { marginTop: TOP_INSET, marginBottom: BOTTOM_INSET },\n            style,\n          ]}\n          pointerEvents=\"box-none\"\n        >\n          <Surface\n            style={\n              [{ opacity }, styles.content, contentContainerStyle] as StyleProp<\n                ViewStyle\n              >\n            }\n          >\n            {children}\n          </Surface>\n        </View>\n      </Animated.View>\n    );\n  }\n}\n\nexport default withTheme(Modal);\n\nconst styles = StyleSheet.create({\n  backdrop: {\n    flex: 1,\n  },\n  wrapper: {\n    ...StyleSheet.absoluteFillObject,\n    justifyContent: 'center',\n  },\n  content: {\n    backgroundColor: 'transparent',\n    justifyContent: 'center',\n  },\n});\n"]}