a52d0eb661d916612930956fd1f92187
'use strict';

var AssetRegistry = require("./AssetRegistry");

var AssetSourceResolver = require("./AssetSourceResolver");

var _customSourceTransformer, _serverURL, _scriptURL;

var _sourceCodeScriptURL;

function getSourceCodeScriptURL() {
  if (_sourceCodeScriptURL) {
    return _sourceCodeScriptURL;
  }

  var sourceCode = global.nativeExtensions && global.nativeExtensions.SourceCode;

  if (!sourceCode) {
    sourceCode = require("../NativeModules/specs/NativeSourceCode").default;
  }

  _sourceCodeScriptURL = sourceCode.getConstants().scriptURL;
  return _sourceCodeScriptURL;
}

function getDevServerURL() {
  if (_serverURL === undefined) {
    var sourceCodeScriptURL = getSourceCodeScriptURL();
    var match = sourceCodeScriptURL && sourceCodeScriptURL.match(/^https?:\/\/.*?\//);

    if (match) {
      _serverURL = match[0];
    } else {
      _serverURL = null;
    }
  }

  return _serverURL;
}

function _coerceLocalScriptURL(scriptURL) {
  if (scriptURL) {
    if (scriptURL.startsWith('assets://')) {
      return null;
    }

    scriptURL = scriptURL.substring(0, scriptURL.lastIndexOf('/') + 1);

    if (!scriptURL.includes('://')) {
      scriptURL = 'file://' + scriptURL;
    }
  }

  return scriptURL;
}

function getScriptURL() {
  if (_scriptURL === undefined) {
    _scriptURL = _coerceLocalScriptURL(getSourceCodeScriptURL());
  }

  return _scriptURL;
}

function setCustomSourceTransformer(transformer) {
  _customSourceTransformer = transformer;
}

function resolveAssetSource(source) {
  if (typeof source === 'object') {
    return source;
  }

  var asset = AssetRegistry.getAssetByID(source);

  if (!asset) {
    return null;
  }

  var resolver = new AssetSourceResolver(getDevServerURL(), getScriptURL(), asset);

  if (_customSourceTransformer) {
    return _customSourceTransformer(resolver);
  }

  return resolver.defaultAsset();
}

module.exports = resolveAssetSource;
module.exports.pickScale = AssetSourceResolver.pickScale;
module.exports.setCustomSourceTransformer = setCustomSourceTransformer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlc29sdmVBc3NldFNvdXJjZS5qcyJdLCJuYW1lcyI6WyJBc3NldFJlZ2lzdHJ5IiwicmVxdWlyZSIsIkFzc2V0U291cmNlUmVzb2x2ZXIiLCJfY3VzdG9tU291cmNlVHJhbnNmb3JtZXIiLCJfc2VydmVyVVJMIiwiX3NjcmlwdFVSTCIsIl9zb3VyY2VDb2RlU2NyaXB0VVJMIiwiZ2V0U291cmNlQ29kZVNjcmlwdFVSTCIsInNvdXJjZUNvZGUiLCJnbG9iYWwiLCJuYXRpdmVFeHRlbnNpb25zIiwiU291cmNlQ29kZSIsImRlZmF1bHQiLCJnZXRDb25zdGFudHMiLCJzY3JpcHRVUkwiLCJnZXREZXZTZXJ2ZXJVUkwiLCJ1bmRlZmluZWQiLCJzb3VyY2VDb2RlU2NyaXB0VVJMIiwibWF0Y2giLCJfY29lcmNlTG9jYWxTY3JpcHRVUkwiLCJzdGFydHNXaXRoIiwic3Vic3RyaW5nIiwibGFzdEluZGV4T2YiLCJpbmNsdWRlcyIsImdldFNjcmlwdFVSTCIsInNldEN1c3RvbVNvdXJjZVRyYW5zZm9ybWVyIiwidHJhbnNmb3JtZXIiLCJyZXNvbHZlQXNzZXRTb3VyY2UiLCJzb3VyY2UiLCJhc3NldCIsImdldEFzc2V0QnlJRCIsInJlc29sdmVyIiwiZGVmYXVsdEFzc2V0IiwibW9kdWxlIiwiZXhwb3J0cyIsInBpY2tTY2FsZSJdLCJtYXBwaW5ncyI6IkFBWUE7O0FBRUEsSUFBTUEsYUFBYSxHQUFHQyxPQUFPLG1CQUE3Qjs7QUFDQSxJQUFNQyxtQkFBbUIsR0FBR0QsT0FBTyx5QkFBbkM7O0FBSUEsSUFBSUUsd0JBQUosRUFBOEJDLFVBQTlCLEVBQTBDQyxVQUExQzs7QUFFQSxJQUFJQyxvQkFBSjs7QUFDQSxTQUFTQyxzQkFBVCxHQUEyQztBQUN6QyxNQUFJRCxvQkFBSixFQUEwQjtBQUN4QixXQUFPQSxvQkFBUDtBQUNEOztBQUVELE1BQUlFLFVBQVUsR0FDWkMsTUFBTSxDQUFDQyxnQkFBUCxJQUEyQkQsTUFBTSxDQUFDQyxnQkFBUCxDQUF3QkMsVUFEckQ7O0FBRUEsTUFBSSxDQUFDSCxVQUFMLEVBQWlCO0FBQ2ZBLElBQUFBLFVBQVUsR0FBR1AsT0FBTywyQ0FBUCxDQUFtRFcsT0FBaEU7QUFDRDs7QUFDRE4sRUFBQUEsb0JBQW9CLEdBQUdFLFVBQVUsQ0FBQ0ssWUFBWCxHQUEwQkMsU0FBakQ7QUFDQSxTQUFPUixvQkFBUDtBQUNEOztBQUVELFNBQVNTLGVBQVQsR0FBb0M7QUFDbEMsTUFBSVgsVUFBVSxLQUFLWSxTQUFuQixFQUE4QjtBQUM1QixRQUFNQyxtQkFBbUIsR0FBR1Ysc0JBQXNCLEVBQWxEO0FBQ0EsUUFBTVcsS0FBSyxHQUNURCxtQkFBbUIsSUFBSUEsbUJBQW1CLENBQUNDLEtBQXBCLENBQTBCLG1CQUExQixDQUR6Qjs7QUFFQSxRQUFJQSxLQUFKLEVBQVc7QUFFVGQsTUFBQUEsVUFBVSxHQUFHYyxLQUFLLENBQUMsQ0FBRCxDQUFsQjtBQUNELEtBSEQsTUFHTztBQUVMZCxNQUFBQSxVQUFVLEdBQUcsSUFBYjtBQUNEO0FBQ0Y7O0FBQ0QsU0FBT0EsVUFBUDtBQUNEOztBQUVELFNBQVNlLHFCQUFULENBQStCTCxTQUEvQixFQUE0RDtBQUMxRCxNQUFJQSxTQUFKLEVBQWU7QUFDYixRQUFJQSxTQUFTLENBQUNNLFVBQVYsQ0FBcUIsV0FBckIsQ0FBSixFQUF1QztBQUVyQyxhQUFPLElBQVA7QUFDRDs7QUFDRE4sSUFBQUEsU0FBUyxHQUFHQSxTQUFTLENBQUNPLFNBQVYsQ0FBb0IsQ0FBcEIsRUFBdUJQLFNBQVMsQ0FBQ1EsV0FBVixDQUFzQixHQUF0QixJQUE2QixDQUFwRCxDQUFaOztBQUNBLFFBQUksQ0FBQ1IsU0FBUyxDQUFDUyxRQUFWLENBQW1CLEtBQW5CLENBQUwsRUFBZ0M7QUFHOUJULE1BQUFBLFNBQVMsR0FBRyxZQUFZQSxTQUF4QjtBQUNEO0FBQ0Y7O0FBQ0QsU0FBT0EsU0FBUDtBQUNEOztBQUVELFNBQVNVLFlBQVQsR0FBaUM7QUFDL0IsTUFBSW5CLFVBQVUsS0FBS1csU0FBbkIsRUFBOEI7QUFDNUJYLElBQUFBLFVBQVUsR0FBR2MscUJBQXFCLENBQUNaLHNCQUFzQixFQUF2QixDQUFsQztBQUNEOztBQUNELFNBQU9GLFVBQVA7QUFDRDs7QUFFRCxTQUFTb0IsMEJBQVQsQ0FDRUMsV0FERixFQUVRO0FBQ052QixFQUFBQSx3QkFBd0IsR0FBR3VCLFdBQTNCO0FBQ0Q7O0FBTUQsU0FBU0Msa0JBQVQsQ0FBNEJDLE1BQTVCLEVBQStEO0FBQzdELE1BQUksT0FBT0EsTUFBUCxLQUFrQixRQUF0QixFQUFnQztBQUM5QixXQUFPQSxNQUFQO0FBQ0Q7O0FBRUQsTUFBTUMsS0FBSyxHQUFHN0IsYUFBYSxDQUFDOEIsWUFBZCxDQUEyQkYsTUFBM0IsQ0FBZDs7QUFDQSxNQUFJLENBQUNDLEtBQUwsRUFBWTtBQUNWLFdBQU8sSUFBUDtBQUNEOztBQUVELE1BQU1FLFFBQVEsR0FBRyxJQUFJN0IsbUJBQUosQ0FDZmEsZUFBZSxFQURBLEVBRWZTLFlBQVksRUFGRyxFQUdmSyxLQUhlLENBQWpCOztBQUtBLE1BQUkxQix3QkFBSixFQUE4QjtBQUM1QixXQUFPQSx3QkFBd0IsQ0FBQzRCLFFBQUQsQ0FBL0I7QUFDRDs7QUFDRCxTQUFPQSxRQUFRLENBQUNDLFlBQVQsRUFBUDtBQUNEOztBQUVEQyxNQUFNLENBQUNDLE9BQVAsR0FBaUJQLGtCQUFqQjtBQUNBTSxNQUFNLENBQUNDLE9BQVAsQ0FBZUMsU0FBZixHQUEyQmpDLG1CQUFtQixDQUFDaUMsU0FBL0M7QUFDQUYsTUFBTSxDQUFDQyxPQUFQLENBQWVULDBCQUFmLEdBQTRDQSwwQkFBNUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIEBmbG93XG4gKi9cblxuLy8gUmVzb2x2ZXMgYW4gYXNzZXQgaW50byBhIGBzb3VyY2VgIGZvciBgSW1hZ2VgLlxuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IEFzc2V0UmVnaXN0cnkgPSByZXF1aXJlKCcuL0Fzc2V0UmVnaXN0cnknKTtcbmNvbnN0IEFzc2V0U291cmNlUmVzb2x2ZXIgPSByZXF1aXJlKCcuL0Fzc2V0U291cmNlUmVzb2x2ZXInKTtcblxuaW1wb3J0IHR5cGUge1Jlc29sdmVkQXNzZXRTb3VyY2V9IGZyb20gJy4vQXNzZXRTb3VyY2VSZXNvbHZlcic7XG5cbmxldCBfY3VzdG9tU291cmNlVHJhbnNmb3JtZXIsIF9zZXJ2ZXJVUkwsIF9zY3JpcHRVUkw7XG5cbmxldCBfc291cmNlQ29kZVNjcmlwdFVSTDogP3N0cmluZztcbmZ1bmN0aW9uIGdldFNvdXJjZUNvZGVTY3JpcHRVUkwoKTogP3N0cmluZyB7XG4gIGlmIChfc291cmNlQ29kZVNjcmlwdFVSTCkge1xuICAgIHJldHVybiBfc291cmNlQ29kZVNjcmlwdFVSTDtcbiAgfVxuXG4gIGxldCBzb3VyY2VDb2RlID1cbiAgICBnbG9iYWwubmF0aXZlRXh0ZW5zaW9ucyAmJiBnbG9iYWwubmF0aXZlRXh0ZW5zaW9ucy5Tb3VyY2VDb2RlO1xuICBpZiAoIXNvdXJjZUNvZGUpIHtcbiAgICBzb3VyY2VDb2RlID0gcmVxdWlyZSgnLi4vTmF0aXZlTW9kdWxlcy9zcGVjcy9OYXRpdmVTb3VyY2VDb2RlJykuZGVmYXVsdDtcbiAgfVxuICBfc291cmNlQ29kZVNjcmlwdFVSTCA9IHNvdXJjZUNvZGUuZ2V0Q29uc3RhbnRzKCkuc2NyaXB0VVJMO1xuICByZXR1cm4gX3NvdXJjZUNvZGVTY3JpcHRVUkw7XG59XG5cbmZ1bmN0aW9uIGdldERldlNlcnZlclVSTCgpOiA/c3RyaW5nIHtcbiAgaWYgKF9zZXJ2ZXJVUkwgPT09IHVuZGVmaW5lZCkge1xuICAgIGNvbnN0IHNvdXJjZUNvZGVTY3JpcHRVUkwgPSBnZXRTb3VyY2VDb2RlU2NyaXB0VVJMKCk7XG4gICAgY29uc3QgbWF0Y2ggPVxuICAgICAgc291cmNlQ29kZVNjcmlwdFVSTCAmJiBzb3VyY2VDb2RlU2NyaXB0VVJMLm1hdGNoKC9eaHR0cHM/OlxcL1xcLy4qP1xcLy8pO1xuICAgIGlmIChtYXRjaCkge1xuICAgICAgLy8ganNCdW5kbGUgd2FzIGxvYWRlZCBmcm9tIG5ldHdvcmtcbiAgICAgIF9zZXJ2ZXJVUkwgPSBtYXRjaFswXTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8ganNCdW5kbGUgd2FzIGxvYWRlZCBmcm9tIGZpbGVcbiAgICAgIF9zZXJ2ZXJVUkwgPSBudWxsO1xuICAgIH1cbiAgfVxuICByZXR1cm4gX3NlcnZlclVSTDtcbn1cblxuZnVuY3Rpb24gX2NvZXJjZUxvY2FsU2NyaXB0VVJMKHNjcmlwdFVSTDogP3N0cmluZyk6ID9zdHJpbmcge1xuICBpZiAoc2NyaXB0VVJMKSB7XG4gICAgaWYgKHNjcmlwdFVSTC5zdGFydHNXaXRoKCdhc3NldHM6Ly8nKSkge1xuICAgICAgLy8gYW5kcm9pZDogcnVubmluZyBmcm9tIHdpdGhpbiBhc3NldHMsIG5vIG9mZmxpbmUgcGF0aCB0byB1c2VcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBzY3JpcHRVUkwgPSBzY3JpcHRVUkwuc3Vic3RyaW5nKDAsIHNjcmlwdFVSTC5sYXN0SW5kZXhPZignLycpICsgMSk7XG4gICAgaWYgKCFzY3JpcHRVUkwuaW5jbHVkZXMoJzovLycpKSB7XG4gICAgICAvLyBBZGQgZmlsZSBwcm90b2NvbCBpbiBjYXNlIHdlIGhhdmUgYW4gYWJzb2x1dGUgZmlsZSBwYXRoIGFuZCBub3QgYSBVUkwuXG4gICAgICAvLyBUaGlzIHNob3VsZG4ndCByZWFsbHkgYmUgbmVjZXNzYXJ5LiBzY3JpcHRVUkwgc2hvdWxkIGJlIGEgVVJMLlxuICAgICAgc2NyaXB0VVJMID0gJ2ZpbGU6Ly8nICsgc2NyaXB0VVJMO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc2NyaXB0VVJMO1xufVxuXG5mdW5jdGlvbiBnZXRTY3JpcHRVUkwoKTogP3N0cmluZyB7XG4gIGlmIChfc2NyaXB0VVJMID09PSB1bmRlZmluZWQpIHtcbiAgICBfc2NyaXB0VVJMID0gX2NvZXJjZUxvY2FsU2NyaXB0VVJMKGdldFNvdXJjZUNvZGVTY3JpcHRVUkwoKSk7XG4gIH1cbiAgcmV0dXJuIF9zY3JpcHRVUkw7XG59XG5cbmZ1bmN0aW9uIHNldEN1c3RvbVNvdXJjZVRyYW5zZm9ybWVyKFxuICB0cmFuc2Zvcm1lcjogKHJlc29sdmVyOiBBc3NldFNvdXJjZVJlc29sdmVyKSA9PiBSZXNvbHZlZEFzc2V0U291cmNlLFxuKTogdm9pZCB7XG4gIF9jdXN0b21Tb3VyY2VUcmFuc2Zvcm1lciA9IHRyYW5zZm9ybWVyO1xufVxuXG4vKipcbiAqIGBzb3VyY2VgIGlzIGVpdGhlciBhIG51bWJlciAob3BhcXVlIHR5cGUgcmV0dXJuZWQgYnkgcmVxdWlyZSgnLi9mb28ucG5nJykpXG4gKiBvciBhbiBgSW1hZ2VTb3VyY2VgIGxpa2UgeyB1cmk6ICc8aHR0cCBsb2NhdGlvbiB8fCBmaWxlIHBhdGg+JyB9XG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVBc3NldFNvdXJjZShzb3VyY2U6IGFueSk6ID9SZXNvbHZlZEFzc2V0U291cmNlIHtcbiAgaWYgKHR5cGVvZiBzb3VyY2UgPT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIHNvdXJjZTtcbiAgfVxuXG4gIGNvbnN0IGFzc2V0ID0gQXNzZXRSZWdpc3RyeS5nZXRBc3NldEJ5SUQoc291cmNlKTtcbiAgaWYgKCFhc3NldCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgY29uc3QgcmVzb2x2ZXIgPSBuZXcgQXNzZXRTb3VyY2VSZXNvbHZlcihcbiAgICBnZXREZXZTZXJ2ZXJVUkwoKSxcbiAgICBnZXRTY3JpcHRVUkwoKSxcbiAgICBhc3NldCxcbiAgKTtcbiAgaWYgKF9jdXN0b21Tb3VyY2VUcmFuc2Zvcm1lcikge1xuICAgIHJldHVybiBfY3VzdG9tU291cmNlVHJhbnNmb3JtZXIocmVzb2x2ZXIpO1xuICB9XG4gIHJldHVybiByZXNvbHZlci5kZWZhdWx0QXNzZXQoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSByZXNvbHZlQXNzZXRTb3VyY2U7XG5tb2R1bGUuZXhwb3J0cy5waWNrU2NhbGUgPSBBc3NldFNvdXJjZVJlc29sdmVyLnBpY2tTY2FsZTtcbm1vZHVsZS5leHBvcnRzLnNldEN1c3RvbVNvdXJjZVRyYW5zZm9ybWVyID0gc2V0Q3VzdG9tU291cmNlVHJhbnNmb3JtZXI7XG4iXX0=