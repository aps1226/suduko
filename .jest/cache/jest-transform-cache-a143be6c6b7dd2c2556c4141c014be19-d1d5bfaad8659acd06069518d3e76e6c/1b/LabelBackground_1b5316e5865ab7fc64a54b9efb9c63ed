161c0833dd7ce34055ec02cb684d1e02
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _toConsumableArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/toConsumableArray"));

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _AnimatedText = _interopRequireDefault(require("../../Typography/AnimatedText"));

var _theming = require("../../../core/theming");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

var LabelBackground = function LabelBackground(_ref) {
  var parentState = _ref.parentState,
      _ref$labelProps = _ref.labelProps,
      placeholderStyle = _ref$labelProps.placeholderStyle,
      baseLabelTranslateX = _ref$labelProps.baseLabelTranslateX,
      topPosition = _ref$labelProps.topPosition,
      hasActiveOutline = _ref$labelProps.hasActiveOutline,
      label = _ref$labelProps.label,
      backgroundColor = _ref$labelProps.backgroundColor,
      labelStyle = _ref.labelStyle;
  var hasFocus = hasActiveOutline || parentState.value;
  var opacity = parentState.labeled.interpolate({
    inputRange: [0, 1],
    outputRange: [hasFocus ? 1 : 0, 0]
  });

  var _ref2 = (0, _theming.useTheme)(),
      roundness = _ref2.roundness;

  var labelTranslationX = {
    transform: [{
      translateX: parentState.labeled.interpolate({
        inputRange: [0, 1],
        outputRange: [-baseLabelTranslateX, 0]
      })
    }]
  };
  return label ? [React.createElement(_reactNative.Animated.View, {
    key: "labelBackground-view",
    pointerEvents: "none",
    style: [_reactNative.StyleSheet.absoluteFill, styles.view, {
      backgroundColor: backgroundColor,
      opacity: opacity,
      bottom: Math.max(roundness, 2)
    }, labelTranslationX]
  }), React.createElement(_AnimatedText.default, {
    key: "labelBackground-text",
    style: [placeholderStyle, labelStyle, styles.outlinedLabel, {
      top: topPosition + 1,
      backgroundColor: backgroundColor,
      opacity: opacity,
      transform: [].concat((0, _toConsumableArray2.default)(labelStyle.transform), [{
        scaleY: parentState.labeled.interpolate({
          inputRange: [0, 1],
          outputRange: [0.2, 1]
        })
      }])
    }],
    numberOfLines: 1
  }, label)] : null;
};

var _default = LabelBackground;
exports.default = _default;

var styles = _reactNative.StyleSheet.create({
  view: {
    position: 'absolute',
    top: 6,
    left: 10,
    width: 8
  },
  outlinedLabel: {
    position: 'absolute',
    left: 18,
    paddingHorizontal: 0,
    color: 'transparent'
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkxhYmVsQmFja2dyb3VuZC50c3giXSwibmFtZXMiOlsiTGFiZWxCYWNrZ3JvdW5kIiwibGFiZWxQcm9wcyIsImJhY2tncm91bmRDb2xvciIsImxhYmVsU3R5bGUiLCJoYXNGb2N1cyIsImhhc0FjdGl2ZU91dGxpbmUiLCJwYXJlbnRTdGF0ZSIsIm9wYWNpdHkiLCJpbnB1dFJhbmdlIiwib3V0cHV0UmFuZ2UiLCJyb3VuZG5lc3MiLCJsYWJlbFRyYW5zbGF0aW9uWCIsInRyYW5zZm9ybSIsInRyYW5zbGF0ZVgiLCJsYWJlbCIsIlN0eWxlU2hlZXQiLCJzdHlsZXMiLCJib3R0b20iLCJNYXRoIiwidG9wIiwidG9wUG9zaXRpb24iLCJzY2FsZVkiLCJ2aWV3IiwicG9zaXRpb24iLCJsZWZ0Iiwid2lkdGgiLCJvdXRsaW5lZExhYmVsIiwicGFkZGluZ0hvcml6b250YWwiLCJjb2xvciJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQSxJQUFBLEtBQUEsR0FBQSx1QkFBQSxDQUFBLE9BQUEsQ0FBQSxPQUFBLENBQUEsQ0FBQTs7QUFDQSxJQUFBLFlBQUEsR0FBQSxPQUFBLENBQUEsY0FBQSxDQUFBOztBQUVBLElBQUEsYUFBQSxHQUFBLHNCQUFBLENBQUEsT0FBQSxpQ0FBQSxDQUFBOztBQUNBLElBQUEsUUFBQSxHQUFBLE9BQUEseUJBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUlBLElBQU1BLGVBQWUsR0FBRyxTQUFsQkEsZUFBa0IsT0FXSTtBQUFBLE1BWEgsV0FXRyxRQVhILFdBV0c7QUFBQSw2QkFUMUJDLFVBUzBCO0FBQUEsTUFUZCxnQkFTYyxtQkFUZCxnQkFTYztBQUFBLE1BVGQsbUJBU2MsbUJBVGQsbUJBU2M7QUFBQSxNQVRkLFdBU2MsbUJBVGQsV0FTYztBQUFBLE1BVGQsZ0JBU2MsbUJBVGQsZ0JBU2M7QUFBQSxNQVRkLEtBU2MsbUJBVGQsS0FTYztBQUFBLE1BSHhCQyxl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SixDQUFBO0FBSWJDLElBQUFBLEtBQUssRUFBRTtBQUpNO0FBUGdCLENBQWxCLENBQWYiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBBbmltYXRlZCwgU3R5bGVTaGVldCB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5cbmltcG9ydCBBbmltYXRlZFRleHQgZnJvbSAnLi4vLi4vVHlwb2dyYXBoeS9BbmltYXRlZFRleHQnO1xuaW1wb3J0IHsgdXNlVGhlbWUgfSBmcm9tICcuLi8uLi8uLi9jb3JlL3RoZW1pbmcnO1xuXG5pbXBvcnQgdHlwZSB7IExhYmVsQmFja2dyb3VuZFByb3BzIH0gZnJvbSAnLi4vdHlwZXMnO1xuXG5jb25zdCBMYWJlbEJhY2tncm91bmQgPSAoe1xuICBwYXJlbnRTdGF0ZSxcbiAgbGFiZWxQcm9wczoge1xuICAgIHBsYWNlaG9sZGVyU3R5bGUsXG4gICAgYmFzZUxhYmVsVHJhbnNsYXRlWCxcbiAgICB0b3BQb3NpdGlvbixcbiAgICBoYXNBY3RpdmVPdXRsaW5lLFxuICAgIGxhYmVsLFxuICAgIGJhY2tncm91bmRDb2xvcixcbiAgfSxcbiAgbGFiZWxTdHlsZSxcbn06IExhYmVsQmFja2dyb3VuZFByb3BzKSA9PiB7XG4gIGNvbnN0IGhhc0ZvY3VzID0gaGFzQWN0aXZlT3V0bGluZSB8fCBwYXJlbnRTdGF0ZS52YWx1ZTtcbiAgY29uc3Qgb3BhY2l0eSA9IHBhcmVudFN0YXRlLmxhYmVsZWQuaW50ZXJwb2xhdGUoe1xuICAgIGlucHV0UmFuZ2U6IFswLCAxXSxcbiAgICBvdXRwdXRSYW5nZTogW2hhc0ZvY3VzID8gMSA6IDAsIDBdLFxuICB9KTtcbiAgY29uc3QgeyByb3VuZG5lc3MgfSA9IHVzZVRoZW1lKCk7XG5cbiAgY29uc3QgbGFiZWxUcmFuc2xhdGlvblggPSB7XG4gICAgdHJhbnNmb3JtOiBbXG4gICAgICB7XG4gICAgICAgIHRyYW5zbGF0ZVg6IHBhcmVudFN0YXRlLmxhYmVsZWQuaW50ZXJwb2xhdGUoe1xuICAgICAgICAgIGlucHV0UmFuZ2U6IFswLCAxXSxcbiAgICAgICAgICBvdXRwdXRSYW5nZTogWy1iYXNlTGFiZWxUcmFuc2xhdGVYLCAwXSxcbiAgICAgICAgfSksXG4gICAgICB9LFxuICAgIF0sXG4gIH07XG5cbiAgcmV0dXJuIGxhYmVsXG4gICAgPyBbXG4gICAgICAgIDxBbmltYXRlZC5WaWV3XG4gICAgICAgICAga2V5PVwibGFiZWxCYWNrZ3JvdW5kLXZpZXdcIlxuICAgICAgICAgIHBvaW50ZXJFdmVudHM9XCJub25lXCJcbiAgICAgICAgICBzdHlsZT17W1xuICAgICAgICAgICAgU3R5bGVTaGVldC5hYnNvbHV0ZUZpbGwsXG4gICAgICAgICAgICBzdHlsZXMudmlldyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yLFxuICAgICAgICAgICAgICBvcGFjaXR5LFxuICAgICAgICAgICAgICBib3R0b206IE1hdGgubWF4KHJvdW5kbmVzcywgMiksXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGFiZWxUcmFuc2xhdGlvblgsXG4gICAgICAgICAgXX1cbiAgICAgICAgLz4sXG4gICAgICAgIDxBbmltYXRlZFRleHRcbiAgICAgICAgICBrZXk9XCJsYWJlbEJhY2tncm91bmQtdGV4dFwiXG4gICAgICAgICAgc3R5bGU9e1tcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyU3R5bGUsXG4gICAgICAgICAgICBsYWJlbFN0eWxlLFxuICAgICAgICAgICAgc3R5bGVzLm91dGxpbmVkTGFiZWwsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHRvcDogdG9wUG9zaXRpb24gKyAxLFxuICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3IsXG4gICAgICAgICAgICAgIG9wYWNpdHksXG4gICAgICAgICAgICAgIHRyYW5zZm9ybTogW1xuICAgICAgICAgICAgICAgIC4uLmxhYmVsU3R5bGUudHJhbnNmb3JtLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIHNjYWxlWTogcGFyZW50U3RhdGUubGFiZWxlZC5pbnRlcnBvbGF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIGlucHV0UmFuZ2U6IFswLCAxXSxcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0UmFuZ2U6IFswLjIsIDFdLFxuICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgXX1cbiAgICAgICAgICBudW1iZXJPZkxpbmVzPXsxfVxuICAgICAgICA+XG4gICAgICAgICAge2xhYmVsfVxuICAgICAgICA8L0FuaW1hdGVkVGV4dD4sXG4gICAgICBdXG4gICAgOiBudWxsO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgTGFiZWxCYWNrZ3JvdW5kO1xuXG5jb25zdCBzdHlsZXMgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7XG4gIHZpZXc6IHtcbiAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICB0b3A6IDYsXG4gICAgbGVmdDogMTAsXG4gICAgd2lkdGg6IDgsXG4gIH0sXG4gIG91dGxpbmVkTGFiZWw6IHtcbiAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICBsZWZ0OiAxOCxcbiAgICBwYWRkaW5nSG9yaXpvbnRhbDogMCxcbiAgICBjb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgfSxcbn0pO1xuIl19