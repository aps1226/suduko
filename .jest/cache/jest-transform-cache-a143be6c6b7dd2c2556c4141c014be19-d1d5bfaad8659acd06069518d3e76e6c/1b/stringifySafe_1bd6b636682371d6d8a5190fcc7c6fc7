da30ebc99f2144bc6559bd96368cc721
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createStringifySafeWithLimits = createStringifySafeWithLimits;
exports.default = void 0;

var _invariant = _interopRequireDefault(require("invariant"));

function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function createStringifySafeWithLimits(limits) {
  var _limits$maxDepth = limits.maxDepth,
      maxDepth = _limits$maxDepth === void 0 ? Number.POSITIVE_INFINITY : _limits$maxDepth,
      _limits$maxStringLimi = limits.maxStringLimit,
      maxStringLimit = _limits$maxStringLimi === void 0 ? Number.POSITIVE_INFINITY : _limits$maxStringLimi,
      _limits$maxArrayLimit = limits.maxArrayLimit,
      maxArrayLimit = _limits$maxArrayLimit === void 0 ? Number.POSITIVE_INFINITY : _limits$maxArrayLimit,
      _limits$maxObjectKeys = limits.maxObjectKeysLimit,
      maxObjectKeysLimit = _limits$maxObjectKeys === void 0 ? Number.POSITIVE_INFINITY : _limits$maxObjectKeys;
  var stack = [];

  function replacer(key, value) {
    while (stack.length && this !== stack[0]) {
      stack.shift();
    }

    if (typeof value === 'string') {
      var truncatedString = '...(truncated)...';

      if (value.length > maxStringLimit + truncatedString.length) {
        return value.substring(0, maxStringLimit) + truncatedString;
      }

      return value;
    }

    if (typeof value !== 'object' || value === null) {
      return value;
    }

    var retval = value;

    if (Array.isArray(value)) {
      if (stack.length >= maxDepth) {
        retval = "[ ... array with " + value.length + " values ... ]";
      } else if (value.length > maxArrayLimit) {
        retval = value.slice(0, maxArrayLimit).concat(["... extra " + (value.length - maxArrayLimit) + " values truncated ..."]);
      }
    } else {
      (0, _invariant.default)(typeof value === 'object', 'This was already found earlier');
      var keys = Object.keys(value);

      if (stack.length >= maxDepth) {
        retval = "{ ... object with " + keys.length + " keys ... }";
      } else if (keys.length > maxObjectKeysLimit) {
        retval = {};

        for (var _iterator = _createForOfIteratorHelperLoose(keys.slice(0, maxObjectKeysLimit)), _step; !(_step = _iterator()).done;) {
          var k = _step.value;
          retval[k] = value[k];
        }

        var truncatedKey = '...(truncated keys)...';
        retval[truncatedKey] = keys.length - maxObjectKeysLimit;
      }
    }

    stack.unshift(retval);
    return retval;
  }

  return function stringifySafe(arg) {
    if (arg === undefined) {
      return 'undefined';
    } else if (arg === null) {
      return 'null';
    } else if (typeof arg === 'function') {
      try {
        return arg.toString();
      } catch (e) {
        return '[function unknown]';
      }
    } else if (arg instanceof Error) {
      return arg.name + ': ' + arg.message;
    } else {
      try {
        var ret = JSON.stringify(arg, replacer);

        if (ret === undefined) {
          return '["' + typeof arg + '" failed to stringify]';
        }

        return ret;
      } catch (e) {
        if (typeof arg.toString === 'function') {
          try {
            return arg.toString();
          } catch (E) {}
        }
      }
    }

    return '["' + typeof arg + '" failed to stringify]';
  };
}

var stringifySafe = createStringifySafeWithLimits({
  maxDepth: 10,
  maxStringLimit: 100,
  maxArrayLimit: 50,
  maxObjectKeysLimit: 50
});
var _default = stringifySafe;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN0cmluZ2lmeVNhZmUuanMiXSwibmFtZXMiOlsiY3JlYXRlU3RyaW5naWZ5U2FmZVdpdGhMaW1pdHMiLCJsaW1pdHMiLCJtYXhEZXB0aCIsIk51bWJlciIsIlBPU0lUSVZFX0lORklOSVRZIiwibWF4U3RyaW5nTGltaXQiLCJtYXhBcnJheUxpbWl0IiwibWF4T2JqZWN0S2V5c0xpbWl0Iiwic3RhY2siLCJyZXBsYWNlciIsImtleSIsInZhbHVlIiwibGVuZ3RoIiwic2hpZnQiLCJ0cnVuY2F0ZWRTdHJpbmciLCJzdWJzdHJpbmciLCJyZXR2YWwiLCJBcnJheSIsImlzQXJyYXkiLCJzbGljZSIsImNvbmNhdCIsImtleXMiLCJPYmplY3QiLCJrIiwidHJ1bmNhdGVkS2V5IiwidW5zaGlmdCIsInN0cmluZ2lmeVNhZmUiLCJhcmciLCJ1bmRlZmluZWQiLCJ0b1N0cmluZyIsImUiLCJFcnJvciIsIm5hbWUiLCJtZXNzYWdlIiwicmV0IiwiSlNPTiIsInN0cmluZ2lmeSIsIkUiXSwibWFwcGluZ3MiOiJBQVVBOzs7Ozs7Ozs7O0FBRUE7Ozs7Ozs7O0FBTU8sU0FBU0EsNkJBQVQsQ0FBdUNDLE1BQXZDLEVBS2M7QUFDbkIseUJBS0lBLE1BTEosQ0FDRUMsUUFERjtBQUFBLE1BQ0VBLFFBREYsaUNBQ2FDLE1BQU0sQ0FBQ0MsaUJBRHBCO0FBQUEsOEJBS0lILE1BTEosQ0FFRUksY0FGRjtBQUFBLE1BRUVBLGNBRkYsc0NBRW1CRixNQUFNLENBQUNDLGlCQUYxQjtBQUFBLDhCQUtJSCxNQUxKLENBR0VLLGFBSEY7QUFBQSxNQUdFQSxhQUhGLHNDQUdrQkgsTUFBTSxDQUFDQyxpQkFIekI7QUFBQSw4QkFLSUgsTUFMSixDQUlFTSxrQkFKRjtBQUFBLE1BSUVBLGtCQUpGLHNDQUl1QkosTUFBTSxDQUFDQyxpQkFKOUI7QUFNQSxNQUFNSSxLQUFLLEdBQUcsRUFBZDs7QUFDQSxXQUFTQyxRQUFULENBQWtCQyxHQUFsQixFQUErQkMsS0FBL0IsRUFBb0Q7QUFDbEQsV0FB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STtBQUNGLFlBQU1DLEdBQUcsR0FBR0MsSUFBSSxDQUFDQyxTQUFMLENBQWVULEdBQWYsRUFBb0JsQixRQUFwQixDQUFaOztBQUNBLFlBQUl5QixHQUFHLEtBQUtOLFNBQVosRUFBdUI7QUFDckIsaUJBQU8sT0FBTyxPQUFPRCxHQUFkLEdBQW9CLHdCQUEzQjtBQUNEOztBQUNELGVBQU9PLEdBQVA7QUFDRCxPQU5ELENBTUUsT0FBT0osQ0FBUCxFQUFVO0FBQ1YsWUFBSSxPQUFPSCxHQUFHLENBQUNFLFFBQVgsS0FBd0IsVUFBNUIsRUFBd0M7QUFDdEMsY0FBSTtBQUVGLG1CQUFPRixHQUFHLENBQUNFLFFBQUosRUFBUDtBQUNELFdBSEQsQ0FHRSxPQUFPUSxDQUFQLEVBQVUsQ0FBRTtBQUNmO0FBQ0Y7QUFDRjs7QUFDRCxXQUFPLE9BQU8sT0FBT1YsR0FBZCxHQUFvQix3QkFBM0I7QUFDRCxHQWhDRDtBQWlDRDs7QUFFRCxJQUFNRCxhQUE4QixHQUFHMUIsNkJBQTZCLENBQUM7QUFDbkVFLEVBQUFBLFFBQVEsRUFBRSxFQUR5RDtBQUVuRUcsRUFBQUEsY0FBYyxFQUFFLEdBRm1EO0FBR25FQyxFQUFBQSxhQUFhLEVBQUUsRUFIb0Q7QUFJbkVDLEVBQUFBLGtCQUFrQixFQUFFO0FBSitDLENBQUQsQ0FBcEU7ZUFPZW1CLGEiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIEBmbG93IHN0cmljdC1sb2NhbFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IGludmFyaWFudCBmcm9tICdpbnZhcmlhbnQnO1xuXG4vKipcbiAqIFRyaWVzIHRvIHN0cmluZ2lmeSB3aXRoIEpTT04uc3RyaW5naWZ5IGFuZCB0b1N0cmluZywgYnV0IGNhdGNoZXMgZXhjZXB0aW9uc1xuICogKGUuZy4gZnJvbSBjaXJjdWxhciBvYmplY3RzKSBhbmQgYWx3YXlzIHJldHVybnMgYSBzdHJpbmcgYW5kIG5ldmVyIHRocm93cy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVN0cmluZ2lmeVNhZmVXaXRoTGltaXRzKGxpbWl0czoge3xcbiAgbWF4RGVwdGg/OiBudW1iZXIsXG4gIG1heFN0cmluZ0xpbWl0PzogbnVtYmVyLFxuICBtYXhBcnJheUxpbWl0PzogbnVtYmVyLFxuICBtYXhPYmplY3RLZXlzTGltaXQ/OiBudW1iZXIsXG58fSk6IG1peGVkID0+IHN0cmluZyB7XG4gIGNvbnN0IHtcbiAgICBtYXhEZXB0aCA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSxcbiAgICBtYXhTdHJpbmdMaW1pdCA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSxcbiAgICBtYXhBcnJheUxpbWl0ID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZLFxuICAgIG1heE9iamVjdEtleXNMaW1pdCA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSxcbiAgfSA9IGxpbWl0cztcbiAgY29uc3Qgc3RhY2sgPSBbXTtcbiAgZnVuY3Rpb24gcmVwbGFjZXIoa2V5OiBzdHJpbmcsIHZhbHVlOiBtaXhlZCk6IG1peGVkIHtcbiAgICB3aGlsZSAoc3RhY2subGVuZ3RoICYmIHRoaXMgIT09IHN0YWNrWzBdKSB7XG4gICAgICBzdGFjay5zaGlmdCgpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICBjb25zdCB0cnVuY2F0ZWRTdHJpbmcgPSAnLi4uKHRydW5jYXRlZCkuLi4nO1xuICAgICAgaWYgKHZhbHVlLmxlbmd0aCA+IG1heFN0cmluZ0xpbWl0ICsgdHJ1bmNhdGVkU3RyaW5nLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gdmFsdWUuc3Vic3RyaW5nKDAsIG1heFN0cmluZ0xpbWl0KSArIHRydW5jYXRlZFN0cmluZztcbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcgfHwgdmFsdWUgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICBsZXQgcmV0dmFsID0gdmFsdWU7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICBpZiAoc3RhY2subGVuZ3RoID49IG1heERlcHRoKSB7XG4gICAgICAgIHJldHZhbCA9IGBbIC4uLiBhcnJheSB3aXRoICR7dmFsdWUubGVuZ3RofSB2YWx1ZXMgLi4uIF1gO1xuICAgICAgfSBlbHNlIGlmICh2YWx1ZS5sZW5ndGggPiBtYXhBcnJheUxpbWl0KSB7XG4gICAgICAgIHJldHZhbCA9IHZhbHVlXG4gICAgICAgICAgLnNsaWNlKDAsIG1heEFycmF5TGltaXQpXG4gICAgICAgICAgLmNvbmNhdChbXG4gICAgICAgICAgICBgLi4uIGV4dHJhICR7dmFsdWUubGVuZ3RoIC0gbWF4QXJyYXlMaW1pdH0gdmFsdWVzIHRydW5jYXRlZCAuLi5gLFxuICAgICAgICAgIF0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBBZGQgcmVmaW5lbWVudCBhZnRlciBBcnJheS5pc0FycmF5IGNhbGwuXG4gICAgICBpbnZhcmlhbnQodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JywgJ1RoaXMgd2FzIGFscmVhZHkgZm91bmQgZWFybGllcicpO1xuICAgICAgbGV0IGtleXMgPSBPYmplY3Qua2V5cyh2YWx1ZSk7XG4gICAgICBpZiAoc3RhY2subGVuZ3RoID49IG1heERlcHRoKSB7XG4gICAgICAgIHJldHZhbCA9IGB7IC4uLiBvYmplY3Qgd2l0aCAke2tleXMubGVuZ3RofSBrZXlzIC4uLiB9YDtcbiAgICAgIH0gZWxzZSBpZiAoa2V5cy5sZW5ndGggPiBtYXhPYmplY3RLZXlzTGltaXQpIHtcbiAgICAgICAgLy8gUmV0dXJuIGEgc2FtcGxlIG9mIHRoZSBrZXlzLlxuICAgICAgICByZXR2YWwgPSB7fTtcbiAgICAgICAgZm9yIChsZXQgayBvZiBrZXlzLnNsaWNlKDAsIG1heE9iamVjdEtleXNMaW1pdCkpIHtcbiAgICAgICAgICByZXR2YWxba10gPSB2YWx1ZVtrXTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0cnVuY2F0ZWRLZXkgPSAnLi4uKHRydW5jYXRlZCBrZXlzKS4uLic7XG4gICAgICAgIHJldHZhbFt0cnVuY2F0ZWRLZXldID0ga2V5cy5sZW5ndGggLSBtYXhPYmplY3RLZXlzTGltaXQ7XG4gICAgICB9XG4gICAgfVxuICAgIHN0YWNrLnVuc2hpZnQocmV0dmFsKTtcbiAgICByZXR1cm4gcmV0dmFsO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIHN0cmluZ2lmeVNhZmUoYXJnOiBtaXhlZCk6IHN0cmluZyB7XG4gICAgaWYgKGFyZyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gJ3VuZGVmaW5lZCc7XG4gICAgfSBlbHNlIGlmIChhcmcgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiAnbnVsbCc7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgYXJnID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gYXJnLnRvU3RyaW5nKCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiAnW2Z1bmN0aW9uIHVua25vd25dJztcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGFyZyBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICByZXR1cm4gYXJnLm5hbWUgKyAnOiAnICsgYXJnLm1lc3NhZ2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFBlcmZvcm0gYSB0cnkgY2F0Y2gsIGp1c3QgaW4gY2FzZSB0aGUgb2JqZWN0IGhhcyBhIGNpcmN1bGFyXG4gICAgICAvLyByZWZlcmVuY2Ugb3Igc3RyaW5naWZ5IHRocm93cyBmb3Igc29tZSBvdGhlciByZWFzb24uXG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCByZXQgPSBKU09OLnN0cmluZ2lmeShhcmcsIHJlcGxhY2VyKTtcbiAgICAgICAgaWYgKHJldCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcmV0dXJuICdbXCInICsgdHlwZW9mIGFyZyArICdcIiBmYWlsZWQgdG8gc3RyaW5naWZ5XSc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBhcmcudG9TdHJpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gJEZsb3dGaXhNZTogdG9TdHJpbmcgc2hvdWxkbid0IHRha2UgYW55IGFyZ3VtZW50cyBpbiBnZW5lcmFsLlxuICAgICAgICAgICAgcmV0dXJuIGFyZy50b1N0cmluZygpO1xuICAgICAgICAgIH0gY2F0Y2ggKEUpIHt9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuICdbXCInICsgdHlwZW9mIGFyZyArICdcIiBmYWlsZWQgdG8gc3RyaW5naWZ5XSc7XG4gIH07XG59XG5cbmNvbnN0IHN0cmluZ2lmeVNhZmU6IG1peGVkID0+IHN0cmluZyA9IGNyZWF0ZVN0cmluZ2lmeVNhZmVXaXRoTGltaXRzKHtcbiAgbWF4RGVwdGg6IDEwLFxuICBtYXhTdHJpbmdMaW1pdDogMTAwLFxuICBtYXhBcnJheUxpbWl0OiA1MCxcbiAgbWF4T2JqZWN0S2V5c0xpbWl0OiA1MCxcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBzdHJpbmdpZnlTYWZlO1xuIl19