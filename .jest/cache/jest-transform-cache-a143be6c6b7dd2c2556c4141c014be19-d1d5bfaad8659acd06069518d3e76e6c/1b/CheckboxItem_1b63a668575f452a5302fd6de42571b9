c9537dd0df223874724137628d67fba3
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault2(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault2(require("@babel/runtime/helpers/objectWithoutProperties"));

var _excluded = ["style", "status", "label", "onPress", "labelStyle", "theme", "testID", "mode", "position"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CheckboxItem = exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _Checkbox = _interopRequireDefault(require("./Checkbox"));

var _CheckboxAndroid = _interopRequireDefault(require("./CheckboxAndroid"));

var _CheckboxIOS = _interopRequireDefault(require("./CheckboxIOS"));

var _Text = _interopRequireDefault(require("../Typography/Text"));

var _TouchableRipple = _interopRequireDefault(require("../TouchableRipple/TouchableRipple"));

var _theming = require("../../core/theming");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

var CheckboxItem = function CheckboxItem(_ref) {
  var style = _ref.style,
      status = _ref.status,
      label = _ref.label,
      onPress = _ref.onPress,
      labelStyle = _ref.labelStyle,
      theme = _ref.theme,
      testID = _ref.testID,
      mode = _ref.mode,
      _ref$position = _ref.position,
      position = _ref$position === void 0 ? 'trailing' : _ref$position,
      props = (0, _objectWithoutProperties2.default)(_ref, _excluded);

  var checkboxProps = _objectSpread(_objectSpread({}, props), {}, {
    status: status,
    theme: theme
  });

  var isLeading = position === 'leading';
  var checkbox;

  if (mode === 'android') {
    checkbox = React.createElement(_CheckboxAndroid.default, checkboxProps);
  } else if (mode === 'ios') {
    checkbox = React.createElement(_CheckboxIOS.default, checkboxProps);
  } else {
    checkbox = React.createElement(_Checkbox.default, checkboxProps);
  }

  return React.createElement(_TouchableRipple.default, {
    onPress: onPress,
    testID: testID
  }, React.createElement(_reactNative.View, {
    style: [styles.container, style],
    pointerEvents: "none"
  }, isLeading && checkbox, React.createElement(_Text.default, {
    style: [styles.label, {
      color: theme.colors.text,
      textAlign: isLeading ? 'right' : 'left'
    }, labelStyle]
  }, label), !isLeading && checkbox));
};

CheckboxItem.displayName = 'Checkbox.Item';

var _default = (0, _theming.withTheme)(CheckboxItem);

exports.default = _default;
var CheckboxItemWithTheme = (0, _theming.withTheme)(CheckboxItem);
exports.CheckboxItem = CheckboxItemWithTheme;

var styles = _reactNative.StyleSheet.create({
  container: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingVertical: 8,
    paddingHorizontal: 16
  },
  label: {
    fontSize: 16,
    flexShrink: 1,
    flexGrow: 1
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,