4025df42d7e58dae3b90f8700d86c393
"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.getEmbeddedAssetUri = getEmbeddedAssetUri;var _expoConstants = _interopRequireDefault(require("expo-constants"));
var FileSystem = _interopRequireWildcard(require("expo-file-system"));
var _PlatformUtils = require("./PlatformUtils");function _getRequireWildcardCache(nodeInterop) {if (typeof WeakMap !== "function") return null;var cacheBabelInterop = new WeakMap();var cacheNodeInterop = new WeakMap();return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {return nodeInterop ? cacheNodeInterop : cacheBabelInterop;})(nodeInterop);}function _interopRequireWildcard(obj, nodeInterop) {if (!nodeInterop && obj && obj.__esModule) {return obj;}if (obj === null || typeof obj !== "object" && typeof obj !== "function") {return { default: obj };}var cache = _getRequireWildcardCache(nodeInterop);if (cache && cache.has(obj)) {return cache.get(obj);}var newObj = {};var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;for (var key in obj) {if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;if (desc && (desc.get || desc.set)) {Object.defineProperty(newObj, key, desc);} else {newObj[key] = obj[key];}}}newObj.default = obj;if (cache) {cache.set(obj, newObj);}return newObj;}

var bundledAssets = new Set(FileSystem.bundledAssets || []);

var localAssets = (0, _PlatformUtils.getLocalAssets)();




function getEmbeddedAssetUri(hash, type) {var _localAssets$localAss;
  var localAssetsKey = hash + "." + (type != null ? type : '');
  if (!localAssets.hasOwnProperty(localAssetsKey) && !__DEV__) {


    var assetName = "asset_" + hash + (type ? "." + type : '');
    if (_expoConstants.default.appOwnership !== 'standalone' || !bundledAssets.has(assetName)) {
      return null;
    }
    return "" + FileSystem.bundleDirectory + assetName;
  }
  return (_localAssets$localAss = localAssets[localAssetsKey]) != null ? _localAssets$localAss : null;
}