3dd88062274797bdb7956a9ebf6fd188
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault2(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault2(require("@babel/runtime/helpers/objectWithoutProperties"));

var _excluded = ["children", "size", "style", "theme", "visible"],
    _excluded2 = ["backgroundColor"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _colors = require("../styles/colors");

var _theming = require("../core/theming");

var _getContrastingColor = _interopRequireDefault(require("../utils/getContrastingColor"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var defaultSize = 20;

var Badge = function Badge(_ref) {
  var children = _ref.children,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? defaultSize : _ref$size,
      style = _ref.style,
      theme = _ref.theme,
      _ref$visible = _ref.visible,
      visible = _ref$visible === void 0 ? true : _ref$visible,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);

  var _React$useRef = React.useRef(new _reactNative.Animated.Value(visible ? 1 : 0)),
      opacity = _React$useRef.current;

  var isFirstRendering = React.useRef(true);
  var scale = theme.animation.scale;
  React.useEffect(function () {
    if (isFirstRendering.current) {
      isFirstRendering.current = false;
      return;
    }

    _reactNative.Animated.timing(opacity, {
      toValue: visible ? 1 : 0,
      duration: 150 * scale,
      useNativeDriver: true
    }).start();
  }, [visible, opacity, scale]);

  var _ref2 = _reactNative.StyleSheet.flatten(style) || {},
      _ref2$backgroundColor = _ref2.backgroundColor,
      backgroundColor = _ref2$backgroundColor === void 0 ? theme.colors.notification : _ref2$backgroundColor,
      restStyle = (0, _objectWithoutProperties2.default)(_ref2, _excluded2);

  var textColor = (0, _getContrastingColor.default)(backgroundColor, _colors.white, _colors.black);
  var borderRadius = size / 2;
  return React.createElement(_reactNative.Animated.Text, _extends({
    numberOfLines: 1,
    style: [_objectSpread(_objectSpread({
      opacity: opacity,
      backgroundColor: backgroundColor,
      color: textColor,
      fontSize: size * 0.5
    }, theme.fonts.regular), {}, {
      lineHeight: size,
      height: size,
      minWidth: size,
      borderRadius: borderRadius
    }), styles.container, restStyle]
  }, rest), children);
};

var _default = (0, _theming.withTheme)(Badge);

exports.default = _default;

var styles = _reactNative.StyleSheet.create({
  container: {
    alignSelf: 'flex-end',
    textAlign: 'center',
    textAlignVertical: 'center',
    paddingHorizontal: 4,
    overflow: 'hidden'
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkJhZGdlLnRzeCJdLCJuYW1lcyI6WyJkZWZhdWx0U2l6ZSIsIkJhZGdlIiwic2l6ZSIsInZpc2libGUiLCJyZXN0IiwiY3VycmVudCIsIm9wYWNpdHkiLCJSZWFjdCIsIkFuaW1hdGVkIiwiaXNGaXJzdFJlbmRlcmluZyIsImFuaW1hdGlvbiIsInNjYWxlIiwidG9WYWx1ZSIsImR1cmF0aW9uIiwidXNlTmF0aXZlRHJpdmVyIiwiYmFja2dyb3VuZENvbG9yIiwidGhlbWUiLCJyZXN0U3R5bGUiLCJTdHlsZVNoZWV0IiwidGV4dENvbG9yIiwid2hpdGUiLCJibGFjayIsImJvcmRlclJhZGl1cyIsImNvbG9yIiwiZm9udFNpemUiLCJsaW5lSGVpZ2h0IiwiaGVpZ2h0IiwibWluV2lkdGgiLCJzdHlsZXMiLCJjb250YWluZXIiLCJhbGlnblNlbGYiLCJ0ZXh0QWxpZ24iLCJ0ZXh0QWxpZ25WZXJ0aWNhbCIsInBhZGRpbmdIb3Jpem9udGFsIiwib3ZlcmZsb3ciXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsSUFBQSxLQUFBLEdBQUEsdUJBQUEsQ0FBQSxPQUFBLENBQUEsT0FBQSxDQUFBLENBQUE7O0FBQ0EsSUFBQSxZQUFBLEdBQUEsT0FBQSxDQUFBLGNBQUEsQ0FBQTs7QUFDQSxJQUFBLE9BQUEsR0FBQSxPQUFBLG9CQUFBOztBQUNBLElBQUEsUUFBQSxHQUFBLE9BQUEsbUJBQUE7O0FBQ0EsSUFBQSxvQkFBQSxHQUFBLHNCQUFBLENBQUEsT0FBQSxnQ0FBQSxDQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFQSxJQUFNQSxXQUFXLEdBQWpCLEVBQUE7O0FBa0RBLElBQU1DLEtBQUssR0FBRyxTQUFSQSxLQUFRLE9BT0Q7QUFBQSxNQVBFLFFBT0YsUUFQRSxRQU9GO0FBQUEsdUJBTFhDLElBS1c7QUFBQSxNQUxYQSxJQUtXLDBCQVBF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dGVudCI6WyJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBBbmltYXRlZCwgU3R5bGVTaGVldCwgU3R5bGVQcm9wLCBUZXh0U3R5bGUgfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuaW1wb3J0IHsgd2hpdGUsIGJsYWNrIH0gZnJvbSAnLi4vc3R5bGVzL2NvbG9ycyc7XG5pbXBvcnQgeyB3aXRoVGhlbWUgfSBmcm9tICcuLi9jb3JlL3RoZW1pbmcnO1xuaW1wb3J0IGdldENvbnRyYXN0aW5nQ29sb3IgZnJvbSAnLi4vdXRpbHMvZ2V0Q29udHJhc3RpbmdDb2xvcic7XG5cbmNvbnN0IGRlZmF1bHRTaXplID0gMjA7XG5cbnR5cGUgUHJvcHMgPSBSZWFjdC5Db21wb25lbnRQcm9wczx0eXBlb2YgQW5pbWF0ZWQuVGV4dD4gJiB7XG4gIC8qKlxuICAgKiBXaGV0aGVyIHRoZSBiYWRnZSBpcyB2aXNpYmxlXG4gICAqL1xuICB2aXNpYmxlPzogYm9vbGVhbjtcbiAgLyoqXG4gICAqIENvbnRlbnQgb2YgdGhlIGBCYWRnZWAuXG4gICAqL1xuICBjaGlsZHJlbj86IHN0cmluZyB8IG51bWJlcjtcbiAgLyoqXG4gICAqIFNpemUgb2YgdGhlIGBCYWRnZWAuXG4gICAqL1xuICBzaXplPzogbnVtYmVyO1xuICBzdHlsZT86IFN0eWxlUHJvcDxUZXh0U3R5bGU+O1xuICByZWY/OiBSZWFjdC5SZWZPYmplY3Q8dHlwZW9mIEFuaW1hdGVkLlRleHQ+O1xuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqL1xuICB0aGVtZTogUmVhY3ROYXRpdmVQYXBlci5UaGVtZTtcbn07XG5cbi8qKlxuICogQmFkZ2VzIGFyZSBzbWFsbCBzdGF0dXMgZGVzY3JpcHRvcnMgZm9yIFVJIGVsZW1lbnRzLlxuICogQSBiYWRnZSBjb25zaXN0cyBvZiBhIHNtYWxsIGNpcmNsZSwgdHlwaWNhbGx5IGNvbnRhaW5pbmcgYSBudW1iZXIgb3Igb3RoZXIgc2hvcnQgc2V0IG9mIGNoYXJhY3RlcnMsIHRoYXQgYXBwZWFycyBpbiBwcm94aW1pdHkgdG8gYW5vdGhlciBvYmplY3QuXG4gKlxuICogPGRpdiBjbGFzcz1cInNjcmVlbnNob3RzXCI+XG4gKiAgIDxmaWd1cmU+XG4gKiAgICAgPGltZyBjbGFzcz1cInNtYWxsXCIgc3JjPVwic2NyZWVuc2hvdHMvYmFkZ2UtMS5wbmdcIiAvPlxuICogICAgIDxmaWdjYXB0aW9uPkJhZGdlIHdpdGggY29udGVudDwvZmlnY2FwdGlvbj5cbiAqICAgPC9maWd1cmU+XG4gKiAgIDxmaWd1cmU+XG4gKiAgICAgPGltZyBjbGFzcz1cInNtYWxsXCIgc3JjPVwic2NyZWVuc2hvdHMvYmFkZ2UtMi5wbmdcIiAvPlxuICogICAgIDxmaWdjYXB0aW9uPkJhZGdlIHdpdGhvdXQgY29udGVudDwvZmlnY2FwdGlvbj5cbiAqICAgPC9maWd1cmU+XG4gKiA8L2Rpdj5cbiAqXG4gKiAjIyBVc2FnZVxuICogYGBganNcbiAqIGltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbiAqIGltcG9ydCB7IEJhZGdlIH0gZnJvbSAncmVhY3QtbmF0aXZlLXBhcGVyJztcbiAqXG4gKiBjb25zdCBNeUNvbXBvbmVudCA9ICgpID0+IChcbiAqICAgPEJhZGdlPjM8L0JhZGdlPlxuICogKTtcbiAqXG4gKiBleHBvcnQgZGVmYXVsdCBNeUNvbXBvbmVudDtcbiAqIGBgYFxuICovXG5jb25zdCBCYWRnZSA9ICh7XG4gIGNoaWxkcmVuLFxuICBzaXplID0gZGVmYXVsdFNpemUsXG4gIHN0eWxlLFxuICB0aGVtZSxcbiAgdmlzaWJsZSA9IHRydWUsXG4gIC4uLnJlc3Rcbn06IFByb3BzKSA9PiB7XG4gIGNvbnN0IHsgY3VycmVudDogb3BhY2l0eSB9ID0gUmVhY3QudXNlUmVmPEFuaW1hdGVkLlZhbHVlPihcbiAgICBuZXcgQW5pbWF0ZWQuVmFsdWUodmlzaWJsZSA/IDEgOiAwKVxuICApO1xuICBjb25zdCBpc0ZpcnN0UmVuZGVyaW5nID0gUmVhY3QudXNlUmVmPGJvb2xlYW4+KHRydWUpO1xuXG4gIGNvbnN0IHtcbiAgICBhbmltYXRpb246IHsgc2NhbGUgfSxcbiAgfSA9IHRoZW1lO1xuXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgLy8gRG8gbm90IHJ1biBhbmltYXRpb24gb24gdmVyeSBmaXJzdCByZW5kZXJpbmdcbiAgICBpZiAoaXNGaXJzdFJlbmRlcmluZy5jdXJyZW50KSB7XG4gICAgICBpc0ZpcnN0UmVuZGVyaW5nLmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBBbmltYXRlZC50aW1pbmcob3BhY2l0eSwge1xuICAgICAgdG9WYWx1ZTogdmlzaWJsZSA/IDEgOiAwLFxuICAgICAgZHVyYXRpb246IDE1MCAqIHNjYWxlLFxuICAgICAgdXNlTmF0aXZlRHJpdmVyOiB0cnVlLFxuICAgIH0pLnN0YXJ0KCk7XG4gIH0sIFt2aXNpYmxlLCBvcGFjaXR5LCBzY2FsZV0pO1xuXG4gIGNvbnN0IHtcbiAgICBiYWNrZ3JvdW5kQ29sb3IgPSB0aGVtZS5jb2xvcnMubm90aWZpY2F0aW9uLFxuICAgIC4uLnJlc3RTdHlsZVxuICB9ID0gKFN0eWxlU2hlZXQuZmxhdHRlbihzdHlsZSkgfHwge30pIGFzIFRleHRTdHlsZTtcblxuICBjb25zdCB0ZXh0Q29sb3IgPSBnZXRDb250cmFzdGluZ0NvbG9yKGJhY2tncm91bmRDb2xvciwgd2hpdGUsIGJsYWNrKTtcblxuICBjb25zdCBib3JkZXJSYWRpdXMgPSBzaXplIC8gMjtcblxuICByZXR1cm4gKFxuICAgIDxBbmltYXRlZC5UZXh0XG4gICAgICBudW1iZXJPZkxpbmVzPXsxfVxuICAgICAgc3R5bGU9e1tcbiAgICAgICAge1xuICAgICAgICAgIG9wYWNpdHksXG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yLFxuICAgICAgICAgIGNvbG9yOiB0ZXh0Q29sb3IsXG4gICAgICAgICAgZm9udFNpemU6IHNpemUgKiAwLjUsXG4gICAgICAgICAgLi4udGhlbWUuZm9udHMucmVndWxhcixcbiAgICAgICAgICBsaW5lSGVpZ2h0OiBzaXplLFxuICAgICAgICAgIGhlaWdodDogc2l6ZSxcbiAgICAgICAgICBtaW5XaWR0aDogc2l6ZSxcbiAgICAgICAgICBib3JkZXJSYWRpdXMsXG4gICAgICAgIH0sXG4gICAgICAgIHN0eWxlcy5jb250YWluZXIsXG4gICAgICAgIHJlc3RTdHlsZSxcbiAgICAgIF19XG4gICAgICB7Li4ucmVzdH1cbiAgICA+XG4gICAgICB7Y2hpbGRyZW59XG4gICAgPC9BbmltYXRlZC5UZXh0PlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgd2l0aFRoZW1lKEJhZGdlKTtcblxuY29uc3Qgc3R5bGVzID0gU3R5bGVTaGVldC5jcmVhdGUoe1xuICBjb250YWluZXI6IHtcbiAgICBhbGlnblNlbGY6ICdmbGV4LWVuZCcsXG4gICAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgICB0ZXh0QWxpZ25WZXJ0aWNhbDogJ2NlbnRlcicsXG4gICAgcGFkZGluZ0hvcml6b250YWw6IDQsXG4gICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICB9LFxufSk7XG4iXX0=