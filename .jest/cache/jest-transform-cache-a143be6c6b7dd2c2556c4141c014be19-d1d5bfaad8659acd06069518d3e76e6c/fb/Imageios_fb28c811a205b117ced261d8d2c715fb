bb8c08b53153141c20856c3fb0f66cf2










'use strict';var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));












var _NativeImageLoaderIOS = _interopRequireDefault(require("./NativeImageLoaderIOS"));

var _ImageViewNativeComponent = _interopRequireDefault(require("./ImageViewNativeComponent"));var _this = this,_jsxFileName = "C:\\Users\\ashee\\Documents\\Javascript\\React\\React Native\\suduko\\node_modules\\react-native\\Libraries\\Image\\Image.ios.js";

function getSize(
uri,
success,
failure)
{
  _NativeImageLoaderIOS.default.getSize(uri).
  then(function (_ref) {var _ref2 = (0, _slicedToArray2.default)(_ref, 2),width = _ref2[0],height = _ref2[1];return success(width, height);}).
  catch(
  failure ||
  function () {
    console.warn('Failed to get size for image ' + uri);
  });

}

function getSizeWithHeaders(
uri,
headers,
success,
failure)
{
  return _NativeImageLoaderIOS.default.getSizeWithHeaders(uri, headers).
  then(function (sizes) {
    success(sizes.width, sizes.height);
  }).
  catch(
  failure ||
  function () {
    console.warn('Failed to get size for image: ' + uri);
  });

}

function prefetch(url) {
  return _NativeImageLoaderIOS.default.prefetchImage(url);
}

function queryCache(
urls) {return _regenerator.default.async(function queryCache$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:_context.next = 2;return _regenerator.default.awrap(

          _NativeImageLoaderIOS.default.queryCache(urls));case 2:return _context.abrupt("return", _context.sent);case 3:case "end":return _context.stop();}}}, null, null, null, Promise);}


















var Image = function Image(props, forwardedRef) {
  var source = require("./resolveAssetSource")(props.source) || {
    uri: undefined,
    width: undefined,
    height: undefined };


  var sources;
  var style;
  if (Array.isArray(source)) {

    style = require("../StyleSheet/flattenStyle")([styles.base, props.style]) || {};
    sources = source;
  } else {
    var _width = source.width,_height = source.height,uri = source.uri;

    style = require("../StyleSheet/flattenStyle")([{ width: _width, height: _height }, styles.base, props.style]) || {};
    sources = [source];

    if (uri === '') {
      console.warn('source.uri should not be an empty string');
    }
  }

  var resizeMode = props.resizeMode || style.resizeMode || 'cover';
  var tintColor = style.tintColor;

  if (props.src != null) {
    console.warn(
    'The <Image> component requires a `source` property rather than `src`.');

  }

  if (props.children != null) {
    throw new Error(
    'The <Image> component cannot contain children. If you want to render content on top of the image, consider using the <ImageBackground> component or absolute positioning.');

  }

  return (
    require('react').createElement(_ImageViewNativeComponent.default, (0, _extends2.default)({},
    props, {
      ref: forwardedRef,
      style: style,
      resizeMode: resizeMode,
      tintColor: tintColor,
      source: sources, __self: _this, __self: _this, __source: { fileName: _jsxFileName, lineNumber: 127, columnNumber: 5 } })));


};

Image = require('react').forwardRef(


Image);
Image.displayName = 'Image';









Image.getSize = getSize;










Image.getSizeWithHeaders = getSizeWithHeaders;










Image.prefetch = prefetch;









Image.queryCache = queryCache;









Image.resolveAssetSource = require("./resolveAssetSource");




Image.propTypes = require("../DeprecatedPropTypes/DeprecatedImagePropType");

var styles = require("../StyleSheet/StyleSheet").create({
  base: {
    overflow: 'hidden' } });



module.exports = Image;