{"version":3,"sources":["modal.js"],"names":["defaultProps","animationIn","animationInTiming","animationOut","animationOutTiming","avoidKeyboard","coverScreen","hasBackdrop","backdropColor","backdropOpacity","backdropTransitionInTiming","backdropTransitionOutTiming","customBackdrop","useNativeDriver","deviceHeight","deviceWidth","hideModalContentWhileAnimating","propagateSwipe","isVisible","panResponderThreshold","swipeThreshold","onModalShow","onModalWillShow","onModalHide","onModalWillHide","onBackdropPress","onBackButtonPress","scrollTo","scrollOffset","scrollOffsetMax","scrollHorizontal","statusBarTranslucent","supportedOrientations","extractAnimationFromProps","props","ReactNativeModal","state","showContent","Dimensions","get","width","height","isSwipeable","swipeDirection","pan","isTransitioning","inSwipeClosingState","currentSwipingDirection","panResponder","didUpdateDimensionsEmitter","interactionHandle","getDeviceHeight","getDeviceWidth","shouldPropagateSwipe","evt","gestureState","buildPanResponder","animEvt","PanResponder","create","onMoveShouldSetPanResponder","shouldSetPanResponder","Math","abs","dx","dy","onSwipeStart","getSwipingDirection","createAnimationEventForSwipe","onStartShouldSetPanResponder","e","hasScrollableView","_dispatchInstances","some","instance","test","type","onPanResponderMove","isSwipeDirectionAllowed","newOpacityFactor","calcDistancePercentage","backdropRef","transitionTo","opacity","onSwipeMove","offsetX","x","animated","offsetY","y","onPanResponderRelease","accDistance","getAccDistancePerDirection","onSwipeComplete","swipingDirection","onSwipe","onSwipeCancel","Animated","spring","toValue","bounciness","start","moveY","y0","moveX","x0","event","isDirectionIncluded","direction","Array","isArray","includes","draggedDown","draggedUp","draggedLeft","draggedRight","handleDimensionsUpdate","setState","open","setValue","contentRef","InteractionManager","createInteractionHandle","animate","then","clearInteractionHandle","close","makeBackdrop","React","isValidElement","console","warn","useNativeDriverForBackdrop","hasCustomBackdrop","backdropComputedStyle","backgroundColor","backdropWrapper","createElement","animatable","View","ref","undefined","style","styles","backdrop","TouchableWithoutFeedback","onPress","ValueXY","DeviceEventEmitter","addListener","BackHandler","addEventListener","removeEventListener","remove","prevProps","children","otherProps","testID","containerProps","computedStyle","margin","transform","translateY","content","panHandlers","panPosition","getTranslateTransform","getLayout","_children","containerView","pointerEvents","containerBox","Modal","transparent","animationType","visible","onRequestClose","KeyboardAvoidingView","behavior","Platform","OS","concat","nextProps","Component","propTypes","PropTypes","oneOfType","string","object","number","bool","node","isRequired","func","arrayOf","oneOf","any"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Animated, DeviceEventEmitter, Dimensions, InteractionManager, KeyboardAvoidingView, Modal, PanResponder, BackHandler, Platform, TouchableWithoutFeedback, View, } from 'react-native';\nimport * as PropTypes from 'prop-types';\nimport * as animatable from 'react-native-animatable';\nimport { initializeAnimations, buildAnimations, reversePercentage, } from './utils';\nimport styles from './modal.style';\n// Override default react-native-animatable animations\ninitializeAnimations();\nconst defaultProps = {\n    animationIn: 'slideInUp',\n    animationInTiming: 300,\n    animationOut: 'slideOutDown',\n    animationOutTiming: 300,\n    avoidKeyboard: false,\n    coverScreen: true,\n    hasBackdrop: true,\n    backdropColor: 'black',\n    backdropOpacity: 0.7,\n    backdropTransitionInTiming: 300,\n    backdropTransitionOutTiming: 300,\n    customBackdrop: null,\n    useNativeDriver: false,\n    deviceHeight: null,\n    deviceWidth: null,\n    hideModalContentWhileAnimating: false,\n    propagateSwipe: false,\n    isVisible: false,\n    panResponderThreshold: 4,\n    swipeThreshold: 100,\n    onModalShow: (() => null),\n    onModalWillShow: (() => null),\n    onModalHide: (() => null),\n    onModalWillHide: (() => null),\n    onBackdropPress: (() => null),\n    onBackButtonPress: (() => null),\n    scrollTo: null,\n    scrollOffset: 0,\n    scrollOffsetMax: 0,\n    scrollHorizontal: false,\n    statusBarTranslucent: false,\n    supportedOrientations: ['portrait', 'landscape'],\n};\nconst extractAnimationFromProps = (props) => ({\n    animationIn: props.animationIn,\n    animationOut: props.animationOut,\n});\nexport class ReactNativeModal extends React.Component {\n    constructor(props) {\n        super(props);\n        // We use an internal state for keeping track of the modal visibility: this allows us to keep\n        // the modal visible during the exit animation, even if the user has already change the\n        // isVisible prop to false.\n        // We store in the state the device width and height so that we can update the modal on\n        // device rotation.\n        this.state = {\n            showContent: true,\n            isVisible: false,\n            deviceWidth: Dimensions.get('window').width,\n            deviceHeight: Dimensions.get('window').height,\n            isSwipeable: !!this.props.swipeDirection,\n            pan: null,\n        };\n        this.isTransitioning = false;\n        this.inSwipeClosingState = false;\n        this.currentSwipingDirection = null;\n        this.panResponder = null;\n        this.didUpdateDimensionsEmitter = null;\n        this.interactionHandle = null;\n        this.getDeviceHeight = () => this.props.deviceHeight || this.state.deviceHeight;\n        this.getDeviceWidth = () => this.props.deviceWidth || this.state.deviceWidth;\n        this.onBackButtonPress = () => {\n            if (this.props.onBackButtonPress && this.props.isVisible) {\n                this.props.onBackButtonPress();\n                return true;\n            }\n            return false;\n        };\n        this.shouldPropagateSwipe = (evt, gestureState) => {\n            return typeof this.props.propagateSwipe === 'function'\n                ? this.props.propagateSwipe(evt, gestureState)\n                : this.props.propagateSwipe;\n        };\n        this.buildPanResponder = () => {\n            let animEvt = null;\n            this.panResponder = PanResponder.create({\n                onMoveShouldSetPanResponder: (evt, gestureState) => {\n                    // Use propagateSwipe to allow inner content to scroll. See PR:\n                    // https://github.com/react-native-community/react-native-modal/pull/246\n                    if (!this.shouldPropagateSwipe(evt, gestureState)) {\n                        // The number \"4\" is just a good tradeoff to make the panResponder\n                        // work correctly even when the modal has touchable buttons.\n                        // However, if you want to overwrite this and choose for yourself,\n                        // set panResponderThreshold in the props.\n                        // For reference:\n                        // https://github.com/react-native-community/react-native-modal/pull/197\n                        const shouldSetPanResponder = Math.abs(gestureState.dx) >= this.props.panResponderThreshold ||\n                            Math.abs(gestureState.dy) >= this.props.panResponderThreshold;\n                        if (shouldSetPanResponder && this.props.onSwipeStart) {\n                            this.props.onSwipeStart(gestureState);\n                        }\n                        this.currentSwipingDirection = this.getSwipingDirection(gestureState);\n                        animEvt = this.createAnimationEventForSwipe();\n                        return shouldSetPanResponder;\n                    }\n                    return false;\n                },\n                onStartShouldSetPanResponder: (e, gestureState) => {\n                    const hasScrollableView = e._dispatchInstances &&\n                        e._dispatchInstances.some((instance) => /scrollview|flatlist/i.test(instance.type));\n                    if (hasScrollableView &&\n                        this.shouldPropagateSwipe(e, gestureState) &&\n                        this.props.scrollTo &&\n                        this.props.scrollOffset > 0) {\n                        return false; // user needs to be able to scroll content back up\n                    }\n                    if (this.props.onSwipeStart) {\n                        this.props.onSwipeStart(gestureState);\n                    }\n                    // Cleared so that onPanResponderMove can wait to have some delta\n                    // to work with\n                    this.currentSwipingDirection = null;\n                    return true;\n                },\n                onPanResponderMove: (evt, gestureState) => {\n                    // Using onStartShouldSetPanResponder we don't have any delta so we don't know\n                    // The direction to which the user is swiping until some move have been done\n                    if (!this.currentSwipingDirection) {\n                        if (gestureState.dx === 0 && gestureState.dy === 0) {\n                            return;\n                        }\n                        this.currentSwipingDirection = this.getSwipingDirection(gestureState);\n                        animEvt = this.createAnimationEventForSwipe();\n                    }\n                    if (this.isSwipeDirectionAllowed(gestureState)) {\n                        // Dim the background while swiping the modal\n                        const newOpacityFactor = 1 - this.calcDistancePercentage(gestureState);\n                        this.backdropRef &&\n                            this.backdropRef.transitionTo({\n                                opacity: this.props.backdropOpacity * newOpacityFactor,\n                            });\n                        animEvt(evt, gestureState);\n                        if (this.props.onSwipeMove) {\n                            this.props.onSwipeMove(newOpacityFactor, gestureState);\n                        }\n                    }\n                    else {\n                        if (this.props.scrollTo) {\n                            if (this.props.scrollHorizontal) {\n                                let offsetX = -gestureState.dx;\n                                if (offsetX > this.props.scrollOffsetMax) {\n                                    offsetX -= (offsetX - this.props.scrollOffsetMax) / 2;\n                                }\n                                this.props.scrollTo({ x: offsetX, animated: false });\n                            }\n                            else {\n                                let offsetY = -gestureState.dy;\n                                if (offsetY > this.props.scrollOffsetMax) {\n                                    offsetY -= (offsetY - this.props.scrollOffsetMax) / 2;\n                                }\n                                this.props.scrollTo({ y: offsetY, animated: false });\n                            }\n                        }\n                    }\n                },\n                onPanResponderRelease: (evt, gestureState) => {\n                    // Call the onSwipe prop if the threshold has been exceeded on the right direction\n                    const accDistance = this.getAccDistancePerDirection(gestureState);\n                    if (accDistance > this.props.swipeThreshold &&\n                        this.isSwipeDirectionAllowed(gestureState)) {\n                        if (this.props.onSwipeComplete) {\n                            this.inSwipeClosingState = true;\n                            this.props.onSwipeComplete({\n                                swipingDirection: this.getSwipingDirection(gestureState),\n                            }, gestureState);\n                            return;\n                        }\n                        // Deprecated. Remove later.\n                        if (this.props.onSwipe) {\n                            this.inSwipeClosingState = true;\n                            this.props.onSwipe();\n                            return;\n                        }\n                    }\n                    //Reset backdrop opacity and modal position\n                    if (this.props.onSwipeCancel) {\n                        this.props.onSwipeCancel(gestureState);\n                    }\n                    if (this.backdropRef) {\n                        this.backdropRef.transitionTo({\n                            opacity: this.props.backdropOpacity,\n                        });\n                    }\n                    Animated.spring(this.state.pan, {\n                        toValue: { x: 0, y: 0 },\n                        bounciness: 0,\n                        useNativeDriver: false,\n                    }).start();\n                    if (this.props.scrollTo) {\n                        if (this.props.scrollOffset > this.props.scrollOffsetMax) {\n                            this.props.scrollTo({\n                                y: this.props.scrollOffsetMax,\n                                animated: true,\n                            });\n                        }\n                    }\n                },\n            });\n        };\n        this.getAccDistancePerDirection = (gestureState) => {\n            switch (this.currentSwipingDirection) {\n                case 'up':\n                    return -gestureState.dy;\n                case 'down':\n                    return gestureState.dy;\n                case 'right':\n                    return gestureState.dx;\n                case 'left':\n                    return -gestureState.dx;\n                default:\n                    return 0;\n            }\n        };\n        this.getSwipingDirection = (gestureState) => {\n            if (Math.abs(gestureState.dx) > Math.abs(gestureState.dy)) {\n                return gestureState.dx > 0 ? 'right' : 'left';\n            }\n            return gestureState.dy > 0 ? 'down' : 'up';\n        };\n        this.calcDistancePercentage = (gestureState) => {\n            switch (this.currentSwipingDirection) {\n                case 'down':\n                    return ((gestureState.moveY - gestureState.y0) /\n                        ((this.props.deviceHeight || this.state.deviceHeight) -\n                            gestureState.y0));\n                case 'up':\n                    return reversePercentage(gestureState.moveY / gestureState.y0);\n                case 'left':\n                    return reversePercentage(gestureState.moveX / gestureState.x0);\n                case 'right':\n                    return ((gestureState.moveX - gestureState.x0) /\n                        ((this.props.deviceWidth || this.state.deviceWidth) - gestureState.x0));\n                default:\n                    return 0;\n            }\n        };\n        this.createAnimationEventForSwipe = () => {\n            if (this.currentSwipingDirection === 'right' ||\n                this.currentSwipingDirection === 'left') {\n                return Animated.event([null, { dx: this.state.pan.x }], {\n                    useNativeDriver: false,\n                });\n            }\n            else {\n                return Animated.event([null, { dy: this.state.pan.y }], {\n                    useNativeDriver: false,\n                });\n            }\n        };\n        this.isDirectionIncluded = (direction) => {\n            return Array.isArray(this.props.swipeDirection)\n                ? this.props.swipeDirection.includes(direction)\n                : this.props.swipeDirection === direction;\n        };\n        this.isSwipeDirectionAllowed = ({ dy, dx }) => {\n            const draggedDown = dy > 0;\n            const draggedUp = dy < 0;\n            const draggedLeft = dx < 0;\n            const draggedRight = dx > 0;\n            if (this.currentSwipingDirection === 'up' &&\n                this.isDirectionIncluded('up') &&\n                draggedUp) {\n                return true;\n            }\n            else if (this.currentSwipingDirection === 'down' &&\n                this.isDirectionIncluded('down') &&\n                draggedDown) {\n                return true;\n            }\n            else if (this.currentSwipingDirection === 'right' &&\n                this.isDirectionIncluded('right') &&\n                draggedRight) {\n                return true;\n            }\n            else if (this.currentSwipingDirection === 'left' &&\n                this.isDirectionIncluded('left') &&\n                draggedLeft) {\n                return true;\n            }\n            return false;\n        };\n        this.handleDimensionsUpdate = () => {\n            if (!this.props.deviceHeight && !this.props.deviceWidth) {\n                // Here we update the device dimensions in the state if the layout changed\n                // (triggering a render)\n                const deviceWidth = Dimensions.get('window').width;\n                const deviceHeight = Dimensions.get('window').height;\n                if (deviceWidth !== this.state.deviceWidth ||\n                    deviceHeight !== this.state.deviceHeight) {\n                    this.setState({ deviceWidth, deviceHeight });\n                }\n            }\n        };\n        this.open = () => {\n            if (this.isTransitioning) {\n                return;\n            }\n            this.isTransitioning = true;\n            if (this.backdropRef) {\n                this.backdropRef.transitionTo({ opacity: this.props.backdropOpacity }, this.props.backdropTransitionInTiming);\n            }\n            // This is for resetting the pan position,otherwise the modal gets stuck\n            // at the last released position when you try to open it.\n            // TODO: Could certainly be improved - no idea for the moment.\n            if (this.state.isSwipeable) {\n                this.state.pan.setValue({ x: 0, y: 0 });\n            }\n            if (this.contentRef) {\n                this.props.onModalWillShow && this.props.onModalWillShow();\n                if (this.interactionHandle == null) {\n                    this.interactionHandle = InteractionManager.createInteractionHandle();\n                }\n                this.contentRef\n                    .animate(this.animationIn, this.props.animationInTiming)\n                    .then(() => {\n                    this.isTransitioning = false;\n                    if (this.interactionHandle) {\n                        InteractionManager.clearInteractionHandle(this.interactionHandle);\n                        this.interactionHandle = null;\n                    }\n                    if (!this.props.isVisible) {\n                        this.close();\n                    }\n                    else {\n                        this.props.onModalShow();\n                    }\n                });\n            }\n        };\n        this.close = () => {\n            if (this.isTransitioning) {\n                return;\n            }\n            this.isTransitioning = true;\n            if (this.backdropRef) {\n                this.backdropRef.transitionTo({ opacity: 0 }, this.props.backdropTransitionOutTiming);\n            }\n            let animationOut = this.animationOut;\n            if (this.inSwipeClosingState) {\n                this.inSwipeClosingState = false;\n                if (this.currentSwipingDirection === 'up') {\n                    animationOut = 'slideOutUp';\n                }\n                else if (this.currentSwipingDirection === 'down') {\n                    animationOut = 'slideOutDown';\n                }\n                else if (this.currentSwipingDirection === 'right') {\n                    animationOut = 'slideOutRight';\n                }\n                else if (this.currentSwipingDirection === 'left') {\n                    animationOut = 'slideOutLeft';\n                }\n            }\n            if (this.contentRef) {\n                this.props.onModalWillHide && this.props.onModalWillHide();\n                if (this.interactionHandle == null) {\n                    this.interactionHandle = InteractionManager.createInteractionHandle();\n                }\n                this.contentRef\n                    .animate(animationOut, this.props.animationOutTiming)\n                    .then(() => {\n                    this.isTransitioning = false;\n                    if (this.interactionHandle) {\n                        InteractionManager.clearInteractionHandle(this.interactionHandle);\n                        this.interactionHandle = null;\n                    }\n                    if (this.props.isVisible) {\n                        this.open();\n                    }\n                    else {\n                        this.setState({\n                            showContent: false,\n                        }, () => {\n                            this.setState({\n                                isVisible: false,\n                            }, () => {\n                                this.props.onModalHide();\n                            });\n                        });\n                    }\n                });\n            }\n        };\n        this.makeBackdrop = () => {\n            if (!this.props.hasBackdrop) {\n                return null;\n            }\n            if (this.props.customBackdrop &&\n                !React.isValidElement(this.props.customBackdrop)) {\n                console.warn('Invalid customBackdrop element passed to Modal. You must provide a valid React element.');\n            }\n            const { customBackdrop, backdropColor, useNativeDriver, useNativeDriverForBackdrop, onBackdropPress, } = this.props;\n            const hasCustomBackdrop = !!this.props.customBackdrop;\n            const backdropComputedStyle = [\n                {\n                    width: this.getDeviceWidth(),\n                    height: this.getDeviceHeight(),\n                    backgroundColor: this.state.showContent && !hasCustomBackdrop\n                        ? backdropColor\n                        : 'transparent',\n                },\n            ];\n            const backdropWrapper = (React.createElement(animatable.View, { ref: ref => (this.backdropRef = ref), useNativeDriver: useNativeDriverForBackdrop !== undefined\n                    ? useNativeDriverForBackdrop\n                    : useNativeDriver, style: [styles.backdrop, backdropComputedStyle] }, hasCustomBackdrop && customBackdrop));\n            if (hasCustomBackdrop) {\n                // The user will handle backdrop presses himself\n                return backdropWrapper;\n            }\n            // If there's no custom backdrop, handle presses with\n            // TouchableWithoutFeedback\n            return (React.createElement(TouchableWithoutFeedback, { onPress: onBackdropPress }, backdropWrapper));\n        };\n        const { animationIn, animationOut } = buildAnimations(extractAnimationFromProps(props));\n        this.animationIn = animationIn;\n        this.animationOut = animationOut;\n        if (this.state.isSwipeable) {\n            this.state = {\n                ...this.state,\n                pan: new Animated.ValueXY(),\n            };\n            this.buildPanResponder();\n        }\n        if (props.isVisible) {\n            this.state = {\n                ...this.state,\n                isVisible: true,\n                showContent: true,\n            };\n        }\n    }\n    static getDerivedStateFromProps(nextProps, state) {\n        if (!state.isVisible && nextProps.isVisible) {\n            return { isVisible: true, showContent: true };\n        }\n        return null;\n    }\n    componentDidMount() {\n        // Show deprecation message\n        if (this.props.onSwipe) {\n            console.warn('`<Modal onSwipe=\"...\" />` is deprecated and will be removed starting from 13.0.0. Use `<Modal onSwipeComplete=\"...\" />` instead.');\n        }\n        this.didUpdateDimensionsEmitter = DeviceEventEmitter.addListener('didUpdateDimensions', this.handleDimensionsUpdate);\n        if (this.state.isVisible) {\n            this.open();\n        }\n        BackHandler.addEventListener('hardwareBackPress', this.onBackButtonPress);\n    }\n    componentWillUnmount() {\n        BackHandler.removeEventListener('hardwareBackPress', this.onBackButtonPress);\n        if (this.didUpdateDimensionsEmitter) {\n            this.didUpdateDimensionsEmitter.remove();\n        }\n        if (this.interactionHandle) {\n            InteractionManager.clearInteractionHandle(this.interactionHandle);\n            this.interactionHandle = null;\n        }\n    }\n    componentDidUpdate(prevProps) {\n        // If the animations have been changed then rebuild them to make sure we're\n        // using the most up-to-date ones\n        if (this.props.animationIn !== prevProps.animationIn ||\n            this.props.animationOut !== prevProps.animationOut) {\n            const { animationIn, animationOut } = buildAnimations(extractAnimationFromProps(this.props));\n            this.animationIn = animationIn;\n            this.animationOut = animationOut;\n        }\n        // If backdrop opacity has been changed then make sure to update it\n        if (this.props.backdropOpacity !== prevProps.backdropOpacity &&\n            this.backdropRef) {\n            this.backdropRef.transitionTo({ opacity: this.props.backdropOpacity }, this.props.backdropTransitionInTiming);\n        }\n        // On modal open request, we slide the view up and fade in the backdrop\n        if (this.props.isVisible && !prevProps.isVisible) {\n            this.open();\n        }\n        else if (!this.props.isVisible && prevProps.isVisible) {\n            // On modal close request, we slide the view down and fade out the backdrop\n            this.close();\n        }\n    }\n    render() {\n        /* eslint-disable @typescript-eslint/no-unused-vars */\n        const { animationIn, animationInTiming, animationOut, animationOutTiming, avoidKeyboard, coverScreen, hasBackdrop, backdropColor, backdropOpacity, backdropTransitionInTiming, backdropTransitionOutTiming, customBackdrop, children, isVisible, onModalShow, onBackButtonPress, useNativeDriver, propagateSwipe, style, ...otherProps } = this.props;\n        const { testID, ...containerProps } = otherProps;\n        const computedStyle = [\n            { margin: this.getDeviceWidth() * 0.05, transform: [{ translateY: 0 }] },\n            styles.content,\n            style,\n        ];\n        let panHandlers = {};\n        let panPosition = {};\n        if (this.state.isSwipeable) {\n            panHandlers = { ...this.panResponder.panHandlers };\n            if (useNativeDriver) {\n                panPosition = {\n                    transform: this.state.pan.getTranslateTransform(),\n                };\n            }\n            else {\n                panPosition = this.state.pan.getLayout();\n            }\n        }\n        // The user might decide not to show the modal while it is animating\n        // to enhance performance.\n        const _children = this.props.hideModalContentWhileAnimating &&\n            this.props.useNativeDriver &&\n            !this.state.showContent ? (React.createElement(animatable.View, null)) : (children);\n        const containerView = (React.createElement(animatable.View, Object.assign({}, panHandlers, { ref: ref => (this.contentRef = ref), style: [panPosition, computedStyle], pointerEvents: \"box-none\", useNativeDriver: useNativeDriver }, containerProps), _children));\n        // If coverScreen is set to false by the user\n        // we render the modal inside the parent view directly\n        if (!coverScreen && this.state.isVisible) {\n            return (React.createElement(View, { pointerEvents: \"box-none\", style: [styles.backdrop, styles.containerBox] },\n                this.makeBackdrop(),\n                containerView));\n        }\n        return (React.createElement(Modal, Object.assign({ transparent: true, animationType: 'none', visible: this.state.isVisible, onRequestClose: onBackButtonPress }, otherProps),\n            this.makeBackdrop(),\n            avoidKeyboard ? (React.createElement(KeyboardAvoidingView, { behavior: Platform.OS === 'ios' ? 'padding' : undefined, pointerEvents: \"box-none\", style: computedStyle.concat([{ margin: 0 }]) }, containerView)) : (containerView)));\n    }\n}\nReactNativeModal.propTypes = {\n    animationIn: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    animationInTiming: PropTypes.number,\n    animationOut: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    animationOutTiming: PropTypes.number,\n    avoidKeyboard: PropTypes.bool,\n    coverScreen: PropTypes.bool,\n    hasBackdrop: PropTypes.bool,\n    backdropColor: PropTypes.string,\n    backdropOpacity: PropTypes.number,\n    backdropTransitionInTiming: PropTypes.number,\n    backdropTransitionOutTiming: PropTypes.number,\n    customBackdrop: PropTypes.node,\n    children: PropTypes.node.isRequired,\n    deviceHeight: PropTypes.number,\n    deviceWidth: PropTypes.number,\n    isVisible: PropTypes.bool.isRequired,\n    hideModalContentWhileAnimating: PropTypes.bool,\n    propagateSwipe: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),\n    onModalShow: PropTypes.func,\n    onModalWillShow: PropTypes.func,\n    onModalHide: PropTypes.func,\n    onModalWillHide: PropTypes.func,\n    onBackButtonPress: PropTypes.func,\n    onBackdropPress: PropTypes.func,\n    panResponderThreshold: PropTypes.number,\n    onSwipeStart: PropTypes.func,\n    onSwipeMove: PropTypes.func,\n    onSwipeComplete: PropTypes.func,\n    onSwipeCancel: PropTypes.func,\n    swipeThreshold: PropTypes.number,\n    swipeDirection: PropTypes.oneOfType([\n        PropTypes.arrayOf(PropTypes.oneOf(['up', 'down', 'left', 'right'])),\n        PropTypes.oneOf(['up', 'down', 'left', 'right']),\n    ]),\n    useNativeDriver: PropTypes.bool,\n    useNativeDriverForBackdrop: PropTypes.bool,\n    style: PropTypes.any,\n    scrollTo: PropTypes.func,\n    scrollOffset: PropTypes.number,\n    scrollOffsetMax: PropTypes.number,\n    scrollHorizontal: PropTypes.bool,\n    supportedOrientations: PropTypes.arrayOf(PropTypes.oneOf([\n        'portrait',\n        'portrait-upside-down',\n        'landscape',\n        'landscape-left',\n        'landscape-right',\n    ])),\n};\nReactNativeModal.defaultProps = defaultProps;\nexport default ReactNativeModal;\n"]}