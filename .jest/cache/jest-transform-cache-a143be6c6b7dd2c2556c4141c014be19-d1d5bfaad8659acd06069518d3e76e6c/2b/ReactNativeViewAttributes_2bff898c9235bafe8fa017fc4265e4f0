fc73e5a4818cc1d6e89ed46327a57142
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var ReactNativeStyleAttributes = require("./ReactNativeStyleAttributes");

var UIView = {
  pointerEvents: true,
  accessible: true,
  accessibilityActions: true,
  accessibilityLabel: true,
  accessibilityLiveRegion: true,
  accessibilityRole: true,
  accessibilityState: true,
  accessibilityValue: true,
  accessibilityHint: true,
  importantForAccessibility: true,
  nativeID: true,
  testID: true,
  renderToHardwareTextureAndroid: true,
  shouldRasterizeIOS: true,
  onLayout: true,
  onAccessibilityAction: true,
  onAccessibilityTap: true,
  onMagicTap: true,
  onAccessibilityEscape: true,
  collapsable: true,
  needsOffscreenAlphaCompositing: true,
  style: ReactNativeStyleAttributes
};

var RCTView = _objectSpread(_objectSpread({}, UIView), {}, {
  removeClippedSubviews: true
});

var ReactNativeViewAttributes = {
  UIView: UIView,
  RCTView: RCTView
};
module.exports = ReactNativeViewAttributes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlJlYWN0TmF0aXZlVmlld0F0dHJpYnV0ZXMuanMiXSwibmFtZXMiOlsiUmVhY3ROYXRpdmVTdHlsZUF0dHJpYnV0ZXMiLCJyZXF1aXJlIiwiVUlWaWV3IiwicG9pbnRlckV2ZW50cyIsImFjY2Vzc2libGUiLCJhY2Nlc3NpYmlsaXR5QWN0aW9ucyIsImFjY2Vzc2liaWxpdHlMYWJlbCIsImFjY2Vzc2liaWxpdHlMaXZlUmVnaW9uIiwiYWNjZXNzaWJpbGl0eVJvbGUiLCJhY2Nlc3NpYmlsaXR5U3RhdGUiLCJhY2Nlc3NpYmlsaXR5VmFsdWUiLCJhY2Nlc3NpYmlsaXR5SGludCIsImltcG9ydGFudEZvckFjY2Vzc2liaWxpdHkiLCJuYXRpdmVJRCIsInRlc3RJRCIsInJlbmRlclRvSGFyZHdhcmVUZXh0dXJlQW5kcm9pZCIsInNob3VsZFJhc3Rlcml6ZUlPUyIsIm9uTGF5b3V0Iiwib25BY2Nlc3NpYmlsaXR5QWN0aW9uIiwib25BY2Nlc3NpYmlsaXR5VGFwIiwib25NYWdpY1RhcCIsIm9uQWNjZXNzaWJpbGl0eUVzY2FwZSIsImNvbGxhcHNhYmxlIiwibmVlZHNPZmZzY3JlZW5BbHBoYUNvbXBvc2l0aW5nIiwic3R5bGUiLCJSQ1RWaWV3IiwicmVtb3ZlQ2xpcHBlZFN1YnZpZXdzIiwiUmVhY3ROYXRpdmVWaWV3QXR0cmlidXRlcyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQVVBOzs7Ozs7Ozs7O0FBRUEsSUFBTUEsMEJBQTBCLEdBQUdDLE9BQU8sZ0NBQTFDOztBQUVBLElBQU1DLE1BQU0sR0FBRztBQUNiQyxFQUFBQSxhQUFhLEVBQUUsSUFERjtBQUViQyxFQUFBQSxVQUFVLEVBQUUsSUFGQztBQUdiQyxFQUFBQSxvQkFBb0IsRUFBRSxJQUhUO0FBSWJDLEVBQUFBLGtCQUFrQixFQUFFLElBSlA7QUFLYkMsRUFBQUEsdUJBQXVCLEVBQUUsSUFMWjtBQU1iQyxFQUFBQSxpQkFBaUIsRUFBRSxJQU5OO0FBT2JDLEVBQUFBLGtCQUFrQixFQUFFLElBUFA7QUFRYkMsRUFBQUEsa0JBQWtCLEVBQUUsSUFSUDtBQVNiQyxFQUFBQSxpQkFBaUIsRUFBRSxJQVROO0FBVWJDLEVBQUFBLHlCQUF5QixFQUFFLElBVmQ7QUFXYkMsRUFBQUEsUUFBUSxFQUFFLElBWEc7QUFZYkMsRUFBQUEsTUFBTSxFQUFFLElBWks7QUFhYkMsRUFBQUEsOEJBQThCLEVBQUUsSUFibkI7QUFjYkMsRUFBQUEsa0JBQWtCLEVBQUUsSUFkUDtBQWViQyxFQUFBQSxRQUFRLEVBQUUsSUFmRztBQWdCYkMsRUFBQUEscUJBQXFCLEVBQUUsSUFoQlY7QUFpQmJDLEVBQUFBLGtCQUFrQixFQUFFLElBakJQO0FBa0JiQyxFQUFBQSxVQUFVLEVBQUUsSUFsQkM7QUFtQmJDLEVBQUFBLHFCQUFxQixFQUFFLElBbkJWO0FBb0JiQyxFQUFBQSxXQUFXLEVBQUUsSUFwQkE7QUFxQmJDLEVBQUFBLDhCQUE4QixFQUFFLElBckJuQjtBQXNCYkMsRUFBQUEsS0FBSyxFQUFFeEI7QUF0Qk0sQ0FBZjs7QUF5QkEsSUFBTXlCLE9BQU8sbUNBQ1J2QixNQURRO0FBUVh3QixFQUFBQSxxQkFBcUIsRUFBRTtBQVJaLEVBQWI7O0FBV0EsSUFBTUMseUJBQXlCLEdBQUc7QUFDaEN6QixFQUFBQSxNQUFNLEVBQUVBLE1BRHdCO0FBRWhDdUIsRUFBQUEsT0FBTyxFQUFFQTtBQUZ1QixDQUFsQztBQUtBRyxNQUFNLENBQUNDLE9BQVAsR0FBaUJGLHlCQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3cgc3RyaWN0LWxvY2FsXG4gKiBAZm9ybWF0XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBSZWFjdE5hdGl2ZVN0eWxlQXR0cmlidXRlcyA9IHJlcXVpcmUoJy4vUmVhY3ROYXRpdmVTdHlsZUF0dHJpYnV0ZXMnKTtcblxuY29uc3QgVUlWaWV3ID0ge1xuICBwb2ludGVyRXZlbnRzOiB0cnVlLFxuICBhY2Nlc3NpYmxlOiB0cnVlLFxuICBhY2Nlc3NpYmlsaXR5QWN0aW9uczogdHJ1ZSxcbiAgYWNjZXNzaWJpbGl0eUxhYmVsOiB0cnVlLFxuICBhY2Nlc3NpYmlsaXR5TGl2ZVJlZ2lvbjogdHJ1ZSxcbiAgYWNjZXNzaWJpbGl0eVJvbGU6IHRydWUsXG4gIGFjY2Vzc2liaWxpdHlTdGF0ZTogdHJ1ZSxcbiAgYWNjZXNzaWJpbGl0eVZhbHVlOiB0cnVlLFxuICBhY2Nlc3NpYmlsaXR5SGludDogdHJ1ZSxcbiAgaW1wb3J0YW50Rm9yQWNjZXNzaWJpbGl0eTogdHJ1ZSxcbiAgbmF0aXZlSUQ6IHRydWUsXG4gIHRlc3RJRDogdHJ1ZSxcbiAgcmVuZGVyVG9IYXJkd2FyZVRleHR1cmVBbmRyb2lkOiB0cnVlLFxuICBzaG91bGRSYXN0ZXJpemVJT1M6IHRydWUsXG4gIG9uTGF5b3V0OiB0cnVlLFxuICBvbkFjY2Vzc2liaWxpdHlBY3Rpb246IHRydWUsXG4gIG9uQWNjZXNzaWJpbGl0eVRhcDogdHJ1ZSxcbiAgb25NYWdpY1RhcDogdHJ1ZSxcbiAgb25BY2Nlc3NpYmlsaXR5RXNjYXBlOiB0cnVlLFxuICBjb2xsYXBzYWJsZTogdHJ1ZSxcbiAgbmVlZHNPZmZzY3JlZW5BbHBoYUNvbXBvc2l0aW5nOiB0cnVlLFxuICBzdHlsZTogUmVhY3ROYXRpdmVTdHlsZUF0dHJpYnV0ZXMsXG59O1xuXG5jb25zdCBSQ1RWaWV3ID0ge1xuICAuLi5VSVZpZXcsXG5cbiAgLy8gVGhpcyBpcyBhIHNwZWNpYWwgcGVyZm9ybWFuY2UgcHJvcGVydHkgZXhwb3NlZCBieSBSQ1RWaWV3IGFuZCB1c2VmdWwgZm9yXG4gIC8vIHNjcm9sbGluZyBjb250ZW50IHdoZW4gdGhlcmUgYXJlIG1hbnkgc3Vidmlld3MsIG1vc3Qgb2Ygd2hpY2ggYXJlIG9mZnNjcmVlbi5cbiAgLy8gRm9yIHRoaXMgcHJvcGVydHkgdG8gYmUgZWZmZWN0aXZlLCBpdCBtdXN0IGJlIGFwcGxpZWQgdG8gYSB2aWV3IHRoYXQgY29udGFpbnNcbiAgLy8gbWFueSBzdWJ2aWV3cyB0aGF0IGV4dGVuZCBvdXRzaWRlIGl0cyBib3VuZC4gVGhlIHN1YnZpZXdzIG11c3QgYWxzbyBoYXZlXG4gIC8vIG92ZXJmbG93OiBoaWRkZW4sIGFzIHNob3VsZCB0aGUgY29udGFpbmluZyB2aWV3IChvciBvbmUgb2YgaXRzIHN1cGVydmlld3MpLlxuICByZW1vdmVDbGlwcGVkU3Vidmlld3M6IHRydWUsXG59O1xuXG5jb25zdCBSZWFjdE5hdGl2ZVZpZXdBdHRyaWJ1dGVzID0ge1xuICBVSVZpZXc6IFVJVmlldyxcbiAgUkNUVmlldzogUkNUVmlldyxcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3ROYXRpdmVWaWV3QXR0cmlidXRlcztcbiJdfQ==