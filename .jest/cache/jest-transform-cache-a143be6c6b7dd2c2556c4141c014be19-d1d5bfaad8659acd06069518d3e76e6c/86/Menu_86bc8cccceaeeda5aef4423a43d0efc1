137242d5c745b50fb4ad9004d7017c1a
"use strict";function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) {symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});}keys.push.apply(keys, symbols);}return keys;}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(Object(source), true).forEach(function (key) {require("@babel/runtime/helpers/defineProperty")(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(Object(source)).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}function _createSuper(Derived) {var hasNativeReflectConstruct = _isNativeReflectConstruct();return function _createSuperInternal() {var Super = require("@babel/runtime/helpers/getPrototypeOf")(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = require("@babel/runtime/helpers/getPrototypeOf")(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return require("@babel/runtime/helpers/possibleConstructorReturn")(this, result);};}function _isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}

Object.defineProperty(exports, "__esModule", {
  value: true });

exports.default = void 0;

var React = _interopRequireWildcard(require("react"));





var _Portal = _interopRequireDefault(require("../Portal/Portal"));

var _Surface = _interopRequireDefault(require("../Surface"));

var _MenuItem2 = _interopRequireDefault(require("./MenuItem"));



function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

function _getRequireWildcardCache() {if (typeof WeakMap !== "function") return null;var cache = new WeakMap();_getRequireWildcardCache = function _getRequireWildcardCache() {return cache;};return cache;}

function _interopRequireWildcard(obj) {if (obj && obj.__esModule) {return obj;}if (obj === null || typeof obj !== "object" && typeof obj !== "function") {return { default: obj };}var cache = _getRequireWildcardCache();if (cache && cache.has(obj)) {return cache.get(obj);}var newObj = {};var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;for (var key in obj) {if (Object.prototype.hasOwnProperty.call(obj, key)) {var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;if (desc && (desc.get || desc.set)) {Object.defineProperty(newObj, key, desc);} else {newObj[key] = obj[key];}}}newObj.default = obj;if (cache) {cache.set(obj, newObj);}return newObj;}

function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}


var SCREEN_INDENT = 8;

var ANIMATION_DURATION = 250;

var EASING = require("react-native").Easing.bezier(0.4, 0, 0.2, 1);var
















































Menu = function (_React$Component) {require("@babel/runtime/helpers/inherits")(Menu, _React$Component);var _super = _createSuper(Menu);
  function Menu() {var _this;require("@babel/runtime/helpers/classCallCheck")(this, Menu);for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}
    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(require("@babel/runtime/helpers/assertThisInitialized")(_this), "state", {
      rendered: _this.props.visible,
      top: 0,
      left: 0,
      menuLayout: {
        width: 0,
        height: 0 },

      anchorLayout: {
        width: 0,
        height: 0 },

      opacityAnimation: new (require("react-native").Animated.Value)(0),
      scaleAnimation: new (require("react-native").Animated.ValueXY)({
        x: 0,
        y: 0 }) });



    _defineProperty(require("@babel/runtime/helpers/assertThisInitialized")(_this), "anchor", null);

    _defineProperty(require("@babel/runtime/helpers/assertThisInitialized")(_this), "menu", null);

    _defineProperty(require("@babel/runtime/helpers/assertThisInitialized")(_this), "isCoordinate", function (anchor) {return !React.isValidElement(anchor) && typeof (anchor === null || anchor === void 0 ? void 0 : anchor.x) === 'number' && typeof (anchor === null || anchor === void 0 ? void 0 : anchor.y) === 'number';});

    _defineProperty(require("@babel/runtime/helpers/assertThisInitialized")(_this), "measureMenuLayout", function () {return new Promise(function (resolve) {
        if (_this.menu) {
          _this.menu.measureInWindow(function (x, y, width, height) {
            resolve({
              x: x,
              y: y,
              width: width,
              height: height });

          });
        }
      });});

    _defineProperty(require("@babel/runtime/helpers/assertThisInitialized")(_this), "measureAnchorLayout", function () {return new Promise(function (resolve) {
        var
        anchor =
        _this.props.anchor;

        if (_this.isCoordinate(anchor)) {
          resolve({
            x: anchor.x,
            y: anchor.y,
            width: 0,
            height: 0 });

          return;
        }

        if (_this.anchor) {
          _this.anchor.measureInWindow(function (x, y, width, height) {
            resolve({
              x: x,
              y: y,
              width: width,
              height: height });

          });
        }
      });});

    _defineProperty(require("@babel/runtime/helpers/assertThisInitialized")(_this), "updateVisibility", function _callee() {return require("@babel/runtime/regenerator").async(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:_context.next = 2;return require("@babel/runtime/regenerator").awrap(


              Promise.resolve());case 2:

              if (_this.props.visible) {
                _this.show();
              } else {
                _this.hide();
              }case 3:case "end":return _context.stop();}}}, null, null, null, Promise);});


    _defineProperty(require("@babel/runtime/helpers/assertThisInitialized")(_this), "isBrowser", function () {return require("react-native").Platform.OS === 'web' && 'document' in global;});

    _defineProperty(require("@babel/runtime/helpers/assertThisInitialized")(_this), "focusFirstDOMNode", function (el) {
      if (el && _this.isBrowser()) {



        var node = (0, require("react-native").findNodeHandle)(el);
        var focusableNode = node.querySelector(
        'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])');
        focusableNode === null || focusableNode === void 0 ? void 0 : focusableNode.focus();
      }
    });

    _defineProperty(require("@babel/runtime/helpers/assertThisInitialized")(_this), "handleDismiss", function () {
      if (_this.props.visible) {
        _this.props.onDismiss();
      }

      return true;
    });

    _defineProperty(require("@babel/runtime/helpers/assertThisInitialized")(_this), "handleKeypress", function (e) {
      if (e.key === 'Escape') {
        _this.props.onDismiss();
      }
    });

    _defineProperty(require("@babel/runtime/helpers/assertThisInitialized")(_this), "attachListeners", function () {
      require("react-native").BackHandler.addEventListener('hardwareBackPress', _this.handleDismiss);

      require("react-native").Dimensions.addEventListener('change', _this.handleDismiss);

      _this.isBrowser() && document.addEventListener('keyup', _this.handleKeypress);
    });

    _defineProperty(require("@babel/runtime/helpers/assertThisInitialized")(_this), "removeListeners", function () {
      require("react-native").BackHandler.removeEventListener('hardwareBackPress', _this.handleDismiss);

      require("react-native").Dimensions.removeEventListener('change', _this.handleDismiss);

      _this.isBrowser() && document.removeEventListener('keyup', _this.handleKeypress);
    });

    _defineProperty(require("@babel/runtime/helpers/assertThisInitialized")(_this), "show", function _callee2() {var windowLayout, _await$Promise$all, _await$Promise$all2, menuLayout, anchorLayout;return require("@babel/runtime/regenerator").async(function _callee2$(_context2) {while (1) {switch (_context2.prev = _context2.next) {case 0:
              windowLayout = require("react-native").Dimensions.get('window');_context2.next = 3;return require("@babel/runtime/regenerator").awrap(

              Promise.all([_this.measureMenuLayout(), _this.measureAnchorLayout()]));case 3:_await$Promise$all = _context2.sent;_await$Promise$all2 = require("@babel/runtime/helpers/slicedToArray")(_await$Promise$all, 2);menuLayout = _await$Promise$all2[0];anchorLayout = _await$Promise$all2[1];if (!(






              !windowLayout.width || !windowLayout.height || !menuLayout.width || !menuLayout.height || !anchorLayout.width && !_this.isCoordinate(_this.props.anchor) || !anchorLayout.height && !_this.isCoordinate(_this.props.anchor))) {_context2.next = 10;break;}
              requestAnimationFrame(_this.show);return _context2.abrupt("return");case 10:



              _this.setState(function () {return {
                  left: anchorLayout.x,
                  top: anchorLayout.y,
                  anchorLayout: {
                    height: anchorLayout.height,
                    width: anchorLayout.width },

                  menuLayout: {
                    width: menuLayout.width,
                    height: menuLayout.height } };},

              function () {
                _this.attachListeners();
                var
                animation =
                _this.props.theme.animation;

                require("react-native").Animated.parallel([require("react-native").Animated.timing(_this.state.scaleAnimation, {
                  toValue: {
                    x: menuLayout.width,
                    y: menuLayout.height },

                  duration: ANIMATION_DURATION * animation.scale,
                  easing: EASING,
                  useNativeDriver: true }),
                require("react-native").Animated.timing(_this.state.opacityAnimation, {
                  toValue: 1,
                  duration: ANIMATION_DURATION * animation.scale,
                  easing: EASING,
                  useNativeDriver: true })]).
                start(function (_ref)

                {var finished = _ref.finished;
                  if (finished) {
                    _this.focusFirstDOMNode(_this.menu);
                  }
                });
              });case 11:case "end":return _context2.stop();}}}, null, null, null, Promise);});


    _defineProperty(require("@babel/runtime/helpers/assertThisInitialized")(_this), "hide", function () {
      _this.removeListeners();
      var
      animation =
      _this.props.theme.animation;

      require("react-native").Animated.timing(_this.state.opacityAnimation, {
        toValue: 0,
        duration: ANIMATION_DURATION * animation.scale,
        easing: EASING,
        useNativeDriver: true }).
      start(function (_ref2)

      {var finished = _ref2.finished;
        if (finished) {
          _this.setState({
            menuLayout: {
              width: 0,
              height: 0 },

            rendered: false });

          _this.state.scaleAnimation.setValue({
            x: 0,
            y: 0 });

          _this.focusFirstDOMNode(_this.anchor);
        }
      });
    });return _this;
  }require("@babel/runtime/helpers/createClass")(Menu, [{ key: "componentDidUpdate", value:











    function componentDidUpdate(prevProps) {
      if (prevProps.visible !== this.props.visible) {
        this.updateVisibility();
      }
    } }, { key: "componentWillUnmount", value:

    function componentWillUnmount() {
      this.removeListeners();
    } }, { key: "render", value:

    function render() {var _this2 = this;
      var _this$props =









      this.props,visible = _this$props.visible,anchor = _this$props.anchor,contentStyle = _this$props.contentStyle,style = _this$props.style,children = _this$props.children,theme = _this$props.theme,statusBarHeight = _this$props.statusBarHeight,onDismiss = _this$props.onDismiss,overlayAccessibilityLabel = _this$props.overlayAccessibilityLabel;
      var _this$state =





      this.state,rendered = _this$state.rendered,menuLayout = _this$state.menuLayout,anchorLayout = _this$state.anchorLayout,opacityAnimation = _this$state.opacityAnimation,scaleAnimation = _this$state.scaleAnimation;
      var _this$state2 =


      this.state,left = _this$state2.left,top = _this$state2.top;

      var additionalVerticalValue = require("react-native").Platform.select({
        android: statusBarHeight,
        default: 0 });


      var scaleTransforms = [{
        scaleX: scaleAnimation.x.interpolate({
          inputRange: [0, menuLayout.width],
          outputRange: [0, 1] }) },

      {
        scaleY: scaleAnimation.y.interpolate({
          inputRange: [0, menuLayout.height],
          outputRange: [0, 1] }) }];



      var windowLayout = require("react-native").Dimensions.get('window');


      var positionTransforms = [];

      if (left <= windowLayout.width - menuLayout.width - SCREEN_INDENT) {
        positionTransforms.push({
          translateX: scaleAnimation.x.interpolate({
            inputRange: [0, menuLayout.width],
            outputRange: [-(menuLayout.width / 2), 0] }) });



        if (left < SCREEN_INDENT) {
          left = SCREEN_INDENT;
        }
      } else {
        positionTransforms.push({
          translateX: scaleAnimation.x.interpolate({
            inputRange: [0, menuLayout.width],
            outputRange: [menuLayout.width / 2, 0] }) });


        left += anchorLayout.width - menuLayout.width;
        var right = left + menuLayout.width;

        if (right > windowLayout.width - SCREEN_INDENT) {
          left = windowLayout.width - SCREEN_INDENT - menuLayout.width;
        }
      }



      var scrollableMenuHeight = 0;

      if (
      top >= windowLayout.height - menuLayout.height - SCREEN_INDENT - additionalVerticalValue &&
      top <= windowLayout.height - top) {

        scrollableMenuHeight = windowLayout.height - top - SCREEN_INDENT - additionalVerticalValue;
      } else if (
      top >= windowLayout.height - menuLayout.height - SCREEN_INDENT - additionalVerticalValue &&
      top >= windowLayout.height - top &&
      top <= menuLayout.height - anchorLayout.height + SCREEN_INDENT - additionalVerticalValue) {

        scrollableMenuHeight = top + anchorLayout.height - SCREEN_INDENT + additionalVerticalValue;
      }


      scrollableMenuHeight = scrollableMenuHeight > windowLayout.height - 2 * SCREEN_INDENT ? windowLayout.height - 2 * SCREEN_INDENT : scrollableMenuHeight;


      if (
      top <= windowLayout.height - menuLayout.height - SCREEN_INDENT - additionalVerticalValue ||
      top >= windowLayout.height - menuLayout.height - SCREEN_INDENT - additionalVerticalValue &&
      top <= windowLayout.height - top) {
        positionTransforms.push({
          translateY: scaleAnimation.y.interpolate({
            inputRange: [0, menuLayout.height],
            outputRange: [-((scrollableMenuHeight || menuLayout.height) / 2), 0] }) });



        if (top < SCREEN_INDENT) {
          top = SCREEN_INDENT;
        }
      } else {
        positionTransforms.push({
          translateY: scaleAnimation.y.interpolate({
            inputRange: [0, menuLayout.height],
            outputRange: [(scrollableMenuHeight || menuLayout.height) / 2, 0] }) });


        top += anchorLayout.height - (scrollableMenuHeight || menuLayout.height);
        var bottom = top + (scrollableMenuHeight || menuLayout.height) + additionalVerticalValue;

        if (bottom > windowLayout.height - SCREEN_INDENT) {
          top = scrollableMenuHeight === windowLayout.height - 2 * SCREEN_INDENT ? -SCREEN_INDENT * 2 : windowLayout.height - menuLayout.height - SCREEN_INDENT - additionalVerticalValue;
        }
      }

      var shadowMenuContainerStyle = _objectSpread({
        opacity: opacityAnimation,
        transform: scaleTransforms,
        borderRadius: theme.roundness },
      scrollableMenuHeight ? {
        height: scrollableMenuHeight } :
      {});

      var positionStyle = _objectSpread({
        top: this.isCoordinate(anchor) ? top : top + additionalVerticalValue },
      require("react-native").I18nManager.isRTL ? {
        right: left } :
      {
        left: left });


      return React.createElement(require("react-native").View, {
        ref: function ref(_ref3) {
          _this2.anchor = _ref3;
        },
        collapsable: false },
      this.isCoordinate(anchor) ? null : anchor, rendered ? React.createElement(_Portal.default, null, React.createElement(require("react-native").TouchableWithoutFeedback, {
        accessibilityLabel: overlayAccessibilityLabel,
        accessibilityRole: "button",
        onPress: onDismiss },
      React.createElement(require("react-native").View, {
        style: require("react-native").StyleSheet.absoluteFill })),
      React.createElement(require("react-native").View, {
        ref: function ref(_ref4) {
          _this2.menu = _ref4;
        },
        collapsable: false,
        accessibilityViewIsModal: visible,
        style: [styles.wrapper, positionStyle, style],
        pointerEvents: visible ? 'box-none' : 'none',
        onAccessibilityEscape: onDismiss },
      React.createElement(require("react-native").Animated.View, {
        style: {
          transform: positionTransforms } },

      React.createElement(_Surface.default, {
        style: [styles.shadowMenuContainer, shadowMenuContainerStyle, contentStyle] },
      scrollableMenuHeight && React.createElement(require("react-native").ScrollView, null, children) || React.createElement(React.Fragment, null, children))))) : null);
    } }], [{ key: "getDerivedStateFromProps", value: function getDerivedStateFromProps(nextProps, prevState) {if (nextProps.visible && !prevState.rendered) {return { rendered: true };}return null;} }]);return Menu;}(React.Component);



_defineProperty(Menu, "Item", _MenuItem2.default);

_defineProperty(Menu, "defaultProps", {
  statusBarHeight: require("../../constants").APPROX_STATUSBAR_HEIGHT,
  overlayAccessibilityLabel: 'Close menu' });


var styles = require("react-native").StyleSheet.create({
  wrapper: {
    position: 'absolute' },

  shadowMenuContainer: {
    opacity: 0,
    paddingVertical: 8,
    elevation: 8 } });



var _default = (0, require("../../core/theming").withTheme)(Menu);

exports.default = _default;