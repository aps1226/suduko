{"version":3,"sources":["../src/AppLoading.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;;;;;;IAwCqB,U;;;;;AAArB,wBAAA;AAAA;;AAAA;;AACE,UAAA,UAAA,GAAsB,KAAtB;AADF;AA+CC;;;;WA5CC,6BAAiB;AACf,WAAK,UAAL,GAAkB,IAAlB;AAEA,WAAK,6BAAL,GAAqC,KAArC,CAA2C,UAAA,KAAK,EAAG;AACjD,QAAA,OAAO,CAAC,KAAR,0DAAqE,KAArE;AACD,OAFD;AAGD;;;WAED,gCAAoB;AAClB,WAAK,UAAL,GAAkB,KAAlB;AACD;;;WAEO;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA,gBAAgB,KAAK,KADrB;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,kBAKA,cAAc,KAAK,KALnB;AAAA;AAAA;AAAA;;AAAA,oBAME,IAAI,KAAJ,CAAU,gEAAV,CANF;;AAAA;AAAA,kBASA,aAAa,KAAK,KATlB;AAAA;AAAA;AAAA;;AAAA,oBAUE,IAAI,KAAJ,CAAU,+DAAV,CAVF;;AAAA;AAAA;AAAA;AAAA,gDAcE,KAAK,KAAL,CAAW,UAAX,EAdF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA,kBAgBC,KAAK,UAhBN;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAmBJ,mBAAK,KAAL,CAAW,OAAX;;AAnBI;AAAA;;AAAA,kBAqBC,KAAK,UArBN;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAyBJ,mBAAK,KAAL,CAAW,QAAX;AAzBI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;WA6BR,kBAAM;AACJ,aAAO,eAAA,aAAA,CAAC,gCAAD,EAAiB,uBAAA,EAAA,EAAK,KAAK,KAAV,CAAjB,CAAP;AACD;;;EA9CqC,eAAM,S","sourcesContent":["import React from 'react';\n\nimport NativeAppLoading from './AppLoadingNativeWrapper';\n\ntype Props =\n  | {\n      /**\n       * Optional, you can do this process manually if you prefer.\n       * This is mainly for backwards compatibility and it is not recommended.\n       *\n       * When provided, requires providing `onError` prop as well.\n       * @deprecated\n       */\n      startAsync: () => Promise<void>;\n\n      /**\n       * If `startAsync` throws an error, it is caught and passed into the provided function.\n       * @deprecated\n       */\n      onError: (error: Error) => void;\n\n      /**\n       * Called when `startAsync` resolves or rejects.\n       * This should be used to set state and unmount the `AppLoading` component.\n       * @deprecated\n       */\n      onFinish: () => void;\n\n      /**\n       * Whether to hide the native splash screen as soon as you unmount the `AppLoading` component.\n       * Auto-hiding is enabled by default.\n       */\n      autoHideSplash?: boolean;\n    }\n  | {\n      /**\n       * Whether to hide the native splash screen as soon as you unmount the `AppLoading` component.\n       * Auto-hiding is enabled by default.\n       */\n      autoHideSplash?: boolean;\n    };\n\nexport default class AppLoading extends React.Component<Props> {\n  _isMounted: boolean = false;\n\n  componentDidMount() {\n    this._isMounted = true;\n\n    this.startLoadingAppResourcesAsync().catch(error => {\n      console.error(`AppLoading threw an unexpected error when loading:\\n${error}`);\n    });\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  private async startLoadingAppResourcesAsync() {\n    if (!('startAsync' in this.props)) {\n      return;\n    }\n\n    if (!('onFinish' in this.props)) {\n      throw new Error('AppLoading onFinish prop is required if startAsync is provided');\n    }\n\n    if (!('onError' in this.props)) {\n      throw new Error('AppLoading onError prop is required if startAsync is provided');\n    }\n\n    try {\n      await this.props.startAsync();\n    } catch (e) {\n      if (!this._isMounted) {\n        return;\n      }\n      this.props.onError(e);\n    } finally {\n      if (!this._isMounted) {\n        return;\n      }\n      // If we get to this point then we know that either there was no error, or the error was handled.\n      this.props.onFinish();\n    }\n  }\n\n  render() {\n    return <NativeAppLoading {...this.props} />;\n  }\n}\n"],"sourceRoot":""}