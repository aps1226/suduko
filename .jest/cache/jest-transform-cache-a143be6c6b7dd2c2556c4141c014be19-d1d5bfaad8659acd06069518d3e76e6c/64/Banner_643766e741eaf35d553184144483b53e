e4ced514c47a93bed7adc4034b025c11
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _slicedToArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault2(require("@babel/runtime/helpers/objectWithoutProperties"));

var _excluded = ["visible", "icon", "children", "actions", "contentStyle", "style", "theme"],
    _excluded2 = ["label"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _Surface = _interopRequireDefault(require("./Surface"));

var _Text = _interopRequireDefault(require("./Typography/Text"));

var _Button = _interopRequireDefault(require("./Button"));

var _Icon = _interopRequireDefault(require("./Icon"));

var _theming = require("../core/theming");

var _shadow = _interopRequireDefault(require("../styles/shadow"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var ELEVATION = 1;
var DEFAULT_MAX_WIDTH = 960;

var Banner = function Banner(_ref) {
  var visible = _ref.visible,
      icon = _ref.icon,
      children = _ref.children,
      actions = _ref.actions,
      contentStyle = _ref.contentStyle,
      style = _ref.style,
      theme = _ref.theme,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);

  var _React$useRef = React.useRef(new _reactNative.Animated.Value(visible ? 1 : 0)),
      position = _React$useRef.current;

  var _React$useState = React.useState({
    height: 0,
    measured: false
  }),
      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
      layout = _React$useState2[0],
      setLayout = _React$useState2[1];

  var scale = theme.animation.scale;
  React.useEffect(function () {
    if (visible) {
      _reactNative.Animated.timing(position, {
        duration: 250 * scale,
        toValue: 1,
        useNativeDriver: false
      }).start();
    } else {
      _reactNative.Animated.timing(position, {
        duration: 200 * scale,
        toValue: 0,
        useNativeDriver: false
      }).start();
    }
  }, [visible, position, scale]);

  var handleLayout = function handleLayout(_ref2) {
    var nativeEvent = _ref2.nativeEvent;
    var height = nativeEvent.layout.height;
    setLayout({
      height: height,
      measured: true
    });
  };

  var height = _reactNative.Animated.multiply(position, layout.height);

  var translateY = _reactNative.Animated.multiply(_reactNative.Animated.add(position, -1), layout.height);

  return React.createElement(_Surface.default, _extends({}, rest, {
    style: [styles.container, (0, _shadow.default)(ELEVATION), style]
  }), React.createElement(_reactNative.View, {
    style: [styles.wrapper, contentStyle]
  }, React.createElement(_reactNative.Animated.View, {
    style: {
      height: height
    }
  }), React.createElement(_reactNative.Animated.View, {
    onLayout: handleLayout,
    style: [layout.measured || !visible ? [styles.absolute, {
      transform: [{
        translateY: translateY
      }]
    }] : null, !layout.measured && !visible ? {
      opacity: 0
    } : null]
  }, React.createElement(_reactNative.View, {
    style: styles.content
  }, icon ? React.createElement(_reactNative.View, {
    style: styles.icon
  }, React.createElement(_Icon.default, {
    source: icon,
    size: 40
  })) : null, React.createElement(_Text.default, {
    style: styles.message
  }, children)), React.createElement(_reactNative.View, {
    style: styles.actions
  }, actions.map(function (_ref3, i) {
    var label = _ref3.label,
        others = (0, _objectWithoutProperties2.default)(_ref3, _excluded2);
    return React.createElement(_Button.default, _extends({
      key: i,
      compact: true,
      mode: "text",
      style: styles.button
    }, others), label);
  })))));
};

var styles = _reactNative.StyleSheet.create({
  container: {
    elevation: ELEVATION
  },
  wrapper: {
    overflow: 'hidden',
    alignSelf: 'center',
    width: '100%',
    maxWidth: DEFAULT_MAX_WIDTH
  },
  absolute: {
    position: 'absolute',
    top: 0,
    width: '100%'
  },
  content: {
    flexDirection: 'row',
    justifyContent: 'flex-start',
    marginHorizontal: 8,
    marginTop: 16,
    marginBottom: 0
  },
  icon: {
    margin: 8
  },
  message: {
    flex: 1,
    margin: 8
  },
  actions: {
    flexDirection: 'row',
    justifyContent: 'flex-end',
    margin: 4
  },
  button: {
    margin: 4
  }
});

var _default = (0, _theming.withTheme)(Banner);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,