6f2faf754cf904aed7cb7c4f6c7cb8d5
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ToggleButtonGroup = exports.default = exports.ToggleButtonGroupContext = void 0;

var React = _interopRequireWildcard(require("react"));

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

var ToggleButtonGroupContext = React.createContext(null);
exports.ToggleButtonGroupContext = ToggleButtonGroupContext;

var ToggleButtonGroup = function ToggleButtonGroup(_ref) {
  var value = _ref.value,
      onValueChange = _ref.onValueChange,
      children = _ref.children;
  return React.createElement(ToggleButtonGroupContext.Provider, {
    value: {
      value: value,
      onValueChange: onValueChange
    }
  }, children);
};

exports.ToggleButtonGroup = ToggleButtonGroup;
ToggleButtonGroup.displayName = 'ToggleButton.Group';
var _default = ToggleButtonGroup;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlRvZ2dsZUJ1dHRvbkdyb3VwLnRzeCJdLCJuYW1lcyI6WyJUb2dnbGVCdXR0b25Hcm91cENvbnRleHQiLCJSZWFjdCIsIlRvZ2dsZUJ1dHRvbkdyb3VwIiwiY2hpbGRyZW4iLCJ2YWx1ZSIsIm9uVmFsdWVDaGFuZ2UiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxJQUFBLEtBQUEsR0FBQSx1QkFBQSxDQUFBLE9BQUEsQ0FBQSxPQUFBLENBQUEsQ0FBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBc0JPLElBQU1BLHdCQUF3QixHQUFHQyxLQUFLLENBQUxBLGFBQUFBLENBQWpDLElBQWlDQSxDQUFqQzs7O0FBbUNQLElBQU1DLGlCQUFpQixHQUFHLFNBQXBCQSxpQkFBb0I7QUFBQSxNQUFDLEtBQUQsUUFBQyxLQUFEO0FBQUEsTUFBQyxhQUFELFFBQUMsYUFBRDtBQUFBLE1BQXlCQyxRQUF6QixRQUF5QkEsUUFBekI7QUFBQSxTQUN4QixLQUFBLENBQUEsYUFBQSxDQUFDLHdCQUFELENBQUEsUUFBQSxFQUFBO0FBQ0UsSUFBQSxLQUFLLEVBQUU7QUFDTEMsTUFBQUEsS0FESyxFQUNMQSxLQURLO0FBRUxDLE1BQUFBLGFBQUFBLEVBQUFBO0FBRks7QUFEVCxHQUFBLEVBREYsUUFDRSxDQUR3QjtBQUFBLENBQTFCOzs7QUFXQUgsaUJBQWlCLENBQWpCQSxXQUFBQSxHQUFBQSxvQkFBQUE7ZUFFZUEsaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbnR5cGUgUHJvcHMgPSB7XG4gIC8qKlxuICAgKiBGdW5jdGlvbiB0byBleGVjdXRlIG9uIHNlbGVjdGlvbiBjaGFuZ2UuXG4gICAqL1xuICBvblZhbHVlQ2hhbmdlOiAodmFsdWU6IHN0cmluZykgPT4gdm9pZCB8IG51bGw7XG4gIC8qKlxuICAgKiBWYWx1ZSBvZiB0aGUgY3VycmVudGx5IHNlbGVjdGVkIHRvZ2dsZSBidXR0b24uXG4gICAqL1xuICB2YWx1ZTogc3RyaW5nIHwgbnVsbDtcbiAgLyoqXG4gICAqIFJlYWN0IGVsZW1lbnRzIGNvbnRhaW5pbmcgdG9nZ2xlIGJ1dHRvbnMuXG4gICAqL1xuICBjaGlsZHJlbjogUmVhY3QuUmVhY3ROb2RlO1xufTtcblxudHlwZSBUb2dnbGVCdXR0b25Db250ZXh0VHlwZSA9IHtcbiAgdmFsdWU6IHN0cmluZyB8IG51bGw7XG4gIG9uVmFsdWVDaGFuZ2U6IChpdGVtOiBzdHJpbmcpID0+IHZvaWQgfCBudWxsO1xufTtcblxuZXhwb3J0IGNvbnN0IFRvZ2dsZUJ1dHRvbkdyb3VwQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQ8XG4gIFRvZ2dsZUJ1dHRvbkNvbnRleHRUeXBlXG4+KG51bGwgYXMgYW55KTtcblxuLyoqXG4gKiBUb2dnbGUgZ3JvdXAgYWxsb3dzIHRvIGNvbnRyb2wgYSBncm91cCBvZiB0b2dnbGUgYnV0dG9ucy48L2JyPlxuICogSXQgZG9lc24ndCBjaGFuZ2UgdGhlIGFwcGVhcmFuY2Ugb2YgdGhlIHRvZ2dsZSBidXR0b25zLiBJZiB5b3Ugd2FudCB0byBncm91cCB0aGVtIGluIGEgcm93LCBjaGVjayBvdXQgPGEgaHJlZj1cInRvZ2dsZS1idXR0b24tcm93Lmh0bWxcIj5gVG9nZ2xlQnV0dG9uLlJvd2A8L2E+LlxuICpcbiAqIDxkaXYgY2xhc3M9XCJzY3JlZW5zaG90c1wiPlxuICogICA8ZmlndXJlPlxuICogICAgIDxpbWcgY2xhc3M9XCJtZWRpdW1cIiBzcmM9XCJzY3JlZW5zaG90cy90b2dnbGUtYnV0dG9uLWdyb3VwLmdpZlwiIC8+XG4gKiAgIDwvZmlndXJlPlxuICogPC9kaXY+XG4gKlxuICogIyMgVXNhZ2VcbiAqIGBgYGpzXG4gKiBpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG4gKiBpbXBvcnQgeyBUb2dnbGVCdXR0b24gfSBmcm9tICdyZWFjdC1uYXRpdmUtcGFwZXInO1xuICpcbiAqIGNvbnN0IE15Q29tcG9uZW50ID0gKCkgPT4ge1xuICogICBjb25zdCBbdmFsdWUsIHNldFZhbHVlXSA9IFJlYWN0LnVzZVN0YXRlKCdsZWZ0Jyk7XG4gKlxuICogICByZXR1cm4gKFxuICogICAgIDxUb2dnbGVCdXR0b24uR3JvdXBcbiAqICAgICAgIG9uVmFsdWVDaGFuZ2U9e3ZhbHVlID0+IHNldFZhbHVlKHZhbHVlKX1cbiAqICAgICAgIHZhbHVlPXt2YWx1ZX0+XG4gKiAgICAgICA8VG9nZ2xlQnV0dG9uIGljb249XCJmb3JtYXQtYWxpZ24tbGVmdFwiIHZhbHVlPVwibGVmdFwiIC8+XG4gKiAgICAgICA8VG9nZ2xlQnV0dG9uIGljb249XCJmb3JtYXQtYWxpZ24tcmlnaHRcIiB2YWx1ZT1cInJpZ2h0XCIgLz5cbiAqICAgICA8L1RvZ2dsZUJ1dHRvbi5Hcm91cD5cbiAqICAgKTtcbiAqIH07XG4gKlxuICogZXhwb3J0IGRlZmF1bHQgTXlDb21wb25lbnQ7XG4gKmBgYFxuICovXG5jb25zdCBUb2dnbGVCdXR0b25Hcm91cCA9ICh7IHZhbHVlLCBvblZhbHVlQ2hhbmdlLCBjaGlsZHJlbiB9OiBQcm9wcykgPT4gKFxuICA8VG9nZ2xlQnV0dG9uR3JvdXBDb250ZXh0LlByb3ZpZGVyXG4gICAgdmFsdWU9e3tcbiAgICAgIHZhbHVlLFxuICAgICAgb25WYWx1ZUNoYW5nZSxcbiAgICB9fVxuICA+XG4gICAge2NoaWxkcmVufVxuICA8L1RvZ2dsZUJ1dHRvbkdyb3VwQ29udGV4dC5Qcm92aWRlcj5cbik7XG5cblRvZ2dsZUJ1dHRvbkdyb3VwLmRpc3BsYXlOYW1lID0gJ1RvZ2dsZUJ1dHRvbi5Hcm91cCc7XG5cbmV4cG9ydCBkZWZhdWx0IFRvZ2dsZUJ1dHRvbkdyb3VwO1xuXG4vLyBAY29tcG9uZW50LWRvY3MgaWdub3JlLW5leHQtbGluZVxuZXhwb3J0IHsgVG9nZ2xlQnV0dG9uR3JvdXAgfTtcbiJdfQ==