ccb3a6c9b56d44e71f77105d3e3bd8ba
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createAnimation;

var _flattenStyle = _interopRequireDefault(require("./flattenStyle"));

function compareNumbers(a, b) {
  return a - b;
}

function notNull(value) {
  return value !== null;
}

function parsePosition(value) {
  if (value === 'from') {
    return 0;
  }

  if (value === 'to') {
    return 1;
  }

  var parsed = parseFloat(value, 10);

  if (Number.isNaN(parsed) || parsed < 0 || parsed > 1) {
    return null;
  }

  return parsed;
}

var cache = {};

function createAnimation(definition) {
  var cacheKey = JSON.stringify(definition);

  if (cache[cacheKey]) {
    return cache[cacheKey];
  }

  var positions = Object.keys(definition).map(parsePosition).filter(notNull);
  positions.sort(compareNumbers);

  if (positions.length < 2) {
    throw new Error('Animation definitions must have at least two values.');
  }

  var compiled = {};

  if (definition.easing) {
    compiled.easing = definition.easing;
  }

  if (definition.style) {
    compiled.style = definition.style;
  }

  var _loop = function _loop(i) {
    var position = positions[i];
    var keyframe = definition[position];

    if (!keyframe) {
      if (position === 0) {
        keyframe = definition.from;
      } else if (position === 1) {
        keyframe = definition.to;
      }
    }

    if (!keyframe) {
      throw new Error('Missing animation keyframe, this should not happen');
    }

    keyframe = (0, _flattenStyle.default)(keyframe);
    Object.keys(keyframe).forEach(function (key) {
      if (!(key in compiled)) {
        compiled[key] = {
          inputRange: [],
          outputRange: []
        };
      }

      compiled[key].inputRange.push(position);
      compiled[key].outputRange.push(keyframe[key]);
    });
  };

  for (var i = 0; i < positions.length; i += 1) {
    _loop(i);
  }

  cache[cacheKey] = compiled;
  return compiled;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNyZWF0ZUFuaW1hdGlvbi5qcyJdLCJuYW1lcyI6WyJjb21wYXJlTnVtYmVycyIsImEiLCJiIiwibm90TnVsbCIsInZhbHVlIiwicGFyc2VQb3NpdGlvbiIsInBhcnNlZCIsInBhcnNlRmxvYXQiLCJOdW1iZXIiLCJpc05hTiIsImNhY2hlIiwiY3JlYXRlQW5pbWF0aW9uIiwiZGVmaW5pdGlvbiIsImNhY2hlS2V5IiwiSlNPTiIsInN0cmluZ2lmeSIsInBvc2l0aW9ucyIsIk9iamVjdCIsImtleXMiLCJtYXAiLCJmaWx0ZXIiLCJzb3J0IiwibGVuZ3RoIiwiRXJyb3IiLCJjb21waWxlZCIsImVhc2luZyIsInN0eWxlIiwiaSIsInBvc2l0aW9uIiwia2V5ZnJhbWUiLCJmcm9tIiwidG8iLCJmb3JFYWNoIiwia2V5IiwiaW5wdXRSYW5nZSIsIm91dHB1dFJhbmdlIiwicHVzaCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUVBLFNBQVNBLGNBQVQsQ0FBd0JDLENBQXhCLEVBQTJCQyxDQUEzQixFQUE4QjtBQUM1QixTQUFPRCxDQUFDLEdBQUdDLENBQVg7QUFDRDs7QUFFRCxTQUFTQyxPQUFULENBQWlCQyxLQUFqQixFQUF3QjtBQUN0QixTQUFPQSxLQUFLLEtBQUssSUFBakI7QUFDRDs7QUFFRCxTQUFTQyxhQUFULENBQXVCRCxLQUF2QixFQUE4QjtBQUM1QixNQUFJQSxLQUFLLEtBQUssTUFBZCxFQUFzQjtBQUNwQixXQUFPLENBQVA7QUFDRDs7QUFDRCxNQUFJQSxLQUFLLEtBQUssSUFBZCxFQUFvQjtBQUNsQixXQUFPLENBQVA7QUFDRDs7QUFDRCxNQUFNRSxNQUFNLEdBQUdDLFVBQVUsQ0FBQ0gsS0FBRCxFQUFRLEVBQVIsQ0FBekI7O0FBQ0EsTUFBSUksTUFBTSxDQUFDQyxLQUFQLENBQWFILE1BQWIsS0FBd0JBLE1BQU0sR0FBRyxDQUFqQyxJQUFzQ0EsTUFBTSxHQUFHLENBQW5ELEVBQXNEO0FBQ3BELFdBQU8sSUFBUDtBQUNEOztBQUNELFNBQU9BLE1BQVA7QUFDRDs7QUFFRCxJQUFNSSxLQUFLLEdBQUcsRUFBZDs7QUFFZSxTQUFTQyxlQUFULENBQXlCQyxVQUF6QixFQUFxQztBQUNsRCxNQUFNQyxRQUFRLEdBQUdDLElBQUksQ0FBQ0MsU0FBTCxDQUFlSCxVQUFmLENBQWpCOztBQUNBLE1BQUlGLEtBQUssQ0FBQ0csUUFBRCxDQUFULEVBQXFCO0FBQ25CLFdBQU9ILEtBQUssQ0FBQ0csUUFBRCxDQUFaO0FBQ0Q7O0FBRUQsTUFBTUcsU0FBUyxHQUFHQyxNQUFNLENBQUNDLElBQVAsQ0FBWU4sVUFBWixFQUNmTyxHQURlLENBQ1hkLGFBRFcsRUFFZmUsTUFGZSxDQUVSakIsT0FGUSxDQUFsQjtBQUdBYSxFQUFBQSxTQUFTLENBQUNLLElBQVYsQ0FBZXJCLGNBQWY7O0FBRUEsTUFBSWdCLFNBQVMsQ0FBQ00sTUFBVixHQUFtQixDQUF2QixFQUEwQjtBQUN4QixVQUFNLElBQUlDLEtBQUosQ0FBVSxzREFBVixDQUFOO0FBQ0Q7O0FBRUQsTUFBTUMsUUFBUSxHQUFHLEVBQWpCOztBQUNBLE1BQUlaLFVBQVUsQ0FBQ2EsTUFBZixFQUF1QjtBQUNyQkQsSUFBQUEsUUFBUSxDQUFDQyxNQUFULEdBQWtCYixVQUFVLENBQUNhLE1BQTdCO0FBQ0Q7O0FBQ0QsTUFBSWIsVUFBVSxDQUFDYyxLQUFmLEVBQXNCO0FBQ3BCRixJQUFBQSxRQUFRLENBQUNFLEtBQVQsR0FBaUJkLFVBQVUsQ0FBQ2MsS0FBNUI7QUFDRDs7QUFyQmlELDZCQXVCekNDLENBdkJ5QztBQXdCaEQsUUFBTUMsUUFBUSxHQUFHWixTQUFTLENBQUNXLENBQUQsQ0FBMUI7QUFDQSxRQUFJRSxRQUFRLEdBQUdqQixVQUFVLENBQUNnQixRQUFELENBQXpCOztBQUNBLFFBQUksQ0FBQ0MsUUFBTCxFQUFlO0FBQ2IsVUFBSUQsUUFBUSxLQUFLLENBQWpCLEVBQW9CO0FBQ2xCQyxRQUFBQSxRQUFRLEdBQUdqQixVQUFVLENBQUNrQixJQUF0QjtBQUNELE9BRkQsTUFFTyxJQUFJRixRQUFRLEtBQUssQ0FBakIsRUFBb0I7QUFDekJDLFFBQUFBLFFBQVEsR0FBR2pCLFVBQVUsQ0FBQ21CLEVBQXRCO0FBQ0Q7QUFDRjs7QUFDRCxRQUFJLENBQUNGLFFBQUwsRUFBZTtBQUNiLFlBQU0sSUFBSU4sS0FBSixDQUFVLG9EQUFWLENBQU47QUFDRDs7QUFFRE0sSUFBQUEsUUFBUSxHQUFHLDJCQUFhQSxRQUFiLENBQVg7QUFDQVosSUFBQUEsTUFBTSxDQUFDQyxJQUFQLENBQVlXLFFBQVosRUFBc0JHLE9BQXRCLENBQThCLFVBQUFDLEdBQUcsRUFBSTtBQUNuQyxVQUFJLEVBQUVBLEdBQUcsSUFBSVQsUUFBVCxDQUFKLEVBQXdCO0FBQ3RCQSxRQUFBQSxRQUFRLENBQUNTLEdBQUQsQ0FBUixHQUFnQjtBQUNkQyxVQUFBQSxVQUFVLEVBQUUsRUFERTtBQUVkQyxVQUFBQSxXQUFXLEVBQUU7QUFGQyxTQUFoQjtBQUlEOztBQUNEWCxNQUFBQSxRQUFRLENBQUNTLEdBQUQsQ0FBUixDQUFjQyxVQUFkLENBQXlCRSxJQUF6QixDQUE4QlIsUUFBOUI7QUFDQUosTUFBQUEsUUFBUSxDQUFDUyxHQUFELENBQVIsQ0FBY0UsV0FBZCxDQUEwQkMsSUFBMUIsQ0FBK0JQLFFBQVEsQ0FBQ0ksR0FBRCxDQUF2QztBQUNELEtBVEQ7QUF0Q2dEOztBQXVCbEQsT0FBSyxJQUFJTixDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHWCxTQUFTLENBQUNNLE1BQTlCLEVBQXNDSyxDQUFDLElBQUksQ0FBM0MsRUFBOEM7QUFBQSxVQUFyQ0EsQ0FBcUM7QUF5QjdDOztBQUVEakIsRUFBQUEsS0FBSyxDQUFDRyxRQUFELENBQUwsR0FBa0JXLFFBQWxCO0FBRUEsU0FBT0EsUUFBUDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGZsYXR0ZW5TdHlsZSBmcm9tICcuL2ZsYXR0ZW5TdHlsZSc7XG5cbmZ1bmN0aW9uIGNvbXBhcmVOdW1iZXJzKGEsIGIpIHtcbiAgcmV0dXJuIGEgLSBiO1xufVxuXG5mdW5jdGlvbiBub3ROdWxsKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPT0gbnVsbDtcbn1cblxuZnVuY3Rpb24gcGFyc2VQb3NpdGlvbih2YWx1ZSkge1xuICBpZiAodmFsdWUgPT09ICdmcm9tJykge1xuICAgIHJldHVybiAwO1xuICB9XG4gIGlmICh2YWx1ZSA9PT0gJ3RvJykge1xuICAgIHJldHVybiAxO1xuICB9XG4gIGNvbnN0IHBhcnNlZCA9IHBhcnNlRmxvYXQodmFsdWUsIDEwKTtcbiAgaWYgKE51bWJlci5pc05hTihwYXJzZWQpIHx8IHBhcnNlZCA8IDAgfHwgcGFyc2VkID4gMSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiBwYXJzZWQ7XG59XG5cbmNvbnN0IGNhY2hlID0ge307XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZUFuaW1hdGlvbihkZWZpbml0aW9uKSB7XG4gIGNvbnN0IGNhY2hlS2V5ID0gSlNPTi5zdHJpbmdpZnkoZGVmaW5pdGlvbik7XG4gIGlmIChjYWNoZVtjYWNoZUtleV0pIHtcbiAgICByZXR1cm4gY2FjaGVbY2FjaGVLZXldO1xuICB9XG5cbiAgY29uc3QgcG9zaXRpb25zID0gT2JqZWN0LmtleXMoZGVmaW5pdGlvbilcbiAgICAubWFwKHBhcnNlUG9zaXRpb24pXG4gICAgLmZpbHRlcihub3ROdWxsKTtcbiAgcG9zaXRpb25zLnNvcnQoY29tcGFyZU51bWJlcnMpO1xuXG4gIGlmIChwb3NpdGlvbnMubGVuZ3RoIDwgMikge1xuICAgIHRocm93IG5ldyBFcnJvcignQW5pbWF0aW9uIGRlZmluaXRpb25zIG11c3QgaGF2ZSBhdCBsZWFzdCB0d28gdmFsdWVzLicpO1xuICB9XG5cbiAgY29uc3QgY29tcGlsZWQgPSB7fTtcbiAgaWYgKGRlZmluaXRpb24uZWFzaW5nKSB7XG4gICAgY29tcGlsZWQuZWFzaW5nID0gZGVmaW5pdGlvbi5lYXNpbmc7XG4gIH1cbiAgaWYgKGRlZmluaXRpb24uc3R5bGUpIHtcbiAgICBjb21waWxlZC5zdHlsZSA9IGRlZmluaXRpb24uc3R5bGU7XG4gIH1cblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHBvc2l0aW9ucy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGNvbnN0IHBvc2l0aW9uID0gcG9zaXRpb25zW2ldO1xuICAgIGxldCBrZXlmcmFtZSA9IGRlZmluaXRpb25bcG9zaXRpb25dO1xuICAgIGlmICgha2V5ZnJhbWUpIHtcbiAgICAgIGlmIChwb3NpdGlvbiA9PT0gMCkge1xuICAgICAgICBrZXlmcmFtZSA9IGRlZmluaXRpb24uZnJvbTtcbiAgICAgIH0gZWxzZSBpZiAocG9zaXRpb24gPT09IDEpIHtcbiAgICAgICAga2V5ZnJhbWUgPSBkZWZpbml0aW9uLnRvO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIWtleWZyYW1lKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ01pc3NpbmcgYW5pbWF0aW9uIGtleWZyYW1lLCB0aGlzIHNob3VsZCBub3QgaGFwcGVuJyk7XG4gICAgfVxuXG4gICAga2V5ZnJhbWUgPSBmbGF0dGVuU3R5bGUoa2V5ZnJhbWUpO1xuICAgIE9iamVjdC5rZXlzKGtleWZyYW1lKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICBpZiAoIShrZXkgaW4gY29tcGlsZWQpKSB7XG4gICAgICAgIGNvbXBpbGVkW2tleV0gPSB7XG4gICAgICAgICAgaW5wdXRSYW5nZTogW10sXG4gICAgICAgICAgb3V0cHV0UmFuZ2U6IFtdLFxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgY29tcGlsZWRba2V5XS5pbnB1dFJhbmdlLnB1c2gocG9zaXRpb24pO1xuICAgICAgY29tcGlsZWRba2V5XS5vdXRwdXRSYW5nZS5wdXNoKGtleWZyYW1lW2tleV0pO1xuICAgIH0pO1xuICB9XG5cbiAgY2FjaGVbY2FjaGVLZXldID0gY29tcGlsZWQ7XG5cbiAgcmV0dXJuIGNvbXBpbGVkO1xufVxuIl19