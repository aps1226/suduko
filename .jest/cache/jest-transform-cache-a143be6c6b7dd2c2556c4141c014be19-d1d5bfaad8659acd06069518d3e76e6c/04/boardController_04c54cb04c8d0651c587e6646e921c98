2d2912e569b0a55fa5f093eb99952125
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.shuffle = shuffle;
exports.isValid = isValid;
exports.generateBoard = generateBoard;
exports.isValidSudoku = isValidSudoku;
exports.isSolvable = isSolvable;
exports.initBoard = initBoard;
exports.isCompleted = isCompleted;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

function shuffle(array) {
  var currentIndex = array.length,
      randomIndex;

  while (0 !== currentIndex) {
    randomIndex = Math.floor(Math.random() * currentIndex);
    currentIndex--;
    var _ref = [array[randomIndex], array[currentIndex]];
    array[currentIndex] = _ref[0];
    array[randomIndex] = _ref[1];
  }

  return array;
}

function isValid(board, row, col, k) {
  for (var i = 0; i < 9; i++) {
    var m = 3 * Math.floor(row / 3) + Math.floor(i / 3);
    var n = 3 * Math.floor(col / 3) + i % 3;

    if (board[row][i] == k || board[i][col] == k || board[m][n] == k) {
      return false;
    }
  }

  return true;
}

function generateBoard(data) {
  for (var i = 0; i < 9; i++) {
    for (var j = 0; j < 9; j++) {
      if (data[i][j] === null) {
        for (var k = 1; k <= 9; k++) {
          if (isValid(data, i, j, k)) {
            data[i][j] = k;

            if (!generateBoard(data).some(function (row) {
              return row.includes(null);
            })) {
              return generateBoard(data);
            } else {
              data[i][j] = null;
            }
          }
        }

        return data;
      }
    }
  }

  return data;
}

function isValidSudoku(board) {
  for (var i = 0; i < 9; i++) {
    var row = new Set(),
        col = new Set(),
        box = new Set();

    for (var j = 0; j < 9; j++) {
      var _row = board[i][j];
      var _col = board[j][i];
      var _box = board[3 * Math.floor(i / 3) + Math.floor(j / 3)][3 * (i % 3) + j % 3];

      if (_row !== null) {
        if (row.has(_row)) return false;
        row.add(_row);
      }

      if (_col !== null) {
        if (col.has(_col)) return false;
        col.add(_col);
      }

      if (_box !== null) {
        if (box.has(_box)) return false;
        box.add(_box);
      }
    }
  }

  return true;
}

;

function isSolvable(data) {
  for (var i = 0; i < 9; i++) {
    for (var j = 0; j < 9; j++) {
      if (data[i][j] == null) {
        for (var k = 1; k <= 9; k++) {
          if (isValid(data, i, j, k)) {
            data[i][j] = k;

            if (isSolvable(data)) {
              return true;
            } else {
              data[i][j] = null;
            }
          }
        }

        return false;
      }
    }
  }

  return true;
}

function initBoard(curBoard, difficulty) {
  var blank;

  switch (difficulty) {
    case 0:
      blank = 81 - (37 + Math.floor(37 * Math.random()));
      break;

    case 1:
      blank = 81 - (27 + Math.floor(9 * Math.random()));
      break;

    case 2:
      blank = 81 - (19 + Math.floor(9 * Math.random()));
      break;

    case 3:
      blank = 63;
      break;

    default:
      blank = Math.floor(37 * Math.random());
  }

  for (var i = 0; i < blank; i++) {
    var row = Math.floor(9 * Math.random());
    var col = Math.floor(9 * Math.random());

    while (!curBoard[row][col]) {
      row = Math.floor(9 * Math.random()), col = Math.floor(9 * Math.random());
    }

    var clonedBoard = curBoard.map(function (arr) {
      return (0, _toConsumableArray2.default)(arr);
    });

    while (!isSolvable(clonedBoard)) {
      clonedBoard[row][col] = curBoard[row][col];
      row = Math.floor(9 * Math.random());
      col = Math.floor(9 * Math.random());

      while (!curBoard[row][col]) {
        row = Math.floor(9 * Math.random()), col = Math.floor(9 * Math.random());
      }

      clonedBoard[row][col] = null;
    }

    curBoard[row][col] = null;
  }

  return curBoard;
}

function isCompleted(board) {
  for (var i = 0; i < board.length; i++) {
    if (board[i].includes(null)) return false;
  }

  return true;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,