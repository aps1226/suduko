{"version":3,"sources":["C:\\Users\\ashee\\Documents\\Javascript\\React\\React Native\\suduko\\src\\state\\boardController.ts"],"names":[],"mappings":"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","sourcesContent":["//Function shuffles array.\r\nexport function shuffle(array: number[]):number[] {\r\n  var currentIndex:number = array.length,  randomIndex:number;\r\n  // While there remain elements to shuffle...\r\n  while (0 !== currentIndex) {\r\n    // Pick a remaining element...\r\n    randomIndex = Math.floor(Math.random() * currentIndex);\r\n    currentIndex--;\r\n    // And swap it with the current element.\r\n    [array[currentIndex], array[randomIndex]] = [\r\n      array[randomIndex], array[currentIndex]];\r\n  }\r\n  return array;\r\n}\r\n\r\n//Helper function for generateBoard function to determine if respective row and column are valid inputs.\r\nexport function isValid(board:(number|null)[][], row:number, col:number, k:number) {\r\n  //Determine if the current value k exists with in the respective positions:\r\n    //row\r\n    //column\r\n    //sub-box\r\n  //If it does, the entry is not valid.\r\n  for (let i = 0; i < 9; i++) {\r\n      const m = 3 * Math.floor(row / 3) + Math.floor(i / 3);\r\n      const n = 3 * Math.floor(col / 3) + i % 3;\r\n      if (board[row][i] == k || board[i][col] == k || board[m][n] == k) {\r\n        return false;\r\n      }\r\n  }\r\n  return true;\r\n}\r\n\r\n//Function to generate game board.\r\nexport function generateBoard(data:(number|null)[][]):(number|null)[][] {\r\n  //Iterate through each row of board.\r\n  for (let i = 0; i < 9; i++) {\r\n    //Iterate through column of respective row.\r\n    for (let j = 0; j < 9; j++) {\r\n      //If current value needs an entry.\r\n      if (data[i][j] === null) {\r\n        //Iterate through possible values.\r\n        for (let k = 1; k <= 9; k++) {\r\n          //Determine if current value if valid for the board\r\n          //at the current position.\r\n          if (isValid(data, i, j, k)) {\r\n            data[i][j] = k;\r\n            //If the value is valid, recurse with the given value\r\n            //entered on the board.\r\n            if (!generateBoard(data).some(row => row.includes(null))) {\r\n              return generateBoard(data);\r\n            //If false is returned, iterate to the next value.\r\n            } else {\r\n              data[i][j] = null;\r\n            }\r\n          }\r\n        }\r\n        return data;\r\n      }\r\n    }\r\n  }\r\n  return data;\r\n}\r\n\r\n//Function determines if the current game board is valid.\r\nexport function isValidSudoku(board:(number|null)[][]):boolean {\r\n  for (let i = 0; i < 9; i++) {\r\n    let row = new Set(),\r\n        col = new Set(),\r\n        box = new Set();\r\n\r\n    for (let j = 0; j < 9; j++) {\r\n      let _row = board[i][j];\r\n      let _col = board[j][i];\r\n      let _box = board[3*Math.floor(i/3)+Math.floor(j/3)][3*(i%3)+(j%3)]\r\n      \r\n      if (_row !== null) {\r\n        if (row.has(_row)) return false;\r\n        row.add(_row);\r\n      }\r\n      if (_col !== null) {\r\n        if (col.has(_col)) return false;\r\n        col.add(_col);\r\n      }\r\n      \r\n      if (_box !== null) {\r\n        if (box.has(_box)) return false;\r\n        box.add(_box);\r\n      } \r\n    }\r\n  }\r\n  return true\r\n};\r\n\r\n//Function determines if the current game board is solvable.\r\nexport function isSolvable(data:(number|null)[][]):boolean {\r\n  //Iterate through each row of board.\r\n  for (let i = 0; i < 9; i++) {\r\n    //Iterate through column of respective row.\r\n    for (let j = 0; j < 9; j++) {\r\n      //If current value needs an entry.\r\n      if (data[i][j] == null) {\r\n        //Iterate through possible values.\r\n        for (let k = 1; k <= 9; k++) {\r\n          //Determine if current value if valid for the board\r\n          //at the current position.\r\n          if (isValid(data, i, j, k)) {\r\n            data[i][j] = k;\r\n            //If the value is valid, recurse with the given value\r\n            //entered on the board.\r\n            if (isSolvable(data)) {\r\n              return true;\r\n            //If false is returned, iterate to the next value.\r\n            } else {\r\n              data[i][j] = null;\r\n            }\r\n          }\r\n        }\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\n//Function initializes game board based on difficulty input.\r\nexport function initBoard(curBoard: (number|null)[][], difficulty:number):(number|null)[][]{\r\n  let blank:number;\r\n  switch(difficulty){\r\n    case 0:\r\n      blank = 81 - (37 + Math.floor(37 * Math.random()));\r\n      break;\r\n    case 1:\r\n      blank = 81 - (27 + Math.floor(9 * Math.random()));\r\n      break;\r\n    case 2:\r\n      blank = 81 - (19 + Math.floor(9 * Math.random()));\r\n      break;\r\n    case 3:\r\n      blank = 63;\r\n      break;\r\n    default:\r\n      blank = Math.floor(37 * Math.random());\r\n  }\r\n\r\n  for(let i = 0; i < blank; i++){\r\n    let row:number = Math.floor(9*Math.random());\r\n    let col:number = Math.floor(9*Math.random());\r\n    while(!curBoard[row][col]) row = Math.floor(9*Math.random()),col = Math.floor(9*Math.random());\r\n    const clonedBoard = curBoard.map(arr => [...arr])\r\n    while(!isSolvable(clonedBoard)){\r\n      clonedBoard[row][col] = curBoard[row][col];\r\n      row = Math.floor(9*Math.random());\r\n      col = Math.floor(9*Math.random());\r\n      while(!curBoard[row][col]) row = Math.floor(9*Math.random()),col = Math.floor(9*Math.random());\r\n      clonedBoard[row][col] = null;\r\n    }\r\n    curBoard[row][col] = null;\r\n  }\r\n  return curBoard;\r\n}\r\n\r\n//Function determines if the board has been solved.\r\nexport function isCompleted(board:(number|null)[][]):boolean{\r\n  for(let i = 0; i < board.length; i++){\r\n    if(board[i].includes(null)) return false;\r\n  }\r\n  return true;\r\n}"]}