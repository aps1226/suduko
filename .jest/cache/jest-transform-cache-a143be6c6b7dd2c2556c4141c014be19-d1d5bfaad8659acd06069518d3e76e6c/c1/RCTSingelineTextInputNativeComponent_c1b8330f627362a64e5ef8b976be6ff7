7bc2e2e2fa9f618c787adcc6ba0f25c3










'use strict';var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.default = exports.Commands = void 0;


var _requireNativeComponent = _interopRequireDefault(require("../../ReactNative/requireNativeComponent"));
var _codegenNativeCommands = _interopRequireDefault(require("../../Utilities/codegenNativeCommands"));

var React = _interopRequireWildcard(require("react"));

var _RCTSinglelineTextInputViewConfig = _interopRequireDefault(require("./RCTSinglelineTextInputViewConfig"));function _getRequireWildcardCache(nodeInterop) {if (typeof WeakMap !== "function") return null;var cacheBabelInterop = new WeakMap();var cacheNodeInterop = new WeakMap();return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {return nodeInterop ? cacheNodeInterop : cacheBabelInterop;})(nodeInterop);}function _interopRequireWildcard(obj, nodeInterop) {if (!nodeInterop && obj && obj.__esModule) {return obj;}if (obj === null || typeof obj !== "object" && typeof obj !== "function") {return { default: obj };}var cache = _getRequireWildcardCache(nodeInterop);if (cache && cache.has(obj)) {return cache.get(obj);}var newObj = {};var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;for (var key in obj) {if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;if (desc && (desc.get || desc.set)) {Object.defineProperty(newObj, key, desc);} else {newObj[key] = obj[key];}}}newObj.default = obj;if (cache) {cache.set(obj, newObj);}return newObj;}






var Commands = (0, _codegenNativeCommands.default)({
  supportedCommands: ['focus', 'blur', 'setTextAndSelection'] });exports.Commands = Commands;


var SinglelineTextInputNativeComponent;
if (global.RN$Bridgeless) {
  require("../../Renderer/shims/ReactNativeViewConfigRegistry").register('RCTSinglelineTextInputView', function () {
    return _RCTSinglelineTextInputViewConfig.default;
  });
  SinglelineTextInputNativeComponent = 'RCTSinglelineTextInputView';
} else {
  SinglelineTextInputNativeComponent = (0, _requireNativeComponent.default)(
  'RCTSinglelineTextInputView');

}var _default =


SinglelineTextInputNativeComponent;exports.default = _default;