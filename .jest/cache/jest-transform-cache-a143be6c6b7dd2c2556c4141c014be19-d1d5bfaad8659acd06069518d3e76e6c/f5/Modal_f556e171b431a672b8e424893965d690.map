{"version":3,"sources":["Modal.js"],"names":["AppContainer","require","I18nManager","PropTypes","React","ScrollView","StyleSheet","View","uniqueModalIdentifier","Modal","props","_confirmProps","_identifier","virtualizedList","onDismiss","nextProps","visible","containerStyles","backgroundColor","transparent","animationType","presentationStyle","innerChildren","__DEV__","context","rootTag","children","hardwareAccelerated","onRequestClose","onShow","statusBarTranslucent","styles","modal","_shouldSetResponder","supportedOrientations","onOrientationChange","container","console","warn","Component","defaultProps","contextTypes","number","childContextTypes","object","side","getConstants","isRTL","create","position","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst AppContainer = require('../ReactNative/AppContainer');\nconst I18nManager = require('../ReactNative/I18nManager');\nconst PropTypes = require('prop-types');\nconst React = require('react');\nconst ScrollView = require('../Components/ScrollView/ScrollView');\nconst StyleSheet = require('../StyleSheet/StyleSheet');\nconst View = require('../Components/View/View');\n\nimport type {ViewProps} from '../Components/View/ViewPropTypes';\nimport type {DirectEventHandler} from '../Types/CodegenTypes';\nimport type EmitterSubscription from '../vendor/emitter/EmitterSubscription';\nimport RCTModalHostView from './RCTModalHostViewNativeComponent';\n/**\n * The Modal component is a simple way to present content above an enclosing view.\n *\n * See https://reactnative.dev/docs/modal.html\n */\n\n// In order to route onDismiss callbacks, we need to uniquely identifier each\n// <Modal> on screen. There can be different ones, either nested or as siblings.\n// We cannot pass the onDismiss callback to native as the view will be\n// destroyed before the callback is fired.\nlet uniqueModalIdentifier = 0;\n\ntype OrientationChangeEvent = $ReadOnly<{|\n  orientation: 'portrait' | 'landscape',\n|}>;\n\nexport type Props = $ReadOnly<{|\n  ...ViewProps,\n\n  /**\n   * The `animationType` prop controls how the modal animates.\n   *\n   * See https://reactnative.dev/docs/modal.html#animationtype\n   */\n  animationType?: ?('none' | 'slide' | 'fade'),\n\n  /**\n   * The `presentationStyle` prop controls how the modal appears.\n   *\n   * See https://reactnative.dev/docs/modal.html#presentationstyle\n   */\n  presentationStyle?: ?(\n    | 'fullScreen'\n    | 'pageSheet'\n    | 'formSheet'\n    | 'overFullScreen'\n  ),\n\n  /**\n   * The `transparent` prop determines whether your modal will fill the\n   * entire view.\n   *\n   * See https://reactnative.dev/docs/modal.html#transparent\n   */\n  transparent?: ?boolean,\n\n  /**\n   * The `statusBarTranslucent` prop determines whether your modal should go under\n   * the system statusbar.\n   *\n   * See https://reactnative.dev/docs/modal.html#transparent\n   */\n  statusBarTranslucent?: ?boolean,\n\n  /**\n   * The `hardwareAccelerated` prop controls whether to force hardware\n   * acceleration for the underlying window.\n   *\n   * This prop works only on Android.\n   *\n   * See https://reactnative.dev/docs/modal.html#hardwareaccelerated\n   */\n  hardwareAccelerated?: ?boolean,\n\n  /**\n   * The `visible` prop determines whether your modal is visible.\n   *\n   * See https://reactnative.dev/docs/modal.html#visible\n   */\n  visible?: ?boolean,\n\n  /**\n   * The `onRequestClose` callback is called when the user taps the hardware\n   * back button on Android or the menu button on Apple TV.\n   *\n   * This is required on Apple TV and Android.\n   *\n   * See https://reactnative.dev/docs/modal.html#onrequestclose\n   */\n  onRequestClose?: ?DirectEventHandler<null>,\n\n  /**\n   * The `onShow` prop allows passing a function that will be called once the\n   * modal has been shown.\n   *\n   * See https://reactnative.dev/docs/modal.html#onshow\n   */\n  onShow?: ?DirectEventHandler<null>,\n\n  /**\n   * The `onDismiss` prop allows passing a function that will be called once\n   * the modal has been dismissed.\n   *\n   * See https://reactnative.dev/docs/modal.html#ondismiss\n   */\n  onDismiss?: ?() => mixed,\n\n  /**\n   * The `supportedOrientations` prop allows the modal to be rotated to any of the specified orientations.\n   *\n   * See https://reactnative.dev/docs/modal.html#supportedorientations\n   */\n  supportedOrientations?: ?$ReadOnlyArray<\n    | 'portrait'\n    | 'portrait-upside-down'\n    | 'landscape'\n    | 'landscape-left'\n    | 'landscape-right',\n  >,\n\n  /**\n   * The `onOrientationChange` callback is called when the orientation changes while the modal is being displayed.\n   *\n   * See https://reactnative.dev/docs/modal.html#onorientationchange\n   */\n  onOrientationChange?: ?DirectEventHandler<OrientationChangeEvent>,\n|}>;\n\nclass Modal extends React.Component<Props> {\n  static defaultProps: {|hardwareAccelerated: boolean, visible: boolean|} = {\n    visible: true,\n    hardwareAccelerated: false,\n  };\n\n  static contextTypes: any | {|rootTag: React$PropType$Primitive<number>|} = {\n    rootTag: PropTypes.number,\n  };\n\n  _identifier: number;\n  _eventSubscription: ?EmitterSubscription;\n\n  constructor(props: Props) {\n    super(props);\n    Modal._confirmProps(props);\n    this._identifier = uniqueModalIdentifier++;\n  }\n\n  static childContextTypes:\n    | any\n    | {|virtualizedList: React$PropType$Primitive<any>|} = {\n    virtualizedList: PropTypes.object,\n  };\n\n  getChildContext(): {|virtualizedList: null|} {\n    // Reset the context so VirtualizedList doesn't get confused by nesting\n    // in the React tree that doesn't reflect the native component hierarchy.\n    return {\n      virtualizedList: null,\n    };\n  }\n\n  componentWillUnmount() {\n    if (this.props.onDismiss != null) {\n      this.props.onDismiss();\n    }\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps: Props) {\n    Modal._confirmProps(nextProps);\n  }\n\n  static _confirmProps(props: Props) {\n    if (\n      props.presentationStyle &&\n      props.presentationStyle !== 'overFullScreen' &&\n      props.transparent\n    ) {\n      console.warn(\n        `Modal with '${\n          props.presentationStyle\n        }' presentation style and 'transparent' value is not supported.`,\n      );\n    }\n  }\n\n  render(): React.Node {\n    if (this.props.visible !== true) {\n      return null;\n    }\n\n    const containerStyles = {\n      backgroundColor: this.props.transparent ? 'transparent' : 'white',\n    };\n\n    let animationType = this.props.animationType || 'none';\n\n    let presentationStyle = this.props.presentationStyle;\n    if (!presentationStyle) {\n      presentationStyle = 'fullScreen';\n      if (this.props.transparent) {\n        presentationStyle = 'overFullScreen';\n      }\n    }\n\n    const innerChildren = __DEV__ ? (\n      <AppContainer rootTag={this.context.rootTag}>\n        {this.props.children}\n      </AppContainer>\n    ) : (\n      this.props.children\n    );\n\n    return (\n      <RCTModalHostView\n        animationType={animationType}\n        presentationStyle={presentationStyle}\n        transparent={this.props.transparent}\n        hardwareAccelerated={this.props.hardwareAccelerated}\n        onRequestClose={this.props.onRequestClose}\n        onShow={this.props.onShow}\n        statusBarTranslucent={this.props.statusBarTranslucent}\n        identifier={this._identifier}\n        style={styles.modal}\n        onStartShouldSetResponder={this._shouldSetResponder}\n        supportedOrientations={this.props.supportedOrientations}\n        onOrientationChange={this.props.onOrientationChange}>\n        <ScrollView.Context.Provider value={null}>\n          <View style={[styles.container, containerStyles]}>\n            {innerChildren}\n          </View>\n        </ScrollView.Context.Provider>\n      </RCTModalHostView>\n    );\n  }\n\n  // We don't want any responder events bubbling out of the modal.\n  _shouldSetResponder(): boolean {\n    return true;\n  }\n}\n\nconst side = I18nManager.getConstants().isRTL ? 'right' : 'left';\nconst styles = StyleSheet.create({\n  modal: {\n    position: 'absolute',\n  },\n  container: {\n    /* $FlowFixMe(>=0.111.0 site=react_native_fb) This comment suppresses an\n     * error found when Flow v0.111 was deployed. To see the error, delete this\n     * comment and run Flow. */\n    [side]: 0,\n    top: 0,\n    flex: 1,\n  },\n});\n\nmodule.exports = Modal;\n"]}