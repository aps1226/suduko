{"version":3,"sources":["HelperText.tsx"],"names":["HelperText","type","visible","padding","rest","current","shown","React","Animated","textHeight","scale","theme","toValue","duration","useNativeDriver","handleTextLayout","e","onLayout","dark","textColor","colors","styles","color","opacity","transform","translateY","inputRange","outputRange","text","fontSize","paddingVertical","paddingHorizontal"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport color from 'color';\nimport {\n  Animated,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n  LayoutChangeEvent,\n} from 'react-native';\nimport AnimatedText from './Typography/AnimatedText';\nimport { withTheme } from '../core/theming';\nimport type { $Omit } from '../types';\n\ntype Props = $Omit<\n  $Omit<React.ComponentPropsWithRef<typeof AnimatedText>, 'padding'>,\n  'type'\n> & {\n  /**\n   * Type of the helper text.\n   */\n  type: 'error' | 'info';\n  /**\n   * Whether to display the helper text.\n   */\n  visible?: boolean;\n  /**\n   * Whether to apply padding to the helper text.\n   */\n  padding?: 'none' | 'normal';\n  /**\n   * Text content of the HelperText.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * TestID used for testing purposes\n   */\n  testID?: string;\n};\n\n/**\n * Helper text is used in conjuction with input elements to provide additional hints for the user.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/helper-text.gif\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { HelperText, TextInput } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [text, setText] = React.useState('');\n *\n *    const onChangeText = text => setText(text);\n *\n *   const hasErrors = () => {\n *     return !text.includes('@');\n *   };\n *\n *  return (\n *     <View>\n *       <TextInput label=\"Email\" value={text} onChangeText={onChangeText} />\n *       <HelperText type=\"error\" visible={hasErrors()}>\n *         Email address is invalid!\n *       </HelperText>\n *     </View>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst HelperText = ({\n  style,\n  type = 'info',\n  visible = true,\n  theme,\n  onLayout,\n  padding = 'normal',\n  ...rest\n}: Props) => {\n  const { current: shown } = React.useRef<Animated.Value>(\n    new Animated.Value(visible ? 1 : 0)\n  );\n\n  let { current: textHeight } = React.useRef<number>(0);\n\n  const { scale } = theme.animation;\n\n  React.useEffect(() => {\n    if (visible) {\n      // show text\n      Animated.timing(shown, {\n        toValue: 1,\n        duration: 150 * scale,\n        useNativeDriver: true,\n      }).start();\n    } else {\n      // hide text\n      Animated.timing(shown, {\n        toValue: 0,\n        duration: 180 * scale,\n        useNativeDriver: true,\n      }).start();\n    }\n  }, [visible, scale, shown]);\n\n  const handleTextLayout = (e: LayoutChangeEvent) => {\n    onLayout?.(e);\n    textHeight = e.nativeEvent.layout.height;\n  };\n\n  const { colors, dark } = theme;\n\n  const textColor =\n    type === 'error'\n      ? colors.error\n      : color(colors.text)\n          .alpha(dark ? 0.7 : 0.54)\n          .rgb()\n          .string();\n\n  return (\n    <AnimatedText\n      onLayout={handleTextLayout}\n      style={[\n        styles.text,\n        padding !== 'none' ? styles.padding : {},\n        {\n          color: textColor,\n          opacity: shown,\n          transform:\n            visible && type === 'error'\n              ? [\n                  {\n                    translateY: shown.interpolate({\n                      inputRange: [0, 1],\n                      outputRange: [-textHeight / 2, 0],\n                    }),\n                  },\n                ]\n              : [],\n        },\n        style,\n      ]}\n      {...rest}\n    >\n      {rest.children}\n    </AnimatedText>\n  );\n};\n\nconst styles = StyleSheet.create({\n  text: {\n    fontSize: 12,\n    paddingVertical: 4,\n  },\n  padding: {\n    paddingHorizontal: 12,\n  },\n});\n\nexport default withTheme(HelperText);\n"]}