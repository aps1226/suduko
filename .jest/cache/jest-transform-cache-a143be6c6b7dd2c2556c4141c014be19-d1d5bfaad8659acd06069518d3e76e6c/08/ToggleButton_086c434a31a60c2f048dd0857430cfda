16e71409d92f502a33cf3b8eba65e011
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _objectWithoutProperties2 = _interopRequireDefault2(require("@babel/runtime/helpers/objectWithoutProperties"));

var _excluded = ["icon", "size", "theme", "accessibilityLabel", "disabled", "style", "value", "status", "onPress"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ToggleButton = exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _theming = require("../../core/theming");

var _color = _interopRequireDefault(require("color"));

var _IconButton = _interopRequireDefault(require("../IconButton"));

var _ToggleButtonGroup = require("./ToggleButtonGroup");

var _colors = require("../../styles/colors");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var ToggleButton = function ToggleButton(_ref) {
  var icon = _ref.icon,
      size = _ref.size,
      theme = _ref.theme,
      accessibilityLabel = _ref.accessibilityLabel,
      disabled = _ref.disabled,
      style = _ref.style,
      value = _ref.value,
      status = _ref.status,
      _onPress = _ref.onPress,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var borderRadius = theme.roundness;
  return React.createElement(_ToggleButtonGroup.ToggleButtonGroupContext.Consumer, null, function (context) {
    var backgroundColor;
    var checked = context && context.value === value || status === 'checked';

    if (checked) {
      backgroundColor = theme.dark ? 'rgba(255, 255, 255, .12)' : 'rgba(0, 0, 0, .08)';
    } else {
      backgroundColor = 'transparent';
    }

    return React.createElement(_IconButton.default, _extends({
      borderless: false,
      icon: icon,
      onPress: function onPress(e) {
        if (_onPress) {
          _onPress(e);
        }

        if (context) {
          context.onValueChange(!checked ? value : null);
        }
      },
      size: size,
      accessibilityLabel: accessibilityLabel,
      accessibilityState: {
        disabled: disabled,
        selected: checked
      },
      disabled: disabled,
      style: [styles.content, {
        backgroundColor: backgroundColor,
        borderRadius: borderRadius,
        borderColor: (0, _color.default)(theme.dark ? _colors.white : _colors.black).alpha(0.29).rgb().string()
      }, style]
    }, rest));
  });
};

var styles = _reactNative.StyleSheet.create({
  content: {
    width: 42,
    height: 42,
    margin: 0
  }
});

var _default = (0, _theming.withTheme)(ToggleButton);

exports.default = _default;
var ToggleButtonWithTheme = (0, _theming.withTheme)(ToggleButton);
exports.ToggleButton = ToggleButtonWithTheme;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,