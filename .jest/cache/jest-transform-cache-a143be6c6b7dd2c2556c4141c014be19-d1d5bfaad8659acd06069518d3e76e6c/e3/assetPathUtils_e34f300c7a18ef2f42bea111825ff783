e0a6e3ae7453002ea5bdcd3d5b8a0fd4
'use strict';

var androidScaleSuffix = {
  '0.75': 'ldpi',
  '1': 'mdpi',
  '1.5': 'hdpi',
  '2': 'xhdpi',
  '3': 'xxhdpi',
  '4': 'xxxhdpi'
};

function getAndroidAssetSuffix(scale) {
  if (scale.toString() in androidScaleSuffix) {
    return androidScaleSuffix[scale.toString()];
  }

  throw new Error('no such scale ' + scale.toString());
}

var drawableFileTypes = new Set(['gif', 'jpeg', 'jpg', 'png', 'svg', 'webp', 'xml']);

function getAndroidResourceFolderName(asset, scale) {
  if (!drawableFileTypes.has(asset.type)) {
    return 'raw';
  }

  var suffix = getAndroidAssetSuffix(scale);

  if (!suffix) {
    throw new Error("Don't know which android drawable suffix to use for scale: " + scale + '\nAsset: ' + JSON.stringify(asset, null, '\t') + '\nPossible scales are:' + JSON.stringify(androidScaleSuffix, null, '\t'));
  }

  var androidFolder = 'drawable-' + suffix;
  return androidFolder;
}

function getAndroidResourceIdentifier(asset) {
  var folderPath = getBasePath(asset);
  return (folderPath + '/' + asset.name).toLowerCase().replace(/\//g, '_').replace(/([^a-z0-9_])/g, '').replace(/^assets_/, '');
}

function getBasePath(asset) {
  var basePath = asset.httpServerLocation;

  if (basePath[0] === '/') {
    basePath = basePath.substr(1);
  }

  return basePath;
}

module.exports = {
  getAndroidAssetSuffix: getAndroidAssetSuffix,
  getAndroidResourceFolderName: getAndroidResourceFolderName,
  getAndroidResourceIdentifier: getAndroidResourceIdentifier,
  getBasePath: getBasePath
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0UGF0aFV0aWxzLmpzIl0sIm5hbWVzIjpbImFuZHJvaWRTY2FsZVN1ZmZpeCIsImdldEFuZHJvaWRBc3NldFN1ZmZpeCIsInNjYWxlIiwidG9TdHJpbmciLCJFcnJvciIsImRyYXdhYmxlRmlsZVR5cGVzIiwiU2V0IiwiZ2V0QW5kcm9pZFJlc291cmNlRm9sZGVyTmFtZSIsImFzc2V0IiwiaGFzIiwidHlwZSIsInN1ZmZpeCIsIkpTT04iLCJzdHJpbmdpZnkiLCJhbmRyb2lkRm9sZGVyIiwiZ2V0QW5kcm9pZFJlc291cmNlSWRlbnRpZmllciIsImZvbGRlclBhdGgiLCJnZXRCYXNlUGF0aCIsIm5hbWUiLCJ0b0xvd2VyQ2FzZSIsInJlcGxhY2UiLCJiYXNlUGF0aCIsImh0dHBTZXJ2ZXJMb2NhdGlvbiIsInN1YnN0ciIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQVVBOztBQUlBLElBQU1BLGtCQUFrQixHQUFHO0FBQ3pCLFVBQVEsTUFEaUI7QUFFekIsT0FBSyxNQUZvQjtBQUd6QixTQUFPLE1BSGtCO0FBSXpCLE9BQUssT0FKb0I7QUFLekIsT0FBSyxRQUxvQjtBQU16QixPQUFLO0FBTm9CLENBQTNCOztBQWFBLFNBQVNDLHFCQUFULENBQStCQyxLQUEvQixFQUFzRDtBQUNwRCxNQUFJQSxLQUFLLENBQUNDLFFBQU4sTUFBb0JILGtCQUF4QixFQUE0QztBQUMxQyxXQUFPQSxrQkFBa0IsQ0FBQ0UsS0FBSyxDQUFDQyxRQUFOLEVBQUQsQ0FBekI7QUFDRDs7QUFFRCxRQUFNLElBQUlDLEtBQUosQ0FBVSxtQkFBbUJGLEtBQUssQ0FBQ0MsUUFBTixFQUE3QixDQUFOO0FBQ0Q7O0FBR0QsSUFBTUUsaUJBQWlCLEdBQUcsSUFBSUMsR0FBSixDQUFRLENBQ2hDLEtBRGdDLEVBRWhDLE1BRmdDLEVBR2hDLEtBSGdDLEVBSWhDLEtBSmdDLEVBS2hDLEtBTGdDLEVBTWhDLE1BTmdDLEVBT2hDLEtBUGdDLENBQVIsQ0FBMUI7O0FBVUEsU0FBU0MsNEJBQVQsQ0FDRUMsS0FERixFQUVFTixLQUZGLEVBR3FDO0FBQ25DLE1BQUksQ0FBQ0csaUJBQWlCLENBQUNJLEdBQWxCLENBQXNCRCxLQUFLLENBQUNFLElBQTVCLENBQUwsRUFBd0M7QUFDdEMsV0FBTyxLQUFQO0FBQ0Q7O0FBQ0QsTUFBSUMsTUFBTSxHQUFHVixxQkFBcUIsQ0FBQ0MsS0FBRCxDQUFsQzs7QUFDQSxNQUFJLENBQUNTLE1BQUwsRUFBYTtBQUNYLFVBQU0sSUFBSVAsS0FBSixDQUNKLGdFQUNFRixLQURGLEdBRUUsV0FGRixHQUdFVSxJQUFJLENBQUNDLFNBQUwsQ0FBZUwsS0FBZixFQUFzQixJQUF0QixFQUE0QixJQUE1QixDQUhGLEdBSUUsd0JBSkYsR0FLRUksSUFBSSxDQUFDQyxTQUFMLENBQWViLGtCQUFmLEVBQW1DLElBQW5DLEVBQXlDLElBQXpDLENBTkUsQ0FBTjtBQVFEOztBQUNELE1BQU1jLGFBQWEsR0FBRyxjQUFjSCxNQUFwQztBQUNBLFNBQU9HLGFBQVA7QUFDRDs7QUFFRCxTQUFTQyw0QkFBVCxDQUFzQ1AsS0FBdEMsRUFBb0U7QUFDbEUsTUFBSVEsVUFBVSxHQUFHQyxXQUFXLENBQUNULEtBQUQsQ0FBNUI7QUFDQSxTQUFPLENBQUNRLFVBQVUsR0FBRyxHQUFiLEdBQW1CUixLQUFLLENBQUNVLElBQTFCLEVBQ0pDLFdBREksR0FFSkMsT0FGSSxDQUVJLEtBRkosRUFFVyxHQUZYLEVBR0pBLE9BSEksQ0FHSSxlQUhKLEVBR3FCLEVBSHJCLEVBSUpBLE9BSkksQ0FJSSxVQUpKLEVBSWdCLEVBSmhCLENBQVA7QUFLRDs7QUFFRCxTQUFTSCxXQUFULENBQXFCVCxLQUFyQixFQUFtRDtBQUNqRCxNQUFJYSxRQUFRLEdBQUdiLEtBQUssQ0FBQ2Msa0JBQXJCOztBQUNBLE1BQUlELFFBQVEsQ0FBQyxDQUFELENBQVIsS0FBZ0IsR0FBcEIsRUFBeUI7QUFDdkJBLElBQUFBLFFBQVEsR0FBR0EsUUFBUSxDQUFDRSxNQUFULENBQWdCLENBQWhCLENBQVg7QUFDRDs7QUFDRCxTQUFPRixRQUFQO0FBQ0Q7O0FBRURHLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjtBQUNmeEIsRUFBQUEscUJBQXFCLEVBQUVBLHFCQURSO0FBRWZNLEVBQUFBLDRCQUE0QixFQUFFQSw0QkFGZjtBQUdmUSxFQUFBQSw0QkFBNEIsRUFBRUEsNEJBSGY7QUFJZkUsRUFBQUEsV0FBVyxFQUFFQTtBQUpFLENBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBAZmxvdyBzdHJpY3RcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmltcG9ydCB0eXBlIHtQYWNrYWdlckFzc2V0fSBmcm9tICcuL0Fzc2V0UmVnaXN0cnknO1xuXG5jb25zdCBhbmRyb2lkU2NhbGVTdWZmaXggPSB7XG4gICcwLjc1JzogJ2xkcGknLFxuICAnMSc6ICdtZHBpJyxcbiAgJzEuNSc6ICdoZHBpJyxcbiAgJzInOiAneGhkcGknLFxuICAnMyc6ICd4eGhkcGknLFxuICAnNCc6ICd4eHhoZHBpJyxcbn07XG5cbi8qKlxuICogRklYTUU6IHVzaW5nIG51bWJlciB0byByZXByZXNlbnQgZGlzY3JldGUgc2NhbGUgbnVtYmVycyBpcyBmcmFnaWxlIGluIGVzc2VuY2UgYmVjYXVzZSBvZlxuICogZmxvYXRpbmcgcG9pbnQgbnVtYmVycyBpbXByZWNpc2lvbi5cbiAqL1xuZnVuY3Rpb24gZ2V0QW5kcm9pZEFzc2V0U3VmZml4KHNjYWxlOiBudW1iZXIpOiBzdHJpbmcge1xuICBpZiAoc2NhbGUudG9TdHJpbmcoKSBpbiBhbmRyb2lkU2NhbGVTdWZmaXgpIHtcbiAgICByZXR1cm4gYW5kcm9pZFNjYWxlU3VmZml4W3NjYWxlLnRvU3RyaW5nKCldO1xuICB9XG5cbiAgdGhyb3cgbmV3IEVycm9yKCdubyBzdWNoIHNjYWxlICcgKyBzY2FsZS50b1N0cmluZygpKTtcbn1cblxuLy8gU2VlIGh0dHBzOi8vZGV2ZWxvcGVyLmFuZHJvaWQuY29tL2d1aWRlL3RvcGljcy9yZXNvdXJjZXMvZHJhd2FibGUtcmVzb3VyY2UuaHRtbFxuY29uc3QgZHJhd2FibGVGaWxlVHlwZXMgPSBuZXcgU2V0KFtcbiAgJ2dpZicsXG4gICdqcGVnJyxcbiAgJ2pwZycsXG4gICdwbmcnLFxuICAnc3ZnJyxcbiAgJ3dlYnAnLFxuICAneG1sJyxcbl0pO1xuXG5mdW5jdGlvbiBnZXRBbmRyb2lkUmVzb3VyY2VGb2xkZXJOYW1lKFxuICBhc3NldDogUGFja2FnZXJBc3NldCxcbiAgc2NhbGU6IG51bWJlcixcbik6IHN0cmluZyB8ICRURU1QT1JBUlkkc3RyaW5nPCdyYXcnPiB7XG4gIGlmICghZHJhd2FibGVGaWxlVHlwZXMuaGFzKGFzc2V0LnR5cGUpKSB7XG4gICAgcmV0dXJuICdyYXcnO1xuICB9XG4gIHZhciBzdWZmaXggPSBnZXRBbmRyb2lkQXNzZXRTdWZmaXgoc2NhbGUpO1xuICBpZiAoIXN1ZmZpeCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIFwiRG9uJ3Qga25vdyB3aGljaCBhbmRyb2lkIGRyYXdhYmxlIHN1ZmZpeCB0byB1c2UgZm9yIHNjYWxlOiBcIiArXG4gICAgICAgIHNjYWxlICtcbiAgICAgICAgJ1xcbkFzc2V0OiAnICtcbiAgICAgICAgSlNPTi5zdHJpbmdpZnkoYXNzZXQsIG51bGwsICdcXHQnKSArXG4gICAgICAgICdcXG5Qb3NzaWJsZSBzY2FsZXMgYXJlOicgK1xuICAgICAgICBKU09OLnN0cmluZ2lmeShhbmRyb2lkU2NhbGVTdWZmaXgsIG51bGwsICdcXHQnKSxcbiAgICApO1xuICB9XG4gIGNvbnN0IGFuZHJvaWRGb2xkZXIgPSAnZHJhd2FibGUtJyArIHN1ZmZpeDtcbiAgcmV0dXJuIGFuZHJvaWRGb2xkZXI7XG59XG5cbmZ1bmN0aW9uIGdldEFuZHJvaWRSZXNvdXJjZUlkZW50aWZpZXIoYXNzZXQ6IFBhY2thZ2VyQXNzZXQpOiBzdHJpbmcge1xuICB2YXIgZm9sZGVyUGF0aCA9IGdldEJhc2VQYXRoKGFzc2V0KTtcbiAgcmV0dXJuIChmb2xkZXJQYXRoICsgJy8nICsgYXNzZXQubmFtZSlcbiAgICAudG9Mb3dlckNhc2UoKVxuICAgIC5yZXBsYWNlKC9cXC8vZywgJ18nKSAvLyBFbmNvZGUgZm9sZGVyIHN0cnVjdHVyZSBpbiBmaWxlIG5hbWVcbiAgICAucmVwbGFjZSgvKFteYS16MC05X10pL2csICcnKSAvLyBSZW1vdmUgaWxsZWdhbCBjaGFyc1xuICAgIC5yZXBsYWNlKC9eYXNzZXRzXy8sICcnKTsgLy8gUmVtb3ZlIFwiYXNzZXRzX1wiIHByZWZpeFxufVxuXG5mdW5jdGlvbiBnZXRCYXNlUGF0aChhc3NldDogUGFja2FnZXJBc3NldCk6IHN0cmluZyB7XG4gIHZhciBiYXNlUGF0aCA9IGFzc2V0Lmh0dHBTZXJ2ZXJMb2NhdGlvbjtcbiAgaWYgKGJhc2VQYXRoWzBdID09PSAnLycpIHtcbiAgICBiYXNlUGF0aCA9IGJhc2VQYXRoLnN1YnN0cigxKTtcbiAgfVxuICByZXR1cm4gYmFzZVBhdGg7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRBbmRyb2lkQXNzZXRTdWZmaXg6IGdldEFuZHJvaWRBc3NldFN1ZmZpeCxcbiAgZ2V0QW5kcm9pZFJlc291cmNlRm9sZGVyTmFtZTogZ2V0QW5kcm9pZFJlc291cmNlRm9sZGVyTmFtZSxcbiAgZ2V0QW5kcm9pZFJlc291cmNlSWRlbnRpZmllcjogZ2V0QW5kcm9pZFJlc291cmNlSWRlbnRpZmllcixcbiAgZ2V0QmFzZVBhdGg6IGdldEJhc2VQYXRoLFxufTtcbiJdfQ==