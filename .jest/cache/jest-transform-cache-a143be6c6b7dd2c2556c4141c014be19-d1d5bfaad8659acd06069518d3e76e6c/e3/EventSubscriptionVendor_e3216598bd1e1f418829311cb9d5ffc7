e31948b9a220f4dd1395f35a708ba2cf
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var invariant = require('invariant');

var EventSubscriptionVendor = function () {
  function EventSubscriptionVendor() {
    (0, _classCallCheck2.default)(this, EventSubscriptionVendor);
    this._subscriptionsForType = {};
    this._currentSubscription = null;
  }

  (0, _createClass2.default)(EventSubscriptionVendor, [{
    key: "addSubscription",
    value: function addSubscription(eventType, subscription) {
      invariant(subscription.subscriber === this, 'The subscriber of the subscription is incorrectly set.');

      if (!this._subscriptionsForType[eventType]) {
        this._subscriptionsForType[eventType] = [];
      }

      var key = this._subscriptionsForType[eventType].length;

      this._subscriptionsForType[eventType].push(subscription);

      subscription.eventType = eventType;
      subscription.key = key;
      return subscription;
    }
  }, {
    key: "removeAllSubscriptions",
    value: function removeAllSubscriptions(eventType) {
      if (eventType === undefined) {
        this._subscriptionsForType = {};
      } else {
        delete this._subscriptionsForType[eventType];
      }
    }
  }, {
    key: "removeSubscription",
    value: function removeSubscription(subscription) {
      var eventType = subscription.eventType;
      var key = subscription.key;
      var subscriptionsForType = this._subscriptionsForType[eventType];

      if (subscriptionsForType) {
        delete subscriptionsForType[key];
      }
    }
  }, {
    key: "getSubscriptionsForType",
    value: function getSubscriptionsForType(eventType) {
      return this._subscriptionsForType[eventType];
    }
  }]);
  return EventSubscriptionVendor;
}();

module.exports = EventSubscriptionVendor;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkV2ZW50U3Vic2NyaXB0aW9uVmVuZG9yLmpzIl0sIm5hbWVzIjpbImludmFyaWFudCIsInJlcXVpcmUiLCJFdmVudFN1YnNjcmlwdGlvblZlbmRvciIsIl9zdWJzY3JpcHRpb25zRm9yVHlwZSIsIl9jdXJyZW50U3Vic2NyaXB0aW9uIiwiZXZlbnRUeXBlIiwic3Vic2NyaXB0aW9uIiwic3Vic2NyaWJlciIsImtleSIsImxlbmd0aCIsInB1c2giLCJ1bmRlZmluZWQiLCJzdWJzY3JpcHRpb25zRm9yVHlwZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQVVBOzs7Ozs7OztBQUVBLElBQU1BLFNBQVMsR0FBR0MsT0FBTyxDQUFDLFdBQUQsQ0FBekI7O0lBUU1DLHVCO0FBSUoscUNBQWM7QUFBQTtBQUNaLFNBQUtDLHFCQUFMLEdBQTZCLEVBQTdCO0FBQ0EsU0FBS0Msb0JBQUwsR0FBNEIsSUFBNUI7QUFDRDs7OztXQVFELHlCQUNFQyxTQURGLEVBRUVDLFlBRkYsRUFHcUI7QUFDbkJOLE1BQUFBLFNBQVMsQ0FDUE0sWUFBWSxDQUFDQyxVQUFiLEtBQTRCLElBRHJCLEVBRVAsd0RBRk8sQ0FBVDs7QUFJQSxVQUFJLENBQUMsS0FBS0oscUJBQUwsQ0FBMkJFLFNBQTNCLENBQUwsRUFBNEM7QUFDMUMsYUFBS0YscUJBQUwsQ0FBMkJFLFNBQTNCLElBQXdDLEVBQXhDO0FBQ0Q7O0FBQ0QsVUFBTUcsR0FBRyxHQUFHLEtBQUtMLHFCQUFMLENBQTJCRSxTQUEzQixFQUFzQ0ksTUFBbEQ7O0FBQ0EsV0FBS04scUJBQUwsQ0FBMkJFLFNBQTNCLEVBQXNDSyxJQUF0QyxDQUEyQ0osWUFBM0M7O0FBQ0FBLE1BQUFBLFlBQVksQ0FBQ0QsU0FBYixHQUF5QkEsU0FBekI7QUFDQUMsTUFBQUEsWUFBWSxDQUFDRSxHQUFiLEdBQW1CQSxHQUFuQjtBQUNBLGFBQU9GLFlBQVA7QUFDRDs7O1dBUUQsZ0NBQXVCRCxTQUF2QixFQUEyQztBQUN6QyxVQUFJQSxTQUFTLEtBQUtNLFNBQWxCLEVBQTZCO0FBQzNCLGFBQUtSLHFCQUFMLEdBQTZCLEVBQTdCO0FBQ0QsT0FGRCxNQUVPO0FBQ0wsZUFBTyxLQUFLQSxxQkFBTCxDQUEyQkUsU0FBM0IsQ0FBUDtBQUNEO0FBQ0Y7OztXQVFELDRCQUFtQkMsWUFBbkIsRUFBeUM7QUFDdkMsVUFBTUQsU0FBUyxHQUFHQyxZQUFZLENBQUNELFNBQS9CO0FBQ0EsVUFBTUcsR0FBRyxHQUFHRixZQUFZLENBQUNFLEdBQXpCO0FBRUEsVUFBTUksb0JBQW9CLEdBQUcsS0FBS1QscUJBQUwsQ0FBMkJFLFNBQTNCLENBQTdCOztBQUNBLFVBQUlPLG9CQUFKLEVBQTBCO0FBQ3hCLGVBQU9BLG9CQUFvQixDQUFDSixHQUFELENBQTNCO0FBQ0Q7QUFDRjs7O1dBY0QsaUNBQXdCSCxTQUF4QixFQUFpRTtBQUMvRCxhQUFPLEtBQUtGLHFCQUFMLENBQTJCRSxTQUEzQixDQUFQO0FBQ0Q7Ozs7O0FBR0hRLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQlosdUJBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBAZmxvd1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgaW52YXJpYW50ID0gcmVxdWlyZSgnaW52YXJpYW50Jyk7XG5cbmltcG9ydCB0eXBlIEV2ZW50U3Vic2NyaXB0aW9uIGZyb20gJy4vRXZlbnRTdWJzY3JpcHRpb24nO1xuXG4vKipcbiAqIEV2ZW50U3Vic2NyaXB0aW9uVmVuZG9yIHN0b3JlcyBhIHNldCBvZiBFdmVudFN1YnNjcmlwdGlvbnMgdGhhdCBhcmVcbiAqIHN1YnNjcmliZWQgdG8gYSBwYXJ0aWN1bGFyIGV2ZW50IHR5cGUuXG4gKi9cbmNsYXNzIEV2ZW50U3Vic2NyaXB0aW9uVmVuZG9yIHtcbiAgX3N1YnNjcmlwdGlvbnNGb3JUeXBlOiBPYmplY3Q7XG4gIF9jdXJyZW50U3Vic2NyaXB0aW9uOiA/RXZlbnRTdWJzY3JpcHRpb247XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fc3Vic2NyaXB0aW9uc0ZvclR5cGUgPSB7fTtcbiAgICB0aGlzLl9jdXJyZW50U3Vic2NyaXB0aW9uID0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGEgc3Vic2NyaXB0aW9uIGtleWVkIGJ5IGFuIGV2ZW50IHR5cGUuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudFR5cGVcbiAgICogQHBhcmFtIHtFdmVudFN1YnNjcmlwdGlvbn0gc3Vic2NyaXB0aW9uXG4gICAqL1xuICBhZGRTdWJzY3JpcHRpb24oXG4gICAgZXZlbnRUeXBlOiBzdHJpbmcsXG4gICAgc3Vic2NyaXB0aW9uOiBFdmVudFN1YnNjcmlwdGlvbixcbiAgKTogRXZlbnRTdWJzY3JpcHRpb24ge1xuICAgIGludmFyaWFudChcbiAgICAgIHN1YnNjcmlwdGlvbi5zdWJzY3JpYmVyID09PSB0aGlzLFxuICAgICAgJ1RoZSBzdWJzY3JpYmVyIG9mIHRoZSBzdWJzY3JpcHRpb24gaXMgaW5jb3JyZWN0bHkgc2V0LicsXG4gICAgKTtcbiAgICBpZiAoIXRoaXMuX3N1YnNjcmlwdGlvbnNGb3JUeXBlW2V2ZW50VHlwZV0pIHtcbiAgICAgIHRoaXMuX3N1YnNjcmlwdGlvbnNGb3JUeXBlW2V2ZW50VHlwZV0gPSBbXTtcbiAgICB9XG4gICAgY29uc3Qga2V5ID0gdGhpcy5fc3Vic2NyaXB0aW9uc0ZvclR5cGVbZXZlbnRUeXBlXS5sZW5ndGg7XG4gICAgdGhpcy5fc3Vic2NyaXB0aW9uc0ZvclR5cGVbZXZlbnRUeXBlXS5wdXNoKHN1YnNjcmlwdGlvbik7XG4gICAgc3Vic2NyaXB0aW9uLmV2ZW50VHlwZSA9IGV2ZW50VHlwZTtcbiAgICBzdWJzY3JpcHRpb24ua2V5ID0ga2V5O1xuICAgIHJldHVybiBzdWJzY3JpcHRpb247XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBhIGJ1bGsgc2V0IG9mIHRoZSBzdWJzY3JpcHRpb25zLlxuICAgKlxuICAgKiBAcGFyYW0gez9zdHJpbmd9IGV2ZW50VHlwZSAtIE9wdGlvbmFsIG5hbWUgb2YgdGhlIGV2ZW50IHR5cGUgd2hvc2VcbiAgICogICByZWdpc3RlcmVkIHN1cHNjcmlwdGlvbnMgdG8gcmVtb3ZlLCBpZiBudWxsIHJlbW92ZSBhbGwgc3Vic2NyaXB0aW9ucy5cbiAgICovXG4gIHJlbW92ZUFsbFN1YnNjcmlwdGlvbnMoZXZlbnRUeXBlOiA/c3RyaW5nKSB7XG4gICAgaWYgKGV2ZW50VHlwZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLl9zdWJzY3JpcHRpb25zRm9yVHlwZSA9IHt9O1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWxldGUgdGhpcy5fc3Vic2NyaXB0aW9uc0ZvclR5cGVbZXZlbnRUeXBlXTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBhIHNwZWNpZmljIHN1YnNjcmlwdGlvbi4gSW5zdGVhZCBvZiBjYWxsaW5nIHRoaXMgZnVuY3Rpb24sIGNhbGxcbiAgICogYHN1YnNjcmlwdGlvbi5yZW1vdmUoKWAgZGlyZWN0bHkuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBzdWJzY3JpcHRpb25cbiAgICovXG4gIHJlbW92ZVN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb246IE9iamVjdCkge1xuICAgIGNvbnN0IGV2ZW50VHlwZSA9IHN1YnNjcmlwdGlvbi5ldmVudFR5cGU7XG4gICAgY29uc3Qga2V5ID0gc3Vic2NyaXB0aW9uLmtleTtcblxuICAgIGNvbnN0IHN1YnNjcmlwdGlvbnNGb3JUeXBlID0gdGhpcy5fc3Vic2NyaXB0aW9uc0ZvclR5cGVbZXZlbnRUeXBlXTtcbiAgICBpZiAoc3Vic2NyaXB0aW9uc0ZvclR5cGUpIHtcbiAgICAgIGRlbGV0ZSBzdWJzY3JpcHRpb25zRm9yVHlwZVtrZXldO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBhcnJheSBvZiBzdWJzY3JpcHRpb25zIHRoYXQgYXJlIGN1cnJlbnRseSByZWdpc3RlcmVkIGZvciB0aGVcbiAgICogZ2l2ZW4gZXZlbnQgdHlwZS5cbiAgICpcbiAgICogTm90ZTogVGhpcyBhcnJheSBjYW4gYmUgcG90ZW50aWFsbHkgc3BhcnNlIGFzIHN1YnNjcmlwdGlvbnMgYXJlIGRlbGV0ZWRcbiAgICogZnJvbSBpdCB3aGVuIHRoZXkgYXJlIHJlbW92ZWQuXG4gICAqXG4gICAqIFRPRE86IFRoaXMgcmV0dXJucyBhIG51bGxhYmxlIGFycmF5LiB3YXQ/XG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudFR5cGVcbiAgICogQHJldHVybnMgez9hcnJheX1cbiAgICovXG4gIGdldFN1YnNjcmlwdGlvbnNGb3JUeXBlKGV2ZW50VHlwZTogc3RyaW5nKTogP1tFdmVudFN1YnNjcmlwdGlvbl0ge1xuICAgIHJldHVybiB0aGlzLl9zdWJzY3JpcHRpb25zRm9yVHlwZVtldmVudFR5cGVdO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gRXZlbnRTdWJzY3JpcHRpb25WZW5kb3I7XG4iXX0=