{"version":3,"sources":["../src/EventEmitter.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AAEA,IAAM,4BAA4B,GAAG,+BAArC;;IAiBa,Y;AAKX,wBAAY,YAAZ,EAAsC;AAAA;AAJtC,SAAA,cAAA,GAAiB,CAAjB;AAKE,SAAK,aAAL,GAAqB,YAArB;AACA,SAAK,aAAL,GAAqB,IAAI,+BAAJ,CAAuB,YAAvB,CAArB;AACD;;;;WAED,qBAAe,SAAf,EAAkC,QAAlC,EAA8D;AAAA;AAAA;;AAC5D,UAAI,CAAC,KAAK,cAAN,IAAwB,sBAAS,EAAT,KAAgB,KAAxC,IAAiD,KAAK,aAAL,CAAmB,cAAxE,EAAwF;AACtF,aAAK,aAAL,CAAmB,cAAnB;AACD;;AAED,WAAK,cAAL;;AACA,UAAM,yBAAyB,GAAG,KAAK,aAAL,CAAmB,WAAnB,CAA+B,SAA/B,EAA0C,QAA1C,CAAlC;;AACA,UAAM,YAAY,qEACf,4BADe,EACgB,yBADhB,0DAER,kBAAK;AACX,QAAA,KAAI,CAAC,kBAAL,CAAwB,YAAxB;AACD,OAJe,iBAAlB;AAMA,aAAO,YAAP;AACD;;;WAED,4BAAmB,SAAnB,EAAoC;AAElC,UAAM,oBAAoB,GAAG,KAAK,aAAL,CAAmB,aAAnB,GAEzB,KAAK,aAAL,CAAmB,aAAnB,CAAiC,SAAjC,CAFyB,GAIzB,KAAK,aAAL,CAAmB,SAAnB,CAA6B,SAA7B,EAAwC,MAJ5C;;AAKA,WAAK,aAAL,CAAmB,kBAAnB,CAAsC,SAAtC;;AACA,WAAK,cAAL,IAAuB,oBAAvB;AACA,8BACE,KAAK,cAAL,IAAuB,CADzB;;AAKA,UAAI,CAAC,KAAK,cAAN,IAAwB,sBAAS,EAAT,KAAgB,KAAxC,IAAiD,KAAK,aAAL,CAAmB,aAAxE,EAAuF;AACrF,aAAK,aAAL,CAAmB,aAAnB;AACD;AACF;;;WAED,4BAAmB,YAAnB,EAA6C;AAC3C,UAAM,yBAAyB,GAAG,YAAY,CAAC,4BAAD,CAA9C;;AACA,UAAI,CAAC,yBAAL,EAAgC;AAC9B;AACD;;AAED,WAAK,aAAL,CAAmB,kBAAnB,CAAsC,yBAAtC;;AACA,WAAK,cAAL;AAIA,aAAO,YAAY,CAAC,4BAAD,CAAnB;;AAGA,MAAA,YAAY,CAAC,MAAb,GAAsB,YAAK,CAAG,CAA9B;;AAEA,UAAI,CAAC,KAAK,cAAN,IAAwB,sBAAS,EAAT,KAAgB,KAAxC,IAAiD,KAAK,aAAL,CAAmB,aAAxE,EAAuF;AACrF,aAAK,aAAL,CAAmB,aAAnB;AACD;AACF;;;WAED,cAAK,SAAL,EAAwC;AAAA;;AAAA,wCAAb,MAAa;AAAb,QAAA,MAAa;AAAA;;AACtC,kCAAK,aAAL,EAAmB,IAAnB,6BAAwB,SAAxB,SAAsC,MAAtC;AACD","sourcesContent":["import invariant from 'invariant';\nimport { NativeEventEmitter, Platform } from 'react-native';\n\nconst nativeEmitterSubscriptionKey = '@@nativeEmitterSubscription@@';\n\ntype NativeModule = {\n  startObserving?: () => void;\n  stopObserving?: () => void;\n  addListener: (eventName: string) => void;\n  removeListeners: (count: number) => void;\n};\n\n// @needsAudit\nexport type Subscription = {\n  /**\n   * A method to unsubscribe the listener.\n   */\n  remove: () => void;\n};\n\nexport class EventEmitter {\n  _listenerCount = 0;\n  _nativeModule: NativeModule;\n  _eventEmitter: NativeEventEmitter;\n\n  constructor(nativeModule: NativeModule) {\n    this._nativeModule = nativeModule;\n    this._eventEmitter = new NativeEventEmitter(nativeModule as any);\n  }\n\n  addListener<T>(eventName: string, listener: (event: T) => void): Subscription {\n    if (!this._listenerCount && Platform.OS !== 'ios' && this._nativeModule.startObserving) {\n      this._nativeModule.startObserving();\n    }\n\n    this._listenerCount++;\n    const nativeEmitterSubscription = this._eventEmitter.addListener(eventName, listener);\n    const subscription = {\n      [nativeEmitterSubscriptionKey]: nativeEmitterSubscription,\n      remove: () => {\n        this.removeSubscription(subscription);\n      },\n    };\n    return subscription;\n  }\n\n  removeAllListeners(eventName: string): void {\n    // @ts-ignore: the EventEmitter interface has been changed in react-native@0.64.0\n    const removedListenerCount = this._eventEmitter.listenerCount\n      ? // @ts-ignore: this is available since 0.64\n        this._eventEmitter.listenerCount(eventName)\n      : // @ts-ignore: this is available in older versions\n        this._eventEmitter.listeners(eventName).length;\n    this._eventEmitter.removeAllListeners(eventName);\n    this._listenerCount -= removedListenerCount;\n    invariant(\n      this._listenerCount >= 0,\n      `EventEmitter must have a non-negative number of listeners`\n    );\n\n    if (!this._listenerCount && Platform.OS !== 'ios' && this._nativeModule.stopObserving) {\n      this._nativeModule.stopObserving();\n    }\n  }\n\n  removeSubscription(subscription: Subscription): void {\n    const nativeEmitterSubscription = subscription[nativeEmitterSubscriptionKey];\n    if (!nativeEmitterSubscription) {\n      return;\n    }\n\n    this._eventEmitter.removeSubscription(nativeEmitterSubscription!);\n    this._listenerCount--;\n\n    // Ensure that the emitter's internal state remains correct even if `removeSubscription` is\n    // called again with the same subscription\n    delete subscription[nativeEmitterSubscriptionKey];\n\n    // Release closed-over references to the emitter\n    subscription.remove = () => {};\n\n    if (!this._listenerCount && Platform.OS !== 'ios' && this._nativeModule.stopObserving) {\n      this._nativeModule.stopObserving();\n    }\n  }\n\n  emit(eventName: string, ...params: any[]): void {\n    this._eventEmitter.emit(eventName, ...params);\n  }\n}\n"],"sourceRoot":""}