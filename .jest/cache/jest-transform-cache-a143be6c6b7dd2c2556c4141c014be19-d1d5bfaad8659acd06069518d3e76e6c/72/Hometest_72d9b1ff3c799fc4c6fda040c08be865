3b907d77d93b8d156c7fbed6431452e3
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _react = _interopRequireDefault(require("react"));

var _renderWithRedux = _interopRequireDefault(require("./renderWithRedux"));

var _history = require("history");

var _reactNative = require("@testing-library/react-native");

var _Home = _interopRequireDefault(require("../../../components/Home"));

var history = (0, _history.createMemoryHistory)();
var path = "/route/:id";
var match = {
  isExact: false,
  path: path,
  url: path.replace(':id', '1'),
  params: {
    id: "1"
  }
};
var location = (0, _history.createLocation)(match.url);
describe('Home', function () {
  var mockStore = {};
  var homeComponent;
  beforeEach(function () {
    homeComponent = (0, _renderWithRedux.default)(_react.default.createElement(_Home.default, {
      history: history,
      match: match,
      location: location
    }), {
      initialState: mockStore
    });
  });
  it('renders without crashing', function () {
    expect(homeComponent.toJSON()).toMatchSnapshot();
  });
  it("routes to difficulty selection menu when pressing 'Play New Game'.", function () {
    var _homeComponent = homeComponent,
        getByTestId = _homeComponent.getByTestId;
    var newGameButton = getByTestId('newGameButton');
    var curHistory = history.length;
    expect(history.length).toBe(curHistory);

    _reactNative.fireEvent.press(newGameButton);

    expect(history.length).toBe(curHistory + 1);
    expect(history.location.pathname).toBe('/DifficultySelection');
  });
  it("does not route to GameDisplay when pressing 'Load Game' if a game does not exist.", function () {
    var _homeComponent2 = homeComponent,
        getByTestId = _homeComponent2.getByTestId;
    var loadGameButton = getByTestId('loadGameButton');
    var curHistory = history.length;
    expect(history.length).toBe(curHistory);
    expect(history.location.pathname).toBe('/DifficultySelection');

    _reactNative.fireEvent.press(loadGameButton);

    expect(history.length).toBe(curHistory);
    expect(history.location.pathname).toBe('/DifficultySelection');
  });
  it("prompt appears when attempting to load a game when none exists.", function () {
    var _homeComponent3 = homeComponent,
        getByTestId = _homeComponent3.getByTestId;
    var loadGameButton = getByTestId('loadGameButton');
    var loadGamePopUp = getByTestId('loadGamePopUp');
    expect(loadGamePopUp.props.visible).toBeFalsy();

    _reactNative.fireEvent.press(loadGameButton);

    expect(loadGamePopUp.props.visible).toBeTruthy();
    var newGameButton = getByTestId('newGameButton');
    var newGamePopUp = getByTestId('newGamePopUp');
    expect(newGamePopUp.props.visible).toBeFalsy();

    _reactNative.fireEvent.press(newGameButton);

    expect(newGamePopUp.props.visible).toBeFalsy();
  });
  it("prompt disappears when pressing the screen.", function _callee() {
    var _homeComponent4, getByTestId, loadGameButton, loadGamePopUp, loadGamePopUpHide;

    return _regenerator.default.async(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _homeComponent4 = homeComponent, getByTestId = _homeComponent4.getByTestId;
            loadGameButton = getByTestId('loadGameButton');
            loadGamePopUp = getByTestId('loadGamePopUp');
            loadGamePopUpHide = getByTestId('loadGamePopUpHide');
            expect(loadGamePopUp.props.visible).toBeFalsy();

            _reactNative.fireEvent.press(loadGameButton);

            expect(loadGamePopUp.props.visible).toBeTruthy();

            _reactNative.fireEvent.press(loadGamePopUpHide);

            _context.next = 10;
            return _regenerator.default.awrap((0, _reactNative.waitFor)(function () {
              expect(getByTestId('loadGamePopUp').props.visible).toBeFalsy();
            }));

          case 10:
            mockStore['gameState'] = {
              'isCompleted': false,
              'gameExists': true
            };

          case 11:
          case "end":
            return _context.stop();
        }
      }
    }, null, null, null, Promise);
  });
  it("routes to GameDisplay when pressing 'Load Game' if a game does exist.", function () {
    var _homeComponent5 = homeComponent,
        getByTestId = _homeComponent5.getByTestId,
        store = _homeComponent5.store;
    var loadGameButton = getByTestId('loadGameButton');
    var curHistory = history.length;
    expect(history.length).toBe(curHistory);
    expect(history.location.pathname).toBe('/DifficultySelection');

    _reactNative.fireEvent.press(loadGameButton);

    expect(history.length).toBe(curHistory + 1);
    expect(history.location.pathname).toBe('/GameDisplay');
  });
  it("does not route to difficulty selection menu when pressing 'Play New Game' if a game currently exists.", function () {
    var _homeComponent6 = homeComponent,
        getByTestId = _homeComponent6.getByTestId;
    var newGameButton = getByTestId('newGameButton');
    var curHistory = history.length;
    expect(history.length).toBe(curHistory);
    expect(history.location.pathname).toBe('/GameDisplay');

    _reactNative.fireEvent.press(newGameButton);

    expect(history.length).toBe(curHistory);
    expect(history.location.pathname).toBe('/GameDisplay');
  });
  it("prompt appears when attempting to play a new game when one exists.", function () {
    var _homeComponent7 = homeComponent,
        getByTestId = _homeComponent7.getByTestId;
    var newGameButton = getByTestId('newGameButton');
    var newGamePopUp = getByTestId('newGamePopUp');
    expect(newGamePopUp.props.visible).toBeFalsy();

    _reactNative.fireEvent.press(newGameButton);

    expect(newGamePopUp.props.visible).toBeTruthy();
    var loadGameButton = getByTestId('loadGameButton');
    var loadGamePopUp = getByTestId('loadGamePopUp');
    expect(loadGamePopUp.props.visible).toBeFalsy();

    _reactNative.fireEvent.press(loadGameButton);

    expect(loadGamePopUp.props.visible).toBeFalsy();
  });
  it("should route to the difficulty selection menu when the 'yes' button is selected on the 'Play New Game' popup.", function () {
    var _homeComponent8 = homeComponent,
        getByTestId = _homeComponent8.getByTestId;
    var newGameButton = getByTestId('newGameButton');
    var newGamePopUp = getByTestId('newGamePopUp');
    var yesButton = getByTestId('newGamePopUpYes');
    var curHistory = history.length;
    expect(history.length).toBe(curHistory);
    expect(history.location.pathname).toBe('/GameDisplay');

    _reactNative.fireEvent.press(newGameButton);

    _reactNative.fireEvent.press(yesButton);

    expect(history.length).toBe(curHistory + 1);
    expect(history.location.pathname).toBe('/DifficultySelection');
  });
  it("prompt should disappear and not route to any other component when the 'No' button is selected on the prompt.", function _callee4() {
    var _homeComponent9, getByTestId, findByTestId, newGameButton, newGamePopUp, noButton, curHistory;

    return _regenerator.default.async(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _homeComponent9 = homeComponent, getByTestId = _homeComponent9.getByTestId, findByTestId = _homeComponent9.findByTestId;
            newGameButton = getByTestId('newGameButton');
            newGamePopUp = getByTestId('newGamePopUp');
            noButton = getByTestId('newGamePopUpNo');
            curHistory = history.length;
            expect(history.length).toBe(curHistory);
            expect(history.location.pathname).toBe('/DifficultySelection');

            _reactNative.fireEvent.press(newGameButton);

            _context4.next = 10;
            return _regenerator.default.awrap((0, _reactNative.waitFor)(function _callee2() {
              return _regenerator.default.async(function _callee2$(_context2) {
                while (1) {
                  switch (_context2.prev = _context2.next) {
                    case 0:
                      expect(getByTestId('newGamePopUp').props.visible).toBeTruthy();

                    case 1:
                    case "end":
                      return _context2.stop();
                  }
                }
              }, null, null, null, Promise);
            }));

          case 10:
            _reactNative.fireEvent.press(noButton);

            _context4.next = 13;
            return _regenerator.default.awrap((0, _reactNative.waitFor)(function _callee3() {
              return _regenerator.default.async(function _callee3$(_context3) {
                while (1) {
                  switch (_context3.prev = _context3.next) {
                    case 0:
                      expect(getByTestId('newGamePopUp').props.visible).toBeFalsy();
                      expect(history.length).toBe(curHistory);
                      expect(history.location.pathname).toBe('/DifficultySelection');

                    case 3:
                    case "end":
                      return _context3.stop();
                  }
                }
              }, null, null, null, Promise);
            }));

          case 13:
          case "end":
            return _context4.stop();
        }
      }
    }, null, null, null, Promise);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,