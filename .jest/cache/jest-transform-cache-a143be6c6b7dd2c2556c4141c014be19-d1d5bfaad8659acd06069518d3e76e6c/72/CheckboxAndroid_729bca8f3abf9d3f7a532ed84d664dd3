c9be07770aee66d807d0b185f8218c1d
"use strict";var _excluded = ["status", "theme", "disabled", "onPress", "testID"];

Object.defineProperty(exports, "__esModule", {
  value: true });

exports.CheckboxAndroid = exports.default = void 0;

var React = _interopRequireWildcard(require("react"));



var _color = _interopRequireDefault(require("color"));

var _MaterialCommunityIcon = _interopRequireDefault(require("../MaterialCommunityIcon"));

var _TouchableRipple = _interopRequireDefault(require("../TouchableRipple/TouchableRipple"));



function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

function _getRequireWildcardCache() {if (typeof WeakMap !== "function") return null;var cache = new WeakMap();_getRequireWildcardCache = function _getRequireWildcardCache() {return cache;};return cache;}

function _interopRequireWildcard(obj) {if (obj && obj.__esModule) {return obj;}if (obj === null || typeof obj !== "object" && typeof obj !== "function") {return { default: obj };}var cache = _getRequireWildcardCache();if (cache && cache.has(obj)) {return cache.get(obj);}var newObj = {};var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;for (var key in obj) {if (Object.prototype.hasOwnProperty.call(obj, key)) {var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;if (desc && (desc.get || desc.set)) {Object.defineProperty(newObj, key, desc);} else {newObj[key] = obj[key];}}}newObj.default = obj;if (cache) {cache.set(obj, newObj);}return newObj;}

function _extends() {_extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};return _extends.apply(this, arguments);}


var ANIMATION_DURATION = 100;

















var CheckboxAndroid = function CheckboxAndroid(_ref)






{var status = _ref.status,theme = _ref.theme,disabled = _ref.disabled,onPress = _ref.onPress,testID = _ref.testID,rest = require("@babel/runtime/helpers/objectWithoutProperties")(_ref, _excluded);
  var _React$useRef =

  React.useRef(new (require("react-native").Animated.Value)(1)),scaleAnim = _React$useRef.current;
  var isFirstRendering = React.useRef(true);
  var

  scale =

  theme.animation.scale;
  React.useEffect(function () {

    if (isFirstRendering.current) {
      isFirstRendering.current = false;
      return;
    }

    var checked = status === 'checked';

    require("react-native").Animated.sequence([require("react-native").Animated.timing(scaleAnim, {
      toValue: 0.85,
      duration: checked ? ANIMATION_DURATION * scale : 0,
      useNativeDriver: false }),
    require("react-native").Animated.timing(scaleAnim, {
      toValue: 1,
      duration: checked ? ANIMATION_DURATION * scale : ANIMATION_DURATION * scale * 1.75,
      useNativeDriver: false })]).
    start();
  }, [status, scaleAnim, scale]);
  var checked = status === 'checked';
  var indeterminate = status === 'indeterminate';
  var checkedColor = rest.color || theme.colors.accent;
  var uncheckedColor = rest.uncheckedColor || (0, _color.default)(theme.colors.text).alpha(theme.dark ? 0.7 : 0.54).rgb().string();
  var rippleColor, checkboxColor;

  if (disabled) {
    rippleColor = (0, _color.default)(theme.colors.text).alpha(0.16).rgb().string();
    checkboxColor = theme.colors.disabled;
  } else {
    rippleColor = (0, _color.default)(checkedColor).fade(0.32).rgb().string();
    checkboxColor = checked ? checkedColor : uncheckedColor;
  }

  var borderWidth = scaleAnim.interpolate({
    inputRange: [0.8, 1],
    outputRange: [7, 0] });

  var icon = indeterminate ? 'minus-box' : checked ? 'checkbox-marked' : 'checkbox-blank-outline';
  return React.createElement(_TouchableRipple.default, _extends({}, rest, {
    borderless: true,
    rippleColor: rippleColor,
    onPress: onPress,
    disabled: disabled,

    accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',
    accessibilityComponentType: "button",
    accessibilityRole: "checkbox",
    accessibilityState: {
      disabled: disabled,
      checked: checked },

    accessibilityLiveRegion: "polite",
    style: styles.container,
    testID: testID }),
  React.createElement(require("react-native").Animated.View, {
    style: {
      transform: [{
        scale: scaleAnim }] } },


  React.createElement(_MaterialCommunityIcon.default, {
    allowFontScaling: false,
    name: icon,
    size: 24,
    color: checkboxColor,
    direction: "ltr" }),
  React.createElement(require("react-native").View, {
    style: [require("react-native").StyleSheet.absoluteFill, styles.fillContainer] },
  React.createElement(require("react-native").Animated.View, {
    style: [styles.fill, {
      borderColor: checkboxColor },
    {
      borderWidth: borderWidth }] }))));


};

CheckboxAndroid.displayName = 'Checkbox.Android';

var styles = require("react-native").StyleSheet.create({
  container: {
    borderRadius: 18,
    width: 36,
    height: 36,
    padding: 6 },

  fillContainer: {
    alignItems: 'center',
    justifyContent: 'center' },

  fill: {
    height: 14,
    width: 14 } });



var _default = (0, require("../../core/theming").withTheme)(CheckboxAndroid);


exports.default = _default;
var CheckboxAndroidWithTheme = (0, require("../../core/theming").withTheme)(CheckboxAndroid);

exports.CheckboxAndroid = CheckboxAndroidWithTheme;