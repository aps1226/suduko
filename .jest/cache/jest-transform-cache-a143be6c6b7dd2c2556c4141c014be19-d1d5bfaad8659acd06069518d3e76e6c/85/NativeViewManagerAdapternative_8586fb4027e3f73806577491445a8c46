87d3f674509683215231cfeedf0e40f8
"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.requireNativeViewManager = requireNativeViewManager;var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");function _createForOfIteratorHelperLoose(o, allowArrayLike) {var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];if (it) return (it = it.call(o)).next.bind(it);if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;return function () {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };};}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}function _unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return _arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);}function _arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) {symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});}keys.push.apply(keys, symbols);}return keys;}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(Object(source), true).forEach(function (key) {(0, _defineProperty2.default)(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(Object(source)).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}











var ViewPropTypesKeys = Object.keys(_reactNative.ViewPropTypes);



function requireNativeViewManager(viewName) {
  if (__DEV__) {
    var NativeUnimoduleProxy = _reactNative.NativeModules.NativeUnimoduleProxy;
    if (!NativeUnimoduleProxy.viewManagersNames.includes(viewName)) {
      var exportedViewManagerNames = NativeUnimoduleProxy.viewManagersNames.join(', ');
      console.warn("The native view manager required by name (" + viewName + ") from NativeViewManagerAdapter isn't exported by @unimodules/react-native-adapter. Views of this type may not render correctly. Exported view managers: [" + exportedViewManagerNames + "].");
    }
  }


  var reactNativeViewName = "ViewManagerAdapter_" + viewName;
  var ReactNativeComponent = (0, _reactNative.requireNativeComponent)(reactNativeViewName);
  var reactNativeUIConfiguration = (_reactNative.UIManager.getViewManagerConfig ?
  _reactNative.UIManager.getViewManagerConfig(reactNativeViewName) :
  _reactNative.UIManager[reactNativeViewName]) || {
    NativeProps: {},
    directEventTypes: {} };

  var reactNativeComponentPropNames = [
  'children'].concat((0, _toConsumableArray2.default)(
  ViewPropTypesKeys), (0, _toConsumableArray2.default)(
  Object.keys(reactNativeUIConfiguration.NativeProps)), (0, _toConsumableArray2.default)(
  Object.keys(reactNativeUIConfiguration.directEventTypes)));


  function NativeComponentAdapter(props, ref) {
    var nativeProps = pick(props, reactNativeComponentPropNames);
    var proxiedProps = omit(props, reactNativeComponentPropNames);
    return _react.default.createElement(ReactNativeComponent, (0, _extends2.default)({}, nativeProps, { proxiedProperties: proxiedProps, ref: ref }));
  }
  NativeComponentAdapter.displayName = "Adapter<" + viewName + ">";
  return _react.default.forwardRef(NativeComponentAdapter);
}
function omit(props, propNames) {
  var copied = _objectSpread({}, props);
  for (var _iterator = _createForOfIteratorHelperLoose(propNames), _step; !(_step = _iterator()).done;) {var propName = _step.value;
    delete copied[propName];
  }
  return copied;
}
function pick(props, propNames) {
  return propNames.reduce(function (prev, curr) {
    if (curr in props) {
      prev[curr] = props[curr];
    }
    return prev;
  }, {});
}