8b281282a05b9e70468b7c2df4772dd1
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _objectWithoutProperties2 = _interopRequireDefault2(require("@babel/runtime/helpers/objectWithoutProperties"));

var _excluded = ["children", "title", "titleStyle", "style"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _ListSubheader = _interopRequireDefault(require("./ListSubheader"));

var _theming = require("../../core/theming");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var ListSection = function ListSection(_ref) {
  var children = _ref.children,
      title = _ref.title,
      titleStyle = _ref.titleStyle,
      style = _ref.style,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  return React.createElement(_reactNative.View, _extends({}, rest, {
    style: [styles.container, style]
  }), title ? React.createElement(_ListSubheader.default, {
    style: titleStyle
  }, title) : null, children);
};

ListSection.displayName = 'List.Section';

var styles = _reactNative.StyleSheet.create({
  container: {
    marginVertical: 8
  }
});

var _default = (0, _theming.withTheme)(ListSection);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkxpc3RTZWN0aW9uLnRzeCJdLCJuYW1lcyI6WyJMaXN0U2VjdGlvbiIsInJlc3QiLCJzdHlsZXMiLCJ0aXRsZSIsInRpdGxlU3R5bGUiLCJjb250YWluZXIiLCJtYXJnaW5WZXJ0aWNhbCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUEsSUFBQSxLQUFBLEdBQUEsdUJBQUEsQ0FBQSxPQUFBLENBQUEsT0FBQSxDQUFBLENBQUE7O0FBQ0EsSUFBQSxZQUFBLEdBQUEsT0FBQSxDQUFBLGNBQUEsQ0FBQTs7QUFPQSxJQUFBLGNBQUEsR0FBQSxzQkFBQSxDQUFBLE9BQUEsbUJBQUEsQ0FBQTs7QUFDQSxJQUFBLFFBQUEsR0FBQSxPQUFBLHNCQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFnREEsSUFBTUEsV0FBVyxHQUFHLFNBQWRBLFdBQWM7QUFBQSxNQUFDLFFBQUQsUUFBQyxRQUFEO0FBQUEsTUFBQyxLQUFELFFBQUMsS0FBRDtBQUFBLE1BQUMsVUFBRCxRQUFDLFVBQUQ7QUFBQSxNQUFDLEtBQUQsUUFBQyxLQUFEO0FBQUEsTUFLZkMsSUFMZTtBQUFBLFNBT2xCLEtBQUEsQ0FBQSxhQUFBLENBQUMsWUFBQSxDQUFELElBQUEsRUFBQSxRQUFBLENBQUEsRUFBQSxFQUFBLElBQUEsRUFBQTtBQUFnQixJQUFBLEtBQUssRUFBRSxDQUFDQyxNQUFNLENBQVAsU0FBQSxFQUFBLEtBQUE7QUFBdkIsR0FBQSxDQUFBLEVBQ0dDLEtBQUssR0FBRyxLQUFBLENBQUEsYUFBQSxDQUFDLGNBQUEsQ0FBRCxPQUFBLEVBQUE7QUFBZSxJQUFBLEtBQUssRUFBRUM7QUFBdEIsR0FBQSxFQUFILEtBQUcsQ0FBSCxHQURSLElBQUEsRUFQRixRQU9FLENBUGtCO0FBQUEsQ0FBcEI7O0FBYUFKLFdBQVcsQ0FBWEEsV0FBQUEsR0FBQUEsY0FBQUE7O0FBRUEsSUFBTUUsTUFBTSxHQUFHLFlBQUEsQ0FBQSxVQUFBLENBQUEsTUFBQSxDQUFrQjtBQUMvQkcsRUFBQUEsU0FBUyxFQUFFO0FBQ1RDLElBQUFBLGNBQWMsRUFBRTtBQURQO0FBRG9CLENBQWxCLENBQWY7O2VBTWUsQ0FBQSxHQUFBLFFBQUEsQ0FBQSxTQUFBLEVBQUEsV0FBQSxDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtcbiAgVmlldyxcbiAgVmlld1N0eWxlLFxuICBTdHlsZVNoZWV0LFxuICBTdHlsZVByb3AsXG4gIFRleHRTdHlsZSxcbn0gZnJvbSAncmVhY3QtbmF0aXZlJztcbmltcG9ydCBMaXN0U3ViaGVhZGVyIGZyb20gJy4vTGlzdFN1YmhlYWRlcic7XG5pbXBvcnQgeyB3aXRoVGhlbWUgfSBmcm9tICcuLi8uLi9jb3JlL3RoZW1pbmcnO1xuXG50eXBlIFByb3BzID0gUmVhY3QuQ29tcG9uZW50UHJvcHNXaXRoUmVmPHR5cGVvZiBWaWV3PiAmIHtcbiAgLyoqXG4gICAqIFRpdGxlIHRleHQgZm9yIHRoZSBzZWN0aW9uLlxuICAgKi9cbiAgdGl0bGU/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBDb250ZW50IG9mIHRoZSBzZWN0aW9uLlxuICAgKi9cbiAgY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZTtcbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKi9cbiAgdGhlbWU6IFJlYWN0TmF0aXZlUGFwZXIuVGhlbWU7XG4gIC8qKlxuICAgKiBTdHlsZSB0aGF0IGlzIHBhc3NlZCB0byBUaXRsZSBlbGVtZW50LlxuICAgKi9cbiAgdGl0bGVTdHlsZT86IFN0eWxlUHJvcDxUZXh0U3R5bGU+O1xuICBzdHlsZT86IFN0eWxlUHJvcDxWaWV3U3R5bGU+O1xufTtcblxuLyoqXG4gKiBBIGNvbXBvbmVudCB1c2VkIHRvIGdyb3VwIGxpc3QgaXRlbXMuXG4gKlxuICogPGRpdiBjbGFzcz1cInNjcmVlbnNob3RzXCI+XG4gKiAgIDxpbWcgc3JjPVwic2NyZWVuc2hvdHMvbGlzdC1zZWN0aW9uLnBuZ1wiIC8+XG4gKiA8L2Rpdj5cbiAqXG4gKiAjIyBVc2FnZVxuICogYGBganNcbiAqIGltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbiAqIGltcG9ydCB7IExpc3QgfSBmcm9tICdyZWFjdC1uYXRpdmUtcGFwZXInO1xuICpcbiAqIGNvbnN0IE15Q29tcG9uZW50ID0gKCkgPT4gKFxuICogICA8TGlzdC5TZWN0aW9uPlxuICogICAgIDxMaXN0LlN1YmhlYWRlcj5Tb21lIHRpdGxlPC9MaXN0LlN1YmhlYWRlcj5cbiAqICAgICA8TGlzdC5JdGVtIHRpdGxlPVwiRmlyc3QgSXRlbVwiIGxlZnQ9eygpID0+IDxMaXN0Lkljb24gaWNvbj1cImZvbGRlclwiIC8+fSAvPlxuICogICAgIDxMaXN0Lkl0ZW1cbiAqICAgICAgIHRpdGxlPVwiU2Vjb25kIEl0ZW1cIlxuICogICAgICAgbGVmdD17KCkgPT4gPExpc3QuSWNvbiBjb2xvcj1cIiMwMDBcIiBpY29uPVwiZm9sZGVyXCIgLz59XG4gKiAgICAgLz5cbiAqICAgPC9MaXN0LlNlY3Rpb24+XG4gKiApO1xuICpcbiAqIGV4cG9ydCBkZWZhdWx0IE15Q29tcG9uZW50O1xuICogYGBgXG4gKi9cbmNvbnN0IExpc3RTZWN0aW9uID0gKHtcbiAgY2hpbGRyZW4sXG4gIHRpdGxlLFxuICB0aXRsZVN0eWxlLFxuICBzdHlsZSxcbiAgLi4ucmVzdFxufTogUHJvcHMpID0+IChcbiAgPFZpZXcgey4uLnJlc3R9IHN0eWxlPXtbc3R5bGVzLmNvbnRhaW5lciwgc3R5bGVdfT5cbiAgICB7dGl0bGUgPyA8TGlzdFN1YmhlYWRlciBzdHlsZT17dGl0bGVTdHlsZX0+e3RpdGxlfTwvTGlzdFN1YmhlYWRlcj4gOiBudWxsfVxuICAgIHtjaGlsZHJlbn1cbiAgPC9WaWV3PlxuKTtcblxuTGlzdFNlY3Rpb24uZGlzcGxheU5hbWUgPSAnTGlzdC5TZWN0aW9uJztcblxuY29uc3Qgc3R5bGVzID0gU3R5bGVTaGVldC5jcmVhdGUoe1xuICBjb250YWluZXI6IHtcbiAgICBtYXJnaW5WZXJ0aWNhbDogOCxcbiAgfSxcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCB3aXRoVGhlbWUoTGlzdFNlY3Rpb24pO1xuIl19