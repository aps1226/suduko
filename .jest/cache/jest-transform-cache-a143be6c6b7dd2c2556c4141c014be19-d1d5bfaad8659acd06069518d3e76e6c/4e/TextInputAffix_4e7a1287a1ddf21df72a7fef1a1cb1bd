ad6b76d54cfce1d6a4fbf66e1322102e
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault2(require("@babel/runtime/helpers/defineProperty"));

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AffixAdornment = exports.TextInputAffix = exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _color = _interopRequireDefault(require("color"));

var _reactNative = require("react-native");

var _theming = require("../../../core/theming");

var _enums = require("./enums");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

var AFFIX_OFFSET = 12;

var AffixContext = _react.default.createContext({
  textStyle: {
    fontFamily: '',
    color: ''
  },
  topPosition: null,
  side: _enums.AdornmentSide.Left
});

var AffixAdornment = function AffixAdornment(_ref) {
  var affix = _ref.affix,
      side = _ref.side,
      textStyle = _ref.textStyle,
      topPosition = _ref.topPosition,
      onLayout = _ref.onLayout,
      visible = _ref.visible,
      paddingHorizontal = _ref.paddingHorizontal;
  return _react.default.createElement(AffixContext.Provider, {
    value: {
      side: side,
      textStyle: textStyle,
      topPosition: topPosition,
      onLayout: onLayout,
      visible: visible,
      paddingHorizontal: paddingHorizontal
    }
  }, affix);
};

exports.AffixAdornment = AffixAdornment;

var TextInputAffix = function TextInputAffix(_ref2) {
  var text = _ref2.text,
      labelStyle = _ref2.textStyle,
      theme = _ref2.theme;

  var _react$default$useCon = _react.default.useContext(AffixContext),
      textStyle = _react$default$useCon.textStyle,
      onLayout = _react$default$useCon.onLayout,
      topPosition = _react$default$useCon.topPosition,
      side = _react$default$useCon.side,
      visible = _react$default$useCon.visible,
      paddingHorizontal = _react$default$useCon.paddingHorizontal;

  var textColor = (0, _color.default)(theme.colors.text).alpha(theme.dark ? 0.7 : 0.54).rgb().string();
  var offset = typeof paddingHorizontal === 'number' ? paddingHorizontal : AFFIX_OFFSET;
  var style = (0, _defineProperty2.default)({
    top: topPosition
  }, side, offset);
  return _react.default.createElement(_reactNative.Animated.View, {
    style: [styles.container, style, {
      opacity: (visible === null || visible === void 0 ? void 0 : visible.interpolate({
        inputRange: [0, 1],
        outputRange: [1, 0]
      })) || 1
    }],
    onLayout: onLayout
  }, _react.default.createElement(_reactNative.Text, {
    style: [{
      color: textColor
    }, textStyle, labelStyle]
  }, text));
};

exports.TextInputAffix = TextInputAffix;
TextInputAffix.displayName = 'TextInput.Affix';

var styles = _reactNative.StyleSheet.create({
  container: {
    position: 'absolute',
    justifyContent: 'center',
    alignItems: 'center'
  }
});

var _default = (0, _theming.withTheme)(TextInputAffix);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlRleHRJbnB1dEFmZml4LnRzeCJdLCJuYW1lcyI6WyJBRkZJWF9PRkZTRVQiLCJBZmZpeENvbnRleHQiLCJ0ZXh0U3R5bGUiLCJmb250RmFtaWx5IiwiY29sb3IiLCJ0b3BQb3NpdGlvbiIsInNpZGUiLCJBZG9ybm1lbnRTaWRlIiwiTGVmdCIsIkFmZml4QWRvcm5tZW50IiwicGFkZGluZ0hvcml6b250YWwiLCJvbkxheW91dCIsInZpc2libGUiLCJUZXh0SW5wdXRBZmZpeCIsInRoZW1lIiwiUmVhY3QiLCJ0ZXh0Q29sb3IiLCJvZmZzZXQiLCJzdHlsZSIsInRvcCIsInN0eWxlcyIsIm9wYWNpdHkiLCJpbnB1dFJhbmdlIiwib3V0cHV0UmFuZ2UiLCJjb250YWluZXIiLCJwb3NpdGlvbiIsImp1c3RpZnlDb250ZW50IiwiYWxpZ25JdGVtcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQSxJQUFBLE1BQUEsR0FBQSxzQkFBQSxDQUFBLE9BQUEsQ0FBQSxPQUFBLENBQUEsQ0FBQTs7QUFDQSxJQUFBLE1BQUEsR0FBQSxzQkFBQSxDQUFBLE9BQUEsQ0FBQSxPQUFBLENBQUEsQ0FBQTs7QUFDQSxJQUFBLFlBQUEsR0FBQSxPQUFBLENBQUEsY0FBQSxDQUFBOztBQVVBLElBQUEsUUFBQSxHQUFBLE9BQUEseUJBQUE7O0FBQ0EsSUFBQSxNQUFBLEdBQUEsT0FBQSxXQUFBOzs7Ozs7OztBQUVBLElBQU1BLFlBQVksR0FBbEIsRUFBQTs7QUEyQkEsSUFBTUMsWUFBWSxHQUFHLE1BQUEsQ0FBQSxPQUFBLENBQUEsYUFBQSxDQUFrQztBQUNyREMsRUFBQUEsU0FBUyxFQUFFO0FBQUVDLElBQUFBLFVBQVUsRUFBWixFQUFBO0FBQWtCQyxJQUFBQSxLQUFLLEVBQUU7QUFBekIsR0FEMEM7QUFFckRDLEVBQUFBLFdBQVcsRUFGMEMsSUFBQTtBQUdyREMsRUFBQUEsSUFBSSxFQUFFQyxNQUFBQSxDQUFBQSxhQUFBQSxDQUFjQztBQUhpQyxDQUFsQyxDQUFyQjs7QUFN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QUFrQjtBQUMvQkksRUFBQUEsU0FBUyxFQUFFO0FBQ1RDLElBQUFBLFFBQVEsRUFEQyxVQUFBO0FBRVRDLElBQUFBLGNBQWMsRUFGTCxRQUFBO0FBR1RDLElBQUFBLFVBQVUsRUFBRTtBQUhIO0FBRG9CLENBQWxCLENBQWY7O2VBUWUsQ0FBQSxHQUFBLFFBQUEsQ0FBQSxTQUFBLEVBQUEsY0FBQSxDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjb2xvciBmcm9tICdjb2xvcic7XG5pbXBvcnQge1xuICBUZXh0LFxuICBTdHlsZVNoZWV0LFxuICBTdHlsZVByb3AsXG4gIFRleHRTdHlsZSxcbiAgTGF5b3V0Q2hhbmdlRXZlbnQsXG4gIEFuaW1hdGVkLFxuICBWaWV3U3R5bGUsXG59IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5cbmltcG9ydCB7IHdpdGhUaGVtZSB9IGZyb20gJy4uLy4uLy4uL2NvcmUvdGhlbWluZyc7XG5pbXBvcnQgeyBBZG9ybm1lbnRTaWRlIH0gZnJvbSAnLi9lbnVtcyc7XG5cbmNvbnN0IEFGRklYX09GRlNFVCA9IDEyO1xuXG50eXBlIFByb3BzID0ge1xuICAvKipcbiAgICogVGV4dCB0byBzaG93LlxuICAgKi9cbiAgdGV4dDogc3RyaW5nO1xuICBvbkxheW91dD86IChldmVudDogTGF5b3V0Q2hhbmdlRXZlbnQpID0+IHZvaWQ7XG4gIC8qKlxuICAgKiBTdHlsZSB0aGF0IGlzIHBhc3NlZCB0byB0aGUgVGV4dCBlbGVtZW50LlxuICAgKi9cbiAgdGV4dFN0eWxlPzogU3R5bGVQcm9wPFRleHRTdHlsZT47XG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICovXG4gIHRoZW1lOiBSZWFjdE5hdGl2ZVBhcGVyLlRoZW1lO1xufTtcblxudHlwZSBDb250ZXh0U3RhdGUgPSB7XG4gIHRvcFBvc2l0aW9uOiBudW1iZXIgfCBudWxsO1xuICBvbkxheW91dD86IChldmVudDogTGF5b3V0Q2hhbmdlRXZlbnQpID0+IHZvaWQ7XG4gIHZpc2libGU/OiBBbmltYXRlZC5WYWx1ZTtcbiAgdGV4dFN0eWxlPzogU3R5bGVQcm9wPFRleHRTdHlsZT47XG4gIHNpZGU6IEFkb3JubWVudFNpZGU7XG4gIHBhZGRpbmdIb3Jpem9udGFsPzogbnVtYmVyIHwgc3RyaW5nO1xufTtcblxuY29uc3QgQWZmaXhDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dDxDb250ZXh0U3RhdGU+KHtcbiAgdGV4dFN0eWxlOiB7IGZvbnRGYW1pbHk6ICcnLCBjb2xvcjogJycgfSxcbiAgdG9wUG9zaXRpb246IG51bGwsXG4gIHNpZGU6IEFkb3JubWVudFNpZGUuTGVmdCxcbn0pO1xuXG5jb25zdCBBZmZpeEFkb3JubWVudDogUmVhY3QuRnVuY3Rpb25Db21wb25lbnQ8XG4gIHtcbiAgICBhZmZpeDogUmVhY3QuUmVhY3ROb2RlO1xuICAgIHRlc3RJRDogc3RyaW5nO1xuICB9ICYgQ29udGV4dFN0YXRlXG4+ID0gKHtcbiAgYWZmaXgsXG4gIHNpZGUsXG4gIHRleHRTdHlsZSxcbiAgdG9wUG9zaXRpb24sXG4gIG9uTGF5b3V0LFxuICB2aXNpYmxlLFxuICBwYWRkaW5nSG9yaXpvbnRhbCxcbn0pID0+IHtcbiAgcmV0dXJuIChcbiAgICA8QWZmaXhDb250ZXh0LlByb3ZpZGVyXG4gICAgICB2YWx1ZT17e1xuICAgICAgICBzaWRlLFxuICAgICAgICB0ZXh0U3R5bGUsXG4gICAgICAgIHRvcFBvc2l0aW9uLFxuICAgICAgICBvbkxheW91dCxcbiAgICAgICAgdmlzaWJsZSxcbiAgICAgICAgcGFkZGluZ0hvcml6b250YWwsXG4gICAgICB9fVxuICAgID5cbiAgICAgIHthZmZpeH1cbiAgICA8L0FmZml4Q29udGV4dC5Qcm92aWRlcj5cbiAgKTtcbn07XG5cbi8qKlxuICogQSBjb21wb25lbnQgdG8gcmVuZGVyIGEgbGVhZGluZyAvIHRyYWlsaW5nIHRleHQgaW4gdGhlIFRleHRJbnB1dFxuICpcbiAqIDxkaXYgY2xhc3M9XCJzY3JlZW5zaG90c1wiPlxuICogICA8ZmlndXJlPlxuICogICAgIDxpbWcgY2xhc3M9XCJtZWRpdW1cIiBzcmM9XCJzY3JlZW5zaG90cy90ZXh0aW5wdXQtb3V0bGluZS5hZmZpeC5wbmdcIiAvPlxuICogICA8L2ZpZ3VyZT5cbiAqIDwvZGl2PlxuICpcbiAqICMjIFVzYWdlXG4gKiBgYGBqc1xuICogaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuICogaW1wb3J0IHsgVGV4dElucHV0IH0gZnJvbSAncmVhY3QtbmF0aXZlLXBhcGVyJztcbiAqXG4gKiBjb25zdCBNeUNvbXBvbmVudCA9ICgpID0+IHtcbiAqICAgY29uc3QgW3RleHQsIHNldFRleHRdID0gUmVhY3QudXNlU3RhdGUoJycpO1xuICpcbiAqICAgcmV0dXJuIChcbiAqICAgICA8VGV4dElucHV0XG4gKiAgICAgICBtb2RlPVwib3V0bGluZWRcIlxuICogICAgICAgbGFiZWw9XCJPdXRsaW5lZCBpbnB1dFwiXG4gKiAgICAgICBwbGFjZWhvbGRlcj1cIlR5cGUgc29tZXRoaW5nXCJcbiAqICAgICAgIHJpZ2h0PXs8VGV4dElucHV0LkFmZml4IHRleHQ9XCIvMTAwXCIgLz59XG4gKiAgICAgLz5cbiAqICAgKTtcbiAqIH07XG4gKlxuICogZXhwb3J0IGRlZmF1bHQgTXlDb21wb25lbnQ7XG4gKiBgYGBcbiAqL1xuXG5jb25zdCBUZXh0SW5wdXRBZmZpeCA9ICh7IHRleHQsIHRleHRTdHlsZTogbGFiZWxTdHlsZSwgdGhlbWUgfTogUHJvcHMpID0+IHtcbiAgY29uc3Qge1xuICAgIHRleHRTdHlsZSxcbiAgICBvbkxheW91dCxcbiAgICB0b3BQb3NpdGlvbixcbiAgICBzaWRlLFxuICAgIHZpc2libGUsXG4gICAgcGFkZGluZ0hvcml6b250YWwsXG4gIH0gPSBSZWFjdC51c2VDb250ZXh0KEFmZml4Q29udGV4dCk7XG4gIGNvbnN0IHRleHRDb2xvciA9IGNvbG9yKHRoZW1lLmNvbG9ycy50ZXh0KVxuICAgIC5hbHBoYSh0aGVtZS5kYXJrID8gMC43IDogMC41NClcbiAgICAucmdiKClcbiAgICAuc3RyaW5nKCk7XG5cbiAgY29uc3Qgb2Zmc2V0ID1cbiAgICB0eXBlb2YgcGFkZGluZ0hvcml6b250YWwgPT09ICdudW1iZXInID8gcGFkZGluZ0hvcml6b250YWwgOiBBRkZJWF9PRkZTRVQ7XG5cbiAgY29uc3Qgc3R5bGUgPSB7XG4gICAgdG9wOiB0b3BQb3NpdGlvbixcbiAgICBbc2lkZV06IG9mZnNldCxcbiAgfSBhcyBWaWV3U3R5bGU7XG5cbiAgcmV0dXJuIChcbiAgICA8QW5pbWF0ZWQuVmlld1xuICAgICAgc3R5bGU9e1tcbiAgICAgICAgc3R5bGVzLmNvbnRhaW5lcixcbiAgICAgICAgc3R5bGUsXG4gICAgICAgIHtcbiAgICAgICAgICBvcGFjaXR5OlxuICAgICAgICAgICAgdmlzaWJsZT8uaW50ZXJwb2xhdGUoe1xuICAgICAgICAgICAgICBpbnB1dFJhbmdlOiBbMCwgMV0sXG4gICAgICAgICAgICAgIG91dHB1dFJhbmdlOiBbMSwgMF0sXG4gICAgICAgICAgICB9KSB8fCAxLFxuICAgICAgICB9LFxuICAgICAgXX1cbiAgICAgIG9uTGF5b3V0PXtvbkxheW91dH1cbiAgICA+XG4gICAgICA8VGV4dCBzdHlsZT17W3sgY29sb3I6IHRleHRDb2xvciB9LCB0ZXh0U3R5bGUsIGxhYmVsU3R5bGVdfT57dGV4dH08L1RleHQ+XG4gICAgPC9BbmltYXRlZC5WaWV3PlxuICApO1xufTtcblRleHRJbnB1dEFmZml4LmRpc3BsYXlOYW1lID0gJ1RleHRJbnB1dC5BZmZpeCc7XG5cbmNvbnN0IHN0eWxlcyA9IFN0eWxlU2hlZXQuY3JlYXRlKHtcbiAgY29udGFpbmVyOiB7XG4gICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICB9LFxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhUaGVtZShUZXh0SW5wdXRBZmZpeCk7XG5cbi8vIEBjb21wb25lbnQtZG9jcyBpZ25vcmUtbmV4dC1saW5lXG5leHBvcnQgeyBUZXh0SW5wdXRBZmZpeCwgQWZmaXhBZG9ybm1lbnQgfTtcbiJdfQ==