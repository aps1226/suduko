b24b5cc16447895043988a68714a30fd
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = deprecate;

var _reactNativeAdapter = require("@unimodules/react-native-adapter");

var _compareVersions = _interopRequireDefault(require("compare-versions"));

var postedWarnings = {};

function deprecate(library, deprecatedAPI) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var currentVersion = options.currentVersion,
      versionToRemove = options.versionToRemove,
      replacement = options.replacement;
  var code = codeFromLibrary(library);
  var key = code + ":" + deprecatedAPI + ":" + replacement;

  if (!postedWarnings[key]) {
    postedWarnings[key] = true;
  }

  if (!currentVersion || !versionToRemove || (0, _compareVersions.default)(currentVersion, versionToRemove) >= 0) {
    var _message = "`" + deprecatedAPI + "` has been removed";

    if (versionToRemove) {
      _message = _message + " as of version \"" + versionToRemove + "\"";
    }

    if (replacement && replacement.length) {
      _message = _message + " please migrate to: `" + replacement + "`";
    }

    throw new _reactNativeAdapter.CodedError("ERR_DEPRECATED_API", prependLibrary(library, _message));
  }

  var message = "`" + deprecatedAPI + "` has been deprecated";

  if (replacement && replacement.length) {
    message = message + " in favor of `" + replacement + "`";
  }

  if (versionToRemove && versionToRemove.length) {
    message = message + " and will be removed in version \"" + versionToRemove + "\"";
  }

  console.warn(prependLibrary(library, message));
}

function prependLibrary(library, message) {
  return library + ": " + message;
}

function codeFromLibrary(library) {
  var code = library.replace(/[-.]/g, '_').toUpperCase();
  return code;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9kZXByZWNhdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUVBLElBQU0sY0FBYyxHQUErQixFQUFuRDs7QUFLYyxTQUFVLFNBQVYsQ0FDWixPQURZLEVBRVosYUFGWSxFQU9OO0FBQUEsTUFKTixPQUlNLHVFQUFGLEVBQUU7QUFFTixNQUFRLGNBQVIsR0FBeUQsT0FBekQsQ0FBUSxjQUFSO0FBQUEsTUFBd0IsZUFBeEIsR0FBeUQsT0FBekQsQ0FBd0IsZUFBeEI7QUFBQSxNQUF5QyxXQUF6QyxHQUF5RCxPQUF6RCxDQUF5QyxXQUF6QztBQUNBLE1BQU0sSUFBSSxHQUFHLGVBQWUsQ0FBQyxPQUFELENBQTVCO0FBQ0EsTUFBTSxHQUFHLEdBQU0sSUFBTixTQUFjLGFBQWQsU0FBK0IsV0FBeEM7O0FBQ0EsTUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFELENBQW5CLEVBQTBCO0FBQ3hCLElBQUEsY0FBYyxDQUFDLEdBQUQsQ0FBZCxHQUFzQixJQUF0QjtBQUNEOztBQUVELE1BQ0UsQ0FBQyxjQUFELElBQ0EsQ0FBQyxlQURELElBRUEsOEJBQWdCLGNBQWhCLEVBQWdDLGVBQWhDLEtBQW9ELENBSHRELEVBSUU7QUFDQSxRQUFJLFFBQU8sU0FBUSxhQUFSLHVCQUFYOztBQUNBLFFBQUksZUFBSixFQUFxQjtBQUNuQixNQUFBLFFBQU8sR0FBTSxRQUFOLHlCQUFnQyxlQUFoQyxPQUFQO0FBQ0Q7O0FBQ0QsUUFBSSxXQUFXLElBQUksV0FBVyxDQUFDLE1BQS9CLEVBQXVDO0FBQ3JDLE1BQUEsUUFBTyxHQUFNLFFBQU4sNkJBQXNDLFdBQXRDLE1BQVA7QUFDRDs7QUFFRCxVQUFNLElBQUksOEJBQUosdUJBQXFDLGNBQWMsQ0FBQyxPQUFELEVBQVUsUUFBVixDQUFuRCxDQUFOO0FBQ0Q7O0FBRUQsTUFBSSxPQUFPLFNBQVEsYUFBUiwwQkFBWDs7QUFDQSxNQUFJLFdBQVcsSUFBSSxXQUFXLENBQUMsTUFBL0IsRUFBdUM7QUFDckMsSUFBQSxPQUFPLEdBQU0sT0FBTixzQkFBK0IsV0FBL0IsTUFBUDtBQUNEOztBQUNELE1BQUksZUFBZSxJQUFJLGVBQWUsQ0FBQyxNQUF2QyxFQUErQztBQUM3QyxJQUFBLE9BQU8sR0FBTSxPQUFOLDBDQUFpRCxlQUFqRCxPQUFQO0FBQ0Q7O0FBQ0QsRUFBQSxPQUFPLENBQUMsSUFBUixDQUFhLGNBQWMsQ0FBQyxPQUFELEVBQVUsT0FBVixDQUEzQjtBQUNEOztBQUVELFNBQVMsY0FBVCxDQUF3QixPQUF4QixFQUF5QyxPQUF6QyxFQUF3RDtBQUN0RCxTQUFVLE9BQVYsVUFBc0IsT0FBdEI7QUFDRDs7QUFPRCxTQUFTLGVBQVQsQ0FBeUIsT0FBekIsRUFBd0M7QUFDdEMsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLE9BQVIsQ0FBZ0IsT0FBaEIsRUFBeUIsR0FBekIsRUFBOEIsV0FBOUIsRUFBYjtBQUNBLFNBQU8sSUFBUDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29kZWRFcnJvciB9IGZyb20gJ0B1bmltb2R1bGVzL3JlYWN0LW5hdGl2ZS1hZGFwdGVyJztcbmltcG9ydCBjb21wYXJlVmVyc2lvbnMgZnJvbSAnY29tcGFyZS12ZXJzaW9ucyc7XG5cbmNvbnN0IHBvc3RlZFdhcm5pbmdzOiB7IFtrZXk6IHN0cmluZ106IGJvb2xlYW4gfSA9IHt9O1xuXG4vKipcbiAqIFVzZWQgZm9yIGRlcHJlY2F0aW5nIHZhbHVlcyBhbmQgdGhyb3dpbmcgYW4gZXJyb3IgaWYgYSBnaXZlbiB2ZXJzaW9uIG9mIEV4cG8gaGFzIHBhc3NlZC5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGVwcmVjYXRlKFxuICBsaWJyYXJ5OiBzdHJpbmcsXG4gIGRlcHJlY2F0ZWRBUEk6IHN0cmluZyxcbiAgb3B0aW9uczoge1xuICAgIHJlcGxhY2VtZW50Pzogc3RyaW5nO1xuICAgIGN1cnJlbnRWZXJzaW9uPzogc3RyaW5nO1xuICAgIHZlcnNpb25Ub1JlbW92ZT86IHN0cmluZztcbiAgfSA9IHt9XG4pOiB2b2lkIHtcbiAgY29uc3QgeyBjdXJyZW50VmVyc2lvbiwgdmVyc2lvblRvUmVtb3ZlLCByZXBsYWNlbWVudCB9ID0gb3B0aW9ucztcbiAgY29uc3QgY29kZSA9IGNvZGVGcm9tTGlicmFyeShsaWJyYXJ5KTtcbiAgY29uc3Qga2V5ID0gYCR7Y29kZX06JHtkZXByZWNhdGVkQVBJfToke3JlcGxhY2VtZW50fWA7XG4gIGlmICghcG9zdGVkV2FybmluZ3Nba2V5XSkge1xuICAgIHBvc3RlZFdhcm5pbmdzW2tleV0gPSB0cnVlO1xuICB9XG5cbiAgaWYgKFxuICAgICFjdXJyZW50VmVyc2lvbiB8fFxuICAgICF2ZXJzaW9uVG9SZW1vdmUgfHxcbiAgICBjb21wYXJlVmVyc2lvbnMoY3VycmVudFZlcnNpb24sIHZlcnNpb25Ub1JlbW92ZSkgPj0gMFxuICApIHtcbiAgICBsZXQgbWVzc2FnZSA9IGBcXGAke2RlcHJlY2F0ZWRBUEl9XFxgIGhhcyBiZWVuIHJlbW92ZWRgO1xuICAgIGlmICh2ZXJzaW9uVG9SZW1vdmUpIHtcbiAgICAgIG1lc3NhZ2UgPSBgJHttZXNzYWdlfSBhcyBvZiB2ZXJzaW9uIFwiJHt2ZXJzaW9uVG9SZW1vdmV9XCJgO1xuICAgIH1cbiAgICBpZiAocmVwbGFjZW1lbnQgJiYgcmVwbGFjZW1lbnQubGVuZ3RoKSB7XG4gICAgICBtZXNzYWdlID0gYCR7bWVzc2FnZX0gcGxlYXNlIG1pZ3JhdGUgdG86IFxcYCR7cmVwbGFjZW1lbnR9XFxgYDtcbiAgICB9XG5cbiAgICB0aHJvdyBuZXcgQ29kZWRFcnJvcihgRVJSX0RFUFJFQ0FURURfQVBJYCwgcHJlcGVuZExpYnJhcnkobGlicmFyeSwgbWVzc2FnZSkpO1xuICB9XG5cbiAgbGV0IG1lc3NhZ2UgPSBgXFxgJHtkZXByZWNhdGVkQVBJfVxcYCBoYXMgYmVlbiBkZXByZWNhdGVkYDtcbiAgaWYgKHJlcGxhY2VtZW50ICYmIHJlcGxhY2VtZW50Lmxlbmd0aCkge1xuICAgIG1lc3NhZ2UgPSBgJHttZXNzYWdlfSBpbiBmYXZvciBvZiBcXGAke3JlcGxhY2VtZW50fVxcYGA7XG4gIH1cbiAgaWYgKHZlcnNpb25Ub1JlbW92ZSAmJiB2ZXJzaW9uVG9SZW1vdmUubGVuZ3RoKSB7XG4gICAgbWVzc2FnZSA9IGAke21lc3NhZ2V9IGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdmVyc2lvbiBcIiR7dmVyc2lvblRvUmVtb3ZlfVwiYDtcbiAgfVxuICBjb25zb2xlLndhcm4ocHJlcGVuZExpYnJhcnkobGlicmFyeSwgbWVzc2FnZSkpO1xufVxuXG5mdW5jdGlvbiBwcmVwZW5kTGlicmFyeShsaWJyYXJ5OiBzdHJpbmcsIG1lc3NhZ2U6IHN0cmluZyk6IHN0cmluZyB7XG4gIHJldHVybiBgJHtsaWJyYXJ5fTogJHttZXNzYWdlfWA7XG59XG5cbi8qKlxuICogVHJhbnNmb3JtIGZvcm1hdDpcbiAqIEV4cG8uQVIgLT4gRVhQT19BUlxuICogZXhwby1hciAtPiBFWFBPX0FSXG4gKi9cbmZ1bmN0aW9uIGNvZGVGcm9tTGlicmFyeShsaWJyYXJ5OiBzdHJpbmcpOiBzdHJpbmcge1xuICBjb25zdCBjb2RlID0gbGlicmFyeS5yZXBsYWNlKC9bLS5dL2csICdfJykudG9VcHBlckNhc2UoKTtcbiAgcmV0dXJuIGNvZGU7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9