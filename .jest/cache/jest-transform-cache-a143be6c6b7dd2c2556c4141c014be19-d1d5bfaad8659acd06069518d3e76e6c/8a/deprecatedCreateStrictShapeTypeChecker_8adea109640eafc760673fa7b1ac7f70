fbbc66826b9539dcf9861ee04be720ea
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var invariant = require('invariant');

function deprecatedCreateStrictShapeTypeChecker(shapeTypes) {
  function checkType(isRequired, props, propName, componentName, location) {
    if (!props[propName]) {
      if (isRequired) {
        invariant(false, "Required object `" + propName + "` was not specified in " + ("`" + componentName + "`."));
      }

      return;
    }

    var propValue = props[propName];
    var propType = typeof propValue;
    var locationName = location || '(unknown)';

    if (propType !== 'object') {
      invariant(false, "Invalid " + locationName + " `" + propName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
    }

    var allKeys = _objectSpread(_objectSpread({}, props[propName]), shapeTypes);

    for (var _len = arguments.length, rest = new Array(_len > 5 ? _len - 5 : 0), _key = 5; _key < _len; _key++) {
      rest[_key - 5] = arguments[_key];
    }

    for (var _key2 in allKeys) {
      var checker = shapeTypes[_key2];

      if (!checker) {
        invariant(false, "Invalid props." + propName + " key `" + _key2 + "` supplied to `" + componentName + "`." + '\nBad object: ' + JSON.stringify(props[propName], null, '  ') + '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));
      }

      var error = checker.apply(void 0, [propValue, _key2, componentName, location].concat(rest));

      if (error) {
        invariant(false, error.message + '\nBad object: ' + JSON.stringify(props[propName], null, '  '));
      }
    }
  }

  function chainedCheckType(props, propName, componentName, location) {
    for (var _len2 = arguments.length, rest = new Array(_len2 > 4 ? _len2 - 4 : 0), _key3 = 4; _key3 < _len2; _key3++) {
      rest[_key3 - 4] = arguments[_key3];
    }

    return checkType.apply(void 0, [false, props, propName, componentName, location].concat(rest));
  }

  chainedCheckType.isRequired = checkType.bind(null, true);
  return chainedCheckType;
}

module.exports = deprecatedCreateStrictShapeTypeChecker;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRlcHJlY2F0ZWRDcmVhdGVTdHJpY3RTaGFwZVR5cGVDaGVja2VyLmpzIl0sIm5hbWVzIjpbImludmFyaWFudCIsInJlcXVpcmUiLCJkZXByZWNhdGVkQ3JlYXRlU3RyaWN0U2hhcGVUeXBlQ2hlY2tlciIsInNoYXBlVHlwZXMiLCJjaGVja1R5cGUiLCJpc1JlcXVpcmVkIiwicHJvcHMiLCJwcm9wTmFtZSIsImNvbXBvbmVudE5hbWUiLCJsb2NhdGlvbiIsInByb3BWYWx1ZSIsInByb3BUeXBlIiwibG9jYXRpb25OYW1lIiwiYWxsS2V5cyIsInJlc3QiLCJrZXkiLCJjaGVja2VyIiwiSlNPTiIsInN0cmluZ2lmeSIsIk9iamVjdCIsImtleXMiLCJlcnJvciIsIm1lc3NhZ2UiLCJjaGFpbmVkQ2hlY2tUeXBlIiwiYmluZCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQVVBOzs7Ozs7Ozs7O0FBRUEsSUFBTUEsU0FBUyxHQUFHQyxPQUFPLENBQUMsV0FBRCxDQUF6Qjs7QUFFQSxTQUFTQyxzQ0FBVCxDQUFnREMsVUFBaEQsRUFHbUM7QUFDakMsV0FBU0MsU0FBVCxDQUNFQyxVQURGLEVBRUVDLEtBRkYsRUFHRUMsUUFIRixFQUlFQyxhQUpGLEVBS0VDLFFBTEYsRUFPRTtBQUNBLFFBQUksQ0FBQ0gsS0FBSyxDQUFDQyxRQUFELENBQVYsRUFBc0I7QUFDcEIsVUFBSUYsVUFBSixFQUFnQjtBQUNkTCxRQUFBQSxTQUFTLENBQ1AsS0FETyxFQUVQLHNCQUFxQk8sUUFBckIsc0NBQ09DLGFBRFAsUUFGTyxDQUFUO0FBS0Q7O0FBQ0Q7QUFDRDs7QUFDRCxRQUFNRSxTQUFTLEdBQUdKLEtBQUssQ0FBQ0MsUUFBRCxDQUF2QjtBQUNBLFFBQU1JLFFBQVEsR0FBRyxPQUFPRCxTQUF4QjtBQUNBLFFBQU1FLFlBQVksR0FBR0gsUUFBUSxJQUFJLFdBQWpDOztBQUNBLFFBQUlFLFFBQVEsS0FBSyxRQUFqQixFQUEyQjtBQUN6QlgsTUFBQUEsU0FBUyxDQUNQLEtBRE8sRUFFUCxhQUFXWSxZQUFYLFVBQTZCTCxRQUE3QixtQkFBcURJLFFBQXJELDZCQUNtQkgsYUFEbkIsMkJBRk8sQ0FBVDtBQUtEOztBQUdELFFBQU1LLE9BQU8sbUNBQU9QLEtBQUssQ0FBQ0MsUUFBRCxDQUFaLEdBQTJCSixVQUEzQixDQUFiOztBQXZCQSxzQ0FER1csSUFDSDtBQURHQSxNQUFBQSxJQUNIO0FBQUE7O0FBd0JBLFNBQUssSUFBTUMsS0FBWCxJQUFrQkYsT0FBbEIsRUFBMkI7QUFDekIsVUFBTUcsT0FBTyxHQUFHYixVQUFVLENBQUNZLEtBQUQsQ0FBMUI7O0FBQ0EsVUFBSSxDQUFDQyxPQUFMLEVBQWM7QUFDWmhCLFFBQUFBLFNBQVMsQ0FDUCxLQURPLEVBRVAsbUJBQWlCTyxRQUFqQixjQUFtQ1EsS0FBbkMsdUJBQTBEUCxhQUExRCxVQUNFLGdCQURGLEdBRUVTLElBQUksQ0FBQ0MsU0FBTCxDQUFlWixLQUFLLENBQUNDLFFBQUQsQ0FBcEIsRUFBZ0MsSUFBaEMsRUFBc0MsSUFBdEMsQ0FGRixHQUdFLGdCQUhGLEdBSUVVLElBQUksQ0FBQ0MsU0FBTCxDQUFlQyxNQUFNLENBQUNDLElBQVAsQ0FBWWpCLFVBQVosQ0FBZixFQUF3QyxJQUF4QyxFQUE4QyxJQUE5QyxDQU5LLENBQVQ7QUFRRDs7QUFDRCxVQUFNa0IsS0FBSyxHQUFHTCxPQUFPLE1BQVAsVUFBUU4sU0FBUixFQUFtQkssS0FBbkIsRUFBd0JQLGFBQXhCLEVBQXVDQyxRQUF2QyxTQUFvREssSUFBcEQsRUFBZDs7QUFDQSxVQUFJTyxLQUFKLEVBQVc7QUFDVHJCLFFBQUFBLFNBQVMsQ0FDUCxLQURPLEVBRVBxQixLQUFLLENBQUNDLE9BQU4sR0FDRSxnQkFERixHQUVFTCxJQUFJLENBQUNDLFNBQUwsQ0FBZVosS0FBSyxDQUFDQyxRQUFELENBQXBCLEVBQWdDLElBQWhDLEVBQXNDLElBQXRDLENBSkssQ0FBVDtBQU1EO0FBQ0Y7QUFDRjs7QUFDRCxXQUFTZ0IsZ0JBQVQsQ0FDRWpCLEtBREYsRUFFRUMsUUFGRixFQUdFQyxhQUhGLEVBSUVDLFFBSkYsRUFNVTtBQUFBLHVDQURMSyxJQUNLO0FBRExBLE1BQUFBLElBQ0s7QUFBQTs7QUFDUixXQUFPVixTQUFTLE1BQVQsVUFBVSxLQUFWLEVBQWlCRSxLQUFqQixFQUF3QkMsUUFBeEIsRUFBa0NDLGFBQWxDLEVBQWlEQyxRQUFqRCxTQUE4REssSUFBOUQsRUFBUDtBQUNEOztBQUNEUyxFQUFBQSxnQkFBZ0IsQ0FBQ2xCLFVBQWpCLEdBQThCRCxTQUFTLENBQUNvQixJQUFWLENBQWUsSUFBZixFQUFxQixJQUFyQixDQUE5QjtBQUNBLFNBQU9ELGdCQUFQO0FBQ0Q7O0FBRURFLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQnhCLHNDQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogQGZsb3dcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IGludmFyaWFudCA9IHJlcXVpcmUoJ2ludmFyaWFudCcpO1xuXG5mdW5jdGlvbiBkZXByZWNhdGVkQ3JlYXRlU3RyaWN0U2hhcGVUeXBlQ2hlY2tlcihzaGFwZVR5cGVzOiB7XG4gIFtrZXk6IHN0cmluZ106IFJlYWN0UHJvcHNDaGVja1R5cGUsXG4gIC4uLixcbn0pOiBSZWFjdFByb3BzQ2hhaW5hYmxlVHlwZUNoZWNrZXIge1xuICBmdW5jdGlvbiBjaGVja1R5cGUoXG4gICAgaXNSZXF1aXJlZCxcbiAgICBwcm9wcyxcbiAgICBwcm9wTmFtZSxcbiAgICBjb21wb25lbnROYW1lLFxuICAgIGxvY2F0aW9uPyxcbiAgICAuLi5yZXN0XG4gICkge1xuICAgIGlmICghcHJvcHNbcHJvcE5hbWVdKSB7XG4gICAgICBpZiAoaXNSZXF1aXJlZCkge1xuICAgICAgICBpbnZhcmlhbnQoXG4gICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgYFJlcXVpcmVkIG9iamVjdCBcXGAke3Byb3BOYW1lfVxcYCB3YXMgbm90IHNwZWNpZmllZCBpbiBgICtcbiAgICAgICAgICAgIGBcXGAke2NvbXBvbmVudE5hbWV9XFxgLmAsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHByb3BWYWx1ZSA9IHByb3BzW3Byb3BOYW1lXTtcbiAgICBjb25zdCBwcm9wVHlwZSA9IHR5cGVvZiBwcm9wVmFsdWU7XG4gICAgY29uc3QgbG9jYXRpb25OYW1lID0gbG9jYXRpb24gfHwgJyh1bmtub3duKSc7XG4gICAgaWYgKHByb3BUeXBlICE9PSAnb2JqZWN0Jykge1xuICAgICAgaW52YXJpYW50KFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgYEludmFsaWQgJHtsb2NhdGlvbk5hbWV9IFxcYCR7cHJvcE5hbWV9XFxgIG9mIHR5cGUgXFxgJHtwcm9wVHlwZX1cXGAgYCArXG4gICAgICAgICAgYHN1cHBsaWVkIHRvIFxcYCR7Y29tcG9uZW50TmFtZX1cXGAsIGV4cGVjdGVkIFxcYG9iamVjdFxcYC5gLFxuICAgICAgKTtcbiAgICB9XG4gICAgLy8gV2UgbmVlZCB0byBjaGVjayBhbGwga2V5cyBpbiBjYXNlIHNvbWUgYXJlIHJlcXVpcmVkIGJ1dCBtaXNzaW5nIGZyb21cbiAgICAvLyBwcm9wcy5cbiAgICBjb25zdCBhbGxLZXlzID0gey4uLnByb3BzW3Byb3BOYW1lXSwgLi4uc2hhcGVUeXBlc307XG4gICAgZm9yIChjb25zdCBrZXkgaW4gYWxsS2V5cykge1xuICAgICAgY29uc3QgY2hlY2tlciA9IHNoYXBlVHlwZXNba2V5XTtcbiAgICAgIGlmICghY2hlY2tlcikge1xuICAgICAgICBpbnZhcmlhbnQoXG4gICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgYEludmFsaWQgcHJvcHMuJHtwcm9wTmFtZX0ga2V5IFxcYCR7a2V5fVxcYCBzdXBwbGllZCB0byBcXGAke2NvbXBvbmVudE5hbWV9XFxgLmAgK1xuICAgICAgICAgICAgJ1xcbkJhZCBvYmplY3Q6ICcgK1xuICAgICAgICAgICAgSlNPTi5zdHJpbmdpZnkocHJvcHNbcHJvcE5hbWVdLCBudWxsLCAnICAnKSArXG4gICAgICAgICAgICAnXFxuVmFsaWQga2V5czogJyArXG4gICAgICAgICAgICBKU09OLnN0cmluZ2lmeShPYmplY3Qua2V5cyhzaGFwZVR5cGVzKSwgbnVsbCwgJyAgJyksXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBjb25zdCBlcnJvciA9IGNoZWNrZXIocHJvcFZhbHVlLCBrZXksIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCAuLi5yZXN0KTtcbiAgICAgIGlmIChlcnJvcikge1xuICAgICAgICBpbnZhcmlhbnQoXG4gICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgZXJyb3IubWVzc2FnZSArXG4gICAgICAgICAgICAnXFxuQmFkIG9iamVjdDogJyArXG4gICAgICAgICAgICBKU09OLnN0cmluZ2lmeShwcm9wc1twcm9wTmFtZV0sIG51bGwsICcgICcpLFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBjaGFpbmVkQ2hlY2tUeXBlKFxuICAgIHByb3BzOiB7W2tleTogc3RyaW5nXTogYW55LCAuLi59LFxuICAgIHByb3BOYW1lOiBzdHJpbmcsXG4gICAgY29tcG9uZW50TmFtZTogc3RyaW5nLFxuICAgIGxvY2F0aW9uPzogc3RyaW5nLFxuICAgIC4uLnJlc3RcbiAgKTogP0Vycm9yIHtcbiAgICByZXR1cm4gY2hlY2tUeXBlKGZhbHNlLCBwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCAuLi5yZXN0KTtcbiAgfVxuICBjaGFpbmVkQ2hlY2tUeXBlLmlzUmVxdWlyZWQgPSBjaGVja1R5cGUuYmluZChudWxsLCB0cnVlKTtcbiAgcmV0dXJuIGNoYWluZWRDaGVja1R5cGU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZGVwcmVjYXRlZENyZWF0ZVN0cmljdFNoYXBlVHlwZUNoZWNrZXI7XG4iXX0=