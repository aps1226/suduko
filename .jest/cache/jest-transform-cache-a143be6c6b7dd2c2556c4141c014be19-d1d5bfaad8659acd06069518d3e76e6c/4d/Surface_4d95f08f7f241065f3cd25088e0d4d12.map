{"version":3,"sources":["Surface.tsx"],"names":["Surface","rest","elevation","StyleSheet","dark","colors","backgroundColor","isDarkTheme","mode","surface"],"mappings":";;;;;;;;;;;;AAAA,IAAA,KAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAA,YAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AACA,IAAA,OAAA,GAAA,sBAAA,CAAA,OAAA,oBAAA,CAAA;;AACA,IAAA,QAAA,GAAA,OAAA,mBAAA;;AACA,IAAA,QAAA,GAAA,sBAAA,CAAA,OAAA,qBAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyDA,IAAMA,OAAO,GAAG,SAAVA,OAAU,OAAsC;AAAA,MAArC,KAAqC,QAArC,KAAqC;AAAA,MAArC,KAAqC,QAArC,KAAqC;AAAA,MAAlBC,IAAkB;;AACpD,cAA2BE,YAAAA,CAAAA,UAAAA,CAAAA,OAAAA,CAAAA,KAAAA,KAA3B,EAAA;AAAA,8BAAQD,SAAR;AAAA,MAAQA,SAAR,gCAAoB,CAApB;;AACA,MAAM,WAAN,GAAA,KAAA,CAAQE,IAAR;AAAA,MAAM,IAAN,GAAA,KAAA,CAAM,IAAN;AAAA,MAAiCC,MAAjC,GAAA,KAAA,CAAiCA,MAAjC;AACA,SACE,KAAA,CAAA,aAAA,CAAC,YAAA,CAAD,QAAC,CAAD,IAAA,EAAA,QAAA,CAAA,EAAA,EAAA,IAAA,EAAA;AAEE,IAAA,KAAK,EAAE,CACL;AACEC,MAAAA,eAAe,EACbC,WAAW,IAAIC,IAAI,KAAnBD,UAAAA,GACI,CAAA,GAAA,QAAA,CAAA,OAAA,EAAA,SAAA,EAAmBF,MAAM,CAD7BE,OACI,CADJA,GAEIF,MAAM,CAACI;AAJf,KADK,EAOLP,SAAS,GAAG,CAAA,GAAA,OAAA,CAAA,OAAA,EAAH,SAAG,CAAH,GAPJ,IAAA,EAAA,KAAA;AAFT,GAAA,CAAA,CADF;AAHF,CAAA;;eAoBe,CAAA,GAAA,QAAA,CAAA,SAAA,EAAA,OAAA,C","sourcesContent":["import * as React from 'react';\nimport { Animated, StyleSheet, View, StyleProp, ViewStyle } from 'react-native';\nimport shadow from '../styles/shadow';\nimport { withTheme } from '../core/theming';\nimport overlay from '../styles/overlay';\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Content of the `Surface`.\n   */\n  children: React.ReactNode;\n  style?: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * Surface is a basic container that can give depth to an element with elevation shadow.\n * On dark theme with `adaptive` mode, surface is constructed by also placing a semi-transparent white overlay over a component surface.\n * See [Dark Theme](https://callstack.github.io/react-native-paper/theming.html#dark-theme) for more information.\n * Overlay and shadow can be applied by specifying the `elevation` property both on Android and iOS.\n *\n * <div class=\"screenshots\">\n *   <img src=\"screenshots/surface-1.png\" />\n *   <img src=\"screenshots/surface-2.png\" />\n *   <img src=\"screenshots/surface-3.png\" />\n * </div>\n *\n * <div class=\"screenshots\">\n *   <img src=\"screenshots/surface-dark-1.png\" />\n *   <img src=\"screenshots/surface-dark-2.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Surface, Text } from 'react-native-paper';\n * import { StyleSheet } from 'react-native';\n *\n * const MyComponent = () => (\n *   <Surface style={styles.surface}>\n *      <Text>Surface</Text>\n *   </Surface>\n * );\n *\n * export default MyComponent;\n *\n * const styles = StyleSheet.create({\n *   surface: {\n *     padding: 8,\n *     height: 80,\n *     width: 80,\n *     alignItems: 'center',\n *     justifyContent: 'center',\n *     elevation: 4,\n *   },\n * });\n * ```\n */\nconst Surface = ({ style, theme, ...rest }: Props) => {\n  const { elevation = 4 } = (StyleSheet.flatten(style) || {}) as ViewStyle;\n  const { dark: isDarkTheme, mode, colors } = theme;\n  return (\n    <Animated.View\n      {...rest}\n      style={[\n        {\n          backgroundColor:\n            isDarkTheme && mode === 'adaptive'\n              ? overlay(elevation, colors.surface)\n              : colors.surface,\n        },\n        elevation ? shadow(elevation) : null,\n        style,\n      ]}\n    />\n  );\n};\n\nexport default withTheme(Surface);\n"]}