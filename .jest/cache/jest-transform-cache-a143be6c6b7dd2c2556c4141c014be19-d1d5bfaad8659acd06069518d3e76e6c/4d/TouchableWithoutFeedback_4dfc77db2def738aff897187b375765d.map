{"version":3,"sources":["TouchableWithoutFeedback.js"],"names":["PASSTHROUGH_PROPS","TouchableWithoutFeedback","state","pressability","Pressability","createPressabilityConfig","props","element","React","Children","only","children","__DEV__","type","View","push","hitSlop","getEventHandlers","onBlur","onFocus","eventHandlersWithoutBlurAndFocus","elementProps","accessible","focusable","onPress","undefined","prop","cloneElement","Platform","isTV","_tvTouchable","TVTouchable","getDisabled","disabled","event","configure","destroy","reset","Component","cancelable","rejectResponderTermination","delayLongPress","delayPressIn","delayPressOut","minPressDuration","pressRectOffset","pressRetentionOffset","android_disableSound","touchSoundDisabled","onLongPress","onPressIn","onPressOut","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n'use strict';\n\nimport Pressability, {\n  type PressabilityConfig,\n} from '../../Pressability/Pressability';\nimport {PressabilityDebugView} from '../../Pressability/PressabilityDebug';\nimport TVTouchable from './TVTouchable';\nimport type {\n  AccessibilityActionEvent,\n  AccessibilityActionInfo,\n  AccessibilityRole,\n  AccessibilityState,\n  AccessibilityValue,\n} from '../../Components/View/ViewAccessibility';\nimport type {EdgeInsetsProp} from '../../StyleSheet/EdgeInsetsPropType';\nimport type {\n  BlurEvent,\n  FocusEvent,\n  LayoutEvent,\n  PressEvent,\n} from '../../Types/CoreEventTypes';\nimport Platform from '../../Utilities/Platform';\nimport View from '../../Components/View/View';\nimport * as React from 'react';\n\ntype Props = $ReadOnly<{|\n  accessibilityActions?: ?$ReadOnlyArray<AccessibilityActionInfo>,\n  accessibilityElementsHidden?: ?boolean,\n  accessibilityHint?: ?Stringish,\n  accessibilityIgnoresInvertColors?: ?boolean,\n  accessibilityLabel?: ?Stringish,\n  accessibilityLiveRegion?: ?('none' | 'polite' | 'assertive'),\n  accessibilityRole?: ?AccessibilityRole,\n  accessibilityState?: ?AccessibilityState,\n  accessibilityValue?: ?AccessibilityValue,\n  accessibilityViewIsModal?: ?boolean,\n  accessible?: ?boolean,\n  children?: ?React.Node,\n  delayLongPress?: ?number,\n  delayPressIn?: ?number,\n  delayPressOut?: ?number,\n  disabled?: ?boolean,\n  focusable?: ?boolean,\n  hitSlop?: ?EdgeInsetsProp,\n  importantForAccessibility?: ?('auto' | 'yes' | 'no' | 'no-hide-descendants'),\n  nativeID?: ?string,\n  onAccessibilityAction?: ?(event: AccessibilityActionEvent) => mixed,\n  onBlur?: ?(event: BlurEvent) => mixed,\n  onFocus?: ?(event: FocusEvent) => mixed,\n  onLayout?: ?(event: LayoutEvent) => mixed,\n  onLongPress?: ?(event: PressEvent) => mixed,\n  onPress?: ?(event: PressEvent) => mixed,\n  onPressIn?: ?(event: PressEvent) => mixed,\n  onPressOut?: ?(event: PressEvent) => mixed,\n  pressRetentionOffset?: ?EdgeInsetsProp,\n  rejectResponderTermination?: ?boolean,\n  testID?: ?string,\n  touchSoundDisabled?: ?boolean,\n|}>;\n\ntype State = $ReadOnly<{|\n  pressability: Pressability,\n|}>;\n\nconst PASSTHROUGH_PROPS = [\n  'accessibilityActions',\n  'accessibilityElementsHidden',\n  'accessibilityHint',\n  'accessibilityIgnoresInvertColors',\n  'accessibilityLabel',\n  'accessibilityLiveRegion',\n  'accessibilityRole',\n  'accessibilityState',\n  'accessibilityValue',\n  'accessibilityViewIsModal',\n  'hitSlop',\n  'importantForAccessibility',\n  'nativeID',\n  'onAccessibilityAction',\n  'onBlur',\n  'onFocus',\n  'onLayout',\n  'testID',\n];\n\nclass TouchableWithoutFeedback extends React.Component<Props, State> {\n  _tvTouchable: ?TVTouchable;\n\n  state: State = {\n    pressability: new Pressability(createPressabilityConfig(this.props)),\n  };\n\n  render(): React.Node {\n    const element = React.Children.only(this.props.children);\n    const children = [element.props.children];\n    if (__DEV__) {\n      if (element.type === View) {\n        children.push(\n          <PressabilityDebugView color=\"red\" hitSlop={this.props.hitSlop} />,\n        );\n      }\n    }\n\n    // BACKWARD-COMPATIBILITY: Focus and blur events were never supported before\n    // adopting `Pressability`, so preserve that behavior.\n    const {\n      onBlur,\n      onFocus,\n      ...eventHandlersWithoutBlurAndFocus\n    } = this.state.pressability.getEventHandlers();\n\n    const elementProps: {[string]: mixed, ...} = {\n      ...eventHandlersWithoutBlurAndFocus,\n      accessible: this.props.accessible !== false,\n      focusable:\n        this.props.focusable !== false && this.props.onPress !== undefined,\n    };\n    for (const prop of PASSTHROUGH_PROPS) {\n      if (this.props[prop] !== undefined) {\n        elementProps[prop] = this.props[prop];\n      }\n    }\n\n    return React.cloneElement(element, elementProps, ...children);\n  }\n\n  componentDidMount(): void {\n    if (Platform.isTV) {\n      this._tvTouchable = new TVTouchable(this, {\n        getDisabled: () => this.props.disabled === true,\n        onBlur: event => {\n          if (this.props.onBlur != null) {\n            this.props.onBlur(event);\n          }\n        },\n        onFocus: event => {\n          if (this.props.onFocus != null) {\n            this.props.onFocus(event);\n          }\n        },\n        onPress: event => {\n          if (this.props.onPress != null) {\n            this.props.onPress(event);\n          }\n        },\n      });\n    }\n  }\n\n  componentDidUpdate(): void {\n    this.state.pressability.configure(createPressabilityConfig(this.props));\n  }\n\n  componentWillUnmount(): void {\n    if (Platform.isTV) {\n      if (this._tvTouchable != null) {\n        this._tvTouchable.destroy();\n      }\n    }\n    this.state.pressability.reset();\n  }\n}\n\nfunction createPressabilityConfig(props: Props): PressabilityConfig {\n  return {\n    cancelable: !props.rejectResponderTermination,\n    disabled: props.disabled,\n    hitSlop: props.hitSlop,\n    delayLongPress: props.delayLongPress,\n    delayPressIn: props.delayPressIn,\n    delayPressOut: props.delayPressOut,\n    minPressDuration: 0,\n    pressRectOffset: props.pressRetentionOffset,\n    android_disableSound: props.touchSoundDisabled,\n    onBlur: props.onBlur,\n    onFocus: props.onFocus,\n    onLongPress: props.onLongPress,\n    onPress: props.onPress,\n    onPressIn: props.onPressIn,\n    onPressOut: props.onPressOut,\n  };\n}\n\nmodule.exports = TouchableWithoutFeedback;\n"]}