6002db29defce8572260c6002e3ac2cb
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _NativeImageLoaderIOS = _interopRequireDefault(require("./NativeImageLoaderIOS"));

var _ImageViewNativeComponent = _interopRequireDefault(require("./ImageViewNativeComponent"));

var DeprecatedImagePropType = require("../DeprecatedPropTypes/DeprecatedImagePropType");

var React = require('react');

var ReactNative = require("../Renderer/shims/ReactNative");

var StyleSheet = require("../StyleSheet/StyleSheet");

var flattenStyle = require("../StyleSheet/flattenStyle");

var resolveAssetSource = require("./resolveAssetSource");

function getSize(uri, success, failure) {
  _NativeImageLoaderIOS.default.getSize(uri).then(function (_ref) {
    var _ref2 = (0, _slicedToArray2.default)(_ref, 2),
        width = _ref2[0],
        height = _ref2[1];

    return success(width, height);
  }).catch(failure || function () {
    console.warn('Failed to get size for image ' + uri);
  });
}

function getSizeWithHeaders(uri, headers, success, failure) {
  return _NativeImageLoaderIOS.default.getSizeWithHeaders(uri, headers).then(function (sizes) {
    success(sizes.width, sizes.height);
  }).catch(failure || function () {
    console.warn('Failed to get size for image: ' + uri);
  });
}

function prefetch(url) {
  return _NativeImageLoaderIOS.default.prefetchImage(url);
}

function queryCache(urls) {
  return _regenerator.default.async(function queryCache$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return _regenerator.default.awrap(_NativeImageLoaderIOS.default.queryCache(urls));

        case 2:
          return _context.abrupt("return", _context.sent);

        case 3:
        case "end":
          return _context.stop();
      }
    }
  }, null, null, null, Promise);
}

var Image = function Image(props, forwardedRef) {
  var source = resolveAssetSource(props.source) || {
    uri: undefined,
    width: undefined,
    height: undefined
  };
  var sources;
  var style;

  if (Array.isArray(source)) {
    style = flattenStyle([styles.base, props.style]) || {};
    sources = source;
  } else {
    var _width = source.width,
        _height = source.height,
        uri = source.uri;
    style = flattenStyle([{
      width: _width,
      height: _height
    }, styles.base, props.style]) || {};
    sources = [source];

    if (uri === '') {
      console.warn('source.uri should not be an empty string');
    }
  }

  var resizeMode = props.resizeMode || style.resizeMode || 'cover';
  var tintColor = style.tintColor;

  if (props.src != null) {
    console.warn('The <Image> component requires a `source` property rather than `src`.');
  }

  if (props.children != null) {
    throw new Error('The <Image> component cannot contain children. If you want to render content on top of the image, consider using the <ImageBackground> component or absolute positioning.');
  }

  return React.createElement(_ImageViewNativeComponent.default, (0, _extends2.default)({}, props, {
    ref: forwardedRef,
    style: style,
    resizeMode: resizeMode,
    tintColor: tintColor,
    source: sources
  }));
};

Image = React.forwardRef(Image);
Image.displayName = 'Image';
Image.getSize = getSize;
Image.getSizeWithHeaders = getSizeWithHeaders;
Image.prefetch = prefetch;
Image.queryCache = queryCache;
Image.resolveAssetSource = resolveAssetSource;
Image.propTypes = DeprecatedImagePropType;
var styles = StyleSheet.create({
  base: {
    overflow: 'hidden'
  }
});
module.exports = Image;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkltYWdlLmlvcy5qcyJdLCJuYW1lcyI6WyJEZXByZWNhdGVkSW1hZ2VQcm9wVHlwZSIsInJlcXVpcmUiLCJSZWFjdCIsIlJlYWN0TmF0aXZlIiwiU3R5bGVTaGVldCIsImZsYXR0ZW5TdHlsZSIsInJlc29sdmVBc3NldFNvdXJjZSIsImdldFNpemUiLCJ1cmkiLCJzdWNjZXNzIiwiZmFpbHVyZSIsIk5hdGl2ZUltYWdlTG9hZGVySU9TIiwidGhlbiIsIndpZHRoIiwiaGVpZ2h0IiwiY2F0Y2giLCJjb25zb2xlIiwid2FybiIsImdldFNpemVXaXRoSGVhZGVycyIsImhlYWRlcnMiLCJzaXplcyIsInByZWZldGNoIiwidXJsIiwicHJlZmV0Y2hJbWFnZSIsInF1ZXJ5Q2FjaGUiLCJ1cmxzIiwiSW1hZ2UiLCJwcm9wcyIsImZvcndhcmRlZFJlZiIsInNvdXJjZSIsInVuZGVmaW5lZCIsInNvdXJjZXMiLCJzdHlsZSIsIkFycmF5IiwiaXNBcnJheSIsInN0eWxlcyIsImJhc2UiLCJyZXNpemVNb2RlIiwidGludENvbG9yIiwic3JjIiwiY2hpbGRyZW4iLCJFcnJvciIsImZvcndhcmRSZWYiLCJkaXNwbGF5TmFtZSIsInByb3BUeXBlcyIsImNyZWF0ZSIsIm92ZXJmbG93IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBVUE7Ozs7Ozs7Ozs7QUFhQTs7QUFFQTs7QUFiQSxJQUFNQSx1QkFBdUIsR0FBR0MsT0FBTyxrREFBdkM7O0FBQ0EsSUFBTUMsS0FBSyxHQUFHRCxPQUFPLENBQUMsT0FBRCxDQUFyQjs7QUFDQSxJQUFNRSxXQUFXLEdBQUdGLE9BQU8saUNBQTNCOztBQUNBLElBQU1HLFVBQVUsR0FBR0gsT0FBTyw0QkFBMUI7O0FBRUEsSUFBTUksWUFBWSxHQUFHSixPQUFPLDhCQUE1Qjs7QUFDQSxJQUFNSyxrQkFBa0IsR0FBR0wsT0FBTyx3QkFBbEM7O0FBU0EsU0FBU00sT0FBVCxDQUNFQyxHQURGLEVBRUVDLE9BRkYsRUFHRUMsT0FIRixFQUlFO0FBQ0FDLGdDQUFxQkosT0FBckIsQ0FBNkJDLEdBQTdCLEVBQ0dJLElBREgsQ0FDUTtBQUFBO0FBQUEsUUFBRUMsS0FBRjtBQUFBLFFBQVNDLE1BQVQ7O0FBQUEsV0FBcUJMLE9BQU8sQ0FBQ0ksS0FBRCxFQUFRQyxNQUFSLENBQTVCO0FBQUEsR0FEUixFQUVHQyxLQUZILENBR0lMLE9BQU8sSUFDTCxZQUFXO0FBQ1RNLElBQUFBLE9BQU8sQ0FBQ0MsSUFBUixDQUFhLGtDQUFrQ1QsR0FBL0M7QUFDRCxHQU5QO0FBUUQ7O0FBRUQsU0FBU1Usa0JBQVQsQ0FDRVYsR0FERixFQUVFVyxPQUZGLEVBR0VWLE9BSEYsRUFJRUMsT0FKRixFQUtPO0FBQ0wsU0FBT0MsOEJBQXFCTyxrQkFBckIsQ0FBd0NWLEdBQXhDLEVBQTZDVyxPQUE3QyxFQUNKUCxJQURJLENBQ0MsVUFBU1EsS0FBVCxFQUFnQjtBQUNwQlgsSUFBQUEsT0FBTyxDQUFDVyxLQUFLLENBQUNQLEtBQVAsRUFBY08sS0FBSyxDQUFDTixNQUFwQixDQUFQO0FBQ0QsR0FISSxFQUlKQyxLQUpJLENBS0hMLE9BQU8sSUFDTCxZQUFXO0FBQ1RNLElBQUFBLE9BQU8sQ0FBQ0MsSUFBUixDQUFhLG1DQUFtQ1QsR0FBaEQ7QUFDRCxHQVJBLENBQVA7QUFVRDs7QUFFRCxTQUFTYSxRQUFULENBQWtCQyxHQUFsQixFQUFvQztBQUNsQyxTQUFPWCw4QkFBcUJZLGFBQXJCLENBQW1DRCxHQUFuQyxDQUFQO0FBQ0Q7O0FBRUQsU0FBZUUsVUFBZixDQUNFQyxJQURGO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLDRDQUdlZCw4QkFBcUJhLFVBQXJCLENBQWdDQyxJQUFoQyxDQUhmOztBQUFBO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBc0JBLElBQUlDLEtBQUssR0FBRyxlQUFDQyxLQUFELEVBQXdCQyxZQUF4QixFQUF5QztBQUNuRCxNQUFNQyxNQUFNLEdBQUd2QixrQkFBa0IsQ0FBQ3FCLEtBQUssQ0FBQ0UsTUFBUCxDQUFsQixJQUFvQztBQUNqRHJCLElBQUFBLEdBQUcsRUFBRXNCLFNBRDRDO0FBRWpEakIsSUFBQUEsS0FBSyxFQUFFaUIsU0FGMEM7QUFHakRoQixJQUFBQSxNQUFNLEVBQUVnQjtBQUh5QyxHQUFuRDtBQU1BLE1BQUlDLE9BQUo7QUFDQSxNQUFJQyxLQUFKOztBQUNBLE1BQUlDLEtBQUssQ0FBQ0MsT0FBTixDQUFjTCxNQUFkLENBQUosRUFBMkI7QUFFekJHLElBQUFBLEtBQUssR0FBRzNCLFlBQVksQ0FBQyxDQUFDOEIsTUFBTSxDQUFDQyxJQUFSLEVBQWNULEtBQUssQ0FBQ0ssS0FBcEIsQ0FBRCxDQUFaLElBQTRDLEVBQXBEO0FBQ0FELElBQUFBLE9BQU8sR0FBR0YsTUFBVjtBQUNELEdBSkQsTUFJTztBQUNMLFFBQU9oQixNQUFQLEdBQTZCZ0IsTUFBN0IsQ0FBT2hCLEtBQVA7QUFBQSxRQUFjQyxPQUFkLEdBQTZCZSxNQUE3QixDQUFjZixNQUFkO0FBQUEsUUFBc0JOLEdBQXRCLEdBQTZCcUIsTUFBN0IsQ0FBc0JyQixHQUF0QjtBQUVBd0IsSUFBQUEsS0FBSyxHQUFHM0IsWUFBWSxDQUFDLENBQUM7QUFBQ1EsTUFBQUEsS0FBSyxFQUFMQSxNQUFEO0FBQVFDLE1BQUFBLE1BQU0sRUFBTkE7QUFBUixLQUFELEVBQWtCcUIsTUFBTSxDQUFDQyxJQUF6QixFQUErQlQsS0FBSyxDQUFDSyxLQUFyQyxDQUFELENBQVosSUFBNkQsRUFBckU7QUFDQUQsSUFBQUEsT0FBTyxHQUFHLENBQUNGLE1BQUQsQ0FBVjs7QUFFQSxRQUFJckIsR0FBRyxLQUFLLEVBQVosRUFBZ0I7QUFDZFEsTUFBQUEsT0FBTyxDQUFDQyxJQUFSLENBQWEsMENBQWI7QUFDRDtBQUNGOztBQUVELE1BQU1vQixVQUFVLEdBQUdWLEtBQUssQ0FBQ1UsVUFBTixJQUFvQkwsS0FBSyxDQUFDSyxVQUExQixJQUF3QyxPQUEzRDtBQUNBLE1BQU1DLFNBQVMsR0FBR04sS0FBSyxDQUFDTSxTQUF4Qjs7QUFFQSxNQUFJWCxLQUFLLENBQUNZLEdBQU4sSUFBYSxJQUFqQixFQUF1QjtBQUNyQnZCLElBQUFBLE9BQU8sQ0FBQ0MsSUFBUixDQUNFLHVFQURGO0FBR0Q7O0FBRUQsTUFBSVUsS0FBSyxDQUFDYSxRQUFOLElBQWtCLElBQXRCLEVBQTRCO0FBQzFCLFVBQU0sSUFBSUMsS0FBSixDQUNKLDJLQURJLENBQU47QUFHRDs7QUFFRCxTQUNFLG9CQUFDLGlDQUFELDZCQUNNZCxLQUROO0FBRUUsSUFBQSxHQUFHLEVBQUVDLFlBRlA7QUFHRSxJQUFBLEtBQUssRUFBRUksS0FIVDtBQUlFLElBQUEsVUFBVSxFQUFFSyxVQUpkO0FBS0UsSUFBQSxTQUFTLEVBQUVDLFNBTGI7QUFNRSxJQUFBLE1BQU0sRUFBRVA7QUFOVixLQURGO0FBVUQsQ0FqREQ7O0FBbURBTCxLQUFLLEdBQUd4QixLQUFLLENBQUN3QyxVQUFOLENBR05oQixLQUhNLENBQVI7QUFJQUEsS0FBSyxDQUFDaUIsV0FBTixHQUFvQixPQUFwQjtBQVVBakIsS0FBSyxDQUFDbkIsT0FBTixHQUFnQkEsT0FBaEI7QUFXQW1CLEtBQUssQ0FBQ1Isa0JBQU4sR0FBMkJBLGtCQUEzQjtBQVdBUSxLQUFLLENBQUNMLFFBQU4sR0FBaUJBLFFBQWpCO0FBVUFLLEtBQUssQ0FBQ0YsVUFBTixHQUFtQkEsVUFBbkI7QUFVQUUsS0FBSyxDQUFDcEIsa0JBQU4sR0FBMkJBLGtCQUEzQjtBQUtBb0IsS0FBSyxDQUFDa0IsU0FBTixHQUFrQjVDLHVCQUFsQjtBQUVBLElBQU1tQyxNQUFNLEdBQUcvQixVQUFVLENBQUN5QyxNQUFYLENBQWtCO0FBQy9CVCxFQUFBQSxJQUFJLEVBQUU7QUFDSlUsSUFBQUEsUUFBUSxFQUFFO0FBRE47QUFEeUIsQ0FBbEIsQ0FBZjtBQU1BQyxNQUFNLENBQUNDLE9BQVAsR0FBbUJ0QixLQUFuQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3dcbiAqIEBmb3JtYXRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IERlcHJlY2F0ZWRJbWFnZVByb3BUeXBlID0gcmVxdWlyZSgnLi4vRGVwcmVjYXRlZFByb3BUeXBlcy9EZXByZWNhdGVkSW1hZ2VQcm9wVHlwZScpO1xuY29uc3QgUmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuY29uc3QgUmVhY3ROYXRpdmUgPSByZXF1aXJlKCcuLi9SZW5kZXJlci9zaGltcy9SZWFjdE5hdGl2ZScpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXG5jb25zdCBTdHlsZVNoZWV0ID0gcmVxdWlyZSgnLi4vU3R5bGVTaGVldC9TdHlsZVNoZWV0Jyk7XG5cbmNvbnN0IGZsYXR0ZW5TdHlsZSA9IHJlcXVpcmUoJy4uL1N0eWxlU2hlZXQvZmxhdHRlblN0eWxlJyk7XG5jb25zdCByZXNvbHZlQXNzZXRTb3VyY2UgPSByZXF1aXJlKCcuL3Jlc29sdmVBc3NldFNvdXJjZScpO1xuXG5pbXBvcnQgdHlwZSB7SW1hZ2VQcm9wcyBhcyBJbWFnZVByb3BzVHlwZX0gZnJvbSAnLi9JbWFnZVByb3BzJztcblxuaW1wb3J0IHR5cGUge0ltYWdlU3R5bGVQcm9wfSBmcm9tICcuLi9TdHlsZVNoZWV0L1N0eWxlU2hlZXQnO1xuaW1wb3J0IE5hdGl2ZUltYWdlTG9hZGVySU9TIGZyb20gJy4vTmF0aXZlSW1hZ2VMb2FkZXJJT1MnO1xuXG5pbXBvcnQgSW1hZ2VWaWV3TmF0aXZlQ29tcG9uZW50IGZyb20gJy4vSW1hZ2VWaWV3TmF0aXZlQ29tcG9uZW50JztcblxuZnVuY3Rpb24gZ2V0U2l6ZShcbiAgdXJpOiBzdHJpbmcsXG4gIHN1Y2Nlc3M6ICh3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcikgPT4gdm9pZCxcbiAgZmFpbHVyZT86IChlcnJvcjogYW55KSA9PiB2b2lkLFxuKSB7XG4gIE5hdGl2ZUltYWdlTG9hZGVySU9TLmdldFNpemUodXJpKVxuICAgIC50aGVuKChbd2lkdGgsIGhlaWdodF0pID0+IHN1Y2Nlc3Mod2lkdGgsIGhlaWdodCkpXG4gICAgLmNhdGNoKFxuICAgICAgZmFpbHVyZSB8fFxuICAgICAgICBmdW5jdGlvbigpIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oJ0ZhaWxlZCB0byBnZXQgc2l6ZSBmb3IgaW1hZ2UgJyArIHVyaSk7XG4gICAgICAgIH0sXG4gICAgKTtcbn1cblxuZnVuY3Rpb24gZ2V0U2l6ZVdpdGhIZWFkZXJzKFxuICB1cmk6IHN0cmluZyxcbiAgaGVhZGVyczoge1tzdHJpbmddOiBzdHJpbmcsIC4uLn0sXG4gIHN1Y2Nlc3M6ICh3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcikgPT4gdm9pZCxcbiAgZmFpbHVyZT86IChlcnJvcjogYW55KSA9PiB2b2lkLFxuKTogYW55IHtcbiAgcmV0dXJuIE5hdGl2ZUltYWdlTG9hZGVySU9TLmdldFNpemVXaXRoSGVhZGVycyh1cmksIGhlYWRlcnMpXG4gICAgLnRoZW4oZnVuY3Rpb24oc2l6ZXMpIHtcbiAgICAgIHN1Y2Nlc3Moc2l6ZXMud2lkdGgsIHNpemVzLmhlaWdodCk7XG4gICAgfSlcbiAgICAuY2F0Y2goXG4gICAgICBmYWlsdXJlIHx8XG4gICAgICAgIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGNvbnNvbGUud2FybignRmFpbGVkIHRvIGdldCBzaXplIGZvciBpbWFnZTogJyArIHVyaSk7XG4gICAgICAgIH0sXG4gICAgKTtcbn1cblxuZnVuY3Rpb24gcHJlZmV0Y2godXJsOiBzdHJpbmcpOiBhbnkge1xuICByZXR1cm4gTmF0aXZlSW1hZ2VMb2FkZXJJT1MucHJlZmV0Y2hJbWFnZSh1cmwpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBxdWVyeUNhY2hlKFxuICB1cmxzOiBBcnJheTxzdHJpbmc+LFxuKTogUHJvbWlzZTx7W3N0cmluZ106ICdtZW1vcnknIHwgJ2Rpc2snIHwgJ2Rpc2svbWVtb3J5JywgLi4ufT4ge1xuICByZXR1cm4gYXdhaXQgTmF0aXZlSW1hZ2VMb2FkZXJJT1MucXVlcnlDYWNoZSh1cmxzKTtcbn1cblxudHlwZSBJbWFnZUNvbXBvbmVudFN0YXRpY3MgPSAkUmVhZE9ubHk8e3xcbiAgZ2V0U2l6ZTogdHlwZW9mIGdldFNpemUsXG4gIGdldFNpemVXaXRoSGVhZGVyczogdHlwZW9mIGdldFNpemVXaXRoSGVhZGVycyxcbiAgcHJlZmV0Y2g6IHR5cGVvZiBwcmVmZXRjaCxcbiAgcXVlcnlDYWNoZTogdHlwZW9mIHF1ZXJ5Q2FjaGUsXG4gIHJlc29sdmVBc3NldFNvdXJjZTogdHlwZW9mIHJlc29sdmVBc3NldFNvdXJjZSxcbiAgcHJvcFR5cGVzOiB0eXBlb2YgRGVwcmVjYXRlZEltYWdlUHJvcFR5cGUsXG58fT47XG5cbi8qKlxuICogQSBSZWFjdCBjb21wb25lbnQgZm9yIGRpc3BsYXlpbmcgZGlmZmVyZW50IHR5cGVzIG9mIGltYWdlcyxcbiAqIGluY2x1ZGluZyBuZXR3b3JrIGltYWdlcywgc3RhdGljIHJlc291cmNlcywgdGVtcG9yYXJ5IGxvY2FsIGltYWdlcywgYW5kXG4gKiBpbWFnZXMgZnJvbSBsb2NhbCBkaXNrLCBzdWNoIGFzIHRoZSBjYW1lcmEgcm9sbC5cbiAqXG4gKiBTZWUgaHR0cHM6Ly9yZWFjdG5hdGl2ZS5kZXYvZG9jcy9pbWFnZS5odG1sXG4gKi9cbmxldCBJbWFnZSA9IChwcm9wczogSW1hZ2VQcm9wc1R5cGUsIGZvcndhcmRlZFJlZikgPT4ge1xuICBjb25zdCBzb3VyY2UgPSByZXNvbHZlQXNzZXRTb3VyY2UocHJvcHMuc291cmNlKSB8fCB7XG4gICAgdXJpOiB1bmRlZmluZWQsXG4gICAgd2lkdGg6IHVuZGVmaW5lZCxcbiAgICBoZWlnaHQ6IHVuZGVmaW5lZCxcbiAgfTtcblxuICBsZXQgc291cmNlcztcbiAgbGV0IHN0eWxlOiBJbWFnZVN0eWxlUHJvcDtcbiAgaWYgKEFycmF5LmlzQXJyYXkoc291cmNlKSkge1xuICAgIC8vICRGbG93Rml4TWUgZmxhdHRlblN0eWxlIGlzIG5vdCBzdHJvbmcgZW5vdWdoXG4gICAgc3R5bGUgPSBmbGF0dGVuU3R5bGUoW3N0eWxlcy5iYXNlLCBwcm9wcy5zdHlsZV0pIHx8IHt9O1xuICAgIHNvdXJjZXMgPSBzb3VyY2U7XG4gIH0gZWxzZSB7XG4gICAgY29uc3Qge3dpZHRoLCBoZWlnaHQsIHVyaX0gPSBzb3VyY2U7XG4gICAgLy8gJEZsb3dGaXhNZSBmbGF0dGVuU3R5bGUgaXMgbm90IHN0cm9uZyBlbm91Z2hcbiAgICBzdHlsZSA9IGZsYXR0ZW5TdHlsZShbe3dpZHRoLCBoZWlnaHR9LCBzdHlsZXMuYmFzZSwgcHJvcHMuc3R5bGVdKSB8fCB7fTtcbiAgICBzb3VyY2VzID0gW3NvdXJjZV07XG5cbiAgICBpZiAodXJpID09PSAnJykge1xuICAgICAgY29uc29sZS53YXJuKCdzb3VyY2UudXJpIHNob3VsZCBub3QgYmUgYW4gZW1wdHkgc3RyaW5nJyk7XG4gICAgfVxuICB9XG5cbiAgY29uc3QgcmVzaXplTW9kZSA9IHByb3BzLnJlc2l6ZU1vZGUgfHwgc3R5bGUucmVzaXplTW9kZSB8fCAnY292ZXInO1xuICBjb25zdCB0aW50Q29sb3IgPSBzdHlsZS50aW50Q29sb3I7XG5cbiAgaWYgKHByb3BzLnNyYyAhPSBudWxsKSB7XG4gICAgY29uc29sZS53YXJuKFxuICAgICAgJ1RoZSA8SW1hZ2U+IGNvbXBvbmVudCByZXF1aXJlcyBhIGBzb3VyY2VgIHByb3BlcnR5IHJhdGhlciB0aGFuIGBzcmNgLicsXG4gICAgKTtcbiAgfVxuXG4gIGlmIChwcm9wcy5jaGlsZHJlbiAhPSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ1RoZSA8SW1hZ2U+IGNvbXBvbmVudCBjYW5ub3QgY29udGFpbiBjaGlsZHJlbi4gSWYgeW91IHdhbnQgdG8gcmVuZGVyIGNvbnRlbnQgb24gdG9wIG9mIHRoZSBpbWFnZSwgY29uc2lkZXIgdXNpbmcgdGhlIDxJbWFnZUJhY2tncm91bmQ+IGNvbXBvbmVudCBvciBhYnNvbHV0ZSBwb3NpdGlvbmluZy4nLFxuICAgICk7XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxJbWFnZVZpZXdOYXRpdmVDb21wb25lbnRcbiAgICAgIHsuLi5wcm9wc31cbiAgICAgIHJlZj17Zm9yd2FyZGVkUmVmfVxuICAgICAgc3R5bGU9e3N0eWxlfVxuICAgICAgcmVzaXplTW9kZT17cmVzaXplTW9kZX1cbiAgICAgIHRpbnRDb2xvcj17dGludENvbG9yfVxuICAgICAgc291cmNlPXtzb3VyY2VzfVxuICAgIC8+XG4gICk7XG59O1xuXG5JbWFnZSA9IFJlYWN0LmZvcndhcmRSZWY8XG4gIEltYWdlUHJvcHNUeXBlLFxuICBSZWFjdC5FbGVtZW50UmVmPHR5cGVvZiBJbWFnZVZpZXdOYXRpdmVDb21wb25lbnQ+LFxuPihJbWFnZSk7XG5JbWFnZS5kaXNwbGF5TmFtZSA9ICdJbWFnZSc7XG5cbi8qKlxuICogUmV0cmlldmUgdGhlIHdpZHRoIGFuZCBoZWlnaHQgKGluIHBpeGVscykgb2YgYW4gaW1hZ2UgcHJpb3IgdG8gZGlzcGxheWluZyBpdC5cbiAqXG4gKiBTZWUgaHR0cHM6Ly9yZWFjdG5hdGl2ZS5kZXYvZG9jcy9pbWFnZS5odG1sI2dldHNpemVcbiAqL1xuLyogJEZsb3dGaXhNZSg+PTAuODkuMCBzaXRlPXJlYWN0X25hdGl2ZV9pb3NfZmIpIFRoaXMgY29tbWVudCBzdXBwcmVzc2VzIGFuXG4gKiBlcnJvciBmb3VuZCB3aGVuIEZsb3cgdjAuODkgd2FzIGRlcGxveWVkLiBUbyBzZWUgdGhlIGVycm9yLCBkZWxldGUgdGhpc1xuICogY29tbWVudCBhbmQgcnVuIEZsb3cuICovXG5JbWFnZS5nZXRTaXplID0gZ2V0U2l6ZTtcblxuLyoqXG4gKiBSZXRyaWV2ZSB0aGUgd2lkdGggYW5kIGhlaWdodCAoaW4gcGl4ZWxzKSBvZiBhbiBpbWFnZSBwcmlvciB0byBkaXNwbGF5aW5nIGl0XG4gKiB3aXRoIHRoZSBhYmlsaXR5IHRvIHByb3ZpZGUgdGhlIGhlYWRlcnMgZm9yIHRoZSByZXF1ZXN0LlxuICpcbiAqIFNlZSBodHRwczovL3JlYWN0bmF0aXZlLmRldi9kb2NzL2ltYWdlLmh0bWwjZ2V0c2l6ZXdpdGhoZWFkZXJzXG4gKi9cbi8qICRGbG93Rml4TWUoPj0wLjg5LjAgc2l0ZT1yZWFjdF9uYXRpdmVfaW9zX2ZiKSBUaGlzIGNvbW1lbnQgc3VwcHJlc3NlcyBhblxuICogZXJyb3IgZm91bmQgd2hlbiBGbG93IHYwLjg5IHdhcyBkZXBsb3llZC4gVG8gc2VlIHRoZSBlcnJvciwgZGVsZXRlIHRoaXNcbiAqIGNvbW1lbnQgYW5kIHJ1biBGbG93LiAqL1xuSW1hZ2UuZ2V0U2l6ZVdpdGhIZWFkZXJzID0gZ2V0U2l6ZVdpdGhIZWFkZXJzO1xuXG4vKipcbiAqIFByZWZldGNoZXMgYSByZW1vdGUgaW1hZ2UgZm9yIGxhdGVyIHVzZSBieSBkb3dubG9hZGluZyBpdCB0byB0aGUgZGlza1xuICogY2FjaGUuXG4gKlxuICogU2VlIGh0dHBzOi8vcmVhY3RuYXRpdmUuZGV2L2RvY3MvaW1hZ2UuaHRtbCNwcmVmZXRjaFxuICovXG4vKiAkRmxvd0ZpeE1lKD49MC44OS4wIHNpdGU9cmVhY3RfbmF0aXZlX2lvc19mYikgVGhpcyBjb21tZW50IHN1cHByZXNzZXMgYW5cbiAqIGVycm9yIGZvdW5kIHdoZW4gRmxvdyB2MC44OSB3YXMgZGVwbG95ZWQuIFRvIHNlZSB0aGUgZXJyb3IsIGRlbGV0ZSB0aGlzXG4gKiBjb21tZW50IGFuZCBydW4gRmxvdy4gKi9cbkltYWdlLnByZWZldGNoID0gcHJlZmV0Y2g7XG5cbi8qKlxuICogUGVyZm9ybXMgY2FjaGUgaW50ZXJyb2dhdGlvbi5cbiAqXG4gKiAgU2VlIGh0dHBzOi8vcmVhY3RuYXRpdmUuZGV2L2RvY3MvaW1hZ2UuaHRtbCNxdWVyeWNhY2hlXG4gKi9cbi8qICRGbG93Rml4TWUoPj0wLjg5LjAgc2l0ZT1yZWFjdF9uYXRpdmVfaW9zX2ZiKSBUaGlzIGNvbW1lbnQgc3VwcHJlc3NlcyBhblxuICogZXJyb3IgZm91bmQgd2hlbiBGbG93IHYwLjg5IHdhcyBkZXBsb3llZC4gVG8gc2VlIHRoZSBlcnJvciwgZGVsZXRlIHRoaXNcbiAqIGNvbW1lbnQgYW5kIHJ1biBGbG93LiAqL1xuSW1hZ2UucXVlcnlDYWNoZSA9IHF1ZXJ5Q2FjaGU7XG5cbi8qKlxuICogUmVzb2x2ZXMgYW4gYXNzZXQgcmVmZXJlbmNlIGludG8gYW4gb2JqZWN0LlxuICpcbiAqIFNlZSBodHRwczovL3JlYWN0bmF0aXZlLmRldi9kb2NzL2ltYWdlLmh0bWwjcmVzb2x2ZWFzc2V0c291cmNlXG4gKi9cbi8qICRGbG93Rml4TWUoPj0wLjg5LjAgc2l0ZT1yZWFjdF9uYXRpdmVfaW9zX2ZiKSBUaGlzIGNvbW1lbnQgc3VwcHJlc3NlcyBhblxuICogZXJyb3IgZm91bmQgd2hlbiBGbG93IHYwLjg5IHdhcyBkZXBsb3llZC4gVG8gc2VlIHRoZSBlcnJvciwgZGVsZXRlIHRoaXNcbiAqIGNvbW1lbnQgYW5kIHJ1biBGbG93LiAqL1xuSW1hZ2UucmVzb2x2ZUFzc2V0U291cmNlID0gcmVzb2x2ZUFzc2V0U291cmNlO1xuXG4vKiAkRmxvd0ZpeE1lKD49MC44OS4wIHNpdGU9cmVhY3RfbmF0aXZlX2lvc19mYikgVGhpcyBjb21tZW50IHN1cHByZXNzZXMgYW5cbiAqIGVycm9yIGZvdW5kIHdoZW4gRmxvdyB2MC44OSB3YXMgZGVwbG95ZWQuIFRvIHNlZSB0aGUgZXJyb3IsIGRlbGV0ZSB0aGlzXG4gKiBjb21tZW50IGFuZCBydW4gRmxvdy4gKi9cbkltYWdlLnByb3BUeXBlcyA9IERlcHJlY2F0ZWRJbWFnZVByb3BUeXBlO1xuXG5jb25zdCBzdHlsZXMgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7XG4gIGJhc2U6IHtcbiAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gIH0sXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSAoKEltYWdlOiBhbnkpOiBSZWFjdC5BYnN0cmFjdENvbXBvbmVudDxcbiAgSW1hZ2VQcm9wc1R5cGUsXG4gIFJlYWN0LkVsZW1lbnRSZWY8dHlwZW9mIEltYWdlVmlld05hdGl2ZUNvbXBvbmVudD4sXG4+ICZcbiAgSW1hZ2VDb21wb25lbnRTdGF0aWNzKTtcbiJdfQ==