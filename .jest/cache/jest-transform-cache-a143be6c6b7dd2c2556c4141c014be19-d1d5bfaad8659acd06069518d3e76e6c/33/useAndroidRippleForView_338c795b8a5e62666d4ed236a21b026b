c907ef29f4809a4104a1c90c9e32a31d
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useAndroidRippleForView;

var _invariant = _interopRequireDefault(require("invariant"));

var _ViewNativeComponent = require("../View/ViewNativeComponent");

var _reactNative = require("react-native");

var React = _interopRequireWildcard(require("react"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function useAndroidRippleForView(rippleConfig, viewRef) {
  var _ref = rippleConfig != null ? rippleConfig : {},
      color = _ref.color,
      borderless = _ref.borderless,
      radius = _ref.radius;

  var normalizedBorderless = borderless === true;
  return (0, React.useMemo)(function () {
    if (_reactNative.Platform.OS === 'android' && _reactNative.Platform.Version >= 21 && (color != null || normalizedBorderless || radius != null)) {
      var processedColor = (0, _reactNative.processColor)(color);
      (0, _invariant.default)(processedColor == null || typeof processedColor === 'number', 'Unexpected color given for Ripple color');
      return {
        viewProps: {
          nativeBackgroundAndroid: {
            type: 'RippleAndroid',
            color: processedColor,
            borderless: normalizedBorderless,
            rippleRadius: radius
          }
        },
        onPressIn: function onPressIn(event) {
          var view = viewRef.current;

          if (view != null) {
            var _event$nativeEvent$lo, _event$nativeEvent$lo2;

            _ViewNativeComponent.Commands.setPressed(view, true);

            _ViewNativeComponent.Commands.hotspotUpdate(view, (_event$nativeEvent$lo = event.nativeEvent.locationX) != null ? _event$nativeEvent$lo : 0, (_event$nativeEvent$lo2 = event.nativeEvent.locationY) != null ? _event$nativeEvent$lo2 : 0);
          }
        },
        onPressMove: function onPressMove(event) {
          var view = viewRef.current;

          if (view != null) {
            var _event$nativeEvent$lo3, _event$nativeEvent$lo4;

            _ViewNativeComponent.Commands.hotspotUpdate(view, (_event$nativeEvent$lo3 = event.nativeEvent.locationX) != null ? _event$nativeEvent$lo3 : 0, (_event$nativeEvent$lo4 = event.nativeEvent.locationY) != null ? _event$nativeEvent$lo4 : 0);
          }
        },
        onPressOut: function onPressOut(event) {
          var view = viewRef.current;

          if (view != null) {
            _ViewNativeComponent.Commands.setPressed(view, false);
          }
        }
      };
    }

    return null;
  }, [color, normalizedBorderless, radius, viewRef]);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVzZUFuZHJvaWRSaXBwbGVGb3JWaWV3LmpzIl0sIm5hbWVzIjpbInVzZUFuZHJvaWRSaXBwbGVGb3JWaWV3IiwicmlwcGxlQ29uZmlnIiwidmlld1JlZiIsImNvbG9yIiwiYm9yZGVybGVzcyIsInJhZGl1cyIsIm5vcm1hbGl6ZWRCb3JkZXJsZXNzIiwiUGxhdGZvcm0iLCJPUyIsIlZlcnNpb24iLCJwcm9jZXNzZWRDb2xvciIsInZpZXdQcm9wcyIsIm5hdGl2ZUJhY2tncm91bmRBbmRyb2lkIiwidHlwZSIsInJpcHBsZVJhZGl1cyIsIm9uUHJlc3NJbiIsImV2ZW50IiwidmlldyIsImN1cnJlbnQiLCJDb21tYW5kcyIsInNldFByZXNzZWQiLCJob3RzcG90VXBkYXRlIiwibmF0aXZlRXZlbnQiLCJsb2NhdGlvblgiLCJsb2NhdGlvblkiLCJvblByZXNzTW92ZSIsIm9uUHJlc3NPdXQiXSwibWFwcGluZ3MiOiJBQVVBOzs7Ozs7Ozs7QUFFQTs7QUFDQTs7QUFHQTs7QUFDQTs7Ozs7O0FBb0JlLFNBQVNBLHVCQUFULENBQ2JDLFlBRGEsRUFFYkMsT0FGYSxFQVVYO0FBQ0YsYUFBb0NELFlBQXBDLFdBQW9DQSxZQUFwQyxHQUFvRCxFQUFwRDtBQUFBLE1BQU9FLEtBQVAsUUFBT0EsS0FBUDtBQUFBLE1BQWNDLFVBQWQsUUFBY0EsVUFBZDtBQUFBLE1BQTBCQyxNQUExQixRQUEwQkEsTUFBMUI7O0FBQ0EsTUFBTUMsb0JBQW9CLEdBQUdGLFVBQVUsS0FBSyxJQUE1QztBQUVBLFNBQU8sbUJBQVEsWUFBTTtBQUNuQixRQUNFRyxzQkFBU0MsRUFBVCxLQUFnQixTQUFoQixJQUNBRCxzQkFBU0UsT0FBVCxJQUFvQixFQURwQixLQUVDTixLQUFLLElBQUksSUFBVCxJQUFpQkcsb0JBQWpCLElBQXlDRCxNQUFNLElBQUksSUFGcEQsQ0FERixFQUlFO0FBQ0EsVUFBTUssY0FBYyxHQUFHLCtCQUFhUCxLQUFiLENBQXZCO0FBQ0EsOEJBQ0VPLGNBQWMsSUFBSSxJQUFsQixJQUEwQixPQUFPQSxjQUFQLEtBQTBCLFFBRHRELEVBRUUseUNBRkY7QUFLQSxhQUFPO0FBQ0xDLFFBQUFBLFNBQVMsRUFBRTtBQUVUQyxVQUFBQSx1QkFBdUIsRUFBRTtBQUN2QkMsWUFBQUEsSUFBSSxFQUFFLGVBRGlCO0FBRXZCVixZQUFBQSxLQUFLLEVBQUVPLGNBRmdCO0FBR3ZCTixZQUFBQSxVQUFVLEVBQUVFLG9CQUhXO0FBSXZCUSxZQUFBQSxZQUFZLEVBQUVUO0FBSlM7QUFGaEIsU0FETjtBQVVMVSxRQUFBQSxTQVZLLHFCQVVLQyxLQVZMLEVBVThCO0FBQ2pDLGNBQU1DLElBQUksR0FBR2YsT0FBTyxDQUFDZ0IsT0FBckI7O0FBQ0EsY0FBSUQsSUFBSSxJQUFJLElBQVosRUFBa0I7QUFBQTs7QUFDaEJFLDBDQUFTQyxVQUFULENBQW9CSCxJQUFwQixFQUEwQixJQUExQjs7QUFDQUUsMENBQVNFLGFBQVQsQ0FDRUosSUFERiwyQkFFRUQsS0FBSyxDQUFDTSxXQUFOLENBQWtCQyxTQUZwQixvQ0FFaUMsQ0FGakMsNEJBR0VQLEtBQUssQ0FBQ00sV0FBTixDQUFrQkUsU0FIcEIscUNBR2lDLENBSGpDO0FBS0Q7QUFDRixTQXBCSTtBQXFCTEMsUUFBQUEsV0FyQkssdUJBcUJPVCxLQXJCUCxFQXFCZ0M7QUFDbkMsY0FBTUMsSUFBSSxHQUFHZixPQUFPLENBQUNnQixPQUFyQjs7QUFDQSxjQUFJRCxJQUFJLElBQUksSUFBWixFQUFrQjtBQUFBOztBQUNoQkUsMENBQVNFLGFBQVQsQ0FDRUosSUFERiw0QkFFRUQsS0FBSyxDQUFDTSxXQUFOLENBQWtCQyxTQUZwQixxQ0FFaUMsQ0FGakMsNEJBR0VQLEtBQUssQ0FBQ00sV0FBTixDQUFrQkUsU0FIcEIscUNBR2lDLENBSGpDO0FBS0Q7QUFDRixTQTlCSTtBQStCTEUsUUFBQUEsVUEvQkssc0JBK0JNVixLQS9CTixFQStCK0I7QUFDbEMsY0FBTUMsSUFBSSxHQUFHZixPQUFPLENBQUNnQixPQUFyQjs7QUFDQSxjQUFJRCxJQUFJLElBQUksSUFBWixFQUFrQjtBQUNoQkUsMENBQVNDLFVBQVQsQ0FBb0JILElBQXBCLEVBQTBCLEtBQTFCO0FBQ0Q7QUFDRjtBQXBDSSxPQUFQO0FBc0NEOztBQUNELFdBQU8sSUFBUDtBQUNELEdBcERNLEVBb0RKLENBQUNkLEtBQUQsRUFBUUcsb0JBQVIsRUFBOEJELE1BQTlCLEVBQXNDSCxPQUF0QyxDQXBESSxDQUFQO0FBcUREIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvdyBzdHJpY3QtbG9jYWxcbiAqIEBmb3JtYXRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnaW52YXJpYW50JztcbmltcG9ydCB7Q29tbWFuZHN9IGZyb20gJy4uL1ZpZXcvVmlld05hdGl2ZUNvbXBvbmVudCc7XG5pbXBvcnQgdHlwZSB7Q29sb3JWYWx1ZX0gZnJvbSAnLi4vLi4vU3R5bGVTaGVldC9TdHlsZVNoZWV0VHlwZXMnO1xuaW1wb3J0IHR5cGUge1ByZXNzRXZlbnR9IGZyb20gJy4uLy4uL1R5cGVzL0NvcmVFdmVudFR5cGVzJztcbmltcG9ydCB7UGxhdGZvcm0sIFZpZXcsIHByb2Nlc3NDb2xvcn0gZnJvbSAncmVhY3QtbmF0aXZlJztcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7dXNlTWVtb30gZnJvbSAncmVhY3QnO1xuXG50eXBlIE5hdGl2ZUJhY2tncm91bmRQcm9wID0gJFJlYWRPbmx5PHt8XG4gIHR5cGU6ICdSaXBwbGVBbmRyb2lkJyxcbiAgY29sb3I6ID9udW1iZXIsXG4gIGJvcmRlcmxlc3M6IGJvb2xlYW4sXG4gIHJpcHBsZVJhZGl1czogP251bWJlcixcbnx9PjtcblxuZXhwb3J0IHR5cGUgUmlwcGxlQ29uZmlnID0ge3xcbiAgY29sb3I/OiA/Q29sb3JWYWx1ZSxcbiAgYm9yZGVybGVzcz86ID9ib29sZWFuLFxuICByYWRpdXM/OiA/bnVtYmVyLFxufH07XG5cbi8qKlxuICogUHJvdmlkZXMgdGhlIGV2ZW50IGhhbmRsZXJzIGFuZCBwcm9wcyBmb3IgY29uZmlndXJpbmcgdGhlIHJpcHBsZSBlZmZlY3Qgb25cbiAqIHN1cHBvcnRlZCB2ZXJzaW9ucyBvZiBBbmRyb2lkLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VBbmRyb2lkUmlwcGxlRm9yVmlldyhcbiAgcmlwcGxlQ29uZmlnOiA/UmlwcGxlQ29uZmlnLFxuICB2aWV3UmVmOiB7fGN1cnJlbnQ6IG51bGwgfCBSZWFjdC5FbGVtZW50UmVmPHR5cGVvZiBWaWV3Pnx9LFxuKTogPyRSZWFkT25seTx7fFxuICBvblByZXNzSW46IChldmVudDogUHJlc3NFdmVudCkgPT4gdm9pZCxcbiAgb25QcmVzc01vdmU6IChldmVudDogUHJlc3NFdmVudCkgPT4gdm9pZCxcbiAgb25QcmVzc091dDogKGV2ZW50OiBQcmVzc0V2ZW50KSA9PiB2b2lkLFxuICB2aWV3UHJvcHM6ICRSZWFkT25seTx7fFxuICAgIG5hdGl2ZUJhY2tncm91bmRBbmRyb2lkOiBOYXRpdmVCYWNrZ3JvdW5kUHJvcCxcbiAgfH0+LFxufH0+IHtcbiAgY29uc3Qge2NvbG9yLCBib3JkZXJsZXNzLCByYWRpdXN9ID0gcmlwcGxlQ29uZmlnID8/IHt9O1xuICBjb25zdCBub3JtYWxpemVkQm9yZGVybGVzcyA9IGJvcmRlcmxlc3MgPT09IHRydWU7XG5cbiAgcmV0dXJuIHVzZU1lbW8oKCkgPT4ge1xuICAgIGlmIChcbiAgICAgIFBsYXRmb3JtLk9TID09PSAnYW5kcm9pZCcgJiZcbiAgICAgIFBsYXRmb3JtLlZlcnNpb24gPj0gMjEgJiZcbiAgICAgIChjb2xvciAhPSBudWxsIHx8IG5vcm1hbGl6ZWRCb3JkZXJsZXNzIHx8IHJhZGl1cyAhPSBudWxsKVxuICAgICkge1xuICAgICAgY29uc3QgcHJvY2Vzc2VkQ29sb3IgPSBwcm9jZXNzQ29sb3IoY29sb3IpO1xuICAgICAgaW52YXJpYW50KFxuICAgICAgICBwcm9jZXNzZWRDb2xvciA9PSBudWxsIHx8IHR5cGVvZiBwcm9jZXNzZWRDb2xvciA9PT0gJ251bWJlcicsXG4gICAgICAgICdVbmV4cGVjdGVkIGNvbG9yIGdpdmVuIGZvciBSaXBwbGUgY29sb3InLFxuICAgICAgKTtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdmlld1Byb3BzOiB7XG4gICAgICAgICAgLy8gQ29uc2lkZXIgc3VwcG9ydGluZyBgbmF0aXZlRm9yZWdyb3VuZEFuZHJvaWRgXG4gICAgICAgICAgbmF0aXZlQmFja2dyb3VuZEFuZHJvaWQ6IHtcbiAgICAgICAgICAgIHR5cGU6ICdSaXBwbGVBbmRyb2lkJyxcbiAgICAgICAgICAgIGNvbG9yOiBwcm9jZXNzZWRDb2xvcixcbiAgICAgICAgICAgIGJvcmRlcmxlc3M6IG5vcm1hbGl6ZWRCb3JkZXJsZXNzLFxuICAgICAgICAgICAgcmlwcGxlUmFkaXVzOiByYWRpdXMsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgb25QcmVzc0luKGV2ZW50OiBQcmVzc0V2ZW50KTogdm9pZCB7XG4gICAgICAgICAgY29uc3QgdmlldyA9IHZpZXdSZWYuY3VycmVudDtcbiAgICAgICAgICBpZiAodmlldyAhPSBudWxsKSB7XG4gICAgICAgICAgICBDb21tYW5kcy5zZXRQcmVzc2VkKHZpZXcsIHRydWUpO1xuICAgICAgICAgICAgQ29tbWFuZHMuaG90c3BvdFVwZGF0ZShcbiAgICAgICAgICAgICAgdmlldyxcbiAgICAgICAgICAgICAgZXZlbnQubmF0aXZlRXZlbnQubG9jYXRpb25YID8/IDAsXG4gICAgICAgICAgICAgIGV2ZW50Lm5hdGl2ZUV2ZW50LmxvY2F0aW9uWSA/PyAwLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG9uUHJlc3NNb3ZlKGV2ZW50OiBQcmVzc0V2ZW50KTogdm9pZCB7XG4gICAgICAgICAgY29uc3QgdmlldyA9IHZpZXdSZWYuY3VycmVudDtcbiAgICAgICAgICBpZiAodmlldyAhPSBudWxsKSB7XG4gICAgICAgICAgICBDb21tYW5kcy5ob3RzcG90VXBkYXRlKFxuICAgICAgICAgICAgICB2aWV3LFxuICAgICAgICAgICAgICBldmVudC5uYXRpdmVFdmVudC5sb2NhdGlvblggPz8gMCxcbiAgICAgICAgICAgICAgZXZlbnQubmF0aXZlRXZlbnQubG9jYXRpb25ZID8/IDAsXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgb25QcmVzc091dChldmVudDogUHJlc3NFdmVudCk6IHZvaWQge1xuICAgICAgICAgIGNvbnN0IHZpZXcgPSB2aWV3UmVmLmN1cnJlbnQ7XG4gICAgICAgICAgaWYgKHZpZXcgIT0gbnVsbCkge1xuICAgICAgICAgICAgQ29tbWFuZHMuc2V0UHJlc3NlZCh2aWV3LCBmYWxzZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH0sIFtjb2xvciwgbm9ybWFsaXplZEJvcmRlcmxlc3MsIHJhZGl1cywgdmlld1JlZl0pO1xufVxuIl19