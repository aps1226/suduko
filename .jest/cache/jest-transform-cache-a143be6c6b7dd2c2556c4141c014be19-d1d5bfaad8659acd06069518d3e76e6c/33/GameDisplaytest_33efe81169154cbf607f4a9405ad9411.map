{"version":3,"sources":["C:\\Users\\ashee\\Documents\\Javascript\\React\\React Native\\suduko\\src\\__tests__\\Component Tests\\GameDisplay.test.tsx"],"names":[],"mappings":";;AAAA;;AAEA;;AACA;;AAOA;;AAGA,IAAM,OAAO,GAAG,mCAAhB;AACA,IAAM,IAAI,eAAV;AACA,IAAM,KAAK,GAA0B;AACjC,EAAA,OAAO,EAAE,KADwB;AAEjC,EAAA,IAAI,EAAJ,IAFiC;AAGjC,EAAA,GAAG,EAAE,IAAI,CAAC,OAAL,CAAa,KAAb,EAAoB,GAApB,CAH4B;AAIjC,EAAA,MAAM,EAAE;AAAE,IAAA,EAAE,EAAE;AAAN;AAJyB,CAArC;AAMA,IAAM,QAAQ,GAAG,6BAAe,KAAK,CAAC,GAArB,CAAjB;AAGA,QAAQ,CAAC,aAAD,EAAe,YAAK;AAG1B,MAAM,SAAS,GAAa,EAA5B;AAEA,MAAI,oBAAJ;AACA,EAAA,UAAU,CAAC,YAAK;AACb,IAAA,oBAAoB,GAAG,8BACtB,eAAA,aAAA,CAAC,oBAAD,EAAY;AACV,MAAA,OAAO,EAAE,OADC;AAEV,MAAA,QAAQ,EAAE,QAFA;AAGV,MAAA,KAAK,EAAE;AAHG,KAAZ,CADsB,EAMtB;AACE,MAAA,YAAY,EAAC;AADf,KANsB,CAAvB;AAUF,GAXS,CAAV;AAcA,EAAA,EAAE,CAAC,0BAAD,EAA6B,YAAI;AACjC,IAAA,MAAM,CAAC,oBAAoB,CAAC,MAArB,EAAD,CAAN,CAAsC,eAAtC;AACD,GAFC,CAAF;AAID,CAxBO,CAAR","sourcesContent":["import React from 'react';\r\nimport { Text,View } from \"react-native\";\r\nimport renderWithRedux from './renderWithRedux';\r\nimport { createMemoryHistory, createLocation } from 'history';\r\nimport { match } from 'react-router';\r\nimport { fireEvent, render, waitFor} from '@testing-library/react-native';\r\nimport renderer from 'react-test-renderer';\r\nimport {GameState} from '../../../types';\r\nimport {RootState} from '../../state/reducers/index';\r\n\r\nimport GameDisplay from '../../../components/GameDisplay';\r\n\r\n//Mock props for routing.\r\nconst history = createMemoryHistory();\r\nconst path = `/route/:id`;\r\nconst match: match<{ id: string }> = {\r\n    isExact: false,\r\n    path,\r\n    url: path.replace(':id', '1'),\r\n    params: { id: \"1\" }\r\n};\r\nconst location = createLocation(match.url);\r\n\r\n//GameDisplay component test.\r\ndescribe('GameDisplay',() =>{\r\n\r\n  //Mock store object for state management.\r\n  const mockStore:RootState = {};\r\n  //Render GameDisplay component with routing and redux.\r\n  let gameDisplayComponent:any;\r\n  beforeEach(() =>{\r\n     gameDisplayComponent = renderWithRedux(\r\n      <GameDisplay\r\n        history={history}\r\n        location={location}\r\n        match={match}\r\n      />,\r\n      {\r\n        initialState:mockStore\r\n      }\r\n    );\r\n  })\r\n\r\n  //Component renders without crashing.\r\n  it('renders without crashing', ()=>{\r\n    expect(gameDisplayComponent.toJSON()).toMatchSnapshot();\r\n  })\r\n\r\n})\r\n"]}