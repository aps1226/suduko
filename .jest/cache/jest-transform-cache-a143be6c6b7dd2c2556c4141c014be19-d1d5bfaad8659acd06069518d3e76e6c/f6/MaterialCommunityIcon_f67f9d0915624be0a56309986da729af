761c8bf0f6c156b45b95e99215f52014
"use strict";var _excluded = ["name", "color", "size"];

Object.defineProperty(exports, "__esModule", {
  value: true });

exports.default = exports.accessibilityProps = void 0;

var React = _interopRequireWildcard(require("react"));



function _getRequireWildcardCache() {if (typeof WeakMap !== "function") return null;var cache = new WeakMap();_getRequireWildcardCache = function _getRequireWildcardCache() {return cache;};return cache;}

function _interopRequireWildcard(obj) {if (obj && obj.__esModule) {return obj;}if (obj === null || typeof obj !== "object" && typeof obj !== "function") {return { default: obj };}var cache = _getRequireWildcardCache();if (cache && cache.has(obj)) {return cache.get(obj);}var newObj = {};var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;for (var key in obj) {if (Object.prototype.hasOwnProperty.call(obj, key)) {var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;if (desc && (desc.get || desc.set)) {Object.defineProperty(newObj, key, desc);} else {newObj[key] = obj[key];}}}newObj.default = obj;if (cache) {cache.set(obj, newObj);}return newObj;}

function _extends() {_extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};return _extends.apply(this, arguments);}

var MaterialCommunityIcons;

try {

  MaterialCommunityIcons = require("@expo/vector-icons/MaterialCommunityIcons").default;
} catch (e) {
  var isErrorLogged = false;

  MaterialCommunityIcons = function MaterialCommunityIcons(_ref)




  {var name = _ref.name,color = _ref.color,size = _ref.size,rest = require("@babel/runtime/helpers/objectWithoutProperties")(_ref, _excluded);

    if (!isErrorLogged) {
      if (!/(Cannot find module|Module not found|Cannot resolve module)/.test(e.message)) {
        console.error(e);
      }

      console.warn("Tried to use the icon '".concat(name, "' in a component from 'react-native-paper', but 'react-native-vector-icons/MaterialCommunityIcons' could not be loaded."), "To remove this warning, try installing 'react-native-vector-icons' or use another method to specify icon: https://callstack.github.io/react-native-paper/icons.html.");
      isErrorLogged = true;
    }

    return React.createElement(require("react-native").Text, _extends({}, rest, {
      style: [styles.icon, {
        color: color,
        fontSize: size }],


      pointerEvents: "none",
      selectable: false }),
    "\u25A1");
  };
}

var accessibilityProps = require("react-native").Platform.OS === 'web' ? {
  role: 'img',
  focusable: false } :
{
  accessibilityElementsHidden: true,
  importantForAccessibility: 'no-hide-descendants' };

exports.accessibilityProps = accessibilityProps;

var defaultIcon = function defaultIcon(_ref2) {var
  name = _ref2.name,
  color = _ref2.color,
  size = _ref2.size,
  direction = _ref2.direction,
  allowFontScaling = _ref2.allowFontScaling;return (
    React.createElement(MaterialCommunityIcons, _extends({
      allowFontScaling: allowFontScaling,
      name: name,
      color: color,
      size: size,
      style: [{
        transform: [{
          scaleX: direction === 'rtl' ? -1 : 1 }],

        lineHeight: size },
      styles.icon],
      pointerEvents: "none",
      selectable: false },
    accessibilityProps)));};

var styles = require("react-native").StyleSheet.create({
  icon: {
    backgroundColor: 'transparent' } });



var _default = defaultIcon;
exports.default = _default;