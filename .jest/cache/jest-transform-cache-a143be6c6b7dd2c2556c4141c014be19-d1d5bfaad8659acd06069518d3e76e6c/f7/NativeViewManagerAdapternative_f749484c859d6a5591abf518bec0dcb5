a072f1a2127615c2c1d1b278a2228440
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.requireNativeViewManager = requireNativeViewManager;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var ViewPropTypesKeys = Object.keys(_reactNative.ViewPropTypes);

function requireNativeViewManager(viewName) {
  if (__DEV__) {
    var NativeUnimoduleProxy = _reactNative.NativeModules.NativeUnimoduleProxy;

    if (!NativeUnimoduleProxy.viewManagersNames.includes(viewName)) {
      var exportedViewManagerNames = NativeUnimoduleProxy.viewManagersNames.join(', ');
      console.warn("The native view manager required by name (" + viewName + ") from NativeViewManagerAdapter isn't exported by @unimodules/react-native-adapter. Views of this type may not render correctly. Exported view managers: [" + exportedViewManagerNames + "].");
    }
  }

  var reactNativeViewName = "ViewManagerAdapter_" + viewName;
  var ReactNativeComponent = (0, _reactNative.requireNativeComponent)(reactNativeViewName);
  var reactNativeUIConfiguration = (_reactNative.UIManager.getViewManagerConfig ? _reactNative.UIManager.getViewManagerConfig(reactNativeViewName) : _reactNative.UIManager[reactNativeViewName]) || {
    NativeProps: {},
    directEventTypes: {}
  };
  var reactNativeComponentPropNames = ['children'].concat((0, _toConsumableArray2.default)(ViewPropTypesKeys), (0, _toConsumableArray2.default)(Object.keys(reactNativeUIConfiguration.NativeProps)), (0, _toConsumableArray2.default)(Object.keys(reactNativeUIConfiguration.directEventTypes)));

  function NativeComponentAdapter(props, ref) {
    var nativeProps = pick(props, reactNativeComponentPropNames);
    var proxiedProps = omit(props, reactNativeComponentPropNames);
    return _react.default.createElement(ReactNativeComponent, (0, _extends2.default)({}, nativeProps, {
      proxiedProperties: proxiedProps,
      ref: ref
    }));
  }

  NativeComponentAdapter.displayName = "Adapter<" + viewName + ">";
  return _react.default.forwardRef(NativeComponentAdapter);
}

function omit(props, propNames) {
  var copied = _objectSpread({}, props);

  for (var _iterator = _createForOfIteratorHelperLoose(propNames), _step; !(_step = _iterator()).done;) {
    var propName = _step.value;
    delete copied[propName];
  }

  return copied;
}

function pick(props, propNames) {
  return propNames.reduce(function (prev, curr) {
    if (curr in props) {
      prev[curr] = props[curr];
    }

    return prev;
  }, {});
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9OYXRpdmVWaWV3TWFuYWdlckFkYXB0ZXIubmF0aXZlLnRzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7Ozs7Ozs7Ozs7OztBQWNBLElBQU0saUJBQWlCLEdBQUcsTUFBTSxDQUFDLElBQVAsQ0FBWSwwQkFBWixDQUExQjs7QUFTTSxTQUFVLHdCQUFWLENBQTRDLFFBQTVDLEVBQTREO0FBQ2hFLE1BQUksT0FBSixFQUFhO0FBQ1gsUUFBUSxvQkFBUixHQUFpQywwQkFBakMsQ0FBUSxvQkFBUjs7QUFDQSxRQUFJLENBQUMsb0JBQW9CLENBQUMsaUJBQXJCLENBQXVDLFFBQXZDLENBQWdELFFBQWhELENBQUwsRUFBZ0U7QUFDOUQsVUFBTSx3QkFBd0IsR0FBRyxvQkFBb0IsQ0FBQyxpQkFBckIsQ0FBdUMsSUFBdkMsQ0FBNEMsSUFBNUMsQ0FBakM7QUFDQSxNQUFBLE9BQU8sQ0FBQyxJQUFSLGdEQUMrQyxRQUQvQyxrS0FDb04sd0JBRHBOO0FBR0Q7QUFDRjs7QUFJRCxNQUFNLG1CQUFtQiwyQkFBeUIsUUFBbEQ7QUFDQSxNQUFNLG9CQUFvQixHQUFHLHlDQUMzQixtQkFEMkIsQ0FBN0I7QUFHQSxNQUFNLDBCQUEwQixHQUFHLENBQUMsdUJBQVUsb0JBQVYsR0FDaEMsdUJBQVUsb0JBQVYsQ0FBK0IsbUJBQS9CLENBRGdDLEdBRWhDLHVCQUFVLG1CQUFWLENBRitCLEtBRUk7QUFDckMsSUFBQSxXQUFXLEVBQUUsRUFEd0I7QUFFckMsSUFBQSxnQkFBZ0IsRUFBRTtBQUZtQixHQUZ2QztBQU1BLE1BQU0sNkJBQTZCLElBQ2pDLFVBRGlDLDBDQUU5QixpQkFGOEIsb0NBRzlCLE1BQU0sQ0FBQyxJQUFQLENBQVksMEJBQTBCLENBQUMsV0FBdkMsQ0FIOEIsb0NBSTlCLE1BQU0sQ0FBQyxJQUFQLENBQVksMEJBQTBCLENBQUMsZ0JBQXZDLENBSjhCLEVBQW5DOztBQVFBLFdBQVMsc0JBQVQsQ0FBZ0MsS0FBaEMsRUFBdUMsR0FBdkMsRUFBMEM7QUFDeEMsUUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLEtBQUQsRUFBUSw2QkFBUixDQUF4QjtBQUNBLFFBQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxLQUFELEVBQVEsNkJBQVIsQ0FBekI7QUFDQSxXQUFPLGVBQUEsYUFBQSxDQUFDLG9CQUFELEVBQXFCLHVCQUFBLEVBQUEsRUFBSyxXQUFMLEVBQWdCO0FBQUUsTUFBQSxpQkFBaUIsRUFBRSxZQUFyQjtBQUFtQyxNQUFBLEdBQUcsRUFBRTtBQUF4QyxLQUFoQixDQUFyQixDQUFQO0FBQ0Q7O0FBQ0QsRUFBQSxzQkFBc0IsQ0FBQyxXQUF2QixnQkFBZ0QsUUFBaEQ7QUFDQSxTQUFPLGVBQU0sVUFBTixDQUFpQixzQkFBakIsQ0FBUDtBQUNEOztBQUVELFNBQVMsSUFBVCxDQUFjLEtBQWQsRUFBMEMsU0FBMUMsRUFBNkQ7QUFDM0QsTUFBTSxNQUFNLHFCQUFRLEtBQVIsQ0FBWjs7QUFDQSx1REFBdUIsU0FBdkIsd0NBQWtDO0FBQUEsUUFBdkIsUUFBdUI7QUFDaEMsV0FBTyxNQUFNLENBQUMsUUFBRCxDQUFiO0FBQ0Q7O0FBQ0QsU0FBTyxNQUFQO0FBQ0Q7O0FBRUQsU0FBUyxJQUFULENBQWMsS0FBZCxFQUEwQyxTQUExQyxFQUE2RDtBQUMzRCxTQUFPLFNBQVMsQ0FBQyxNQUFWLENBQWlCLFVBQUMsSUFBRCxFQUFPLElBQVAsRUFBZTtBQUNyQyxRQUFJLElBQUksSUFBSSxLQUFaLEVBQW1CO0FBQ2pCLE1BQUEsSUFBSSxDQUFDLElBQUQsQ0FBSixHQUFhLEtBQUssQ0FBQyxJQUFELENBQWxCO0FBQ0Q7O0FBQ0QsV0FBTyxJQUFQO0FBQ0QsR0FMTSxFQUtKLEVBTEksQ0FBUDtBQU1EIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IE5hdGl2ZU1vZHVsZXMsIFVJTWFuYWdlciwgVmlld1Byb3BUeXBlcywgcmVxdWlyZU5hdGl2ZUNvbXBvbmVudCB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5cbi8vIFRvIG1ha2UgdGhlIHRyYW5zaXRpb24gZnJvbSBSZWFjdCBOYXRpdmUncyBgcmVxdWlyZU5hdGl2ZUNvbXBvbmVudGAgdG8gRXhwbydzXG4vLyBgcmVxdWlyZU5hdGl2ZVZpZXdNYW5hZ2VyYCBhcyBlYXN5IGFzIHBvc3NpYmxlLCBgcmVxdWlyZU5hdGl2ZVZpZXdNYW5hZ2VyYCBpcyBhIGRyb3AtaW5cbi8vIHJlcGxhY2VtZW50IGZvciBgcmVxdWlyZU5hdGl2ZUNvbXBvbmVudGAuXG4vL1xuLy8gRm9yIGVhY2ggdmlldyBtYW5hZ2VyLCB3ZSBjcmVhdGUgYSB3cmFwcGVyIGNvbXBvbmVudCB0aGF0IGFjY2VwdHMgYWxsIG9mIHRoZSBwcm9wcyBhdmFpbGFibGUgdG9cbi8vIHRoZSBhdXRob3Igb2YgdGhlIHVuaXZlcnNhbCBtb2R1bGUuIFRoaXMgd3JhcHBlciBjb21wb25lbnQgc3BsaXRzIHRoZSBwcm9wcyBpbnRvIHR3byBzZXRzOiBwcm9wc1xuLy8gcGFzc2VkIHRvIFJlYWN0IE5hdGl2ZSdzIFZpZXcgKGV4OiBzdHlsZSwgdGVzdElEKSBhbmQgY3VzdG9tIHZpZXcgcHJvcHMsIHdoaWNoIGFyZSBwYXNzZWQgdG8gdGhlXG4vLyBhZGFwdGVyIHZpZXcgY29tcG9uZW50IGluIGEgcHJvcCBjYWxsZWQgYHByb3hpZWRQcm9wZXJ0aWVzYC5cblxuLy8gTk9URTogUmVhY3QgTmF0aXZlIGlzIG1vdmluZyBhd2F5IGZyb20gcnVudGltZSBQcm9wVHlwZXMgYW5kIG1heSByZW1vdmUgVmlld1Byb3BUeXBlcywgaW4gd2hpY2hcbi8vIGNhc2Ugd2Ugd2lsbCBuZWVkIGFub3RoZXIgd2F5IHRvIHNlcGFyYXRlIHN0YW5kYXJkIFJlYWN0IE5hdGl2ZSB2aWV3IHByb3BzIGZyb20gb3RoZXIgcHJvcHMsXG4vLyB3aGljaCB3ZSBwcm94eSB0aHJvdWdoIHRoZSBhZGFwdGVyXG5jb25zdCBWaWV3UHJvcFR5cGVzS2V5cyA9IE9iamVjdC5rZXlzKFZpZXdQcm9wVHlwZXMpO1xuXG50eXBlIE5hdGl2ZUV4cG9Db21wb25lbnRQcm9wcyA9IHtcbiAgcHJveGllZFByb3BlcnRpZXM6IG9iamVjdDtcbn07XG5cbi8qKlxuICogQSBkcm9wLWluIHJlcGxhY2VtZW50IGZvciBgcmVxdWlyZU5hdGl2ZUNvbXBvbmVudGAuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZXF1aXJlTmF0aXZlVmlld01hbmFnZXI8UCA9IGFueT4odmlld05hbWU6IHN0cmluZyk6IFJlYWN0LkNvbXBvbmVudFR5cGU8UD4ge1xuICBpZiAoX19ERVZfXykge1xuICAgIGNvbnN0IHsgTmF0aXZlVW5pbW9kdWxlUHJveHkgfSA9IE5hdGl2ZU1vZHVsZXM7XG4gICAgaWYgKCFOYXRpdmVVbmltb2R1bGVQcm94eS52aWV3TWFuYWdlcnNOYW1lcy5pbmNsdWRlcyh2aWV3TmFtZSkpIHtcbiAgICAgIGNvbnN0IGV4cG9ydGVkVmlld01hbmFnZXJOYW1lcyA9IE5hdGl2ZVVuaW1vZHVsZVByb3h5LnZpZXdNYW5hZ2Vyc05hbWVzLmpvaW4oJywgJyk7XG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgIGBUaGUgbmF0aXZlIHZpZXcgbWFuYWdlciByZXF1aXJlZCBieSBuYW1lICgke3ZpZXdOYW1lfSkgZnJvbSBOYXRpdmVWaWV3TWFuYWdlckFkYXB0ZXIgaXNuJ3QgZXhwb3J0ZWQgYnkgQHVuaW1vZHVsZXMvcmVhY3QtbmF0aXZlLWFkYXB0ZXIuIFZpZXdzIG9mIHRoaXMgdHlwZSBtYXkgbm90IHJlbmRlciBjb3JyZWN0bHkuIEV4cG9ydGVkIHZpZXcgbWFuYWdlcnM6IFske2V4cG9ydGVkVmlld01hbmFnZXJOYW1lc31dLmBcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgLy8gU2V0IHVwIHRoZSBSZWFjdCBOYXRpdmUgbmF0aXZlIGNvbXBvbmVudCwgd2hpY2ggaXMgYW4gYWRhcHRlciB0byB0aGUgdW5pdmVyc2FsIG1vZHVsZSdzIHZpZXdcbiAgLy8gbWFuYWdlclxuICBjb25zdCByZWFjdE5hdGl2ZVZpZXdOYW1lID0gYFZpZXdNYW5hZ2VyQWRhcHRlcl8ke3ZpZXdOYW1lfWA7XG4gIGNvbnN0IFJlYWN0TmF0aXZlQ29tcG9uZW50ID0gcmVxdWlyZU5hdGl2ZUNvbXBvbmVudDxOYXRpdmVFeHBvQ29tcG9uZW50UHJvcHM+KFxuICAgIHJlYWN0TmF0aXZlVmlld05hbWVcbiAgKTtcbiAgY29uc3QgcmVhY3ROYXRpdmVVSUNvbmZpZ3VyYXRpb24gPSAoVUlNYW5hZ2VyLmdldFZpZXdNYW5hZ2VyQ29uZmlnXG4gICAgPyBVSU1hbmFnZXIuZ2V0Vmlld01hbmFnZXJDb25maWcocmVhY3ROYXRpdmVWaWV3TmFtZSlcbiAgICA6IFVJTWFuYWdlcltyZWFjdE5hdGl2ZVZpZXdOYW1lXSkgfHwge1xuICAgIE5hdGl2ZVByb3BzOiB7fSxcbiAgICBkaXJlY3RFdmVudFR5cGVzOiB7fSxcbiAgfTtcbiAgY29uc3QgcmVhY3ROYXRpdmVDb21wb25lbnRQcm9wTmFtZXMgPSBbXG4gICAgJ2NoaWxkcmVuJyxcbiAgICAuLi5WaWV3UHJvcFR5cGVzS2V5cyxcbiAgICAuLi5PYmplY3Qua2V5cyhyZWFjdE5hdGl2ZVVJQ29uZmlndXJhdGlvbi5OYXRpdmVQcm9wcyksXG4gICAgLi4uT2JqZWN0LmtleXMocmVhY3ROYXRpdmVVSUNvbmZpZ3VyYXRpb24uZGlyZWN0RXZlbnRUeXBlcyksXG4gIF07XG5cbiAgLy8gRGVmaW5lIGEgY29tcG9uZW50IGZvciB1bml2ZXJzYWwtbW9kdWxlIGF1dGhvcnMgdG8gYWNjZXNzIHRoZWlyIG5hdGl2ZSB2aWV3IG1hbmFnZXJcbiAgZnVuY3Rpb24gTmF0aXZlQ29tcG9uZW50QWRhcHRlcihwcm9wcywgcmVmKSB7XG4gICAgY29uc3QgbmF0aXZlUHJvcHMgPSBwaWNrKHByb3BzLCByZWFjdE5hdGl2ZUNvbXBvbmVudFByb3BOYW1lcyk7XG4gICAgY29uc3QgcHJveGllZFByb3BzID0gb21pdChwcm9wcywgcmVhY3ROYXRpdmVDb21wb25lbnRQcm9wTmFtZXMpO1xuICAgIHJldHVybiA8UmVhY3ROYXRpdmVDb21wb25lbnQgey4uLm5hdGl2ZVByb3BzfSBwcm94aWVkUHJvcGVydGllcz17cHJveGllZFByb3BzfSByZWY9e3JlZn0gLz47XG4gIH1cbiAgTmF0aXZlQ29tcG9uZW50QWRhcHRlci5kaXNwbGF5TmFtZSA9IGBBZGFwdGVyPCR7dmlld05hbWV9PmA7XG4gIHJldHVybiBSZWFjdC5mb3J3YXJkUmVmKE5hdGl2ZUNvbXBvbmVudEFkYXB0ZXIpO1xufVxuXG5mdW5jdGlvbiBvbWl0KHByb3BzOiBSZWNvcmQ8c3RyaW5nLCBhbnk+LCBwcm9wTmFtZXM6IHN0cmluZ1tdKSB7XG4gIGNvbnN0IGNvcGllZCA9IHsgLi4ucHJvcHMgfTtcbiAgZm9yIChjb25zdCBwcm9wTmFtZSBvZiBwcm9wTmFtZXMpIHtcbiAgICBkZWxldGUgY29waWVkW3Byb3BOYW1lXTtcbiAgfVxuICByZXR1cm4gY29waWVkO1xufVxuXG5mdW5jdGlvbiBwaWNrKHByb3BzOiBSZWNvcmQ8c3RyaW5nLCBhbnk+LCBwcm9wTmFtZXM6IHN0cmluZ1tdKSB7XG4gIHJldHVybiBwcm9wTmFtZXMucmVkdWNlKChwcmV2LCBjdXJyKSA9PiB7XG4gICAgaWYgKGN1cnIgaW4gcHJvcHMpIHtcbiAgICAgIHByZXZbY3Vycl0gPSBwcm9wc1tjdXJyXTtcbiAgICB9XG4gICAgcmV0dXJuIHByZXY7XG4gIH0sIHt9KTtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=