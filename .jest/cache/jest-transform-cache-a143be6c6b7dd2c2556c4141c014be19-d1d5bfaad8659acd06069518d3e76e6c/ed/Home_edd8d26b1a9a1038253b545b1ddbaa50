c42d8f2a98a3b6ae204c81568fff12f5
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Home;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _reactRedux = require("react-redux");

var _reactNativeModal = _interopRequireDefault(require("react-native-modal"));

var _Title = _interopRequireDefault(require("./Title"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function Home(_ref) {
  var history = _ref.history;

  var _useState = (0, _react.useState)(false),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      loadGamePopUp = _useState2[0],
      setLoadGamePopUp = _useState2[1];

  var _useState3 = (0, _react.useState)(false),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      newGamePopUp = _useState4[0],
      setNewGamePopUp = _useState4[1];

  var _useSelector = (0, _reactRedux.useSelector)(function (state) {
    return state;
  }),
      gameState = _useSelector.gameState;

  var isCompleted = gameState.isCompleted,
      gameExists = gameState.gameExists;
  var dispatch = (0, _reactRedux.useDispatch)();

  var handlePress = function handlePress(route) {
    history.push(route);
  };

  return _react.default.createElement(_reactNative.View, {
    style: styles.container
  }, _react.default.createElement(_Title.default, null), _react.default.createElement(_reactNative.Pressable, {
    style: styles.button,
    onPress: function onPress() {
      if (!gameExists) handlePress('DifficultySelection');
      return setNewGamePopUp(true);
    },
    testID: 'newGameButton'
  }, _react.default.createElement(_reactNative.Text, {
    style: styles.text
  }, "Play New Game")), _react.default.createElement(_reactNative.Pressable, {
    style: styles.button,
    onPress: function onPress() {
      if (gameExists) return handlePress('GameDisplay');
      return setLoadGamePopUp(true);
    },
    testID: 'loadGameButton'
  }, _react.default.createElement(_reactNative.Text, {
    style: styles.text
  }, "Load Game")), _react.default.createElement(_reactNative.View, null, _react.default.createElement(_reactNativeModal.default, {
    isVisible: loadGamePopUp
  }, _react.default.createElement(_reactNative.Pressable, {
    style: {
      flex: 1,
      alignItems: 'center'
    },
    onPress: function onPress() {
      return setLoadGamePopUp(false);
    }
  }, _react.default.createElement(_reactNative.View, {
    style: styles.loadGamePopUpPrompt
  }, _react.default.createElement(_reactNative.Text, {
    style: styles.loadGamePopUpPromptText
  }, "No current games to load."))))), _react.default.createElement(_reactNative.View, null, _react.default.createElement(_reactNativeModal.default, {
    isVisible: newGamePopUp
  }, _react.default.createElement(_reactNative.View, {
    style: styles.newGamePopUpPrompt
  }, _react.default.createElement(_reactNative.Text, {
    style: styles.newGamePopUpPromptText
  }, "Are you sure you would like to abandon your current game?")), _react.default.createElement(_reactNative.View, {
    style: styles.popUpYesNoButtonsContainer
  }, _react.default.createElement(_reactNative.Pressable, {
    style: styles.popUpYesNoButton,
    onPress: function onPress() {
      return handlePress('DifficultySelection');
    }
  }, _react.default.createElement(_reactNative.Text, {
    style: styles.newGamePopUpPromptText
  }, "Yes")), _react.default.createElement(_reactNative.Pressable, {
    style: styles.popUpYesNoButton,
    onPress: function onPress() {
      return setNewGamePopUp(false);
    }
  }, _react.default.createElement(_reactNative.Text, {
    style: styles.newGamePopUpPromptText
  }, "No"))))));
}

var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center'
  },
  button: _objectSpread(_objectSpread({
    alignItems: 'center',
    marginTop: 30,
    justifyContent: 'center',
    paddingVertical: 12,
    width: 150,
    borderRadius: 4
  }, _reactNative.Platform.select({
    ios: {
      elevation: 3
    },
    android: {
      elevation: 20
    }
  })), {}, {
    backgroundColor: '#1E90FF',
    shadowColor: 'rgba(0,0,0,0.35)',
    shadowOffset: {
      width: -2,
      height: -2
    },
    shadowOpacity: 0.75,
    shadowRadius: 2
  }),
  text: {
    fontSize: 16,
    lineHeight: 21,
    fontWeight: 'bold',
    letterSpacing: 0.25,
    color: 'white'
  },
  loadGamePopUpPromptText: {
    fontSize: 20,
    lineHeight: 21,
    fontWeight: 'bold',
    letterSpacing: 0.25,
    color: 'white'
  },
  loadGamePopUpPrompt: _objectSpread(_objectSpread(_objectSpread({
    alignItems: 'center',
    justifyContent: 'center'
  }, _reactNative.Platform.select({
    ios: {
      top: '30%'
    },
    android: {
      top: '25%'
    }
  })), {}, {
    paddingVertical: 26,
    width: 300,
    borderRadius: 4
  }, _reactNative.Platform.select({
    ios: {
      elevation: 3
    },
    android: {
      elevation: 20
    }
  })), {}, {
    backgroundColor: '#1E90FF',
    shadowColor: 'rgba(0,0,0,0.35)',
    shadowOffset: {
      width: -2,
      height: -2
    },
    shadowOpacity: 0.75,
    shadowRadius: 2
  }),
  newGamePopUpPromptText: _objectSpread({
    fontSize: 18,
    lineHeight: 21,
    fontWeight: 'bold',
    letterSpacing: 0.25,
    color: 'white'
  }, _reactNative.Platform.select({
    ios: {},
    android: {
      textAlign: 'center'
    }
  })),
  newGamePopUpPrompt: _objectSpread(_objectSpread(_objectSpread(_objectSpread({
    position: 'absolute'
  }, _reactNative.Platform.select({
    ios: {
      top: '30%'
    },
    android: {
      top: '25%'
    }
  })), {}, {
    alignItems: 'center',
    justifyContent: 'center',
    marginLeft: '5%'
  }, _reactNative.Platform.select({
    ios: {
      paddingVertical: 18
    },
    android: {
      paddingVertical: 13
    }
  })), {}, {
    width: 300,
    borderRadius: 4
  }, _reactNative.Platform.select({
    ios: {
      elevation: 3
    },
    android: {
      elevation: 20
    }
  })), {}, {
    backgroundColor: '#1E90FF',
    shadowColor: 'rgba(0,0,0,0.35)',
    shadowOffset: {
      width: -2,
      height: -2
    },
    shadowOpacity: 0.75,
    shadowRadius: 2
  }),
  popUpYesNoButtonsContainer: _objectSpread({
    alignItems: 'center'
  }, _reactNative.Platform.select({
    ios: {},
    android: {
      top: '-5%'
    }
  })),
  popUpYesNoButton: _objectSpread(_objectSpread(_objectSpread({
    alignItems: 'center',
    justifyContent: 'center',
    marginTop: 25
  }, _reactNative.Platform.select({
    ios: {
      paddingVertical: 14
    },
    android: {
      paddingVertical: 16
    }
  })), {}, {
    width: 150,
    borderRadius: 4
  }, _reactNative.Platform.select({
    ios: {
      elevation: 3
    },
    android: {
      elevation: 20
    }
  })), {}, {
    backgroundColor: '#1E90FF',
    shadowColor: 'rgba(0,0,0,0.35)',
    shadowOffset: {
      width: -2,
      height: -2
    },
    shadowOpacity: 0.75,
    shadowRadius: 2
  })
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,