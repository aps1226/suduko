0514b87f99b6b8a7bcdcc77fb71a84b8
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _Modal = _interopRequireDefault(require("../Modal"));

var _DialogContent = _interopRequireDefault(require("./DialogContent"));

var _DialogActions = _interopRequireDefault(require("./DialogActions"));

var _DialogTitle2 = _interopRequireDefault(require("./DialogTitle"));

var _DialogScrollArea = _interopRequireDefault(require("./DialogScrollArea"));

var _theming = require("../../core/theming");

var _overlay = _interopRequireDefault(require("../../styles/overlay"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

var DIALOG_ELEVATION = 24;

var Dialog = function Dialog(_ref) {
  var children = _ref.children,
      _ref$dismissable = _ref.dismissable,
      dismissable = _ref$dismissable === void 0 ? true : _ref$dismissable,
      onDismiss = _ref.onDismiss,
      _ref$visible = _ref.visible,
      visible = _ref$visible === void 0 ? false : _ref$visible,
      style = _ref.style,
      theme = _ref.theme;
  return React.createElement(_Modal.default, {
    dismissable: dismissable,
    onDismiss: onDismiss,
    visible: visible,
    contentContainerStyle: [{
      borderRadius: theme.roundness,
      backgroundColor: theme.dark && theme.mode === 'adaptive' ? (0, _overlay.default)(DIALOG_ELEVATION, theme.colors.surface) : theme.colors.surface
    }, styles.container, style]
  }, React.Children.toArray(children).filter(function (child) {
    return child != null && typeof child !== 'boolean';
  }).map(function (child, i) {
    if (i === 0 && React.isValidElement(child) && child.type === _DialogContent.default) {
      return React.cloneElement(child, {
        style: [{
          paddingTop: 24
        }, child.props.style]
      });
    }

    return child;
  }));
};

Dialog.Content = _DialogContent.default;
Dialog.Actions = _DialogActions.default;
Dialog.Title = _DialogTitle2.default;
Dialog.ScrollArea = _DialogScrollArea.default;

var styles = _reactNative.StyleSheet.create({
  container: {
    marginVertical: _reactNative.Platform.OS === 'android' ? 44 : 0,
    marginHorizontal: 26,
    elevation: DIALOG_ELEVATION,
    justifyContent: 'flex-start'
  }
});

var _default = (0, _theming.withTheme)(Dialog);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,