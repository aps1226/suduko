{"version":3,"sources":["../src/FontHooks.ts"],"names":[],"mappings":";;;;;;;;;AAAA;;AAEA;;AAaM,SAAU,QAAV,CACJ,GADI,EAC8C;AAElD,kBAA4B,qBAAS,KAAT,CAA5B;AAAA;AAAA,MAAO,MAAP;AAAA,MAAe,SAAf;;AACA,mBAA0B,qBAAuB,IAAvB,CAA1B;AAAA;AAAA,MAAO,KAAP;AAAA,MAAc,QAAd;;AAEA,wBAAU,YAAK;AACb,yBAAU,GAAV,EACG,IADH,CACQ;AAAA,aAAM,SAAS,CAAC,IAAD,CAAf;AAAA,KADR,EAEG,KAFH,CAES,QAFT;AAGD,GAJD,EAIG,EAJH;AAMA,SAAO,CAAC,MAAD,EAAS,KAAT,CAAP;AACD","sourcesContent":["import { useEffect, useState } from 'react';\n\nimport { loadAsync } from './Font';\nimport { FontSource } from './Font.types';\n\n/**\n * Load a map of custom fonts to use in textual elements.\n * The map keys are used as font names, and can be used with `fontFamily: <name>;`.\n * It returns a boolean describing if all fonts are loaded.\n *\n * Note, the fonts are not \"reloaded\" when you dynamically change the font map.\n *\n * @see https://docs.expo.io/versions/latest/sdk/font/\n * @example const [loaded, error] = useFonts(...);\n */\nexport function useFonts(\n  map: string | { [fontFamily: string]: FontSource }\n): [boolean, Error | null] {\n  const [loaded, setLoaded] = useState(false);\n  const [error, setError] = useState<Error | null>(null);\n\n  useEffect(() => {\n    loadAsync(map)\n      .then(() => setLoaded(true))\n      .catch(setError);\n  }, []);\n\n  return [loaded, error];\n}\n"],"sourceRoot":""}