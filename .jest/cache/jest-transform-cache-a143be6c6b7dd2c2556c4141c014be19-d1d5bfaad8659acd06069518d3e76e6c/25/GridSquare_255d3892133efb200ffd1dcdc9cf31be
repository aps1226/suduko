592b5aa3de52e7173586eaaead12f0d3
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = GridSquare;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _reactRedux = require("react-redux");

var _redux = require("redux");

var actionCreators = _interopRequireWildcard(require("../src/state/index"));

var _boardController = require("../src/state/boardController");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function GridSquare(props) {
  var _useSelector = (0, _reactRedux.useSelector)(function (state) {
    return state;
  }),
      board = _useSelector.board,
      colors = _useSelector.colors,
      selection = _useSelector.selection,
      entryMode = _useSelector.entryMode,
      notes = _useSelector.notes;

  var dispatch = (0, _reactRedux.useDispatch)();

  var _bindActionCreators = (0, _redux.bindActionCreators)(actionCreators, dispatch),
      changeColor = _bindActionCreators.changeColor,
      setSelection = _bindActionCreators.setSelection,
      setBoard = _bindActionCreators.setBoard,
      setNotes = _bindActionCreators.setNotes,
      setGameState = _bindActionCreators.setGameState;

  var row = props.row,
      col = props.col;
  var colorIndex = String(board[row][col]);
  var color = colors[colorIndex] ? colors[colorIndex] : ['transparent', 'black'];

  var handleOnPress = function handleOnPress() {
    if (board[row][col]) {
      changeColor(String(board[row][col]));
      setSelection(board[row][col]);
    } else if (selection && entryMode) {
      var newBoard = board.map(function (arr) {
        return (0, _toConsumableArray2.default)(arr);
      });
      newBoard[row][col] = Number(selection);

      if ((0, _boardController.isValidSudoku)(newBoard.map(function (arr) {
        return (0, _toConsumableArray2.default)(arr);
      }))) {
        setBoard(newBoard);

        if ((0, _boardController.isCompleted)(newBoard.map(function (arr) {
          return (0, _toConsumableArray2.default)(arr);
        }))) {
          setGameState({
            'isCompleted': true,
            'gameExists': false
          });
        }
      }
    } else if (selection && !entryMode) {
      var newNotes = (0, _extends2.default)({}, notes);
      var newNotesIndex = "" + row + col;

      if (newNotes[newNotesIndex]) {
        if (!newNotes[newNotesIndex].includes(selection)) newNotes[newNotesIndex].push(selection);
      } else newNotes[newNotesIndex] = [selection];

      setNotes(newNotes);
    }
  };

  var renderNotes = function renderNotes() {
    if (!notes || !notes["" + row + col]) return _react.default.createElement(_reactNative.Text, null);
    var notesToRender = notes["" + row + col];
    var notesJSX = [];
    var noteRows;
    var curRow = [];
    var pointer = 1;

    while (pointer <= 9) {
      curRow.push(_react.default.createElement(_reactNative.View, {
        key: String("Square[" + row + col + "]_Note_" + (pointer - 1))
      }, _react.default.createElement(_reactNative.Text, {
        style: styles.noteText
      }, notesToRender[pointer - 1])));

      if (pointer % 3 === 0 && pointer > 0) {
        noteRows = _react.default.createElement(_reactNative.View, {
          key: String("NoteRow_" + pointer),
          style: styles.noteRow
        }, curRow);
        curRow = [];
        notesJSX.push(noteRows);
      }

      pointer++;
    }

    return _react.default.createElement(_reactNative.View, {
      style: styles.noteContainer
    }, notesJSX);
  };

  return _react.default.createElement(_reactNative.View, {
    style: styles.container
  }, _react.default.createElement(_reactNative.TouchableHighlight, {
    onPress: handleOnPress
  }, _react.default.createElement(_reactNative.View, {
    style: {
      borderStyle: 'solid',
      backgroundColor: color[0],
      width: 38,
      height: 38,
      borderWidth: 5,
      borderLeftColor: 'rgba(255, 255, 255, 0.20)',
      borderTopColor: 'rgba(255, 255, 255, 0.33)',
      borderRightColor: 'rgba(0, 0, 0, 0.15)',
      borderBottomColor: 'rgba(0, 0, 0, 0.5)',
      alignItems: 'center'
    }
  }, _react.default.createElement(_reactNative.ImageBackground, {
    source: require("../assets/images/square.jpg"),
    style: styles.backgroundImage
  }, board[row][col] === null ? renderNotes() : _react.default.createElement(_reactNative.Text, {
    style: {
      color: color[1],
      textAlign: 'center',
      marginTop: '20%'
    }
  }, String(board[row][col]))))));
}

var styles = _reactNative.StyleSheet.create({
  container: {},
  noteContainer: {
    flex: 1,
    flexDirection: 'column',
    alignItems: 'center'
  },
  noteRow: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'flex-start'
  },
  noteText: {
    fontSize: 9,
    fontFamily: 'JustAnotherHand'
  },
  backgroundImage: {
    width: '100%',
    height: '100%'
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,