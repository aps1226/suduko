{"version":3,"sources":["C:\\Users\\ashee\\Documents\\Javascript\\React\\React Native\\suduko\\components\\GridSquare.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, {useEffect} from \"react\";\r\nimport { Alert, ImageBackground, StyleSheet, TouchableHighlight, Text, View } from \"react-native\";\r\nimport { useSelector, useDispatch } from \"react-redux\"; \r\nimport { bindActionCreators } from \"redux\";\r\nimport * as actionCreators from '../src/state/index';\r\nimport {isValidSudoku,isCompleted} from '../src/state/boardController'\r\nimport {IProps,Notes} from '../types';\r\nimport {RootState} from '../src/state/reducers/index';\r\n\r\nexport default function GridSquare(props:IProps) {\r\n  //Redux-state.\r\n  const {board,colors,selection, entryMode,notes} = useSelector((state:RootState) => state);\r\n  const dispatch = useDispatch();\r\n  //Redux action creators.\r\n  const { changeColor, setSelection, setBoard, setNotes, setGameState } = bindActionCreators(actionCreators,dispatch);\r\n  //Passed row and column props for respective square.\r\n  const {row,col} = props;\r\n  //Color for respective square based on current value.\r\n  const colorIndex:string = String(board[row][col]);\r\n  const color:string[] = colors[colorIndex] ? colors[colorIndex]: ['transparent','black'];\r\n  \r\n  const handleOnPress = ():void =>{\r\n    //If value of board selection is not null\r\n      //Change the color of the respective value to green for \r\n      //all displayed values on the board.\r\n      //Set selection prop equal to value.\r\n    if(board[row][col]){\r\n      changeColor(String(board[row][col]));\r\n      setSelection(board[row][col]);\r\n    }\r\n    //Else, determine if current selection placed at the respective\r\n    //location creates a valid board.\r\n    else if(selection && entryMode){\r\n      const newBoard:(number|null)[][] = board.map((arr:(number|null)[])=> [...arr]);\r\n      newBoard[row][col] = Number(selection);\r\n      //If board would be valid, modify board state.\r\n      if(isValidSudoku(newBoard.map((arr:(number|null)[])=> [...arr]))){\r\n        setBoard(newBoard);\r\n        //Check if board is completed.\r\n          //If complete, modify gameState property to where 'isComplete' index is true.\r\n        if(isCompleted(newBoard.map((arr:(number|null)[])=> [...arr]))){\r\n          setGameState({'isCompleted':true,'gameExists':false});\r\n        }\r\n      }\r\n    //Else if a number is selected and entryMode is set to 'notes'.\r\n    } else if(selection && !entryMode){\r\n      //Clone notes state. \r\n      const newNotes:Notes = Object.assign({},notes);\r\n      //Create variable for note index based on current row and column position.\r\n      const newNotesIndex:string = `${row}${col}`;\r\n      //If current square has existing notes within the note object:\r\n      if(newNotes[newNotesIndex]){\r\n        //If note object at current square index does not include the current selection,\r\n        //add the selection to the array at the index.\r\n        if(!newNotes[newNotesIndex].includes(selection)) newNotes[newNotesIndex].push(selection)\r\n      //Else, create the index within the note object initialized to current selection.\r\n      } else newNotes[newNotesIndex] = [selection];\r\n      //Set new notes state.\r\n      setNotes(newNotes);\r\n    }\r\n  }\r\n\r\n  //Function renders note for squares with null values on the board.\r\n  const renderNotes = ():JSX.Element =>{\r\n    //Return empty text element if notes or note[index] do not exist.\r\n    if(!notes || !notes[`${row}${col}`]) return (<Text></Text>);\r\n    //Initialize array of notes to be rendered from the notes object\r\n    //with respect to the current square position.\r\n    const notesToRender = notes[`${row}${col}`];\r\n    //Initialize array to hold all rows of notes.\r\n    const notesJSX:JSX.Element[] = [];\r\n    //Initialize variable to be populated with each row of notes.\r\n    let noteRows:JSX.Element;\r\n    //Initialize array to hold the current row of notes.\r\n    let curRow:JSX.Element[] = [];\r\n    //Initialize pointer to allow iteration through notesToRender array.\r\n    let pointer:number = 1;\r\n    //Iterate through notesToRender:\r\n    while(pointer <= 9){\r\n      //Push each number to JSX to display value.\r\n      curRow.push(\r\n        <View\r\n          key = {String(`Square[${row}${col}]_Note_${pointer - 1}`)}\r\n        >\r\n          <Text\r\n            style = {styles.noteText}\r\n          >\r\n            {notesToRender[pointer - 1]}\r\n          </Text>\r\n        </View>\r\n      )\r\n      //Create 3x3 grid of notes within square.\r\n      if(pointer % 3 === 0 && pointer > 0){\r\n        noteRows = (\r\n          <View\r\n            key = {String(`NoteRow_${pointer}`)} \r\n            style = {styles.noteRow}\r\n          >\r\n            {curRow}\r\n          </View>\r\n        )\r\n        curRow = [];\r\n        notesJSX.push(noteRows);\r\n      }\r\n      pointer ++;\r\n    }\r\n\r\n    //Return JSX.\r\n    return(\r\n      <View\r\n        style = {styles.noteContainer}\r\n      >\r\n        {notesJSX}\r\n      </View>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <TouchableHighlight\r\n          onPress = {handleOnPress}\r\n      >\r\n        <View \r\n          style={{\r\n            borderStyle:'solid',\r\n            backgroundColor:color[0],\r\n            width: 38,\r\n            height: 38,\r\n            borderWidth: 5,\r\n            borderLeftColor: 'rgba(255, 255, 255, 0.20)',\r\n            borderTopColor: 'rgba(255, 255, 255, 0.33)',\r\n            borderRightColor: 'rgba(0, 0, 0, 0.15)',\r\n            borderBottomColor: 'rgba(0, 0, 0, 0.5)',\r\n            alignItems:'center'\r\n          }}\r\n        >\r\n          <ImageBackground\r\n            source = {require('../assets/images/square.jpg')}\r\n            style = {styles.backgroundImage}\r\n          >\r\n            {/* Render values based on ternary conditional respective of \r\n                if value is null or not. */}\r\n            {board[row][col] === null? \r\n              renderNotes()\r\n            :\r\n              <Text\r\n                style = {{\r\n                  color:color[1],\r\n                  textAlign:'center',\r\n                  marginTop:'20%',\r\n                }}\r\n              >\r\n                {String(board[row][col])}\r\n              </Text>\r\n            }\r\n          </ImageBackground>\r\n        </View>\r\n      </TouchableHighlight>\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n  },\r\n  noteContainer:{\r\n    flex:1,\r\n    flexDirection:'column',\r\n    alignItems:'center'\r\n  },\r\n  noteRow:{\r\n    flex:1,\r\n    flexDirection:'row',\r\n    alignItems:'flex-start'\r\n  },\r\n  noteText:{\r\n    fontSize:9,\r\n    fontFamily:'JustAnotherHand',\r\n  },\r\n  backgroundImage:{\r\n    width:'100%',\r\n    height:'100%'\r\n  }\r\n});"]}