e5152f521c25a01f1abefce560ba0674
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _objectWithoutProperties2 = _interopRequireDefault2(require("@babel/runtime/helpers/objectWithoutProperties"));

var _defineProperty2 = _interopRequireDefault2(require("@babel/runtime/helpers/defineProperty"));

var _excluded = ["name", "onPress", "forceTextInputFocus", "color"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IconAdornment = exports.default = exports.ICON_SIZE = void 0;

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _IconButton = _interopRequireDefault(require("../../IconButton"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var ICON_SIZE = 24;
exports.ICON_SIZE = ICON_SIZE;
var ICON_OFFSET = 12;

var StyleContext = _react.default.createContext({
  style: {},
  isTextInputFocused: false,
  forceFocus: function forceFocus() {}
});

var IconAdornment = function IconAdornment(_ref) {
  var icon = _ref.icon,
      topPosition = _ref.topPosition,
      side = _ref.side,
      isTextInputFocused = _ref.isTextInputFocused,
      forceFocus = _ref.forceFocus;
  var style = (0, _defineProperty2.default)({
    top: topPosition
  }, side, ICON_OFFSET);
  var contextState = {
    style: style,
    isTextInputFocused: isTextInputFocused,
    forceFocus: forceFocus
  };
  return _react.default.createElement(StyleContext.Provider, {
    value: contextState
  }, icon);
};

exports.IconAdornment = IconAdornment;

var TextInputIcon = function TextInputIcon(_ref2) {
  var name = _ref2.name,
      onPress = _ref2.onPress,
      forceTextInputFocus = _ref2.forceTextInputFocus,
      color = _ref2.color,
      rest = (0, _objectWithoutProperties2.default)(_ref2, _excluded);

  var _react$default$useCon = _react.default.useContext(StyleContext),
      style = _react$default$useCon.style,
      isTextInputFocused = _react$default$useCon.isTextInputFocused,
      forceFocus = _react$default$useCon.forceFocus;

  var onPressWithFocusControl = _react.default.useCallback(function () {
    if (forceTextInputFocus && !isTextInputFocused) {
      forceFocus();
    }

    onPress === null || onPress === void 0 ? void 0 : onPress();
  }, [forceTextInputFocus, forceFocus, isTextInputFocused, onPress]);

  return _react.default.createElement(_reactNative.View, {
    style: [styles.container, style]
  }, _react.default.createElement(_IconButton.default, _extends({
    icon: name,
    style: styles.iconButton,
    size: ICON_SIZE,
    onPress: onPressWithFocusControl,
    color: typeof color === 'function' ? color(isTextInputFocused) : color
  }, rest)));
};

TextInputIcon.displayName = 'TextInput.Icon';
TextInputIcon.defaultProps = {
  forceTextInputFocus: true
};

var styles = _reactNative.StyleSheet.create({
  container: {
    position: 'absolute',
    width: ICON_SIZE,
    height: ICON_SIZE,
    justifyContent: 'center',
    alignItems: 'center'
  },
  iconButton: {
    margin: 0
  }
});

var _default = TextInputIcon;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,