{"version":3,"sources":["../src/AssetHooks.ts"],"names":[],"mappings":";;;;;;;;;AAAA;;AAEA;;AAiBM,SAAU,SAAV,CAAoB,SAApB,EAAgD;AACpD,kBAA4B,sBAA5B;AAAA;AAAA,MAAO,MAAP;AAAA,MAAe,SAAf;;AACA,mBAA0B,sBAA1B;AAAA;AAAA,MAAO,KAAP;AAAA,MAAc,QAAd;;AAEA,wBAAU,YAAK;AACb,iBAAM,SAAN,CAAgB,SAAhB,EACG,IADH,CACQ,SADR,EAEG,KAFH,CAES,QAFT;AAGD,GAJD,EAIG,EAJH;AAMA,SAAO,CAAC,MAAD,EAAS,KAAT,CAAP;AACD","sourcesContent":["import { useEffect, useState } from 'react';\n\nimport { Asset } from './Asset';\n\n/**\n * Downloads and stores one or more assets locally.\n * After the assets are loaded, this hook returns a list of asset instances.\n * If something went wrong when loading the assets, an error is returned.\n *\n * Note, the assets are not \"reloaded\" when you dynamically change the asset list.\n *\n * @see https://docs.expo.io/versions/latest/sdk/asset/\n * @example\n * ```tsx\n * const [assets, error] = useAssets(require('path/to/asset.jpg'));\n *\n * return !assets ? null : <Image source={assets[0]} />;\n * ```\n */\nexport function useAssets(moduleIds: number | number[]): [Asset[] | undefined, Error | undefined] {\n  const [assets, setAssets] = useState<Asset[]>();\n  const [error, setError] = useState<Error>();\n\n  useEffect(() => {\n    Asset.loadAsync(moduleIds)\n      .then(setAssets)\n      .catch(setError);\n  }, []);\n\n  return [assets, error];\n}\n"],"sourceRoot":""}