356a6231fd46d1aee827e3deb73198aa
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _verifyComponentAttributeEquivalence = _interopRequireDefault(require("./verifyComponentAttributeEquivalence"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var ReactNativeViewConfigRegistry = require("../Renderer/shims/ReactNativeViewConfigRegistry");

var ReactNativeViewViewConfig = require("../Components/View/ReactNativeViewViewConfig");

function registerGeneratedViewConfig(componentName, viewConfig) {
  var mergedViewConfig = {
    uiViewClassName: componentName,
    Commands: {},
    bubblingEventTypes: _objectSpread(_objectSpread({}, ReactNativeViewViewConfig.bubblingEventTypes), viewConfig.bubblingEventTypes || {}),
    directEventTypes: _objectSpread(_objectSpread({}, ReactNativeViewViewConfig.directEventTypes), viewConfig.directEventTypes || {}),
    validAttributes: _objectSpread(_objectSpread({}, ReactNativeViewViewConfig.validAttributes), viewConfig.validAttributes || {})
  };
  ReactNativeViewConfigRegistry.register(componentName, function () {
    (0, _verifyComponentAttributeEquivalence.default)(componentName, mergedViewConfig);
    return mergedViewConfig;
  });
}

module.exports = registerGeneratedViewConfig;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlZ2lzdGVyR2VuZXJhdGVkVmlld0NvbmZpZy5qcyJdLCJuYW1lcyI6WyJSZWFjdE5hdGl2ZVZpZXdDb25maWdSZWdpc3RyeSIsInJlcXVpcmUiLCJSZWFjdE5hdGl2ZVZpZXdWaWV3Q29uZmlnIiwicmVnaXN0ZXJHZW5lcmF0ZWRWaWV3Q29uZmlnIiwiY29tcG9uZW50TmFtZSIsInZpZXdDb25maWciLCJtZXJnZWRWaWV3Q29uZmlnIiwidWlWaWV3Q2xhc3NOYW1lIiwiQ29tbWFuZHMiLCJidWJibGluZ0V2ZW50VHlwZXMiLCJkaXJlY3RFdmVudFR5cGVzIiwidmFsaWRBdHRyaWJ1dGVzIiwicmVnaXN0ZXIiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFVQTs7Ozs7O0FBSUE7Ozs7OztBQUZBLElBQU1BLDZCQUE2QixHQUFHQyxPQUFPLG1EQUE3Qzs7QUFDQSxJQUFNQyx5QkFBeUIsR0FBR0QsT0FBTyxnREFBekM7O0FBZ0NBLFNBQVNFLDJCQUFULENBQ0VDLGFBREYsRUFFRUMsVUFGRixFQUdFO0FBQ0EsTUFBTUMsZ0JBQWdCLEdBQUc7QUFDdkJDLElBQUFBLGVBQWUsRUFBRUgsYUFETTtBQUV2QkksSUFBQUEsUUFBUSxFQUFFLEVBRmE7QUFNdkJDLElBQUFBLGtCQUFrQixrQ0FDYlAseUJBQXlCLENBQUNPLGtCQURiLEdBRVpKLFVBQVUsQ0FBQ0ksa0JBQVgsSUFBaUMsRUFGckIsQ0FOSztBQWF2QkMsSUFBQUEsZ0JBQWdCLGtDQUNYUix5QkFBeUIsQ0FBQ1EsZ0JBRGYsR0FFVkwsVUFBVSxDQUFDSyxnQkFBWCxJQUErQixFQUZyQixDQWJPO0FBb0J2QkMsSUFBQUEsZUFBZSxrQ0FDVlQseUJBQXlCLENBQUNTLGVBRGhCLEdBRVROLFVBQVUsQ0FBQ00sZUFBWCxJQUE4QixFQUZyQjtBQXBCUSxHQUF6QjtBQTBCQVgsRUFBQUEsNkJBQTZCLENBQUNZLFFBQTlCLENBQXVDUixhQUF2QyxFQUFzRCxZQUFNO0FBQzFELHNEQUFvQ0EsYUFBcEMsRUFBbURFLGdCQUFuRDtBQUVBLFdBQU9BLGdCQUFQO0FBQ0QsR0FKRDtBQUtEOztBQUVETyxNQUFNLENBQUNDLE9BQVAsR0FBaUJYLDJCQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3dcbiAqIEBmb3JtYXRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IFJlYWN0TmF0aXZlVmlld0NvbmZpZ1JlZ2lzdHJ5ID0gcmVxdWlyZSgnLi4vUmVuZGVyZXIvc2hpbXMvUmVhY3ROYXRpdmVWaWV3Q29uZmlnUmVnaXN0cnknKTtcbmNvbnN0IFJlYWN0TmF0aXZlVmlld1ZpZXdDb25maWcgPSByZXF1aXJlKCcuLi9Db21wb25lbnRzL1ZpZXcvUmVhY3ROYXRpdmVWaWV3Vmlld0NvbmZpZycpO1xuaW1wb3J0IHZlcmlmeUNvbXBvbmVudEF0dHJpYnV0ZUVxdWl2YWxlbmNlIGZyb20gJy4vdmVyaWZ5Q29tcG9uZW50QXR0cmlidXRlRXF1aXZhbGVuY2UnO1xuXG5leHBvcnQgdHlwZSBHZW5lcmF0ZWRWaWV3Q29uZmlnID0ge1xuICB1aVZpZXdDbGFzc05hbWU6IHN0cmluZyxcbiAgYnViYmxpbmdFdmVudFR5cGVzPzogJFJlYWRPbmx5PHtcbiAgICBbZXZlbnROYW1lOiBzdHJpbmddOiAkUmVhZE9ubHk8e3xcbiAgICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiAkUmVhZE9ubHk8e3xcbiAgICAgICAgY2FwdHVyZWQ6IHN0cmluZyxcbiAgICAgICAgYnViYmxlZDogc3RyaW5nLFxuICAgICAgfH0+LFxuICAgIHx9PixcbiAgICAuLi4sXG4gIH0+LFxuICBkaXJlY3RFdmVudFR5cGVzPzogJFJlYWRPbmx5PHtcbiAgICBbZXZlbnROYW1lOiBzdHJpbmddOiAkUmVhZE9ubHk8e3xcbiAgICAgIHJlZ2lzdHJhdGlvbk5hbWU6IHN0cmluZyxcbiAgICB8fT4sXG4gICAgLi4uLFxuICB9PixcbiAgdmFsaWRBdHRyaWJ1dGVzPzoge1xuICAgIFtwcm9wTmFtZTogc3RyaW5nXTpcbiAgICAgIHwgdHJ1ZVxuICAgICAgfCAkUmVhZE9ubHk8e3xcbiAgICAgICAgICBkaWZmPzogPFQ+KGFyZzE6IGFueSwgYXJnMjogYW55KSA9PiBib29sZWFuLFxuICAgICAgICAgIHByb2Nlc3M/OiAoYXJnMTogYW55KSA9PiBhbnksXG4gICAgICAgIHx9PixcbiAgICAuLi4sXG4gIH0sXG4gIC4uLlxufTtcblxuZnVuY3Rpb24gcmVnaXN0ZXJHZW5lcmF0ZWRWaWV3Q29uZmlnKFxuICBjb21wb25lbnROYW1lOiBzdHJpbmcsXG4gIHZpZXdDb25maWc6IEdlbmVyYXRlZFZpZXdDb25maWcsXG4pIHtcbiAgY29uc3QgbWVyZ2VkVmlld0NvbmZpZyA9IHtcbiAgICB1aVZpZXdDbGFzc05hbWU6IGNvbXBvbmVudE5hbWUsXG4gICAgQ29tbWFuZHM6IHt9LFxuICAgIC8qICRGbG93Rml4TWUoPj0wLjEyMi4wIHNpdGU9cmVhY3RfbmF0aXZlX2ZiKSBUaGlzIGNvbW1lbnQgc3VwcHJlc3NlcyBhblxuICAgICAqIGVycm9yIGZvdW5kIHdoZW4gRmxvdyB2MC4xMjIuMCB3YXMgZGVwbG95ZWQuIFRvIHNlZSB0aGUgZXJyb3IsIGRlbGV0ZVxuICAgICAqIHRoaXMgY29tbWVudCBhbmQgcnVuIEZsb3cuICovXG4gICAgYnViYmxpbmdFdmVudFR5cGVzOiB7XG4gICAgICAuLi5SZWFjdE5hdGl2ZVZpZXdWaWV3Q29uZmlnLmJ1YmJsaW5nRXZlbnRUeXBlcyxcbiAgICAgIC4uLih2aWV3Q29uZmlnLmJ1YmJsaW5nRXZlbnRUeXBlcyB8fCB7fSksXG4gICAgfSxcbiAgICAvKiAkRmxvd0ZpeE1lKD49MC4xMjIuMCBzaXRlPXJlYWN0X25hdGl2ZV9mYikgVGhpcyBjb21tZW50IHN1cHByZXNzZXMgYW5cbiAgICAgKiBlcnJvciBmb3VuZCB3aGVuIEZsb3cgdjAuMTIyLjAgd2FzIGRlcGxveWVkLiBUbyBzZWUgdGhlIGVycm9yLCBkZWxldGVcbiAgICAgKiB0aGlzIGNvbW1lbnQgYW5kIHJ1biBGbG93LiAqL1xuICAgIGRpcmVjdEV2ZW50VHlwZXM6IHtcbiAgICAgIC4uLlJlYWN0TmF0aXZlVmlld1ZpZXdDb25maWcuZGlyZWN0RXZlbnRUeXBlcyxcbiAgICAgIC4uLih2aWV3Q29uZmlnLmRpcmVjdEV2ZW50VHlwZXMgfHwge30pLFxuICAgIH0sXG4gICAgLyogJEZsb3dGaXhNZSg+PTAuMTIyLjAgc2l0ZT1yZWFjdF9uYXRpdmVfZmIpIFRoaXMgY29tbWVudCBzdXBwcmVzc2VzIGFuXG4gICAgICogZXJyb3IgZm91bmQgd2hlbiBGbG93IHYwLjEyMi4wIHdhcyBkZXBsb3llZC4gVG8gc2VlIHRoZSBlcnJvciwgZGVsZXRlXG4gICAgICogdGhpcyBjb21tZW50IGFuZCBydW4gRmxvdy4gKi9cbiAgICB2YWxpZEF0dHJpYnV0ZXM6IHtcbiAgICAgIC4uLlJlYWN0TmF0aXZlVmlld1ZpZXdDb25maWcudmFsaWRBdHRyaWJ1dGVzLFxuICAgICAgLi4uKHZpZXdDb25maWcudmFsaWRBdHRyaWJ1dGVzIHx8IHt9KSxcbiAgICB9LFxuICB9O1xuXG4gIFJlYWN0TmF0aXZlVmlld0NvbmZpZ1JlZ2lzdHJ5LnJlZ2lzdGVyKGNvbXBvbmVudE5hbWUsICgpID0+IHtcbiAgICB2ZXJpZnlDb21wb25lbnRBdHRyaWJ1dGVFcXVpdmFsZW5jZShjb21wb25lbnROYW1lLCBtZXJnZWRWaWV3Q29uZmlnKTtcblxuICAgIHJldHVybiBtZXJnZWRWaWV3Q29uZmlnO1xuICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSByZWdpc3RlckdlbmVyYXRlZFZpZXdDb25maWc7XG4iXX0=