60b04f58d0d0002904e884e9ca6fb247
"use strict";var _excluded = ["mode", "children", "icon", "avatar", "selected", "disabled", "accessibilityLabel", "closeIconAccessibilityLabel", "onPress", "onLongPress", "onClose", "textStyle", "style", "theme", "testID", "selectedColor", "ellipsizeMode"];function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) {symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});}keys.push.apply(keys, symbols);}return keys;}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(Object(source), true).forEach(function (key) {require("@babel/runtime/helpers/defineProperty")(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(Object(source)).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}

Object.defineProperty(exports, "__esModule", {
  value: true });

exports.default = void 0;

var React = _interopRequireWildcard(require("react"));



var _color = _interopRequireDefault(require("color"));

var _Icon = _interopRequireDefault(require("./Icon"));

var _MaterialCommunityIcon = _interopRequireDefault(require("./MaterialCommunityIcon"));

var _Surface = _interopRequireDefault(require("./Surface"));

var _Text = _interopRequireDefault(require("./Typography/Text"));

var _TouchableRipple = _interopRequireDefault(require("./TouchableRipple/TouchableRipple"));





function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

function _getRequireWildcardCache() {if (typeof WeakMap !== "function") return null;var cache = new WeakMap();_getRequireWildcardCache = function _getRequireWildcardCache() {return cache;};return cache;}

function _interopRequireWildcard(obj) {if (obj && obj.__esModule) {return obj;}if (obj === null || typeof obj !== "object" && typeof obj !== "function") {return { default: obj };}var cache = _getRequireWildcardCache();if (cache && cache.has(obj)) {return cache.get(obj);}var newObj = {};var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;for (var key in obj) {if (Object.prototype.hasOwnProperty.call(obj, key)) {var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;if (desc && (desc.get || desc.set)) {Object.defineProperty(newObj, key, desc);} else {newObj[key] = obj[key];}}}newObj.default = obj;if (cache) {cache.set(obj, newObj);}return newObj;}

function _extends() {_extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};return _extends.apply(this, arguments);}



























var Chip = function Chip(_ref)


















{var _ref$mode = _ref.mode,mode = _ref$mode === void 0 ? 'flat' : _ref$mode,children = _ref.children,icon = _ref.icon,avatar = _ref.avatar,_ref$selected = _ref.selected,selected = _ref$selected === void 0 ? false : _ref$selected,_ref$disabled = _ref.disabled,disabled = _ref$disabled === void 0 ? false : _ref$disabled,accessibilityLabel = _ref.accessibilityLabel,_ref$closeIconAccessi = _ref.closeIconAccessibilityLabel,closeIconAccessibilityLabel = _ref$closeIconAccessi === void 0 ? 'Close' : _ref$closeIconAccessi,onPress = _ref.onPress,onLongPress = _ref.onLongPress,onClose = _ref.onClose,textStyle = _ref.textStyle,style = _ref.style,theme = _ref.theme,testID = _ref.testID,selectedColor = _ref.selectedColor,ellipsizeMode = _ref.ellipsizeMode,rest = require("@babel/runtime/helpers/objectWithoutProperties")(_ref, _excluded);
  var _React$useRef =

  React.useRef(new (require("react-native").Animated.Value)(0)),elevation = _React$useRef.current;

  var handlePressIn = function handlePressIn() {
    var
    scale =
    theme.animation.scale;

    require("react-native").Animated.timing(elevation, {
      toValue: 4,
      duration: 200 * scale,
      useNativeDriver: true }).
    start();
  };

  var handlePressOut = function handlePressOut() {
    var
    scale =
    theme.animation.scale;

    require("react-native").Animated.timing(elevation, {
      toValue: 0,
      duration: 150 * scale,
      useNativeDriver: true }).
    start();
  };

  var
  dark =

  theme.dark,colors = theme.colors;
  var defaultBackgroundColor = mode === 'outlined' ? colors.surface : dark ? '#383838' : '#ebebeb';
  var _ref2 =


  require("react-native").StyleSheet.flatten(style) || {},_ref2$backgroundColor = _ref2.backgroundColor,backgroundColor = _ref2$backgroundColor === void 0 ? defaultBackgroundColor : _ref2$backgroundColor,_ref2$borderRadius = _ref2.borderRadius,borderRadius = _ref2$borderRadius === void 0 ? 16 : _ref2$borderRadius;
  var borderColor = mode === 'outlined' ? (0, _color.default)(selectedColor !== undefined ? selectedColor : (0, _color.default)(dark ? require("../styles/colors").white : require("../styles/colors").black)).alpha(0.29).rgb().string() : backgroundColor;
  var textColor = disabled ? colors.disabled : (0, _color.default)(selectedColor !== undefined ? selectedColor : colors.text).alpha(0.87).rgb().string();
  var iconColor = disabled ? colors.disabled : (0, _color.default)(selectedColor !== undefined ? selectedColor : colors.text).alpha(0.54).rgb().string();
  var backgroundColorString = typeof backgroundColor === 'string' ? backgroundColor : defaultBackgroundColor;
  var selectedBackgroundColor = (dark ? (0, _color.default)(backgroundColorString).lighten(mode === 'outlined' ? 0.2 : 0.4) : (0, _color.default)(backgroundColorString).darken(mode === 'outlined' ? 0.08 : 0.2)).rgb().string();
  var underlayColor = selectedColor ? (0, _color.default)(selectedColor).fade(0.5).rgb().string() : selectedBackgroundColor;
  var accessibilityTraits = ['button'];
  var accessibilityState = {
    selected: selected,
    disabled: disabled };


  if (selected) {
    accessibilityTraits.push('selected');
  }

  if (disabled) {
    accessibilityTraits.push('disabled');
  }

  return React.createElement(_Surface.default, _extends({
    style: [styles.container, {
      elevation: require("react-native").Platform.OS === 'android' ? elevation : 0,
      backgroundColor: selected ? selectedBackgroundColor : backgroundColor,
      borderColor: borderColor,
      borderRadius: borderRadius },
    style] },
  rest), React.createElement(_TouchableRipple.default, {
    borderless: true,
    delayPressIn: 0,
    style: {
      borderRadius: borderRadius },

    onPress: onPress,
    onLongPress: onLongPress,
    onPressIn: handlePressIn,
    onPressOut: handlePressOut,
    underlayColor: underlayColor,
    disabled: disabled,
    accessibilityLabel: accessibilityLabel,

    accessibilityTraits: accessibilityTraits,
    accessibilityComponentType: "button",
    accessibilityRole: "button",
    accessibilityState: accessibilityState,
    testID: testID },
  React.createElement(require("react-native").View, {
    style: [styles.content, {
      paddingRight: onClose ? 32 : 4 }] },

  avatar && !icon ? React.createElement(require("react-native").View, {
    style: [styles.avatarWrapper, disabled && {
      opacity: 0.26 }] },

  React.isValidElement(avatar) ? React.cloneElement(avatar, {
    style: [styles.avatar, avatar.props.style] }) :
  avatar) : null, icon || selected ? React.createElement(require("react-native").View, {
    style: [styles.icon, avatar ? [styles.avatar, styles.avatarSelected] : null] },
  icon ? React.createElement(_Icon.default, {
    source: icon,
    color: avatar ? require("../styles/colors").white : iconColor,
    size: 18 }) :
  React.createElement(_MaterialCommunityIcon.default, {
    name: "check",
    color: avatar ? require("../styles/colors").white : iconColor,
    size: 18,
    direction: "ltr" })) :
  null, React.createElement(_Text.default, {
    selectable: false,
    numberOfLines: 1,
    style: [styles.text, _objectSpread(_objectSpread({}, theme.fonts.regular), {}, {
      color: textColor,
      marginRight: onClose ? 0 : 8,
      marginLeft: avatar || icon || selected ? 4 : 8 }),
    textStyle],
    ellipsizeMode: ellipsizeMode },
  children))), onClose ? React.createElement(require("react-native").View, {
    style: styles.closeButtonStyle },
  React.createElement(require("react-native").TouchableWithoutFeedback, {
    onPress: onClose,

    accessibilityTraits: "button",
    accessibilityComponentType: "button",
    accessibilityRole: "button",
    accessibilityLabel: closeIconAccessibilityLabel },
  React.createElement(require("react-native").View, {
    style: [styles.icon, styles.closeIcon] },
  React.createElement(_MaterialCommunityIcon.default, {
    name: "close-circle",
    size: 16,
    color: iconColor,
    direction: "ltr" })))) :
  null);
};

var styles = require("react-native").StyleSheet.create({
  container: {
    borderWidth: require("react-native").StyleSheet.hairlineWidth,
    borderStyle: 'solid',
    flexDirection: 'row' },

  content: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingLeft: 4,
    position: 'relative' },

  icon: {
    padding: 4,
    alignSelf: 'center' },

  closeIcon: {
    marginRight: 4 },

  text: {
    minHeight: 24,
    lineHeight: 24,
    textAlignVertical: 'center',
    marginVertical: 4 },

  avatar: {
    width: 24,
    height: 24,
    borderRadius: 12 },

  avatarWrapper: {
    marginRight: 4 },

  avatarSelected: {
    position: 'absolute',
    top: 4,
    left: 4,
    backgroundColor: 'rgba(0, 0, 0, .29)' },

  closeButtonStyle: {
    position: 'absolute',
    right: 0,
    height: '100%',
    justifyContent: 'center',
    alignItems: 'center' } });



var _default = (0, require("../core/theming").withTheme)(Chip);

exports.default = _default;