0ccc1a17f5eb0c8d6b6b17889845e557
"use strict";var _excluded = ["style", "background", "borderless", "disabled", "rippleColor", "underlayColor", "children", "theme"];

Object.defineProperty(exports, "__esModule", {
  value: true });

exports.default = void 0;

var React = _interopRequireWildcard(require("react"));



var _color = _interopRequireDefault(require("color"));



function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

function _getRequireWildcardCache() {if (typeof WeakMap !== "function") return null;var cache = new WeakMap();_getRequireWildcardCache = function _getRequireWildcardCache() {return cache;};return cache;}

function _interopRequireWildcard(obj) {if (obj && obj.__esModule) {return obj;}if (obj === null || typeof obj !== "object" && typeof obj !== "function") {return { default: obj };}var cache = _getRequireWildcardCache();if (cache && cache.has(obj)) {return cache.get(obj);}var newObj = {};var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;for (var key in obj) {if (Object.prototype.hasOwnProperty.call(obj, key)) {var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;if (desc && (desc.get || desc.set)) {Object.defineProperty(newObj, key, desc);} else {newObj[key] = obj[key];}}}newObj.default = obj;if (cache) {cache.set(obj, newObj);}return newObj;}

function _extends() {_extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};return _extends.apply(this, arguments);}

var ANDROID_VERSION_LOLLIPOP = 21;
var ANDROID_VERSION_PIE = 28;

var TouchableRipple = function TouchableRipple(_ref)









{var style = _ref.style,background = _ref.background,_ref$borderless = _ref.borderless,borderless = _ref$borderless === void 0 ? false : _ref$borderless,disabledProp = _ref.disabled,rippleColor = _ref.rippleColor,underlayColor = _ref.underlayColor,children = _ref.children,theme = _ref.theme,rest = require("@babel/runtime/helpers/objectWithoutProperties")(_ref, _excluded);
  var
  dark =

  theme.dark,colors = theme.colors;
  var disabled = disabledProp || !rest.onPress;
  var calculatedRippleColor = rippleColor || (0, _color.default)(colors.text).alpha(dark ? 0.32 : 0.2).rgb().string();


  var useForeground = require("react-native").Platform.OS === 'android' && require("react-native").Platform.Version >= ANDROID_VERSION_PIE && borderless;

  if (TouchableRipple.supported) {
    return React.createElement(require("react-native").TouchableNativeFeedback, _extends({}, rest, {
      disabled: disabled,
      useForeground: useForeground,
      background: background != null ? background : require("react-native").TouchableNativeFeedback.Ripple(calculatedRippleColor, borderless) }),
    React.createElement(require("react-native").View, {
      style: [borderless && styles.overflowHidden, style] },
    React.Children.only(children)));
  }

  return React.createElement(require("react-native").TouchableHighlight, _extends({}, rest, {
    disabled: disabled,
    style: [borderless && styles.overflowHidden, style],
    underlayColor: underlayColor != null ? underlayColor : (0, _color.default)(calculatedRippleColor).fade(0.5).rgb().string() }),
  React.Children.only(children));
};

TouchableRipple.supported = require("react-native").Platform.OS === 'android' && require("react-native").Platform.Version >= ANDROID_VERSION_LOLLIPOP;

var styles = require("react-native").StyleSheet.create({
  overflowHidden: {
    overflow: 'hidden' } });



var _default = (0, require("../../core/theming").withTheme)(TouchableRipple);

exports.default = _default;