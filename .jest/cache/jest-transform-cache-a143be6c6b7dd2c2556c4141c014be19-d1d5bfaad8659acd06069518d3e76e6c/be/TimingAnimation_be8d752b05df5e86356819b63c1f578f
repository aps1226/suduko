4f3bf50b640b35f24d14d08b74468df1










'use strict';function _createSuper(Derived) {var hasNativeReflectConstruct = _isNativeReflectConstruct();return function _createSuperInternal() {var Super = require("@babel/runtime/helpers/getPrototypeOf")(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = require("@babel/runtime/helpers/getPrototypeOf")(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return require("@babel/runtime/helpers/possibleConstructorReturn")(this, result);};}function _isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));return true;} catch (e) {return false;}}



































var _easeInOut;
function easeInOut() {
  if (!_easeInOut) {
    var Easing = require("../Easing");
    _easeInOut = Easing.inOut(Easing.ease);
  }
  return _easeInOut;
}var

TimingAnimation = function (_Animation) {require("@babel/runtime/helpers/inherits")(TimingAnimation, _Animation);var _super = _createSuper(TimingAnimation);











  function TimingAnimation(config) {var _config$easing, _config$duration, _config$delay, _config$iterations, _config$isInteraction;var _this;require("@babel/runtime/helpers/classCallCheck")(this, TimingAnimation);
    _this = _super.call(this);
    _this._toValue = config.toValue;
    _this._easing = (_config$easing = config.easing) != null ? _config$easing : easeInOut();
    _this._duration = (_config$duration = config.duration) != null ? _config$duration : 500;
    _this._delay = (_config$delay = config.delay) != null ? _config$delay : 0;
    _this.__iterations = (_config$iterations = config.iterations) != null ? _config$iterations : 1;
    _this._useNativeDriver = require("../NativeAnimatedHelper").shouldUseNativeDriver(config);
    _this.__isInteraction = (_config$isInteraction = config.isInteraction) != null ? _config$isInteraction : !_this._useNativeDriver;return _this;
  }require("@babel/runtime/helpers/createClass")(TimingAnimation, [{ key: "__getNativeAnimationConfig", value:

    function __getNativeAnimationConfig() {
      var frameDuration = 1000.0 / 60.0;
      var frames = [];
      var numFrames = Math.round(this._duration / frameDuration);
      for (var frame = 0; frame < numFrames; frame++) {
        frames.push(this._easing(frame / numFrames));
      }
      frames.push(this._easing(1));
      return {
        type: 'frames',
        frames: frames,
        toValue: this._toValue,
        iterations: this.__iterations };

    } }, { key: "start", value:

    function start(
    fromValue,
    onUpdate,
    onEnd,
    previousAnimation,
    animatedValue)
    {var _this2 = this;
      this.__active = true;
      this._fromValue = fromValue;
      this._onUpdate = onUpdate;
      this.__onEnd = onEnd;

      var start = function start() {



        if (_this2._duration === 0 && !_this2._useNativeDriver) {
          _this2._onUpdate(_this2._toValue);
          _this2.__debouncedOnEnd({ finished: true });
        } else {
          _this2._startTime = Date.now();
          if (_this2._useNativeDriver) {
            _this2.__startNativeAnimation(animatedValue);
          } else {
            _this2._animationFrame = requestAnimationFrame(
            _this2.onUpdate.bind(_this2));

          }
        }
      };
      if (this._delay) {
        this._timeout = setTimeout(start, this._delay);
      } else {
        start();
      }
    } }, { key: "onUpdate", value:

    function onUpdate() {
      var now = Date.now();
      if (now >= this._startTime + this._duration) {
        if (this._duration === 0) {
          this._onUpdate(this._toValue);
        } else {
          this._onUpdate(
          this._fromValue + this._easing(1) * (this._toValue - this._fromValue));

        }
        this.__debouncedOnEnd({ finished: true });
        return;
      }

      this._onUpdate(
      this._fromValue +
      this._easing((now - this._startTime) / this._duration) * (
      this._toValue - this._fromValue));

      if (this.__active) {
        this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
      }
    } }, { key: "stop", value:

    function stop() {
      require("@babel/runtime/helpers/get")(require("@babel/runtime/helpers/getPrototypeOf")(TimingAnimation.prototype), "stop", this).call(this);
      this.__active = false;
      clearTimeout(this._timeout);
      global.cancelAnimationFrame(this._animationFrame);
      this.__debouncedOnEnd({ finished: false });
    } }]);return TimingAnimation;}(require("./Animation"));


module.exports = TimingAnimation;