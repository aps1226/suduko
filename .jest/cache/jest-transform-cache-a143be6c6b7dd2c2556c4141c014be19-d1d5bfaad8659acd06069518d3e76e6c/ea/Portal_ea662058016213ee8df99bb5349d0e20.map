{"version":3,"sources":["Portal.tsx"],"names":["Portal","React","PortalHost","render","theme","settings","manager"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,KAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAA,eAAA,GAAA,sBAAA,CAAA,OAAA,oBAAA,CAAA;;AACA,IAAA,WAAA,GAAA,uBAAA,CAAA,OAAA,gBAAA,CAAA;;AACA,IAAA,SAAA,GAAA,OAAA,uBAAA;;AAIA,IAAA,QAAA,GAAA,OAAA,sBAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAgCA,M;;;;;;;;;;;;WAIEG,kBAAS;AACP,wBAA4B,KAA5B,KAAA;AAAA,UAAM,QAAN,eAAM,QAAN;AAAA,UAAkBC,KAAlB,eAAkBA,KAAlB;AAEA,aACE,KAAA,CAAA,aAAA,CAAC,SAAA,CAAD,QAAA,EAAA,IAAA,EACIC,UAAAA,QAAD;AAAA,eACC,KAAA,CAAA,aAAA,CAAC,WAAA,CAAD,aAAC,CAAD,QAAA,EAAA,IAAA,EACIC,UAAAA,OAAD;AAAA,iBACC,KAAA,CAAA,aAAA,CAAC,eAAA,CAAD,OAAA,EAAA;AAAgB,YAAA,OAAO,EAAEA;AAAzB,WAAA,EACE,KAAA,CAAA,aAAA,CAAC,SAAA,CAAD,QAAA,EAAA;AAAkB,YAAA,KAAK,EAAED;AAAzB,WAAA,EACE,KAAA,CAAA,aAAA,CAAC,QAAA,CAAD,aAAA,EAAA;AAAe,YAAA,KAAK,EAAED;AAAtB,WAAA,EAPd,QAOc,CADF,CADF,CADD;AAAA,SADH,CADD;AAAA,OADH,CADF;AAeD;;;EAtBkBH,KAAK,CAA1B,S;;gBAAMD,M,UAEUE,WAAAA,CAAAA,O;;eAuBD,CAAA,GAAA,QAAA,CAAA,SAAA,EAAA,MAAA,C","sourcesContent":["import * as React from 'react';\nimport PortalConsumer from './PortalConsumer';\nimport PortalHost, { PortalContext, PortalMethods } from './PortalHost';\nimport {\n  Provider as SettingsProvider,\n  Consumer as SettingsConsumer,\n} from '../../core/settings';\nimport { ThemeProvider, withTheme } from '../../core/theming';\n\ntype Props = {\n  /**\n   * Content of the `Portal`.\n   */\n  children: React.ReactNode;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * Portal allows to render a component at a different place in the parent tree.\n * You can use it to render content which should appear above other elements, similar to `Modal`.\n * It requires a [`Portal.Host`](portal-host.html) component to be rendered somewhere in the parent tree.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Portal, Text } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Portal>\n *     <Text>This is rendered at a different place</Text>\n *   </Portal>\n * );\n *\n * export default MyComponent;\n * ```\n */\nclass Portal extends React.Component<Props> {\n  // @component ./PortalHost.tsx\n  static Host = PortalHost;\n\n  render() {\n    const { children, theme } = this.props;\n\n    return (\n      <SettingsConsumer>\n        {(settings) => (\n          <PortalContext.Consumer>\n            {(manager) => (\n              <PortalConsumer manager={manager as PortalMethods}>\n                <SettingsProvider value={settings}>\n                  <ThemeProvider theme={theme}>{children}</ThemeProvider>\n                </SettingsProvider>\n              </PortalConsumer>\n            )}\n          </PortalContext.Consumer>\n        )}\n      </SettingsConsumer>\n    );\n  }\n}\n\nexport default withTheme(Portal);\n"]}