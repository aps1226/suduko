{"version":3,"sources":["C:\\Users\\ashee\\Documents\\Javascript\\React\\React Native\\suduko\\src\\state\\boardController.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","sourcesContent":["//Function shuffles array.\r\nexport function shuffle(array: number[]):number[] {\r\n  var currentIndex:number = array.length,  randomIndex:number;\r\n  // While there remain elements to shuffle...\r\n  while (0 !== currentIndex) {\r\n    // Pick a remaining element...\r\n    randomIndex = Math.floor(Math.random() * currentIndex);\r\n    currentIndex--;\r\n    // And swap it with the current element.\r\n    [array[currentIndex], array[randomIndex]] = [\r\n      array[randomIndex], array[currentIndex]];\r\n  }\r\n  return array;\r\n}\r\n\r\n//Helper function for generateBoard function to determine if respective row and column are valid inputs.\r\nexport function isValid(board:(number|null)[][], row:number, col:number, k:number) {\r\n  //Determine if the current value k exists with in the respective positions:\r\n    //row\r\n    //column\r\n    //sub-box\r\n  //If it does, the entry is not valid.\r\n  for (let i = 0; i < 9; i++) {\r\n      const m = 3 * Math.floor(row / 3) + Math.floor(i / 3);\r\n      const n = 3 * Math.floor(col / 3) + i % 3;\r\n      if (board[row][i] == k || board[i][col] == k || board[m][n] == k) {\r\n        return false;\r\n      }\r\n  }\r\n  return true;\r\n}\r\n\r\n//Function to generate game board.\r\nexport function generateBoard(data:(number|null)[][]):(number|null)[][] {\r\n  //Iterate through each row of board.\r\n  for (let i = 0; i < 9; i++) {\r\n    //Iterate through column of respective row.\r\n    for (let j = 0; j < 9; j++) {\r\n      //If current value needs an entry.\r\n      if (data[i][j] === null) {\r\n        //Iterate through possible values.\r\n        for (let k = 1; k <= 9; k++) {\r\n          //Determine if current value if valid for the board\r\n          //at the current position.\r\n          if (isValid(data, i, j, k)) {\r\n            data[i][j] = k;\r\n            //If the value is valid, recurse with the given value\r\n            //entered on the board.\r\n            if (!generateBoard(data).some(row => row.includes(null))) {\r\n              return generateBoard(data);\r\n            //If false is returned, iterate to the next value.\r\n            } else {\r\n              data[i][j] = null;\r\n            }\r\n          }\r\n        }\r\n        return data;\r\n      }\r\n    }\r\n  }\r\n  return data;\r\n}\r\n\r\n//Function determines if the current game board is valid.\r\nexport function isValidSudoku(board:(number|null)[][]):boolean {\r\n  for (let i = 0; i < 9; i++) {\r\n    let row = new Set(),\r\n        col = new Set(),\r\n        box = new Set();\r\n\r\n    for (let j = 0; j < 9; j++) {\r\n      let _row = board[i][j];\r\n      let _col = board[j][i];\r\n      let _box = board[3*Math.floor(i/3)+Math.floor(j/3)][3*(i%3)+(j%3)]\r\n      \r\n      if (_row !== null) {\r\n        if (row.has(_row)) return false;\r\n        row.add(_row);\r\n      }\r\n      if (_col !== null) {\r\n        if (col.has(_col)) return false;\r\n        col.add(_col);\r\n      }\r\n      \r\n      if (_box !== null) {\r\n        if (box.has(_box)) return false;\r\n        box.add(_box);\r\n      } \r\n    }\r\n  }\r\n  return true\r\n};\r\n\r\n//Function determines if the current game board is solvable.\r\nexport function isSolvable(data:(number|null)[][]):boolean {\r\n  //Iterate through each row of board.\r\n  for (let i = 0; i < 9; i++) {\r\n    //Iterate through column of respective row.\r\n    for (let j = 0; j < 9; j++) {\r\n      //If current value needs an entry.\r\n      if (data[i][j] == null) {\r\n        //Iterate through possible values.\r\n        for (let k = 1; k <= 9; k++) {\r\n          //Determine if current value if valid for the board\r\n          //at the current position.\r\n          if (isValid(data, i, j, k)) {\r\n            data[i][j] = k;\r\n            //If the value is valid, recurse with the given value\r\n            //entered on the board.\r\n            if (isSolvable(data)) {\r\n              return true;\r\n            //If false is returned, iterate to the next value.\r\n            } else {\r\n              data[i][j] = null;\r\n            }\r\n          }\r\n        }\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\n//Function initializes game board based on difficulty input.\r\nexport function initBoard(curBoard: (number|null)[][], difficulty:number):(number|null)[][]{\r\n  let blank:number;\r\n  switch(difficulty){\r\n    //Easy selection.\r\n    case 0:\r\n      //Board should be initialized with (44, )\r\n      blank = 81 - (37 + Math.floor(9 * Math.random()));\r\n      break;\r\n    case 1:\r\n      blank = 81 - (27 + Math.floor(9 * Math.random()));\r\n      break;\r\n    case 2:\r\n      blank = 81 - (19 + Math.floor(9 * Math.random()));\r\n      break;\r\n    case 3:\r\n      blank = 63;\r\n      break;\r\n    default:\r\n      blank = Math.floor(37 * Math.random());\r\n  }\r\n\r\n  for(let i = 0; i < blank; i++){\r\n    let row:number = Math.floor(9*Math.random());\r\n    let col:number = Math.floor(9*Math.random());\r\n    while(!curBoard[row][col]) row = Math.floor(9*Math.random()),col = Math.floor(9*Math.random());\r\n    const clonedBoard = curBoard.map(arr => [...arr])\r\n    while(!isSolvable(clonedBoard)){\r\n      clonedBoard[row][col] = curBoard[row][col];\r\n      row = Math.floor(9*Math.random());\r\n      col = Math.floor(9*Math.random());\r\n      while(!curBoard[row][col]) row = Math.floor(9*Math.random()),col = Math.floor(9*Math.random());\r\n      clonedBoard[row][col] = null;\r\n    }\r\n    curBoard[row][col] = null;\r\n  }\r\n  return curBoard;\r\n}\r\n\r\n//Function determines if the board has been solved.\r\nexport function isCompleted(board:(number|null)[][]):boolean{\r\n  for(let i = 0; i < board.length; i++){\r\n    if(board[i].includes(null)) return false;\r\n  }\r\n  return true;\r\n}"]}