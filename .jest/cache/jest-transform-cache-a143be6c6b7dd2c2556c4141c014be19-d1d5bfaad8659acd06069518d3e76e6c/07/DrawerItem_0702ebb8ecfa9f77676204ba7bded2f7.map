{"version":3,"sources":["DrawerItem.tsx"],"names":["DrawerItem","rest","roundness","backgroundColor","active","colors","contentColor","font","theme","labelMargin","icon","styles","borderRadius","selected","accessibilityLabel","wrapper","content","color","marginLeft","right","container","marginHorizontal","marginVertical","flexDirection","alignItems","padding","flex","label","marginRight"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,IAAA,MAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAA,KAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAA,YAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AACA,IAAA,KAAA,GAAA,sBAAA,CAAA,OAAA,sBAAA,CAAA;;AACA,IAAA,KAAA,GAAA,sBAAA,CAAA,OAAA,WAAA,CAAA;;AACA,IAAA,gBAAA,GAAA,sBAAA,CAAA,OAAA,sCAAA,CAAA;;AACA,IAAA,QAAA,GAAA,OAAA,sBAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2DA,IAAMA,UAAU,GAAG,SAAbA,UAAa,OAUN;AAAA,MAVO,IAUP,QAVO,IAUP;AAAA,MAVO,KAUP,QAVO,KAUP;AAAA,MAVO,MAUP,QAVO,MAUP;AAAA,MAVO,KAUP,QAVO,KAUP;AAAA,MAVO,KAUP,QAVO,KAUP;AAAA,MAVO,OAUP,QAVO,OAUP;AAAA,MAVO,kBAUP,QAVO,kBAUP;AAAA,MAVO,KAUP,QAVO,KAUP;AAAA,MADRC,IACQ;AACX,MAAM,MAAN,GAAA,KAAA,CAAM,MAAN;AAAA,MAAgBC,SAAhB,GAAA,KAAA,CAAgBA,SAAhB;AACA,MAAMC,eAAe,GAAGC,MAAM,GAC1B,CAAA,GAAA,MAAA,CAAA,OAAA,EAAMC,MAAM,CAAZ,OAAA,EAAA,KAAA,CAAA,IAAA,EAAA,GAAA,GAD0B,MAC1B,EAD0B,GAA9B,aAAA;AAGA,MAAMC,YAAY,GAAGF,MAAM,GACvBC,MAAM,CADiB,OAAA,GAEvB,CAAA,GAAA,MAAA,CAAA,OAAA,EAAMA,MAAM,CAAZ,IAAA,EAAA,KAAA,CAAA,IAAA,EAAA,GAAA,GAFJ,MAEI,EAFJ;AAGA,MAAME,IAAI,GAAGC,KAAK,CAALA,KAAAA,CAAb,MAAA;AACA,MAAMC,WAAW,GAAGC,IAAI,GAAA,EAAA,GAAxB,CAAA;AAEA,SACE,KAAA,CAAA,aAAA,CAAC,YAAA,CAAD,IAAA,EAAA,QAAA,CAAA,EAAA,EAAA,IAAA,EAAA;AAEE,IAAA,KAAK,EAAE,CACLC,MAAM,CADD,SAAA,EAEL;AAAER,MAAAA,eAAF,EAAEA,eAAF;AAAmBS,MAAAA,YAAY,EAAEV;AAAjC,KAFK,EAAA,KAAA;AAFT,GAAA,CAAA,EAQE,KAAA,CAAA,aAAA,CAAC,gBAAA,CAAD,OAAA,EAAA;AACE,IAAA,UAAU,EADZ,IAAA;AAEE,IAAA,YAAY,EAFd,CAAA;AAGE,IAAA,OAAO,EAHT,OAAA;AAIE,IAAA,KAAK,EAAE;AAAEU,MAAAA,YAAY,EAAEV;AAAhB,KAJT;AAME,IAAA,mBAAmB,EAAEE,MAAM,GAAG,CAAA,QAAA,EAAH,UAAG,CAAH,GAN7B,QAAA;AAOE,IAAA,0BAA0B,EAP5B,QAAA;AAQE,IAAA,iBAAiB,EARnB,QAAA;AASE,IAAA,kBAAkB,EAAE;AAAES,MAAAA,QAAQ,EAAET;AAAZ,KATtB;AAUE,IAAA,kBAAkB,EAAEU;AAVtB,GAAA,EAYE,KAAA,CAAA,aAAA,CAAC,YAAA,CAAD,IAAA,EAAA;AAAM,IAAA,KAAK,EAAEH,MAAM,CAACI;AAApB,GAAA,EACE,KAAA,CAAA,aAAA,CAAC,YAAA,CAAD,IAAA,EAAA;AAAM,IAAA,KAAK,EAAEJ,MAAM,CAACK;AAApB,GAAA,EACGN,IAAI,GACH,KAAA,CAAA,aAAA,CAAC,KAAA,CAAD,OAAA,EAAA;AAAM,IAAA,MAAM,EAAZ,IAAA;AAAoB,IAAA,IAAI,EAAxB,EAAA;AAA8B,IAAA,KAAK,EAAEJ;AAArC,GAAA,CADG,GADP,IAAA,EAIE,KAAA,CAAA,aAAA,CAAC,KAAA,CAAD,OAAA,EAAA;AACE,IAAA,UAAU,EADZ,KAAA;AAEE,IAAA,aAAa,EAFf,CAAA;AAGE,IAAA,KAAK,EAAE,CACLK,MAAM,CADD,KAAA;AAGHM,MAAAA,KAAK,EADP;AAFK,OAEL,IAFK;AAKHC,MAAAA,UAAU,EAAET;AALT;AAHT,GAAA,EALJ,KAKI,CAJF,CADF,EAoBGU,KApBH,KAAA,IAoBGA,IAAAA,KApBH,KAAA,KAAA,CAoBGA,GApBH,KAAA,CAoBGA,GAAAA,KAAK,CAAG;AAAEF,IAAAA,KAAK,EAAEX;AAAT,GAAH,CApBR,CAZF,CARF,CADF;AArBF,CAAA;;AAqEAN,UAAU,CAAVA,WAAAA,GAAAA,aAAAA;;AAEA,IAAMW,MAAM,GAAG,YAAA,CAAA,UAAA,CAAA,MAAA,CAAkB;AAC/BS,EAAAA,SAAS,EAAE;AACTC,IAAAA,gBAAgB,EADP,EAAA;AAETC,IAAAA,cAAc,EAAE;AAFP,GADoB;AAK/BP,EAAAA,OAAO,EAAE;AACPQ,IAAAA,aAAa,EADN,KAAA;AAEPC,IAAAA,UAAU,EAFH,QAAA;AAGPC,IAAAA,OAAO,EAAE;AAHF,GALsB;AAU/BT,EAAAA,OAAO,EAAE;AACPU,IAAAA,IAAI,EADG,CAAA;AAEPH,IAAAA,aAAa,EAFN,KAAA;AAGPC,IAAAA,UAAU,EAAE;AAHL,GAVsB;AAe/BG,EAAAA,KAAK,EAAE;AACLC,IAAAA,WAAW,EAAE;AADR;AAfwB,CAAlB,CAAf;;eAoBe,CAAA,GAAA,QAAA,CAAA,SAAA,EAAA,UAAA,C","sourcesContent":["import color from 'color';\nimport * as React from 'react';\nimport { View, StyleSheet, StyleProp, ViewStyle } from 'react-native';\nimport Text from '../Typography/Text';\nimport Icon, { IconSource } from '../Icon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * The label text of the item.\n   */\n  label: string;\n  /**\n   * Icon to display for the `DrawerItem`.\n   */\n  icon?: IconSource;\n  /**\n   * Whether to highlight the drawer item as active.\n   */\n  active?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Callback which returns a React element to display on the right side. For instance a Badge.\n   */\n  right?: (props: { color: string }) => React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * A component used to show an action item with an icon and a label in a navigation drawer.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/drawer-item.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Drawer } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *    <Drawer.Item\n *      style={{ backgroundColor: '#64ffda' }}\n *      icon=\"star\"\n *      label=\"First Item\"\n *    />\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst DrawerItem = ({\n  icon,\n  label,\n  active,\n  theme,\n  style,\n  onPress,\n  accessibilityLabel,\n  right,\n  ...rest\n}: Props) => {\n  const { colors, roundness } = theme;\n  const backgroundColor = active\n    ? color(colors.primary).alpha(0.12).rgb().string()\n    : 'transparent';\n  const contentColor = active\n    ? colors.primary\n    : color(colors.text).alpha(0.68).rgb().string();\n  const font = theme.fonts.medium;\n  const labelMargin = icon ? 32 : 0;\n\n  return (\n    <View\n      {...rest}\n      style={[\n        styles.container,\n        { backgroundColor, borderRadius: roundness },\n        style,\n      ]}\n    >\n      <TouchableRipple\n        borderless\n        delayPressIn={0}\n        onPress={onPress}\n        style={{ borderRadius: roundness }}\n        // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n        accessibilityTraits={active ? ['button', 'selected'] : 'button'}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityState={{ selected: active }}\n        accessibilityLabel={accessibilityLabel}\n      >\n        <View style={styles.wrapper}>\n          <View style={styles.content}>\n            {icon ? (\n              <Icon source={icon} size={24} color={contentColor} />\n            ) : null}\n            <Text\n              selectable={false}\n              numberOfLines={1}\n              style={[\n                styles.label,\n                {\n                  color: contentColor,\n                  ...font,\n                  marginLeft: labelMargin,\n                },\n              ]}\n            >\n              {label}\n            </Text>\n          </View>\n          {right?.({ color: contentColor })}\n        </View>\n      </TouchableRipple>\n    </View>\n  );\n};\n\nDrawerItem.displayName = 'Drawer.Item';\n\nconst styles = StyleSheet.create({\n  container: {\n    marginHorizontal: 10,\n    marginVertical: 4,\n  },\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 8,\n  },\n  content: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  label: {\n    marginRight: 32,\n  },\n});\n\nexport default withTheme(DrawerItem);\n"]}