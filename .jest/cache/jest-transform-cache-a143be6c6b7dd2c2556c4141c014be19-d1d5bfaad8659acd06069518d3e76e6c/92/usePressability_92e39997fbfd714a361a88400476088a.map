{"version":3,"sources":["usePressability.js"],"names":["usePressability","config","pressabilityRef","current","Pressability","pressability","configure","reset","getEventHandlers"],"mappings":"AAUA;;;;;;;;;AAEA;;AAIA;;AAEe,SAASA,eAAT,CACbC,MADa,EAEE;AACf,MAAMC,eAAe,GAAG,mBAAsB,IAAtB,CAAxB;;AACA,MAAIA,eAAe,CAACC,OAAhB,IAA2B,IAA/B,EAAqC;AACnCD,IAAAA,eAAe,CAACC,OAAhB,GAA0B,IAAIC,qBAAJ,CAAiBH,MAAjB,CAA1B;AACD;;AACD,MAAMI,YAAY,GAAGH,eAAe,CAACC,OAArC;AAIA,wBAAU,YAAM;AACdE,IAAAA,YAAY,CAACC,SAAb,CAAuBL,MAAvB;AACD,GAFD,EAEG,CAACA,MAAD,EAASI,YAAT,CAFH;AAMA,wBAAU,YAAM;AACd,WAAO,YAAM;AACXA,MAAAA,YAAY,CAACE,KAAb;AACD,KAFD;AAGD,GAJD,EAIG,CAACF,YAAD,CAJH;AAMA,SAAOA,YAAY,CAACG,gBAAb,EAAP;AACD","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n'use strict';\n\nimport Pressability, {\n  type EventHandlers,\n  type PressabilityConfig,\n} from './Pressability';\nimport {useEffect, useRef} from 'react';\n\nexport default function usePressability(\n  config: PressabilityConfig,\n): EventHandlers {\n  const pressabilityRef = useRef<?Pressability>(null);\n  if (pressabilityRef.current == null) {\n    pressabilityRef.current = new Pressability(config);\n  }\n  const pressability = pressabilityRef.current;\n\n  // On the initial mount, this is a no-op. On updates, `pressability` will be\n  // re-configured to use the new configuration.\n  useEffect(() => {\n    pressability.configure(config);\n  }, [config, pressability]);\n\n  // On unmount, reset pending state and timers inside `pressability`. This is\n  // a separate effect because we do not want to reset when `config` changes.\n  useEffect(() => {\n    return () => {\n      pressability.reset();\n    };\n  }, [pressability]);\n\n  return pressability.getEventHandlers();\n}\n"]}