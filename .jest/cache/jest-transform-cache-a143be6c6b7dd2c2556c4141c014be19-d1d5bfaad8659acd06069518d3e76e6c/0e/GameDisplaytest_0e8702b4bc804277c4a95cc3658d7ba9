526d275376b310096e2af396ea492193
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _react = _interopRequireDefault(require("react"));

var _renderWithRedux = _interopRequireDefault(require("./renderWithRedux"));

var _history = require("history");

var _reactNative = require("@testing-library/react-native");

var _GameDisplay = _interopRequireDefault(require("../../../components/GameDisplay"));

function _getJestObj() {
  var _require = require("@jest/globals"),
      jest = _require.jest;

  _getJestObj = function _getJestObj() {
    return jest;
  };

  return jest;
}

var history = (0, _history.createMemoryHistory)();
var path = "/route/:id";
var match = {
  isExact: false,
  path: path,
  url: path.replace(':id', '1'),
  params: {
    id: '1'
  }
};
var location = (0, _history.createLocation)(match.url);
var board = [[3, 1, 6, 5, 7, 8, 4, 9, 2], [5, 2, 9, 1, 3, 4, 7, 6, 8], [4, 8, 7, 6, 2, 9, 5, 3, 1], [2, 6, 3, 4, 1, 5, 9, 8, 7], [9, 7, 4, 8, 6, null, 1, 2, 5], [8, 5, 1, 7, 9, 2, 6, 4, 3], [1, 3, 8, 9, 4, 7, 2, null, 6], [6, 9, 2, 3, 5, 1, 8, 7, 4], [7, 4, 5, 2, 8, 6, 3, 1, 9]];
var colors = {
  1: ['transparent', 'black'],
  2: ['transparent', 'black'],
  3: ['transparent', 'black'],
  4: ['transparent', 'black'],
  5: ['transparent', 'black'],
  6: ['transparent', 'black'],
  7: ['transparent', 'black'],
  8: ['transparent', 'black'],
  9: ['transparent', 'black'],
  'Selection_1': '#3297FD',
  'Selection_2': 'transparent',
  'Selection_3': 'transparent',
  'Selection_4': 'transparent',
  'Selection_5': 'transparent',
  'Selection_6': 'transparent',
  'Selection_7': 'transparent',
  'Selection_8': 'transparent',
  'Selection_9': 'transparent',
  'gradient': ["#a37e5c", "#b89372", "#c8a484", "#dcb999", "#d3af8f", "#d9b696", "#ceaa89", "#d2ae8d", "#b38e6d", "#aa8563", "#a37e5c", "#b89372", "#c8a484", "#dcb999", "#d3af8f", "#d9b696", "#ceaa89", "#d2ae8d", "#b38e6d", "#aa8563", "#a37e5c", "#b89372", "#c8a484", "#dcb999", "#d3af8f", "#d9b696", "#ceaa89", "#d2ae8d", "#b38e6d", "#aa8563", "#a37e5c", "#b89372", "#c8a484", "#dcb999", "#d3af8f", "#d9b696", "#ceaa89", "#d2ae8d", "#b38e6d", "#aa8563", "#a37e5c", "#b89372", "#c8a484", "#dcb999", "#d3af8f", "#d9b696", "#ceaa89", "#d2ae8d", "#b38e6d", "#aa8563"]
};
describe('GameDisplay', function () {
  _getJestObj().mock('react-native/Libraries/Components/Switch/Switch', function () {
    var mockComponent = require('react-native/jest/mockComponent');

    return mockComponent('react-native/Libraries/Components/Switch/Switch');
  });

  var mockStore = {
    'board': board,
    'colors': colors
  };
  var gameDisplayComponent;
  beforeEach(function _callee() {
    return _regenerator.default.async(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return _regenerator.default.awrap((0, _reactNative.waitFor)(function () {
              gameDisplayComponent = (0, _renderWithRedux.default)(_react.default.createElement(_GameDisplay.default, {
                history: history,
                location: location,
                match: match
              }), {
                initialState: mockStore
              });
            }));

          case 2:
          case "end":
            return _context.stop();
        }
      }
    }, null, null, null, Promise);
  });
  afterEach(_reactNative.cleanup);
  it('renders without crashing', function _callee2() {
    return _regenerator.default.async(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            expect(gameDisplayComponent.toJSON()).toMatchSnapshot();

          case 1:
          case "end":
            return _context2.stop();
        }
      }
    }, null, null, null, Promise);
  });
  it("should not render the Winner component if the board is not complete", function _callee3() {
    var _gameDisplayComponent, getByTestId, store, queryByTestId, selectionSquare5, gridSquare67, winnerAnimation;

    return _regenerator.default.async(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _gameDisplayComponent = gameDisplayComponent, getByTestId = _gameDisplayComponent.getByTestId, store = _gameDisplayComponent.store, queryByTestId = _gameDisplayComponent.queryByTestId;
            selectionSquare5 = getByTestId('selectionSquare_5');
            gridSquare67 = getByTestId('gridSquare_67');
            winnerAnimation = queryByTestId('winnerAnimation');

            _reactNative.fireEvent.press(selectionSquare5);

            _reactNative.fireEvent.press(gridSquare67);

            expect(winnerAnimation).toEqual(null);

          case 7:
          case "end":
            return _context3.stop();
        }
      }
    }, null, null, null, Promise);
  });
  it("should render the Winner component if the board is complete", function _callee4() {
    var _gameDisplayComponent2, getByTestId, store, queryByTestId, selectionSquare5, selectionSquare3, gridSquare67, gridSquare45;

    return _regenerator.default.async(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _gameDisplayComponent2 = gameDisplayComponent, getByTestId = _gameDisplayComponent2.getByTestId, store = _gameDisplayComponent2.store, queryByTestId = _gameDisplayComponent2.queryByTestId;
            selectionSquare5 = getByTestId('selectionSquare_5');
            selectionSquare3 = getByTestId('selectionSquare_3');
            gridSquare67 = getByTestId('gridSquare_67');
            gridSquare45 = getByTestId('gridSquare_45');

            _reactNative.fireEvent.press(selectionSquare5);

            _reactNative.fireEvent.press(gridSquare67);

            _reactNative.fireEvent.press(selectionSquare3);

            _reactNative.fireEvent.press(gridSquare45);

            _context4.next = 11;
            return _regenerator.default.awrap((0, _reactNative.waitFor)(function () {
              expect(queryByTestId('winnerAnimation')).toBeTruthy();
            }));

          case 11:
          case "end":
            return _context4.stop();
        }
      }
    }, null, null, null, Promise);
  });
  it("should route to the main menu if the board is completed and the screen is, then, pressed", function _callee5() {
    var _gameDisplayComponent3, getByTestId, selectionSquare5, selectionSquare3, gridSquare67, gridSquare45, curHistory;

    return _regenerator.default.async(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _gameDisplayComponent3 = gameDisplayComponent, getByTestId = _gameDisplayComponent3.getByTestId;
            selectionSquare5 = getByTestId('selectionSquare_5');
            selectionSquare3 = getByTestId('selectionSquare_3');
            gridSquare67 = getByTestId('gridSquare_67');
            gridSquare45 = getByTestId('gridSquare_45');
            curHistory = history.length;

            _reactNative.fireEvent.press(selectionSquare5);

            _reactNative.fireEvent.press(gridSquare67);

            _reactNative.fireEvent.press(selectionSquare3);

            _reactNative.fireEvent.press(gridSquare45);

            _context5.next = 12;
            return _regenerator.default.awrap((0, _reactNative.waitFor)(function () {
              var winnerAnimationPressable = getByTestId('winnerAnimationPressable');

              _reactNative.fireEvent.press(winnerAnimationPressable);

              expect(history.length).toBe(curHistory + 1);
              expect(history.location.pathname).toBe('/');
            }));

          case 12:
          case "end":
            return _context5.stop();
        }
      }
    }, null, null, null, Promise);
  });
  it("should allow for color highlighting based on value", function _callee6() {
    var _gameDisplayComponent4, getByTestId, getAllByTestId, store, gridSquare00, gridSquareView3Arr, gridSquareText3Arr;

    return _regenerator.default.async(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            _gameDisplayComponent4 = gameDisplayComponent, getByTestId = _gameDisplayComponent4.getByTestId, getAllByTestId = _gameDisplayComponent4.getAllByTestId, store = _gameDisplayComponent4.store;
            gridSquare00 = getByTestId('gridSquare_00');
            gridSquareView3Arr = getAllByTestId('gridSquareView_3');
            gridSquareText3Arr = getAllByTestId('gridSquareText_3');

            _reactNative.fireEvent.press(gridSquare00);

            _context6.next = 7;
            return _regenerator.default.awrap((0, _reactNative.waitFor)(function () {
              expect(store.getState().colors['3'][0] === '#008000' && store.getState().colors['3'][1] === '#008000').toBeTruthy();
              gridSquareView3Arr.map(function (comp) {
                return expect(comp.props.style.backgroundColor).toBe('#008000');
              });
              gridSquareText3Arr.map(function (comp) {
                return expect(comp.props.style.color).toBe('#008000');
              });
            }));

          case 7:
          case "end":
            return _context6.stop();
        }
      }
    }, null, null, null, Promise);
  });
  it("should allow for note entry for square thats do not have an inputted value", function _callee7() {
    var _gameDisplayComponent5, getByTestId, store, entryModeToggle, gridSquare67;

    return _regenerator.default.async(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            _gameDisplayComponent5 = gameDisplayComponent, getByTestId = _gameDisplayComponent5.getByTestId, store = _gameDisplayComponent5.store;
            entryModeToggle = getByTestId('entryModeToggle');
            gridSquare67 = getByTestId('gridSquare_67');
            (0, _reactNative.fireEvent)(entryModeToggle, 'valueChange', false);
            [1, 2, 3, 5, 6, 7, 8, 9].forEach(function (num, index) {
              var selection = getByTestId("selectionSquare_" + num);

              _reactNative.fireEvent.press(selection);

              _reactNative.fireEvent.press(gridSquare67);

              expect(store.getState().notes['67'][index]).toBe(num);
            });

          case 5:
          case "end":
            return _context7.stop();
        }
      }
    }, null, null, null, Promise);
  });
  it("should route to the main menu when the 'Main Menu' button is selected", function () {
    var _gameDisplayComponent6 = gameDisplayComponent,
        getByTestId = _gameDisplayComponent6.getByTestId;
    var mainMenuButton = getByTestId('mainMenuButton');
    var curHistory = history.length;

    _reactNative.fireEvent.press(mainMenuButton);

    expect(history.length).toBe(curHistory + 1);
    expect(history.location.pathname).toBe('/');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,