e06ce6c499c2dd8d3dc572ed035118bc
'use strict';

var RE_FRAME = /^ {4}at (.+?)(?: \((native)\)?| \((address at )?(.+?):(\d+):(\d+)\))$/;
var RE_SKIPPED = /^ {4}... skipping (\d+) frames$/;

function parseLine(line) {
  var asFrame = line.match(RE_FRAME);

  if (asFrame) {
    return {
      type: 'FRAME',
      functionName: asFrame[1],
      location: asFrame[2] === 'native' ? {
        type: 'NATIVE'
      } : asFrame[3] === 'address at ' ? {
        type: 'BYTECODE',
        sourceUrl: asFrame[4],
        line1Based: Number.parseInt(asFrame[5], 10),
        virtualOffset0Based: Number.parseInt(asFrame[6], 10)
      } : {
        type: 'SOURCE',
        sourceUrl: asFrame[4],
        line1Based: Number.parseInt(asFrame[5], 10),
        column1Based: Number.parseInt(asFrame[6], 10)
      }
    };
  }

  var asSkipped = line.match(RE_SKIPPED);

  if (asSkipped) {
    return {
      type: 'SKIPPED',
      count: Number.parseInt(asSkipped[1], 10)
    };
  }
}

module.exports = function parseHermesStack(stack) {
  var lines = stack.split(/\n/);
  var entries = [];
  var lastMessageLine = -1;

  for (var i = 0; i < lines.length; ++i) {
    var line = lines[i];

    if (!line) {
      continue;
    }

    var entry = parseLine(line);

    if (entry) {
      entries.push(entry);
      continue;
    }

    lastMessageLine = i;
    entries = [];
  }

  var message = lines.slice(0, lastMessageLine + 1).join('\n');
  return {
    message: message,
    entries: entries
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhcnNlSGVybWVzU3RhY2suanMiXSwibmFtZXMiOlsiUkVfRlJBTUUiLCJSRV9TS0lQUEVEIiwicGFyc2VMaW5lIiwibGluZSIsImFzRnJhbWUiLCJtYXRjaCIsInR5cGUiLCJmdW5jdGlvbk5hbWUiLCJsb2NhdGlvbiIsInNvdXJjZVVybCIsImxpbmUxQmFzZWQiLCJOdW1iZXIiLCJwYXJzZUludCIsInZpcnR1YWxPZmZzZXQwQmFzZWQiLCJjb2x1bW4xQmFzZWQiLCJhc1NraXBwZWQiLCJjb3VudCIsIm1vZHVsZSIsImV4cG9ydHMiLCJwYXJzZUhlcm1lc1N0YWNrIiwic3RhY2siLCJsaW5lcyIsInNwbGl0IiwiZW50cmllcyIsImxhc3RNZXNzYWdlTGluZSIsImkiLCJsZW5ndGgiLCJlbnRyeSIsInB1c2giLCJtZXNzYWdlIiwic2xpY2UiLCJqb2luIl0sIm1hcHBpbmdzIjoiQUFVQTs7QUFrREEsSUFBTUEsUUFBUSxHQUFHLHVFQUFqQjtBQUlBLElBQU1DLFVBQVUsR0FBRyxpQ0FBbkI7O0FBRUEsU0FBU0MsU0FBVCxDQUFtQkMsSUFBbkIsRUFBb0Q7QUFDbEQsTUFBTUMsT0FBTyxHQUFHRCxJQUFJLENBQUNFLEtBQUwsQ0FBV0wsUUFBWCxDQUFoQjs7QUFDQSxNQUFJSSxPQUFKLEVBQWE7QUFDWCxXQUFPO0FBQ0xFLE1BQUFBLElBQUksRUFBRSxPQUREO0FBRUxDLE1BQUFBLFlBQVksRUFBRUgsT0FBTyxDQUFDLENBQUQsQ0FGaEI7QUFHTEksTUFBQUEsUUFBUSxFQUNOSixPQUFPLENBQUMsQ0FBRCxDQUFQLEtBQWUsUUFBZixHQUNJO0FBQUNFLFFBQUFBLElBQUksRUFBRTtBQUFQLE9BREosR0FFSUYsT0FBTyxDQUFDLENBQUQsQ0FBUCxLQUFlLGFBQWYsR0FDQTtBQUNFRSxRQUFBQSxJQUFJLEVBQUUsVUFEUjtBQUVFRyxRQUFBQSxTQUFTLEVBQUVMLE9BQU8sQ0FBQyxDQUFELENBRnBCO0FBR0VNLFFBQUFBLFVBQVUsRUFBRUMsTUFBTSxDQUFDQyxRQUFQLENBQWdCUixPQUFPLENBQUMsQ0FBRCxDQUF2QixFQUE0QixFQUE1QixDQUhkO0FBSUVTLFFBQUFBLG1CQUFtQixFQUFFRixNQUFNLENBQUNDLFFBQVAsQ0FBZ0JSLE9BQU8sQ0FBQyxDQUFELENBQXZCLEVBQTRCLEVBQTVCO0FBSnZCLE9BREEsR0FPQTtBQUNFRSxRQUFBQSxJQUFJLEVBQUUsUUFEUjtBQUVFRyxRQUFBQSxTQUFTLEVBQUVMLE9BQU8sQ0FBQyxDQUFELENBRnBCO0FBR0VNLFFBQUFBLFVBQVUsRUFBRUMsTUFBTSxDQUFDQyxRQUFQLENBQWdCUixPQUFPLENBQUMsQ0FBRCxDQUF2QixFQUE0QixFQUE1QixDQUhkO0FBSUVVLFFBQUFBLFlBQVksRUFBRUgsTUFBTSxDQUFDQyxRQUFQLENBQWdCUixPQUFPLENBQUMsQ0FBRCxDQUF2QixFQUE0QixFQUE1QjtBQUpoQjtBQWJELEtBQVA7QUFvQkQ7O0FBQ0QsTUFBTVcsU0FBUyxHQUFHWixJQUFJLENBQUNFLEtBQUwsQ0FBV0osVUFBWCxDQUFsQjs7QUFDQSxNQUFJYyxTQUFKLEVBQWU7QUFDYixXQUFPO0FBQ0xULE1BQUFBLElBQUksRUFBRSxTQUREO0FBRUxVLE1BQUFBLEtBQUssRUFBRUwsTUFBTSxDQUFDQyxRQUFQLENBQWdCRyxTQUFTLENBQUMsQ0FBRCxDQUF6QixFQUE4QixFQUE5QjtBQUZGLEtBQVA7QUFJRDtBQUNGOztBQUVERSxNQUFNLENBQUNDLE9BQVAsR0FBaUIsU0FBU0MsZ0JBQVQsQ0FBMEJDLEtBQTFCLEVBQTREO0FBQzNFLE1BQU1DLEtBQUssR0FBR0QsS0FBSyxDQUFDRSxLQUFOLENBQVksSUFBWixDQUFkO0FBQ0EsTUFBSUMsT0FBTyxHQUFHLEVBQWQ7QUFDQSxNQUFJQyxlQUFlLEdBQUcsQ0FBQyxDQUF2Qjs7QUFDQSxPQUFLLElBQUlDLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdKLEtBQUssQ0FBQ0ssTUFBMUIsRUFBa0MsRUFBRUQsQ0FBcEMsRUFBdUM7QUFDckMsUUFBTXRCLElBQUksR0FBR2tCLEtBQUssQ0FBQ0ksQ0FBRCxDQUFsQjs7QUFDQSxRQUFJLENBQUN0QixJQUFMLEVBQVc7QUFDVDtBQUNEOztBQUNELFFBQU13QixLQUFLLEdBQUd6QixTQUFTLENBQUNDLElBQUQsQ0FBdkI7O0FBQ0EsUUFBSXdCLEtBQUosRUFBVztBQUNUSixNQUFBQSxPQUFPLENBQUNLLElBQVIsQ0FBYUQsS0FBYjtBQUNBO0FBQ0Q7O0FBRURILElBQUFBLGVBQWUsR0FBR0MsQ0FBbEI7QUFDQUYsSUFBQUEsT0FBTyxHQUFHLEVBQVY7QUFDRDs7QUFDRCxNQUFNTSxPQUFPLEdBQUdSLEtBQUssQ0FBQ1MsS0FBTixDQUFZLENBQVosRUFBZU4sZUFBZSxHQUFHLENBQWpDLEVBQW9DTyxJQUFwQyxDQUF5QyxJQUF6QyxDQUFoQjtBQUNBLFNBQU87QUFBQ0YsSUFBQUEsT0FBTyxFQUFQQSxPQUFEO0FBQVVOLElBQUFBLE9BQU8sRUFBUEE7QUFBVixHQUFQO0FBQ0QsQ0FwQkQiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIEBmbG93IHN0cmljdC1sb2NhbFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudHlwZSBIZXJtZXNTdGFja0xvY2F0aW9uTmF0aXZlID0ge3xcbiAgK3R5cGU6ICdOQVRJVkUnLFxufH07XG5cbnR5cGUgSGVybWVzU3RhY2tMb2NhdGlvblNvdXJjZSA9IHt8XG4gICt0eXBlOiAnU09VUkNFJyxcbiAgK3NvdXJjZVVybDogc3RyaW5nLFxuICArbGluZTFCYXNlZDogbnVtYmVyLFxuICArY29sdW1uMUJhc2VkOiBudW1iZXIsXG58fTtcblxudHlwZSBIZXJtZXNTdGFja0xvY2F0aW9uQnl0ZWNvZGUgPSB7fFxuICArdHlwZTogJ0JZVEVDT0RFJyxcbiAgK3NvdXJjZVVybDogc3RyaW5nLFxuICArbGluZTFCYXNlZDogbnVtYmVyLFxuICArdmlydHVhbE9mZnNldDBCYXNlZDogbnVtYmVyLFxufH07XG5cbnR5cGUgSGVybWVzU3RhY2tMb2NhdGlvbiA9XG4gIHwgSGVybWVzU3RhY2tMb2NhdGlvbk5hdGl2ZVxuICB8IEhlcm1lc1N0YWNrTG9jYXRpb25Tb3VyY2VcbiAgfCBIZXJtZXNTdGFja0xvY2F0aW9uQnl0ZWNvZGU7XG5cbnR5cGUgSGVybWVzU3RhY2tFbnRyeUZyYW1lID0ge3xcbiAgK3R5cGU6ICdGUkFNRScsXG4gICtsb2NhdGlvbjogSGVybWVzU3RhY2tMb2NhdGlvbixcbiAgK2Z1bmN0aW9uTmFtZTogc3RyaW5nLFxufH07XG5cbnR5cGUgSGVybWVzU3RhY2tFbnRyeVNraXBwZWQgPSB7fFxuICArdHlwZTogJ1NLSVBQRUQnLFxuICArY291bnQ6IG51bWJlcixcbnx9O1xuXG50eXBlIEhlcm1lc1N0YWNrRW50cnkgPSBIZXJtZXNTdGFja0VudHJ5RnJhbWUgfCBIZXJtZXNTdGFja0VudHJ5U2tpcHBlZDtcblxuZXhwb3J0IHR5cGUgSGVybWVzUGFyc2VkU3RhY2sgPSB7fFxuICArbWVzc2FnZTogc3RyaW5nLFxuICArZW50cmllczogJFJlYWRPbmx5QXJyYXk8SGVybWVzU3RhY2tFbnRyeT4sXG58fTtcblxuLy8gQ2FwdHVyaW5nIGdyb3Vwczpcbi8vIDEuIGZ1bmN0aW9uIG5hbWVcbi8vIDIuIGlzIHRoaXMgYSBuYXRpdmUgc3RhY2sgZnJhbWU/XG4vLyAzLiBpcyB0aGlzIGEgYnl0ZWNvZGUgYWRkcmVzcyBvciBhIHNvdXJjZSBsb2NhdGlvbj9cbi8vIDQuIHNvdXJjZSBVUkwgKGZpbGVuYW1lKVxuLy8gNS4gbGluZSBudW1iZXIgKDEgYmFzZWQpXG4vLyA2LiBjb2x1bW4gbnVtYmVyICgxIGJhc2VkKSBvciB2aXJ0dWFsIG9mZnNldCAoMCBiYXNlZClcbmNvbnN0IFJFX0ZSQU1FID0gL14gezR9YXQgKC4rPykoPzogXFwoKG5hdGl2ZSlcXCk/fCBcXCgoYWRkcmVzcyBhdCApPyguKz8pOihcXGQrKTooXFxkKylcXCkpJC87XG5cbi8vIENhcHR1cmluZyBncm91cHM6XG4vLyAxLiBjb3VudCBvZiBza2lwcGVkIGZyYW1lc1xuY29uc3QgUkVfU0tJUFBFRCA9IC9eIHs0fS4uLiBza2lwcGluZyAoXFxkKykgZnJhbWVzJC87XG5cbmZ1bmN0aW9uIHBhcnNlTGluZShsaW5lOiBzdHJpbmcpOiA/SGVybWVzU3RhY2tFbnRyeSB7XG4gIGNvbnN0IGFzRnJhbWUgPSBsaW5lLm1hdGNoKFJFX0ZSQU1FKTtcbiAgaWYgKGFzRnJhbWUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogJ0ZSQU1FJyxcbiAgICAgIGZ1bmN0aW9uTmFtZTogYXNGcmFtZVsxXSxcbiAgICAgIGxvY2F0aW9uOlxuICAgICAgICBhc0ZyYW1lWzJdID09PSAnbmF0aXZlJ1xuICAgICAgICAgID8ge3R5cGU6ICdOQVRJVkUnfVxuICAgICAgICAgIDogYXNGcmFtZVszXSA9PT0gJ2FkZHJlc3MgYXQgJ1xuICAgICAgICAgID8ge1xuICAgICAgICAgICAgICB0eXBlOiAnQllURUNPREUnLFxuICAgICAgICAgICAgICBzb3VyY2VVcmw6IGFzRnJhbWVbNF0sXG4gICAgICAgICAgICAgIGxpbmUxQmFzZWQ6IE51bWJlci5wYXJzZUludChhc0ZyYW1lWzVdLCAxMCksXG4gICAgICAgICAgICAgIHZpcnR1YWxPZmZzZXQwQmFzZWQ6IE51bWJlci5wYXJzZUludChhc0ZyYW1lWzZdLCAxMCksXG4gICAgICAgICAgICB9XG4gICAgICAgICAgOiB7XG4gICAgICAgICAgICAgIHR5cGU6ICdTT1VSQ0UnLFxuICAgICAgICAgICAgICBzb3VyY2VVcmw6IGFzRnJhbWVbNF0sXG4gICAgICAgICAgICAgIGxpbmUxQmFzZWQ6IE51bWJlci5wYXJzZUludChhc0ZyYW1lWzVdLCAxMCksXG4gICAgICAgICAgICAgIGNvbHVtbjFCYXNlZDogTnVtYmVyLnBhcnNlSW50KGFzRnJhbWVbNl0sIDEwKSxcbiAgICAgICAgICAgIH0sXG4gICAgfTtcbiAgfVxuICBjb25zdCBhc1NraXBwZWQgPSBsaW5lLm1hdGNoKFJFX1NLSVBQRUQpO1xuICBpZiAoYXNTa2lwcGVkKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6ICdTS0lQUEVEJyxcbiAgICAgIGNvdW50OiBOdW1iZXIucGFyc2VJbnQoYXNTa2lwcGVkWzFdLCAxMCksXG4gICAgfTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHBhcnNlSGVybWVzU3RhY2soc3RhY2s6IHN0cmluZyk6IEhlcm1lc1BhcnNlZFN0YWNrIHtcbiAgY29uc3QgbGluZXMgPSBzdGFjay5zcGxpdCgvXFxuLyk7XG4gIGxldCBlbnRyaWVzID0gW107XG4gIGxldCBsYXN0TWVzc2FnZUxpbmUgPSAtMTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7ICsraSkge1xuICAgIGNvbnN0IGxpbmUgPSBsaW5lc1tpXTtcbiAgICBpZiAoIWxpbmUpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBjb25zdCBlbnRyeSA9IHBhcnNlTGluZShsaW5lKTtcbiAgICBpZiAoZW50cnkpIHtcbiAgICAgIGVudHJpZXMucHVzaChlbnRyeSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgLy8gTm8gbWF0Y2ggLSB3ZSdyZSBzdGlsbCBpbiB0aGUgbWVzc2FnZVxuICAgIGxhc3RNZXNzYWdlTGluZSA9IGk7XG4gICAgZW50cmllcyA9IFtdO1xuICB9XG4gIGNvbnN0IG1lc3NhZ2UgPSBsaW5lcy5zbGljZSgwLCBsYXN0TWVzc2FnZUxpbmUgKyAxKS5qb2luKCdcXG4nKTtcbiAgcmV0dXJuIHttZXNzYWdlLCBlbnRyaWVzfTtcbn07XG4iXX0=