{"version":3,"sources":["Switch.js"],"names":["Switch","_handleChange","event","props","onChange","onValueChange","nativeEvent","value","_lastNativeValue","forceUpdate","_handleSwitchNativeComponentRef","ref","_nativeSwitchRef","disabled","ios_backgroundColor","style","thumbColor","trackColor","trackColorForFalse","false","trackColorForTrue","true","Platform","OS","platformProps","enabled","on","thumbTintColor","trackTintColor","accessibilityRole","returnsFalse","returnsTrue","onTintColor","StyleSheet","compose","height","width","backgroundColor","borderRadius","tintColor","nativeProps","Object","keys","length","setNativeProps","AndroidSwitchCommands","setNativeValue","SwitchCommands","setValue","React","Component","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n * @generate-docs\n */\n\n'use strict';\n\nimport Platform from '../../Utilities/Platform';\nimport * as React from 'react';\nimport StyleSheet from '../../StyleSheet/StyleSheet';\n\nimport AndroidSwitchNativeComponent, {\n  Commands as AndroidSwitchCommands,\n} from './AndroidSwitchNativeComponent';\nimport SwitchNativeComponent, {\n  Commands as SwitchCommands,\n} from './SwitchNativeComponent';\n\nimport type {ColorValue} from '../../StyleSheet/StyleSheetTypes';\nimport type {SyntheticEvent} from '../../Types/CoreEventTypes';\nimport type {ViewProps} from '../View/ViewPropTypes';\n\ntype SwitchChangeEvent = SyntheticEvent<\n  $ReadOnly<{|\n    value: boolean,\n  |}>,\n>;\n\nexport type Props = $ReadOnly<{|\n  ...ViewProps,\n\n  /**\n   * Whether the switch is disabled. Defaults to false.\n   */\n  disabled?: ?boolean,\n\n  /**\n   * Boolean value of the switch. Defaults to false.\n   */\n  value?: ?boolean,\n\n  /**\n   * Custom color for the switch thumb.\n   */\n  thumbColor?: ?ColorValue,\n\n  /**\n   * Custom colors for the switch track.\n   *\n   * NOTE: On iOS when the switch value is false, the track shrinks into the\n   * border. If you want to change the color of the background exposed by the\n   * shrunken track, use `ios_backgroundColor`.\n   */\n  trackColor?: ?$ReadOnly<{|\n    false?: ?ColorValue,\n    true?: ?ColorValue,\n  |}>,\n\n  /**\n   * On iOS, custom color for the background. This background color can be seen\n   * either when the switch value is false or when the switch is disabled (and\n   * the switch is translucent).\n   */\n  ios_backgroundColor?: ?ColorValue,\n\n  /**\n   * Called when the user tries to change the value of the switch.\n   *\n   * Receives the change event as an argument. If you want to only receive the\n   * new value, use `onValueChange` instead.\n   */\n  onChange?: ?(event: SwitchChangeEvent) => Promise<void> | void,\n\n  /**\n   * Called when the user tries to change the value of the switch.\n   *\n   * Receives the new value as an argument. If you want to instead receive an\n   * event, use `onChange`.\n   */\n  onValueChange?: ?(value: boolean) => Promise<void> | void,\n|}>;\n\n/**\n * A visual toggle between two mutually exclusive states.\n *\n * This is a controlled component that requires an `onValueChange` callback that\n * updates the `value` prop in order for the component to reflect user actions.\n * If the `value` prop is not updated, the component will continue to render the\n * supplied `value` prop instead of the expected result of any user actions.\n */\nclass Switch extends React.Component<Props> {\n  _nativeSwitchRef: ?React.ElementRef<\n    typeof SwitchNativeComponent | typeof AndroidSwitchNativeComponent,\n  >;\n  _lastNativeValue: ?boolean;\n\n  render(): React.Node {\n    const {\n      disabled,\n      ios_backgroundColor,\n      onChange,\n      onValueChange,\n      style,\n      thumbColor,\n      trackColor,\n      value,\n      ...props\n    } = this.props;\n\n    const trackColorForFalse = trackColor?.false;\n    const trackColorForTrue = trackColor?.true;\n\n    if (Platform.OS === 'android') {\n      const platformProps = {\n        enabled: disabled !== true,\n        on: value === true,\n        style,\n        thumbTintColor: thumbColor,\n        trackColorForFalse: trackColorForFalse,\n        trackColorForTrue: trackColorForTrue,\n        trackTintColor: value === true ? trackColorForTrue : trackColorForFalse,\n      };\n\n      return (\n        <AndroidSwitchNativeComponent\n          {...props}\n          {...platformProps}\n          accessibilityRole={props.accessibilityRole ?? 'switch'}\n          onChange={this._handleChange}\n          onResponderTerminationRequest={returnsFalse}\n          onStartShouldSetResponder={returnsTrue}\n          ref={this._handleSwitchNativeComponentRef}\n        />\n      );\n    }\n\n    const platformProps = {\n      disabled,\n      onTintColor: trackColorForTrue,\n      style: StyleSheet.compose(\n        {height: 31, width: 51},\n        StyleSheet.compose(\n          style,\n          ios_backgroundColor == null\n            ? null\n            : {\n                backgroundColor: ios_backgroundColor,\n                borderRadius: 16,\n              },\n        ),\n      ),\n      thumbTintColor: thumbColor,\n      tintColor: trackColorForFalse,\n      value: value === true,\n    };\n\n    return (\n      <SwitchNativeComponent\n        {...props}\n        {...platformProps}\n        accessibilityRole={props.accessibilityRole ?? 'switch'}\n        onChange={this._handleChange}\n        onResponderTerminationRequest={returnsFalse}\n        onStartShouldSetResponder={returnsTrue}\n        ref={this._handleSwitchNativeComponentRef}\n      />\n    );\n  }\n\n  componentDidUpdate() {\n    // This is necessary in case native updates the switch and JS decides\n    // that the update should be ignored and we should stick with the value\n    // that we have in JS.\n    const nativeProps = {};\n    const value = this.props.value === true;\n\n    if (this._lastNativeValue !== value) {\n      nativeProps.value = value;\n    }\n\n    if (\n      Object.keys(nativeProps).length > 0 &&\n      this._nativeSwitchRef &&\n      this._nativeSwitchRef.setNativeProps\n    ) {\n      if (Platform.OS === 'android') {\n        AndroidSwitchCommands.setNativeValue(\n          this._nativeSwitchRef,\n          nativeProps.value,\n        );\n      } else {\n        SwitchCommands.setValue(this._nativeSwitchRef, nativeProps.value);\n      }\n    }\n  }\n\n  _handleChange = (event: SwitchChangeEvent) => {\n    if (this.props.onChange != null) {\n      this.props.onChange(event);\n    }\n\n    if (this.props.onValueChange != null) {\n      this.props.onValueChange(event.nativeEvent.value);\n    }\n\n    this._lastNativeValue = event.nativeEvent.value;\n    this.forceUpdate();\n  };\n\n  _handleSwitchNativeComponentRef = (\n    ref: ?React.ElementRef<\n      typeof SwitchNativeComponent | typeof AndroidSwitchNativeComponent,\n    >,\n  ) => {\n    this._nativeSwitchRef = ref;\n  };\n}\n\nconst returnsFalse = () => false;\nconst returnsTrue = () => true;\n\nmodule.exports = Switch;\n"]}