8d7435ab5c2d1aefbb63883f0223ace8
"use strict";var _excluded = ["icon", "label", "active", "theme", "style", "onPress", "accessibilityLabel", "right"];function ownKeys(object, enumerableOnly) {var keys = Object.keys(object);if (Object.getOwnPropertySymbols) {var symbols = Object.getOwnPropertySymbols(object);if (enumerableOnly) {symbols = symbols.filter(function (sym) {return Object.getOwnPropertyDescriptor(object, sym).enumerable;});}keys.push.apply(keys, symbols);}return keys;}function _objectSpread(target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i] != null ? arguments[i] : {};if (i % 2) {ownKeys(Object(source), true).forEach(function (key) {require("@babel/runtime/helpers/defineProperty")(target, key, source[key]);});} else if (Object.getOwnPropertyDescriptors) {Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));} else {ownKeys(Object(source)).forEach(function (key) {Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));});}}return target;}

Object.defineProperty(exports, "__esModule", {
  value: true });

exports.default = void 0;

var _color = _interopRequireDefault(require("color"));

var React = _interopRequireWildcard(require("react"));



var _Text = _interopRequireDefault(require("../Typography/Text"));

var _Icon = _interopRequireDefault(require("../Icon"));

var _TouchableRipple = _interopRequireDefault(require("../TouchableRipple/TouchableRipple"));



function _getRequireWildcardCache() {if (typeof WeakMap !== "function") return null;var cache = new WeakMap();_getRequireWildcardCache = function _getRequireWildcardCache() {return cache;};return cache;}

function _interopRequireWildcard(obj) {if (obj && obj.__esModule) {return obj;}if (obj === null || typeof obj !== "object" && typeof obj !== "function") {return { default: obj };}var cache = _getRequireWildcardCache();if (cache && cache.has(obj)) {return cache.get(obj);}var newObj = {};var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;for (var key in obj) {if (Object.prototype.hasOwnProperty.call(obj, key)) {var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;if (desc && (desc.get || desc.set)) {Object.defineProperty(newObj, key, desc);} else {newObj[key] = obj[key];}}}newObj.default = obj;if (cache) {cache.set(obj, newObj);}return newObj;}

function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

function _extends() {_extends = Object.assign || function (target) {for (var i = 1; i < arguments.length; i++) {var source = arguments[i];for (var key in source) {if (Object.prototype.hasOwnProperty.call(source, key)) {target[key] = source[key];}}}return target;};return _extends.apply(this, arguments);}


























var DrawerItem = function DrawerItem(_ref)









{var icon = _ref.icon,label = _ref.label,active = _ref.active,theme = _ref.theme,style = _ref.style,onPress = _ref.onPress,accessibilityLabel = _ref.accessibilityLabel,right = _ref.right,rest = require("@babel/runtime/helpers/objectWithoutProperties")(_ref, _excluded);
  var
  colors =

  theme.colors,roundness = theme.roundness;
  var backgroundColor = active ? (0, _color.default)(colors.primary).alpha(0.12).rgb().string() : 'transparent';
  var contentColor = active ? colors.primary : (0, _color.default)(colors.text).alpha(0.68).rgb().string();
  var font = theme.fonts.medium;
  var labelMargin = icon ? 32 : 0;
  return React.createElement(require("react-native").View, _extends({}, rest, {
    style: [styles.container, {
      backgroundColor: backgroundColor,
      borderRadius: roundness },
    style] }),
  React.createElement(_TouchableRipple.default, {
    borderless: true,
    delayPressIn: 0,
    onPress: onPress,
    style: {
      borderRadius: roundness },


    accessibilityTraits: active ? ['button', 'selected'] : 'button',
    accessibilityComponentType: "button",
    accessibilityRole: "button",
    accessibilityState: {
      selected: active },

    accessibilityLabel: accessibilityLabel },
  React.createElement(require("react-native").View, {
    style: styles.wrapper },
  React.createElement(require("react-native").View, {
    style: styles.content },
  icon ? React.createElement(_Icon.default, {
    source: icon,
    size: 24,
    color: contentColor }) :
  null, React.createElement(_Text.default, {
    selectable: false,
    numberOfLines: 1,
    style: [styles.label, _objectSpread(_objectSpread({
      color: contentColor },
    font), {}, {
      marginLeft: labelMargin })] },

  label)), right === null || right === void 0 ? void 0 : right({
    color: contentColor }))));

};

DrawerItem.displayName = 'Drawer.Item';

var styles = require("react-native").StyleSheet.create({
  container: {
    marginHorizontal: 10,
    marginVertical: 4 },

  wrapper: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 8 },

  content: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center' },

  label: {
    marginRight: 32 } });



var _default = (0, require("../../core/theming").withTheme)(DrawerItem);

exports.default = _default;