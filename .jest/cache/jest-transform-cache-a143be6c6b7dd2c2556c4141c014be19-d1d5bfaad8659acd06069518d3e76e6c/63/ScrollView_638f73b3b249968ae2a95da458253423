b66e6370abd5e8cbe215757e369940fe
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _ScrollViewNativeComponent = _interopRequireDefault(require("./ScrollViewNativeComponent"));

var _ScrollContentViewNativeComponent = _interopRequireDefault(require("./ScrollContentViewNativeComponent"));

var _AndroidHorizontalScrollViewNativeComponent = _interopRequireDefault(require("./AndroidHorizontalScrollViewNativeComponent"));

var _AndroidHorizontalScrollContentViewNativeComponent = _interopRequireDefault(require("./AndroidHorizontalScrollContentViewNativeComponent"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var AnimatedImplementation = require("../../Animated/src/AnimatedImplementation");

var Platform = require("../../Utilities/Platform");

var React = require('react');

var ReactNative = require("../../Renderer/shims/ReactNative");

require("../../Renderer/shims/ReactNative");

var ScrollResponder = require("../ScrollResponder");

var ScrollViewStickyHeader = require("./ScrollViewStickyHeader");

var StyleSheet = require("../../StyleSheet/StyleSheet");

var View = require("../View/View");

var dismissKeyboard = require("../../Utilities/dismissKeyboard");

var flattenStyle = require("../../StyleSheet/flattenStyle");

var invariant = require('invariant');

var processDecelerationRate = require("./processDecelerationRate");

var resolveAssetSource = require("../../Image/resolveAssetSource");

var splitLayoutProps = require("../../StyleSheet/splitLayoutProps");

var setAndForwardRef = require("../../Utilities/setAndForwardRef");

var AndroidScrollView;
var AndroidHorizontalScrollContentView;
var AndroidHorizontalScrollView;
var RCTScrollView;
var RCTScrollContentView;

if (Platform.OS === 'android') {
  AndroidScrollView = _ScrollViewNativeComponent.default;
  AndroidHorizontalScrollView = _AndroidHorizontalScrollViewNativeComponent.default;
  AndroidHorizontalScrollContentView = _AndroidHorizontalScrollContentViewNativeComponent.default;
} else {
  RCTScrollView = _ScrollViewNativeComponent.default;
  RCTScrollContentView = _ScrollContentViewNativeComponent.default;
}

function createScrollResponder(node) {
  var scrollResponder = _objectSpread({}, ScrollResponder.Mixin);

  for (var key in scrollResponder) {
    if (typeof scrollResponder[key] === 'function') {
      scrollResponder[key] = scrollResponder[key].bind(node);
    }
  }

  return scrollResponder;
}

var Context = React.createContext(null);
var standardHorizontalContext = Object.freeze({
  horizontal: true
});
var standardVerticalContext = Object.freeze({
  horizontal: false
});

var ScrollView = function (_React$Component) {
  (0, _inherits2.default)(ScrollView, _React$Component);

  var _super = _createSuper(ScrollView);

  function ScrollView(props) {
    var _this;

    (0, _classCallCheck2.default)(this, ScrollView);
    _this = _super.call(this, props);
    _this._scrollResponder = createScrollResponder((0, _assertThisInitialized2.default)(_this));
    _this._scrollAnimatedValue = new AnimatedImplementation.Value(0);
    _this._scrollAnimatedValueAttachment = null;
    _this._stickyHeaderRefs = new Map();
    _this._headerLayoutYs = new Map();
    _this.state = _objectSpread({
      layoutHeight: null
    }, ScrollResponder.Mixin.scrollResponderMixinGetInitialState());
    _this._setNativeRef = setAndForwardRef({
      getForwardedRef: function getForwardedRef() {
        return _this.props.scrollViewRef;
      },
      setLocalRef: function setLocalRef(ref) {
        _this._scrollViewRef = ref;

        if (ref) {
          ref.getScrollResponder = _this.getScrollResponder;
          ref.getScrollableNode = _this.getScrollableNode;
          ref.getInnerViewNode = _this.getInnerViewNode;
          ref.getInnerViewRef = _this.getInnerViewRef;
          ref.getNativeScrollRef = _this.getNativeScrollRef;
          ref.scrollTo = _this.scrollTo;
          ref.scrollToEnd = _this.scrollToEnd;
          ref.flashScrollIndicators = _this.flashScrollIndicators;
          ref.scrollResponderZoomTo = _this.scrollResponderZoomTo;
          ref.scrollResponderScrollNativeHandleToKeyboard = _this.scrollResponderScrollNativeHandleToKeyboard;
        }
      }
    });

    _this.getScrollResponder = function () {
      return (0, _assertThisInitialized2.default)(_this);
    };

    _this.getScrollableNode = function () {
      return ReactNative.findNodeHandle(_this._scrollViewRef);
    };

    _this.getNativeScrollRef = function () {
      return _this._scrollViewRef;
    };

    _this.scrollTo = function (options, deprecatedX, deprecatedAnimated) {
      var x, y, animated;

      if (typeof options === 'number') {
        console.warn('`scrollTo(y, x, animated)` is deprecated. Use `scrollTo({x: 5, y: 5, ' + 'animated: true})` instead.');
        y = options;
        x = deprecatedX;
        animated = deprecatedAnimated;
      } else if (options) {
        y = options.y;
        x = options.x;
        animated = options.animated;
      }

      _this._scrollResponder.scrollResponderScrollTo({
        x: x || 0,
        y: y || 0,
        animated: animated !== false
      });
    };

    _this.scrollToEnd = function (options) {
      var animated = (options && options.animated) !== false;

      _this._scrollResponder.scrollResponderScrollToEnd({
        animated: animated
      });
    };

    _this.flashScrollIndicators = function () {
      _this._scrollResponder.scrollResponderFlashScrollIndicators();
    };

    _this._handleScroll = function (e) {
      if (__DEV__) {
        if (_this.props.onScroll && _this.props.scrollEventThrottle == null && Platform.OS === 'ios') {
          console.log('You specified `onScroll` on a <ScrollView> but not ' + '`scrollEventThrottle`. You will only receive one event. ' + 'Using `16` you get all the events but be aware that it may ' + "cause frame drops, use a bigger number if you don't need as " + 'much precision.');
        }
      }

      if (Platform.OS === 'android') {
        if (_this.props.keyboardDismissMode === 'on-drag' && _this.state.isTouching) {
          dismissKeyboard();
        }
      }

      _this._scrollResponder.scrollResponderHandleScroll(e);
    };

    _this._handleLayout = function (e) {
      if (_this.props.invertStickyHeaders === true) {
        _this.setState({
          layoutHeight: e.nativeEvent.layout.height
        });
      }

      if (_this.props.onLayout) {
        _this.props.onLayout(e);
      }
    };

    _this._handleContentOnLayout = function (e) {
      var _e$nativeEvent$layout = e.nativeEvent.layout,
          width = _e$nativeEvent$layout.width,
          height = _e$nativeEvent$layout.height;
      _this.props.onContentSizeChange && _this.props.onContentSizeChange(width, height);
    };

    _this._scrollViewRef = null;
    _this._innerViewRef = null;
    _this._setInnerViewRef = setAndForwardRef({
      getForwardedRef: function getForwardedRef() {
        return _this.props.innerViewRef;
      },
      setLocalRef: function setLocalRef(ref) {
        _this._innerViewRef = ref;
      }
    });

    for (var key in ScrollResponder.Mixin) {
      if (typeof ScrollResponder.Mixin[key] === 'function' && key.startsWith('scrollResponder')) {
        (0, _assertThisInitialized2.default)(_this)[key] = ScrollResponder.Mixin[key].bind((0, _assertThisInitialized2.default)(_this));
      }
    }

    Object.keys(ScrollResponder.Mixin).filter(function (key) {
      return typeof ScrollResponder.Mixin[key] !== 'function';
    }).forEach(function (key) {
      (0, _assertThisInitialized2.default)(_this)[key] = ScrollResponder.Mixin[key];
    });
    return _this;
  }

  (0, _createClass2.default)(ScrollView, [{
    key: "UNSAFE_componentWillMount",
    value: function UNSAFE_componentWillMount() {
      var _this$props$contentOf, _this$props$contentOf2, _this$props$contentIn, _this$props$contentIn2;

      this._scrollResponder.UNSAFE_componentWillMount();

      this._scrollAnimatedValue = new AnimatedImplementation.Value((_this$props$contentOf = (_this$props$contentOf2 = this.props.contentOffset) == null ? void 0 : _this$props$contentOf2.y) != null ? _this$props$contentOf : 0);

      this._scrollAnimatedValue.setOffset((_this$props$contentIn = (_this$props$contentIn2 = this.props.contentInset) == null ? void 0 : _this$props$contentIn2.top) != null ? _this$props$contentIn : 0);

      this._stickyHeaderRefs = new Map();
      this._headerLayoutYs = new Map();
    }
  }, {
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      var currentContentInsetTop = this.props.contentInset ? this.props.contentInset.top : 0;
      var nextContentInsetTop = nextProps.contentInset ? nextProps.contentInset.top : 0;

      if (currentContentInsetTop !== nextContentInsetTop) {
        this._scrollAnimatedValue.setOffset(nextContentInsetTop || 0);
      }
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      this._updateAnimatedNodeAttachment();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      this._updateAnimatedNodeAttachment();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this._scrollResponder.componentWillUnmount();

      if (this._scrollAnimatedValueAttachment) {
        this._scrollAnimatedValueAttachment.detach();
      }
    }
  }, {
    key: "getInnerViewNode",
    value: function getInnerViewNode() {
      return ReactNative.findNodeHandle(this._innerViewRef);
    }
  }, {
    key: "getInnerViewRef",
    value: function getInnerViewRef() {
      return this._innerViewRef;
    }
  }, {
    key: "_getKeyForIndex",
    value: function _getKeyForIndex(index, childArray) {
      var child = childArray[index];
      return child && child.key;
    }
  }, {
    key: "_updateAnimatedNodeAttachment",
    value: function _updateAnimatedNodeAttachment() {
      if (this._scrollAnimatedValueAttachment) {
        this._scrollAnimatedValueAttachment.detach();
      }

      if (this.props.stickyHeaderIndices && this.props.stickyHeaderIndices.length > 0) {
        this._scrollAnimatedValueAttachment = AnimatedImplementation.attachNativeEvent(this._scrollViewRef, 'onScroll', [{
          nativeEvent: {
            contentOffset: {
              y: this._scrollAnimatedValue
            }
          }
        }]);
      }
    }
  }, {
    key: "_setStickyHeaderRef",
    value: function _setStickyHeaderRef(key, ref) {
      if (ref) {
        this._stickyHeaderRefs.set(key, ref);
      } else {
        this._stickyHeaderRefs.delete(key);
      }
    }
  }, {
    key: "_onStickyHeaderLayout",
    value: function _onStickyHeaderLayout(index, event, key) {
      var stickyHeaderIndices = this.props.stickyHeaderIndices;

      if (!stickyHeaderIndices) {
        return;
      }

      var childArray = React.Children.toArray(this.props.children);

      if (key !== this._getKeyForIndex(index, childArray)) {
        return;
      }

      var layoutY = event.nativeEvent.layout.y;

      this._headerLayoutYs.set(key, layoutY);

      var indexOfIndex = stickyHeaderIndices.indexOf(index);
      var previousHeaderIndex = stickyHeaderIndices[indexOfIndex - 1];

      if (previousHeaderIndex != null) {
        var previousHeader = this._stickyHeaderRefs.get(this._getKeyForIndex(previousHeaderIndex, childArray));

        previousHeader && previousHeader.setNextHeaderY && previousHeader.setNextHeaderY(layoutY);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var ScrollViewClass;
      var ScrollContentContainerViewClass;

      if (Platform.OS === 'android') {
        if (this.props.horizontal === true) {
          ScrollViewClass = AndroidHorizontalScrollView;
          ScrollContentContainerViewClass = AndroidHorizontalScrollContentView;
        } else {
          ScrollViewClass = AndroidScrollView;
          ScrollContentContainerViewClass = View;
        }
      } else {
        ScrollViewClass = RCTScrollView;
        ScrollContentContainerViewClass = RCTScrollContentView;
      }

      invariant(ScrollViewClass !== undefined, 'ScrollViewClass must not be undefined');
      invariant(ScrollContentContainerViewClass !== undefined, 'ScrollContentContainerViewClass must not be undefined');
      var contentContainerStyle = [this.props.horizontal === true && styles.contentContainerHorizontal, this.props.contentContainerStyle];

      if (__DEV__ && this.props.style !== undefined) {
        var style = flattenStyle(this.props.style);
        var childLayoutProps = ['alignItems', 'justifyContent'].filter(function (prop) {
          return style && style[prop] !== undefined;
        });
        invariant(childLayoutProps.length === 0, 'ScrollView child layout (' + JSON.stringify(childLayoutProps) + ') must be applied through the contentContainerStyle prop.');
      }

      var contentSizeChangeProps = {};

      if (this.props.onContentSizeChange) {
        contentSizeChangeProps = {
          onLayout: this._handleContentOnLayout
        };
      }

      var stickyHeaderIndices = this.props.stickyHeaderIndices;
      var children = this.props.children;

      if (stickyHeaderIndices != null && stickyHeaderIndices.length > 0) {
        var childArray = React.Children.toArray(this.props.children);
        children = childArray.map(function (child, index) {
          var indexOfIndex = child ? stickyHeaderIndices.indexOf(index) : -1;

          if (indexOfIndex > -1) {
            var key = child.key;
            var nextIndex = stickyHeaderIndices[indexOfIndex + 1];
            var StickyHeaderComponent = _this2.props.StickyHeaderComponent || ScrollViewStickyHeader;
            return React.createElement(StickyHeaderComponent, {
              key: key,
              ref: function ref(_ref) {
                return _this2._setStickyHeaderRef(key, _ref);
              },
              nextHeaderLayoutY: _this2._headerLayoutYs.get(_this2._getKeyForIndex(nextIndex, childArray)),
              onLayout: function onLayout(event) {
                return _this2._onStickyHeaderLayout(index, event, key);
              },
              scrollAnimatedValue: _this2._scrollAnimatedValue,
              inverted: _this2.props.invertStickyHeaders,
              scrollViewHeight: _this2.state.layoutHeight
            }, child);
          } else {
            return child;
          }
        });
      }

      children = React.createElement(Context.Provider, {
        value: this.props.horizontal === true ? standardHorizontalContext : standardVerticalContext
      }, children);
      var hasStickyHeaders = Array.isArray(stickyHeaderIndices) && stickyHeaderIndices.length > 0;
      var contentContainer = React.createElement(ScrollContentContainerViewClass, (0, _extends2.default)({}, contentSizeChangeProps, {
        ref: this._setInnerViewRef,
        style: contentContainerStyle,
        removeClippedSubviews: Platform.OS === 'android' && hasStickyHeaders ? false : this.props.removeClippedSubviews,
        collapsable: false
      }), children);
      var alwaysBounceHorizontal = this.props.alwaysBounceHorizontal !== undefined ? this.props.alwaysBounceHorizontal : this.props.horizontal;
      var alwaysBounceVertical = this.props.alwaysBounceVertical !== undefined ? this.props.alwaysBounceVertical : !this.props.horizontal;
      var DEPRECATED_sendUpdatedChildFrames = !!this.props.DEPRECATED_sendUpdatedChildFrames;
      var baseStyle = this.props.horizontal === true ? styles.baseHorizontal : styles.baseVertical;

      var props = _objectSpread(_objectSpread({}, this.props), {}, {
        alwaysBounceHorizontal: alwaysBounceHorizontal,
        alwaysBounceVertical: alwaysBounceVertical,
        style: [baseStyle, this.props.style],
        onContentSizeChange: null,
        onLayout: this._handleLayout,
        onMomentumScrollBegin: this._scrollResponder.scrollResponderHandleMomentumScrollBegin,
        onMomentumScrollEnd: this._scrollResponder.scrollResponderHandleMomentumScrollEnd,
        onResponderGrant: this._scrollResponder.scrollResponderHandleResponderGrant,
        onResponderReject: this._scrollResponder.scrollResponderHandleResponderReject,
        onResponderRelease: this._scrollResponder.scrollResponderHandleResponderRelease,
        onResponderTerminationRequest: this._scrollResponder.scrollResponderHandleTerminationRequest,
        onScrollBeginDrag: this._scrollResponder.scrollResponderHandleScrollBeginDrag,
        onScrollEndDrag: this._scrollResponder.scrollResponderHandleScrollEndDrag,
        onScrollShouldSetResponder: this._scrollResponder.scrollResponderHandleScrollShouldSetResponder,
        onStartShouldSetResponder: this._scrollResponder.scrollResponderHandleStartShouldSetResponder,
        onStartShouldSetResponderCapture: this._scrollResponder.scrollResponderHandleStartShouldSetResponderCapture,
        onTouchEnd: this._scrollResponder.scrollResponderHandleTouchEnd,
        onTouchMove: this._scrollResponder.scrollResponderHandleTouchMove,
        onTouchStart: this._scrollResponder.scrollResponderHandleTouchStart,
        onTouchCancel: this._scrollResponder.scrollResponderHandleTouchCancel,
        onScroll: this._handleScroll,
        scrollBarThumbImage: resolveAssetSource(this.props.scrollBarThumbImage),
        scrollEventThrottle: hasStickyHeaders ? 1 : this.props.scrollEventThrottle,
        sendMomentumEvents: this.props.onMomentumScrollBegin || this.props.onMomentumScrollEnd ? true : false,
        DEPRECATED_sendUpdatedChildFrames: DEPRECATED_sendUpdatedChildFrames,
        snapToStart: this.props.snapToStart !== false,
        snapToEnd: this.props.snapToEnd !== false,
        pagingEnabled: Platform.select({
          ios: this.props.pagingEnabled === true && this.props.snapToInterval == null && this.props.snapToOffsets == null,
          android: this.props.pagingEnabled === true || this.props.snapToInterval != null || this.props.snapToOffsets != null
        })
      });

      var decelerationRate = this.props.decelerationRate;

      if (decelerationRate != null) {
        props.decelerationRate = processDecelerationRate(decelerationRate);
      }

      var refreshControl = this.props.refreshControl;

      if (refreshControl) {
        if (Platform.OS === 'ios') {
          return React.createElement(ScrollViewClass, (0, _extends2.default)({}, props, {
            ref: this._setNativeRef
          }), Platform.isTV ? null : refreshControl, contentContainer);
        } else if (Platform.OS === 'android') {
          var _splitLayoutProps = splitLayoutProps(flattenStyle(props.style)),
              outer = _splitLayoutProps.outer,
              inner = _splitLayoutProps.inner;

          return React.cloneElement(refreshControl, {
            style: [baseStyle, outer]
          }, React.createElement(ScrollViewClass, (0, _extends2.default)({}, props, {
            style: [baseStyle, inner],
            ref: this._setNativeRef
          }), contentContainer));
        }
      }

      return React.createElement(ScrollViewClass, (0, _extends2.default)({}, props, {
        ref: this._setNativeRef
      }), contentContainer);
    }
  }]);
  return ScrollView;
}(React.Component);

ScrollView.Context = Context;
var styles = StyleSheet.create({
  baseVertical: {
    flexGrow: 1,
    flexShrink: 1,
    flexDirection: 'column',
    overflow: 'scroll'
  },
  baseHorizontal: {
    flexGrow: 1,
    flexShrink: 1,
    flexDirection: 'row',
    overflow: 'scroll'
  },
  contentContainerHorizontal: {
    flexDirection: 'row'
  }
});

function Wrapper(props, ref) {
  return React.createElement(ScrollView, (0, _extends2.default)({}, props, {
    scrollViewRef: ref
  }));
}

Wrapper.displayName = 'ScrollView';
var ForwardedScrollView = React.forwardRef(Wrapper);
ForwardedScrollView.Context = Context;
ForwardedScrollView.displayName = 'ScrollView';
module.exports = ForwardedScrollView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,