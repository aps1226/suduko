992d35e2d37b1eb46e4b8b8f05c83dda
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true });

exports.AffixAdornment = exports.TextInputAffix = exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _color = _interopRequireDefault(require("color"));







function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

var AFFIX_OFFSET = 12;

var AffixContext = _react.default.createContext({
  textStyle: {
    fontFamily: '',
    color: '' },

  topPosition: null,
  side: require("./enums").AdornmentSide.Left });


var AffixAdornment = function AffixAdornment(_ref)







{var affix = _ref.affix,side = _ref.side,textStyle = _ref.textStyle,topPosition = _ref.topPosition,onLayout = _ref.onLayout,visible = _ref.visible,paddingHorizontal = _ref.paddingHorizontal;
  return _react.default.createElement(AffixContext.Provider, {
    value: {
      side: side,
      textStyle: textStyle,
      topPosition: topPosition,
      onLayout: onLayout,
      visible: visible,
      paddingHorizontal: paddingHorizontal } },

  affix);
};
































exports.AffixAdornment = AffixAdornment;

var TextInputAffix = function TextInputAffix(_ref2)



{var text = _ref2.text,labelStyle = _ref2.textStyle,theme = _ref2.theme;
  var _react$default$useCon =






  _react.default.useContext(AffixContext),textStyle = _react$default$useCon.textStyle,onLayout = _react$default$useCon.onLayout,topPosition = _react$default$useCon.topPosition,side = _react$default$useCon.side,visible = _react$default$useCon.visible,paddingHorizontal = _react$default$useCon.paddingHorizontal;

  var textColor = (0, _color.default)(theme.colors.text).alpha(theme.dark ? 0.7 : 0.54).rgb().string();
  var offset = typeof paddingHorizontal === 'number' ? paddingHorizontal : AFFIX_OFFSET;
  var style = require("@babel/runtime/helpers/defineProperty")({
    top: topPosition },
  side, offset);

  return _react.default.createElement(require("react-native").Animated.View, {
    style: [styles.container, style, {
      opacity: (visible === null || visible === void 0 ? void 0 : visible.interpolate({
        inputRange: [0, 1],
        outputRange: [1, 0] })) ||
      1 }],

    onLayout: onLayout },
  _react.default.createElement(require("react-native").Text, {
    style: [{
      color: textColor },
    textStyle, labelStyle] },
  text));
};

exports.TextInputAffix = TextInputAffix;
TextInputAffix.displayName = 'TextInput.Affix';

var styles = require("react-native").StyleSheet.create({
  container: {
    position: 'absolute',
    justifyContent: 'center',
    alignItems: 'center' } });



var _default = (0, require("../../../core/theming").withTheme)(TextInputAffix);


exports.default = _default;