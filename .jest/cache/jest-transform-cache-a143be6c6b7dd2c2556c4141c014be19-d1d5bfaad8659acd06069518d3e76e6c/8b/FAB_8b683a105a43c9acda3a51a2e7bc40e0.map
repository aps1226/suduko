{"version":3,"sources":["FAB.tsx"],"names":["getContrastingColor","FAB","accessibilityLabel","animated","color","visible","uppercase","rest","current","visibility","React","Animated","scale","theme","toValue","duration","useNativeDriver","IconComponent","CrossFadeIcon","Icon","disabledColor","white","black","backgroundColor","disabled","accent","StyleSheet","foregroundColor","rippleColor","opacity","transform","styles","testID","label","small","loading","medium","container","borderRadius","elevation","touchable","standard","height","width","extended","paddingHorizontal","content","flexDirection","alignItems","justifyContent","marginHorizontal","uppercaseLabel","textTransform","FABWithTheme"],"mappings":"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","sourcesContent":["import color from 'color';\nimport * as React from 'react';\nimport {\n  Animated,\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  AccessibilityState,\n} from 'react-native';\nimport ActivityIndicator from '../ActivityIndicator';\nimport Surface from '../Surface';\nimport CrossFadeIcon from '../CrossFadeIcon';\nimport Icon, { IconSource } from '../Icon';\nimport Text from '../Typography/Text';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { black, white } from '../../styles/colors';\nimport { withTheme } from '../../core/theming';\nimport getContrastingColor from '../../utils/getContrastingColor';\nimport type { $RemoveChildren } from '../../types';\n\ngetContrastingColor;\n\ntype Props = $RemoveChildren<typeof Surface> & {\n  /**\n   * Icon to display for the `FAB`.\n   */\n  icon: IconSource;\n  /**\n   * Optional label for extended `FAB`.\n   */\n  label?: string;\n  /**\n   * Make the label text uppercased.\n   */\n  uppercase?: boolean;\n  /**\n   * Accessibility label for the FAB. This is read by the screen reader when the user taps the FAB.\n   * Uses `label` by default if specified.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Accessibility state for the FAB. This is read by the screen reader when the user taps the FAB.\n   */\n  accessibilityState?: AccessibilityState;\n  /**\n   * Whether an icon change is animated.\n   */\n  animated?: boolean;\n  /**\n   *  Whether FAB is mini-sized, used to create visual continuity with other elements. This has no effect if `label` is specified.\n   */\n  small?: boolean;\n  /**\n   * Custom color for the icon and label of the `FAB`.\n   */\n  color?: string;\n  /**\n   * Whether `FAB` is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Whether `FAB` is currently visible.\n   */\n  visible?: boolean;\n  /**\n   * Whether to show a loading indicator.\n   */\n  loading?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  testID?: string;\n};\n\n/**\n * A floating action button represents the primary action in an application.\n *\n * <div class=\"screenshots\">\n *   <img src=\"screenshots/fab-1.png\" />\n *   <img src=\"screenshots/fab-2.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { StyleSheet } from 'react-native';\n * import { FAB } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <FAB\n *     style={styles.fab}\n *     small\n *     icon=\"plus\"\n *     onPress={() => console.log('Pressed')}\n *   />\n * );\n *\n * const styles = StyleSheet.create({\n *   fab: {\n *     position: 'absolute',\n *     margin: 16,\n *     right: 0,\n *     bottom: 0,\n *   },\n * })\n *\n * export default MyComponent;\n * ```\n */\nconst FAB = ({\n  small,\n  icon,\n  label,\n  accessibilityLabel = label,\n  accessibilityState,\n  animated = true,\n  color: customColor,\n  disabled,\n  onPress,\n  onLongPress,\n  theme,\n  style,\n  visible = true,\n  uppercase = true,\n  loading,\n  testID,\n  ...rest\n}: Props) => {\n  const { current: visibility } = React.useRef<Animated.Value>(\n    new Animated.Value(visible ? 1 : 0)\n  );\n  const { scale } = theme.animation;\n\n  React.useEffect(() => {\n    if (visible) {\n      Animated.timing(visibility, {\n        toValue: 1,\n        duration: 200 * scale,\n        useNativeDriver: true,\n      }).start();\n    } else {\n      Animated.timing(visibility, {\n        toValue: 0,\n        duration: 150 * scale,\n        useNativeDriver: true,\n      }).start();\n    }\n  }, [visible, scale, visibility]);\n\n  const IconComponent = animated ? CrossFadeIcon : Icon;\n\n  const disabledColor = color(theme.dark ? white : black)\n    .alpha(0.12)\n    .rgb()\n    .string();\n\n  const {\n    backgroundColor = disabled ? disabledColor : theme.colors.accent,\n  } = (StyleSheet.flatten(style) || {}) as ViewStyle;\n\n  let foregroundColor;\n\n  if (typeof customColor !== 'undefined') {\n    foregroundColor = customColor;\n  } else if (disabled) {\n    foregroundColor = color(theme.dark ? white : black)\n      .alpha(0.32)\n      .rgb()\n      .string();\n  } else {\n    foregroundColor = getContrastingColor(\n      backgroundColor,\n      white,\n      'rgba(0, 0, 0, .54)'\n    );\n  }\n\n  const rippleColor = color(foregroundColor).alpha(0.32).rgb().string();\n\n  return (\n    <Surface\n      {...rest}\n      style={\n        [\n          {\n            backgroundColor,\n            opacity: visibility,\n            transform: [\n              {\n                scale: visibility,\n              },\n            ],\n          },\n          styles.container,\n          disabled && styles.disabled,\n          style,\n        ] as StyleProp<ViewStyle>\n      }\n      pointerEvents={visible ? 'auto' : 'none'}\n    >\n      <TouchableRipple\n        borderless\n        onPress={onPress}\n        onLongPress={onLongPress}\n        rippleColor={rippleColor}\n        disabled={disabled}\n        accessibilityLabel={accessibilityLabel}\n        // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n        accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityState={{ ...accessibilityState, disabled }}\n        style={styles.touchable}\n        testID={testID}\n      >\n        <View\n          style={[\n            styles.content,\n            label ? styles.extended : small ? styles.small : styles.standard,\n          ]}\n          pointerEvents=\"none\"\n        >\n          {icon && loading !== true ? (\n            <IconComponent source={icon} size={24} color={foregroundColor} />\n          ) : null}\n          {loading ? (\n            <ActivityIndicator size={18} color={foregroundColor} />\n          ) : null}\n          {label ? (\n            <Text\n              selectable={false}\n              style={[\n                styles.label,\n                uppercase && styles.uppercaseLabel,\n                { color: foregroundColor, ...theme.fonts.medium },\n              ]}\n            >\n              {label}\n            </Text>\n          ) : null}\n        </View>\n      </TouchableRipple>\n    </Surface>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 28,\n    elevation: 6,\n  },\n  touchable: {\n    borderRadius: 28,\n  },\n  standard: {\n    height: 56,\n    width: 56,\n  },\n  small: {\n    height: 40,\n    width: 40,\n  },\n  extended: {\n    height: 48,\n    paddingHorizontal: 16,\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  label: {\n    marginHorizontal: 8,\n  },\n  uppercaseLabel: {\n    textTransform: 'uppercase',\n  },\n  disabled: {\n    elevation: 0,\n  },\n});\n\nexport default withTheme(FAB);\n\n// @component-docs ignore-next-line\nconst FABWithTheme = withTheme(FAB);\n// @component-docs ignore-next-line\nexport { FABWithTheme as FAB };\n"]}