{"version":3,"sources":["Animation.js"],"names":["NativeAnimatedHelper","require","Animation","fromValue","onUpdate","onEnd","previousAnimation","animatedValue","__nativeId","API","stopAnimation","Error","result","__onEnd","enableQueue","__makeNative","disableQueue","generateNewAnimationId","startAnimatingNode","__getNativeTag","__getNativeAnimationConfig","__debouncedOnEnd","bind","module","exports"],"mappings":"AAUA;;;;;;;;AAEA,IAAMA,oBAAoB,GAAGC,OAAO,2BAApC;;IAiBMC,S;;;;;;;WAMJ,eACEC,SADF,EAEEC,QAFF,EAGEC,KAHF,EAIEC,iBAJF,EAKEC,aALF,EAMQ,CAAE;;;WACV,gBAAa;AACX,UAAI,KAAKC,UAAT,EAAqB;AACnBR,QAAAA,oBAAoB,CAACS,GAArB,CAAyBC,aAAzB,CAAuC,KAAKF,UAA5C;AACD;AACF;;;WACD,sCAAkC;AAGhC,YAAM,IAAIG,KAAJ,CAAU,mDAAV,CAAN;AACD;;;WAED,0BAAiBC,MAAjB,EAA0C;AACxC,UAAMP,KAAK,GAAG,KAAKQ,OAAnB;AACA,WAAKA,OAAL,GAAe,IAAf;AACAR,MAAAA,KAAK,IAAIA,KAAK,CAACO,MAAD,CAAd;AACD;;;WACD,gCAAuBL,aAAvB,EAA2D;AACzDP,MAAAA,oBAAoB,CAACS,GAArB,CAAyBK,WAAzB;;AACAP,MAAAA,aAAa,CAACQ,YAAd;;AACAf,MAAAA,oBAAoB,CAACS,GAArB,CAAyBO,YAAzB;AACA,WAAKR,UAAL,GAAkBR,oBAAoB,CAACiB,sBAArB,EAAlB;AACAjB,MAAAA,oBAAoB,CAACS,GAArB,CAAyBS,kBAAzB,CACE,KAAKV,UADP,EAEED,aAAa,CAACY,cAAd,EAFF,EAGE,KAAKC,0BAAL,EAHF,EAIE,KAAKC,gBAAL,CAAsBC,IAAtB,CAA2B,IAA3B,CAJF;AAMD;;;;;AAGHC,MAAM,CAACC,OAAP,GAAiBtB,SAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nconst NativeAnimatedHelper = require('../NativeAnimatedHelper');\n\nimport type AnimatedValue from '../nodes/AnimatedValue';\n\nexport type EndResult = {finished: boolean, ...};\nexport type EndCallback = (result: EndResult) => void;\n\nexport type AnimationConfig = {\n  isInteraction?: boolean,\n  useNativeDriver: boolean,\n  onComplete?: ?EndCallback,\n  iterations?: number,\n};\n\n// Important note: start() and stop() will only be called at most once.\n// Once an animation has been stopped or finished its course, it will\n// not be reused.\nclass Animation {\n  __active: boolean;\n  __isInteraction: boolean;\n  __nativeId: number;\n  __onEnd: ?EndCallback;\n  __iterations: number;\n  start(\n    fromValue: number,\n    onUpdate: (value: number) => void,\n    onEnd: ?EndCallback,\n    previousAnimation: ?Animation,\n    animatedValue: AnimatedValue,\n  ): void {}\n  stop(): void {\n    if (this.__nativeId) {\n      NativeAnimatedHelper.API.stopAnimation(this.__nativeId);\n    }\n  }\n  __getNativeAnimationConfig(): any {\n    // Subclasses that have corresponding animation implementation done in native\n    // should override this method\n    throw new Error('This animation type cannot be offloaded to native');\n  }\n  // Helper function for subclasses to make sure onEnd is only called once.\n  __debouncedOnEnd(result: EndResult): void {\n    const onEnd = this.__onEnd;\n    this.__onEnd = null;\n    onEnd && onEnd(result);\n  }\n  __startNativeAnimation(animatedValue: AnimatedValue): void {\n    NativeAnimatedHelper.API.enableQueue();\n    animatedValue.__makeNative();\n    NativeAnimatedHelper.API.disableQueue();\n    this.__nativeId = NativeAnimatedHelper.generateNewAnimationId();\n    NativeAnimatedHelper.API.startAnimatingNode(\n      this.__nativeId,\n      animatedValue.__getNativeTag(),\n      this.__getNativeAnimationConfig(),\n      this.__debouncedOnEnd.bind(this),\n    );\n  }\n}\n\nmodule.exports = Animation;\n"]}