09490abdbac6fd79fc7fb5a9bf324f33
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _Platform = _interopRequireDefault(require("../Utilities/Platform"));

var UIManager = require("../ReactNative/UIManager");

function configureNext(config, onAnimationDidEnd) {
  if (!_Platform.default.isTesting) {
    UIManager.configureNextLayoutAnimation(config, onAnimationDidEnd != null ? onAnimationDidEnd : function () {}, function () {});
  }
}

function create(duration, type, property) {
  return {
    duration: duration,
    create: {
      type: type,
      property: property
    },
    update: {
      type: type
    },
    delete: {
      type: type,
      property: property
    }
  };
}

var Presets = {
  easeInEaseOut: create(300, 'easeInEaseOut', 'opacity'),
  linear: create(500, 'linear', 'opacity'),
  spring: {
    duration: 700,
    create: {
      type: 'linear',
      property: 'opacity'
    },
    update: {
      type: 'spring',
      springDamping: 0.4
    },
    delete: {
      type: 'linear',
      property: 'opacity'
    }
  }
};
var LayoutAnimation = {
  configureNext: configureNext,
  create: create,
  Types: Object.freeze({
    spring: 'spring',
    linear: 'linear',
    easeInEaseOut: 'easeInEaseOut',
    easeIn: 'easeIn',
    easeOut: 'easeOut',
    keyboard: 'keyboard'
  }),
  Properties: Object.freeze({
    opacity: 'opacity',
    scaleX: 'scaleX',
    scaleY: 'scaleY',
    scaleXY: 'scaleXY'
  }),
  checkConfig: function checkConfig() {
    console.error('LayoutAnimation.checkConfig(...) has been disabled.');
  },
  Presets: Presets,
  easeInEaseOut: configureNext.bind(null, Presets.easeInEaseOut),
  linear: configureNext.bind(null, Presets.linear),
  spring: configureNext.bind(null, Presets.spring)
};
module.exports = LayoutAnimation;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,