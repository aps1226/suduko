c8daa29f917c223571e72484fbe06281
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = SelectionSquare;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _react = _interopRequireDefault(require("react"));

var _reactNative = require("react-native");

var _reactRedux = require("react-redux");

var _redux = require("redux");

var actionCreators = _interopRequireWildcard(require("../src/state/index"));

var _expoAppLoading = _interopRequireDefault(require("expo-app-loading"));

var _font = require("@use-expo/font");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function SelectionSquare(props) {
  var number = props.number;

  var _useSelector = (0, _reactRedux.useSelector)(function (state) {
    return state;
  }),
      selection = _useSelector.selection,
      colors = _useSelector.colors,
      entryMode = _useSelector.entryMode;

  var color = colors["Selection_" + number];
  var dispatch = (0, _reactRedux.useDispatch)();

  var _bindActionCreators = (0, _redux.bindActionCreators)(actionCreators, dispatch),
      setSelection = _bindActionCreators.setSelection,
      changeColor = _bindActionCreators.changeColor;

  var handleOnPress = function handleOnPress() {
    setSelection(number);
    changeColor("Selection_" + number);
  };

  var _useFonts = (0, _font.useFonts)({
    "JustAnotherHand": require("../assets/fonts/JustAnotherHand-Regular.ttf"),
    "SpaceMono": require("../assets/fonts/SpaceMono-Regular.ttf")
  }),
      _useFonts2 = (0, _slicedToArray2.default)(_useFonts, 1),
      isLoaded = _useFonts2[0];

  if (!isLoaded) {
    return _react.default.createElement(_expoAppLoading.default, null);
  } else {
    var fontFamily = entryMode ? "SpaceMono" : "JustAnotherHand";
    var marginTop = entryMode ? 0 : 5;
    return _react.default.createElement(_reactNative.View, {
      style: {
        backgroundColor: color
      }
    }, color === 'transparent' || !color ? _react.default.createElement(_reactNative.ImageBackground, {
      source: require("../assets/images/square.jpg"),
      style: {
        width: '100%'
      }
    }, _react.default.createElement(_reactNative.TouchableHighlight, {
      onPress: handleOnPress
    }, _react.default.createElement(_reactNative.View, {
      style: styles.gridSquare
    }, _react.default.createElement(_reactNative.Text, {
      style: {
        marginTop: marginTop,
        fontFamily: fontFamily
      }
    }, number)))) : _react.default.createElement(_reactNative.TouchableHighlight, {
      onPress: handleOnPress
    }, _react.default.createElement(_reactNative.View, {
      style: styles.gridSquare
    }, _react.default.createElement(_reactNative.Text, {
      style: {
        marginTop: marginTop,
        fontFamily: fontFamily
      }
    }, number))));
  }
}

var styles = _reactNative.StyleSheet.create({
  container: {},
  gridSquare: {
    borderStyle: 'solid',
    width: 35,
    height: 35,
    borderWidth: 5,
    borderLeftColor: 'rgba(255, 255, 255, 0.20)',
    borderTopColor: 'rgba(255, 255, 255, 0.33)',
    borderRightColor: 'rgba(0, 0, 0, 0.15)',
    borderBottomColor: 'rgba(0, 0, 0, 0.5)',
    alignItems: 'center'
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcYXNoZWVcXERvY3VtZW50c1xcSmF2YXNjcmlwdFxcUmVhY3RcXFJlYWN0IE5hdGl2ZVxcc3VkdWtvXFxjb21wb25lbnRzXFxTZWxlY3Rpb25TcXVhcmUudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUVBOztBQUNBOzs7Ozs7QUFLYyxTQUFVLGVBQVYsQ0FBMEIsS0FBMUIsRUFBc0M7QUFFbEQsTUFBTyxNQUFQLEdBQWlCLEtBQWpCLENBQU8sTUFBUDs7QUFFQSxxQkFBcUMsNkJBQVksVUFBQyxLQUFEO0FBQUEsV0FBcUIsS0FBckI7QUFBQSxHQUFaLENBQXJDO0FBQUEsTUFBTyxTQUFQLGdCQUFPLFNBQVA7QUFBQSxNQUFpQixNQUFqQixnQkFBaUIsTUFBakI7QUFBQSxNQUF3QixTQUF4QixnQkFBd0IsU0FBeEI7O0FBQ0EsTUFBTSxLQUFLLEdBQVUsTUFBTSxnQkFBYyxNQUFkLENBQTNCO0FBQ0EsTUFBTSxRQUFRLEdBQUcsOEJBQWpCOztBQUNBLDRCQUFzQywrQkFBbUIsY0FBbkIsRUFBa0MsUUFBbEMsQ0FBdEM7QUFBQSxNQUFRLFlBQVIsdUJBQVEsWUFBUjtBQUFBLE1BQXNCLFdBQXRCLHVCQUFzQixXQUF0Qjs7QUFFQSxNQUFNLGFBQWEsR0FBRyxTQUFoQixhQUFnQixHQUFVO0FBQzlCLElBQUEsWUFBWSxDQUFDLE1BQUQsQ0FBWjtBQUNBLElBQUEsV0FBVyxnQkFBYyxNQUFkLENBQVg7QUFDRCxHQUhEOztBQUlBLGtCQUFtQixvQkFBUztBQUMxQix1QkFBa0IsT0FBTywrQ0FEQztBQUUxQixpQkFBWSxPQUFPO0FBRk8sR0FBVCxDQUFuQjtBQUFBO0FBQUEsTUFBTyxRQUFQOztBQUtBLE1BQUcsQ0FBQyxRQUFKLEVBQWE7QUFDWCxXQUFPLGVBQUEsYUFBQSxDQUFDLHVCQUFELEVBQVcsSUFBWCxDQUFQO0FBQ0QsR0FGRCxNQUVLO0FBQ0gsUUFBSSxVQUFVLEdBQVUsU0FBUyxHQUFHLFdBQUgsR0FBZSxpQkFBaEQ7QUFDQSxRQUFJLFNBQVMsR0FBVSxTQUFTLEdBQUcsQ0FBSCxHQUFLLENBQXJDO0FBQ0EsV0FDRSxlQUFBLGFBQUEsQ0FBQyxpQkFBRCxFQUFLO0FBQ0gsTUFBQSxLQUFLLEVBQUk7QUFBQyxRQUFBLGVBQWUsRUFBQztBQUFqQjtBQUROLEtBQUwsRUFHRyxLQUFLLEtBQUssYUFBVixJQUEyQixDQUFDLEtBQTVCLEdBQ0MsZUFBQSxhQUFBLENBQUMsNEJBQUQsRUFBZ0I7QUFDZCxNQUFBLE1BQU0sRUFBSSxPQUFPLCtCQURIO0FBRWQsTUFBQSxLQUFLLEVBQUk7QUFDUCxRQUFBLEtBQUssRUFBQztBQURDO0FBRkssS0FBaEIsRUFNRSxlQUFBLGFBQUEsQ0FBQywrQkFBRCxFQUFtQjtBQUNqQixNQUFBLE9BQU8sRUFBSTtBQURNLEtBQW5CLEVBR0UsZUFBQSxhQUFBLENBQUMsaUJBQUQsRUFBSztBQUFDLE1BQUEsS0FBSyxFQUFFLE1BQU0sQ0FBQztBQUFmLEtBQUwsRUFDSSxlQUFBLGFBQUEsQ0FBQyxpQkFBRCxFQUFLO0FBQ0gsTUFBQSxLQUFLLEVBQUk7QUFDUCxRQUFBLFNBQVMsRUFBQyxTQURIO0FBRVAsUUFBQSxVQUFVLEVBQUM7QUFGSjtBQUROLEtBQUwsRUFNRyxNQU5ILENBREosQ0FIRixDQU5GLENBREQsR0F1QkcsZUFBQSxhQUFBLENBQUMsK0JBQUQsRUFBbUI7QUFDakIsTUFBQSxPQUFPLEVBQUk7QUFETSxLQUFuQixFQUdFLGVBQUEsYUFBQSxDQUFDLGlCQUFELEVBQUs7QUFBQyxNQUFBLEtBQUssRUFBRSxNQUFNLENBQUM7QUFBZixLQUFMLEVBQ0ksZUFBQSxhQUFBLENBQUMsaUJBQUQsRUFBSztBQUNILE1BQUEsS0FBSyxFQUFJO0FBQ1AsUUFBQSxTQUFTLEVBQUMsU0FESDtBQUVQLFFBQUEsVUFBVSxFQUFDO0FBRko7QUFETixLQUFMLEVBTUcsTUFOSCxDQURKLENBSEYsQ0ExQk4sQ0FERjtBQTRDRDtBQUNGOztBQUVELElBQU0sTUFBTSxHQUFHLHdCQUFXLE1BQVgsQ0FBa0I7QUFDL0IsRUFBQSxTQUFTLEVBQUUsRUFEb0I7QUFHL0IsRUFBQSxVQUFVLEVBQUM7QUFDVCxJQUFBLFdBQVcsRUFBQyxPQURIO0FBRVQsSUFBQSxLQUFLLEVBQUUsRUFGRTtBQUdULElBQUEsTUFBTSxFQUFFLEVBSEM7QUFJVCxJQUFBLFdBQVcsRUFBRSxDQUpKO0FBS1QsSUFBQSxlQUFlLEVBQUUsMkJBTFI7QUFNVCxJQUFBLGNBQWMsRUFBRSwyQkFOUDtBQU9ULElBQUEsZ0JBQWdCLEVBQUUscUJBUFQ7QUFRVCxJQUFBLGlCQUFpQixFQUFFLG9CQVJWO0FBU1QsSUFBQSxVQUFVLEVBQUM7QUFURjtBQUhvQixDQUFsQixDQUFmIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7dXNlRWZmZWN0fSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgQWxlcnQsIEltYWdlQmFja2dyb3VuZCwgU3R5bGVTaGVldCwgVG91Y2hhYmxlSGlnaGxpZ2h0LCBUZXh0LCBWaWV3IH0gZnJvbSBcInJlYWN0LW5hdGl2ZVwiO1xyXG5pbXBvcnQgeyB1c2VTZWxlY3RvciwgdXNlRGlzcGF0Y2ggfSBmcm9tIFwicmVhY3QtcmVkdXhcIjsgXHJcbmltcG9ydCB7IGJpbmRBY3Rpb25DcmVhdG9ycyB9IGZyb20gXCJyZWR1eFwiO1xyXG5pbXBvcnQgKiBhcyBhY3Rpb25DcmVhdG9ycyBmcm9tICcuLi9zcmMvc3RhdGUvaW5kZXgnO1xyXG5cclxuaW1wb3J0IEFwcExvYWRpbmcgZnJvbSAnZXhwby1hcHAtbG9hZGluZyc7XHJcbmltcG9ydCB7IHVzZUZvbnRzIH0gZnJvbSAnQHVzZS1leHBvL2ZvbnQnO1xyXG5cclxuaW1wb3J0IHtJUHJvcHN9IGZyb20gJy4uL3R5cGVzJztcclxuaW1wb3J0IHtSb290U3RhdGV9IGZyb20gJy4uL3NyYy9zdGF0ZS9yZWR1Y2Vycy9pbmRleCc7XHJcbiAgICAgICAgXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFNlbGVjdGlvblNxdWFyZShwcm9wczpJUHJvcHMpIHtcclxuICBcclxuICBjb25zdCB7bnVtYmVyfSA9IHByb3BzO1xyXG5cclxuICBjb25zdCB7c2VsZWN0aW9uLGNvbG9ycyxlbnRyeU1vZGV9ID0gdXNlU2VsZWN0b3IoKHN0YXRlOlJvb3RTdGF0ZSkgPT4gc3RhdGUpO1xyXG4gIGNvbnN0IGNvbG9yOnN0cmluZyA9IGNvbG9yc1tgU2VsZWN0aW9uXyR7bnVtYmVyfWBdO1xyXG4gIGNvbnN0IGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKTtcclxuICBjb25zdCB7IHNldFNlbGVjdGlvbiwgY2hhbmdlQ29sb3IgfSA9IGJpbmRBY3Rpb25DcmVhdG9ycyhhY3Rpb25DcmVhdG9ycyxkaXNwYXRjaCk7XHJcblxyXG4gIGNvbnN0IGhhbmRsZU9uUHJlc3MgPSAoKTp2b2lkID0+e1xyXG4gICAgc2V0U2VsZWN0aW9uKG51bWJlcik7XHJcbiAgICBjaGFuZ2VDb2xvcihgU2VsZWN0aW9uXyR7bnVtYmVyfWApO1xyXG4gIH1cclxuICBjb25zdCBbaXNMb2FkZWRdID0gdXNlRm9udHMoe1xyXG4gICAgXCJKdXN0QW5vdGhlckhhbmRcIjpyZXF1aXJlKFwiLi4vYXNzZXRzL2ZvbnRzL0p1c3RBbm90aGVySGFuZC1SZWd1bGFyLnR0ZlwiKSxcclxuICAgIFwiU3BhY2VNb25vXCI6cmVxdWlyZShcIi4uL2Fzc2V0cy9mb250cy9TcGFjZU1vbm8tUmVndWxhci50dGZcIilcclxuICB9KVxyXG4gIFxyXG4gIGlmKCFpc0xvYWRlZCl7XHJcbiAgICByZXR1cm4oPEFwcExvYWRpbmcvPik7XHJcbiAgfWVsc2V7XHJcbiAgICBsZXQgZm9udEZhbWlseTpzdHJpbmcgPSBlbnRyeU1vZGUgPyBcIlNwYWNlTW9ub1wiOlwiSnVzdEFub3RoZXJIYW5kXCI7XHJcbiAgICBsZXQgbWFyZ2luVG9wOm51bWJlciA9IGVudHJ5TW9kZSA/IDA6NTtcclxuICAgIHJldHVybiAoXHJcbiAgICAgIDxWaWV3XHJcbiAgICAgICAgc3R5bGUgPSB7e2JhY2tncm91bmRDb2xvcjpjb2xvcn19XHJcbiAgICAgID5cclxuICAgICAgICB7Y29sb3IgPT09ICd0cmFuc3BhcmVudCcgfHwgIWNvbG9yID9cclxuICAgICAgICAgIDxJbWFnZUJhY2tncm91bmRcclxuICAgICAgICAgICAgc291cmNlID0ge3JlcXVpcmUoJy4uL2Fzc2V0cy9pbWFnZXMvc3F1YXJlLmpwZycpfVxyXG4gICAgICAgICAgICBzdHlsZSA9IHt7XHJcbiAgICAgICAgICAgICAgd2lkdGg6JzEwMCUnLFxyXG4gICAgICAgICAgICB9fVxyXG4gICAgICAgICAgPlxyXG4gICAgICAgICAgICA8VG91Y2hhYmxlSGlnaGxpZ2h0XHJcbiAgICAgICAgICAgICAgb25QcmVzcyA9IHtoYW5kbGVPblByZXNzfVxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgPFZpZXcgc3R5bGU9e3N0eWxlcy5ncmlkU3F1YXJlfT5cclxuICAgICAgICAgICAgICAgICAgPFRleHRcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZSA9IHt7XHJcbiAgICAgICAgICAgICAgICAgICAgICBtYXJnaW5Ub3A6bWFyZ2luVG9wLFxyXG4gICAgICAgICAgICAgICAgICAgICAgZm9udEZhbWlseTpmb250RmFtaWx5XHJcbiAgICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgIHtudW1iZXJ9XHJcbiAgICAgICAgICAgICAgICAgIDwvVGV4dD5cclxuICAgICAgICAgICAgICA8L1ZpZXc+XHJcbiAgICAgICAgICAgIDwvVG91Y2hhYmxlSGlnaGxpZ2h0PlxyXG4gICAgICAgICAgPC9JbWFnZUJhY2tncm91bmQ+XHJcbiAgICAgICAgICA6XHJcbiAgICAgICAgICAgIDxUb3VjaGFibGVIaWdobGlnaHRcclxuICAgICAgICAgICAgICBvblByZXNzID0ge2hhbmRsZU9uUHJlc3N9XHJcbiAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICA8VmlldyBzdHlsZT17c3R5bGVzLmdyaWRTcXVhcmV9PlxyXG4gICAgICAgICAgICAgICAgICA8VGV4dFxyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlID0ge3tcclxuICAgICAgICAgICAgICAgICAgICAgIG1hcmdpblRvcDptYXJnaW5Ub3AsXHJcbiAgICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OmZvbnRGYW1pbHlcclxuICAgICAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgICAge251bWJlcn1cclxuICAgICAgICAgICAgICAgICAgPC9UZXh0PlxyXG4gICAgICAgICAgICAgIDwvVmlldz5cclxuICAgICAgICAgICAgPC9Ub3VjaGFibGVIaWdobGlnaHQ+XHJcbiAgICAgICAgfVxyXG4gICAgICA8L1ZpZXc+XHJcbiAgICApO1xyXG4gIH1cclxufVxyXG5cclxuY29uc3Qgc3R5bGVzID0gU3R5bGVTaGVldC5jcmVhdGUoe1xyXG4gIGNvbnRhaW5lcjoge1xyXG4gIH0sXHJcbiAgZ3JpZFNxdWFyZTp7XHJcbiAgICBib3JkZXJTdHlsZTonc29saWQnLFxyXG4gICAgd2lkdGg6IDM1LFxyXG4gICAgaGVpZ2h0OiAzNSxcclxuICAgIGJvcmRlcldpZHRoOiA1LFxyXG4gICAgYm9yZGVyTGVmdENvbG9yOiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIwKScsXHJcbiAgICBib3JkZXJUb3BDb2xvcjogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4zMyknLFxyXG4gICAgYm9yZGVyUmlnaHRDb2xvcjogJ3JnYmEoMCwgMCwgMCwgMC4xNSknLFxyXG4gICAgYm9yZGVyQm90dG9tQ29sb3I6ICdyZ2JhKDAsIDAsIDAsIDAuNSknLFxyXG4gICAgYWxpZ25JdGVtczonY2VudGVyJ1xyXG4gIH1cclxufSk7Il19