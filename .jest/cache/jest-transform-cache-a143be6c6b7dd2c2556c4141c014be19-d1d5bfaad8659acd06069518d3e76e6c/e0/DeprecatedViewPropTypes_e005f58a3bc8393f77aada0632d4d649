5ba95d541c3c1fe5a2d732e86bee393b
'use strict';

var DeprecatedEdgeInsetsPropType = require("./DeprecatedEdgeInsetsPropType");

var DeprecatedStyleSheetPropType = require("./DeprecatedStyleSheetPropType");

var DeprecatedViewStylePropTypes = require("./DeprecatedViewStylePropTypes");

var PropTypes = require('prop-types');

var _require = require("./DeprecatedViewAccessibility"),
    DeprecatedAccessibilityRoles = _require.DeprecatedAccessibilityRoles;

var stylePropType = DeprecatedStyleSheetPropType(DeprecatedViewStylePropTypes);
module.exports = {
  accessible: PropTypes.bool,
  accessibilityLabel: PropTypes.node,
  accessibilityHint: PropTypes.string,
  accessibilityActions: PropTypes.arrayOf(PropTypes.string),
  accessibilityIgnoresInvertColors: PropTypes.bool,
  accessibilityRole: PropTypes.oneOf(DeprecatedAccessibilityRoles),
  accessibilityState: PropTypes.object,
  accessibilityValue: PropTypes.object,
  accessibilityLiveRegion: PropTypes.oneOf(['none', 'polite', 'assertive']),
  importantForAccessibility: PropTypes.oneOf(['auto', 'yes', 'no', 'no-hide-descendants']),
  accessibilityViewIsModal: PropTypes.bool,
  accessibilityElementsHidden: PropTypes.bool,
  onAccessibilityAction: PropTypes.func,
  onAccessibilityTap: PropTypes.func,
  onMagicTap: PropTypes.func,
  testID: PropTypes.string,
  nativeID: PropTypes.string,
  onResponderGrant: PropTypes.func,
  onResponderMove: PropTypes.func,
  onResponderReject: PropTypes.func,
  onResponderRelease: PropTypes.func,
  onResponderTerminate: PropTypes.func,
  onResponderTerminationRequest: PropTypes.func,
  onStartShouldSetResponder: PropTypes.func,
  onStartShouldSetResponderCapture: PropTypes.func,
  onMoveShouldSetResponder: PropTypes.func,
  onMoveShouldSetResponderCapture: PropTypes.func,
  hitSlop: DeprecatedEdgeInsetsPropType,
  onLayout: PropTypes.func,
  pointerEvents: PropTypes.oneOf(['box-none', 'none', 'box-only', 'auto']),
  style: stylePropType,
  removeClippedSubviews: PropTypes.bool,
  renderToHardwareTextureAndroid: PropTypes.bool,
  shouldRasterizeIOS: PropTypes.bool,
  collapsable: PropTypes.bool,
  needsOffscreenAlphaCompositing: PropTypes.bool
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkRlcHJlY2F0ZWRWaWV3UHJvcFR5cGVzLmpzIl0sIm5hbWVzIjpbIkRlcHJlY2F0ZWRFZGdlSW5zZXRzUHJvcFR5cGUiLCJyZXF1aXJlIiwiRGVwcmVjYXRlZFN0eWxlU2hlZXRQcm9wVHlwZSIsIkRlcHJlY2F0ZWRWaWV3U3R5bGVQcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJEZXByZWNhdGVkQWNjZXNzaWJpbGl0eVJvbGVzIiwic3R5bGVQcm9wVHlwZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJhY2Nlc3NpYmxlIiwiYm9vbCIsImFjY2Vzc2liaWxpdHlMYWJlbCIsIm5vZGUiLCJhY2Nlc3NpYmlsaXR5SGludCIsInN0cmluZyIsImFjY2Vzc2liaWxpdHlBY3Rpb25zIiwiYXJyYXlPZiIsImFjY2Vzc2liaWxpdHlJZ25vcmVzSW52ZXJ0Q29sb3JzIiwiYWNjZXNzaWJpbGl0eVJvbGUiLCJvbmVPZiIsImFjY2Vzc2liaWxpdHlTdGF0ZSIsIm9iamVjdCIsImFjY2Vzc2liaWxpdHlWYWx1ZSIsImFjY2Vzc2liaWxpdHlMaXZlUmVnaW9uIiwiaW1wb3J0YW50Rm9yQWNjZXNzaWJpbGl0eSIsImFjY2Vzc2liaWxpdHlWaWV3SXNNb2RhbCIsImFjY2Vzc2liaWxpdHlFbGVtZW50c0hpZGRlbiIsIm9uQWNjZXNzaWJpbGl0eUFjdGlvbiIsImZ1bmMiLCJvbkFjY2Vzc2liaWxpdHlUYXAiLCJvbk1hZ2ljVGFwIiwidGVzdElEIiwibmF0aXZlSUQiLCJvblJlc3BvbmRlckdyYW50Iiwib25SZXNwb25kZXJNb3ZlIiwib25SZXNwb25kZXJSZWplY3QiLCJvblJlc3BvbmRlclJlbGVhc2UiLCJvblJlc3BvbmRlclRlcm1pbmF0ZSIsIm9uUmVzcG9uZGVyVGVybWluYXRpb25SZXF1ZXN0Iiwib25TdGFydFNob3VsZFNldFJlc3BvbmRlciIsIm9uU3RhcnRTaG91bGRTZXRSZXNwb25kZXJDYXB0dXJlIiwib25Nb3ZlU2hvdWxkU2V0UmVzcG9uZGVyIiwib25Nb3ZlU2hvdWxkU2V0UmVzcG9uZGVyQ2FwdHVyZSIsImhpdFNsb3AiLCJvbkxheW91dCIsInBvaW50ZXJFdmVudHMiLCJzdHlsZSIsInJlbW92ZUNsaXBwZWRTdWJ2aWV3cyIsInJlbmRlclRvSGFyZHdhcmVUZXh0dXJlQW5kcm9pZCIsInNob3VsZFJhc3Rlcml6ZUlPUyIsImNvbGxhcHNhYmxlIiwibmVlZHNPZmZzY3JlZW5BbHBoYUNvbXBvc2l0aW5nIl0sIm1hcHBpbmdzIjoiQUFVQTs7QUFFQSxJQUFNQSw0QkFBNEIsR0FBR0MsT0FBTyxrQ0FBNUM7O0FBQ0EsSUFBTUMsNEJBQTRCLEdBQUdELE9BQU8sa0NBQTVDOztBQUNBLElBQU1FLDRCQUE0QixHQUFHRixPQUFPLGtDQUE1Qzs7QUFDQSxJQUFNRyxTQUFTLEdBQUdILE9BQU8sQ0FBQyxZQUFELENBQXpCOztBQUVBLGVBQXVDQSxPQUFPLGlDQUE5QztBQUFBLElBQU9JLDRCQUFQLFlBQU9BLDRCQUFQOztBQUVBLElBQU1DLGFBQWtDLEdBQUdKLDRCQUE0QixDQUNyRUMsNEJBRHFFLENBQXZFO0FBSUFJLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjtBQU9mQyxFQUFBQSxVQUFVLEVBQUVMLFNBQVMsQ0FBQ00sSUFQUDtBQWdCZkMsRUFBQUEsa0JBQWtCLEVBQUVQLFNBQVMsQ0FBQ1EsSUFoQmY7QUEwQmZDLEVBQUFBLGlCQUFpQixFQUFFVCxTQUFTLENBQUNVLE1BMUJkO0FBaUNmQyxFQUFBQSxvQkFBb0IsRUFBR1gsU0FBUyxDQUFDWSxPQUFWLENBQ3JCWixTQUFTLENBQUNVLE1BRFcsQ0FqQ1I7QUEwQ2ZHLEVBQUFBLGdDQUFnQyxFQUFFYixTQUFTLENBQUNNLElBMUM3QjtBQStDZlEsRUFBQUEsaUJBQWlCLEVBQUdkLFNBQVMsQ0FBQ2UsS0FBVixDQUNsQmQsNEJBRGtCLENBL0NMO0FBK0VmZSxFQUFBQSxrQkFBa0IsRUFBRWhCLFNBQVMsQ0FBQ2lCLE1BL0VmO0FBZ0ZmQyxFQUFBQSxrQkFBa0IsRUFBRWxCLFNBQVMsQ0FBQ2lCLE1BaEZmO0FBeUZmRSxFQUFBQSx1QkFBdUIsRUFBR25CLFNBQVMsQ0FBQ2UsS0FBVixDQUFnQixDQUN4QyxNQUR3QyxFQUV4QyxRQUZ3QyxFQUd4QyxXQUh3QyxDQUFoQixDQXpGWDtBQXdHZkssRUFBQUEseUJBQXlCLEVBQUdwQixTQUFTLENBQUNlLEtBQVYsQ0FBZ0IsQ0FDMUMsTUFEMEMsRUFFMUMsS0FGMEMsRUFHMUMsSUFIMEMsRUFJMUMscUJBSjBDLENBQWhCLENBeEdiO0FBd0hmTSxFQUFBQSx3QkFBd0IsRUFBRXJCLFNBQVMsQ0FBQ00sSUF4SHJCO0FBa0lmZ0IsRUFBQUEsMkJBQTJCLEVBQUV0QixTQUFTLENBQUNNLElBbEl4QjtBQTBJZmlCLEVBQUFBLHFCQUFxQixFQUFFdkIsU0FBUyxDQUFDd0IsSUExSWxCO0FBa0pmQyxFQUFBQSxrQkFBa0IsRUFBRXpCLFNBQVMsQ0FBQ3dCLElBbEpmO0FBMEpmRSxFQUFBQSxVQUFVLEVBQUUxQixTQUFTLENBQUN3QixJQTFKUDtBQW1LZkcsRUFBQUEsTUFBTSxFQUFFM0IsU0FBUyxDQUFDVSxNQW5LSDtBQTRLZmtCLEVBQUFBLFFBQVEsRUFBRTVCLFNBQVMsQ0FBQ1UsTUE1S0w7QUE2TGZtQixFQUFBQSxnQkFBZ0IsRUFBRTdCLFNBQVMsQ0FBQ3dCLElBN0xiO0FBdU1mTSxFQUFBQSxlQUFlLEVBQUU5QixTQUFTLENBQUN3QixJQXZNWjtBQWtOZk8sRUFBQUEsaUJBQWlCLEVBQUUvQixTQUFTLENBQUN3QixJQWxOZDtBQTROZlEsRUFBQUEsa0JBQWtCLEVBQUVoQyxTQUFTLENBQUN3QixJQTVOZjtBQXlPZlMsRUFBQUEsb0JBQW9CLEVBQUVqQyxTQUFTLENBQUN3QixJQXpPakI7QUFvUGZVLEVBQUFBLDZCQUE2QixFQUFFbEMsU0FBUyxDQUFDd0IsSUFwUDFCO0FBOFBmVyxFQUFBQSx5QkFBeUIsRUFBRW5DLFNBQVMsQ0FBQ3dCLElBOVB0QjtBQXlRZlksRUFBQUEsZ0NBQWdDLEVBQUVwQyxTQUFTLENBQUN3QixJQXpRN0I7QUFvUmZhLEVBQUFBLHdCQUF3QixFQUFFckMsU0FBUyxDQUFDd0IsSUFwUnJCO0FBK1JmYyxFQUFBQSwrQkFBK0IsRUFBRXRDLFNBQVMsQ0FBQ3dCLElBL1I1QjtBQTRTZmUsRUFBQUEsT0FBTyxFQUFFM0MsNEJBNVNNO0FBeVRmNEMsRUFBQUEsUUFBUSxFQUFFeEMsU0FBUyxDQUFDd0IsSUF6VEw7QUFnVWZpQixFQUFBQSxhQUFhLEVBQUd6QyxTQUFTLENBQUNlLEtBQVYsQ0FBZ0IsQ0FDOUIsVUFEOEIsRUFFOUIsTUFGOEIsRUFHOUIsVUFIOEIsRUFJOUIsTUFKOEIsQ0FBaEIsQ0FoVUQ7QUEwVWYyQixFQUFBQSxLQUFLLEVBQUV4QyxhQTFVUTtBQXNWZnlDLEVBQUFBLHFCQUFxQixFQUFFM0MsU0FBUyxDQUFDTSxJQXRWbEI7QUFnV2ZzQyxFQUFBQSw4QkFBOEIsRUFBRTVDLFNBQVMsQ0FBQ00sSUFoVzNCO0FBeVdmdUMsRUFBQUEsa0JBQWtCLEVBQUU3QyxTQUFTLENBQUNNLElBeldmO0FBcVhmd0MsRUFBQUEsV0FBVyxFQUFFOUMsU0FBUyxDQUFDTSxJQXJYUjtBQStYZnlDLEVBQUFBLDhCQUE4QixFQUFFL0MsU0FBUyxDQUFDTTtBQS9YM0IsQ0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIEBmbG93IHN0cmljdC1sb2NhbFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgRGVwcmVjYXRlZEVkZ2VJbnNldHNQcm9wVHlwZSA9IHJlcXVpcmUoJy4vRGVwcmVjYXRlZEVkZ2VJbnNldHNQcm9wVHlwZScpO1xuY29uc3QgRGVwcmVjYXRlZFN0eWxlU2hlZXRQcm9wVHlwZSA9IHJlcXVpcmUoJy4vRGVwcmVjYXRlZFN0eWxlU2hlZXRQcm9wVHlwZScpO1xuY29uc3QgRGVwcmVjYXRlZFZpZXdTdHlsZVByb3BUeXBlcyA9IHJlcXVpcmUoJy4vRGVwcmVjYXRlZFZpZXdTdHlsZVByb3BUeXBlcycpO1xuY29uc3QgUHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG5jb25zdCB7RGVwcmVjYXRlZEFjY2Vzc2liaWxpdHlSb2xlc30gPSByZXF1aXJlKCcuL0RlcHJlY2F0ZWRWaWV3QWNjZXNzaWJpbGl0eScpO1xuXG5jb25zdCBzdHlsZVByb3BUeXBlOiBSZWFjdFByb3BzQ2hlY2tUeXBlID0gRGVwcmVjYXRlZFN0eWxlU2hlZXRQcm9wVHlwZShcbiAgRGVwcmVjYXRlZFZpZXdTdHlsZVByb3BUeXBlcyxcbik7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvKipcbiAgICogV2hlbiBgdHJ1ZWAsIGluZGljYXRlcyB0aGF0IHRoZSB2aWV3IGlzIGFuIGFjY2Vzc2liaWxpdHkgZWxlbWVudC5cbiAgICogQnkgZGVmYXVsdCwgYWxsIHRoZSB0b3VjaGFibGUgZWxlbWVudHMgYXJlIGFjY2Vzc2libGUuXG4gICAqXG4gICAqIFNlZSBodHRwczovL3JlYWN0bmF0aXZlLmRldi9kb2NzL3ZpZXcuaHRtbCNhY2Nlc3NpYmxlXG4gICAqL1xuICBhY2Nlc3NpYmxlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogT3ZlcnJpZGVzIHRoZSB0ZXh0IHRoYXQncyByZWFkIGJ5IHRoZSBzY3JlZW4gcmVhZGVyIHdoZW4gdGhlIHVzZXIgaW50ZXJhY3RzXG4gICAqIHdpdGggdGhlIGVsZW1lbnQuIEJ5IGRlZmF1bHQsIHRoZSBsYWJlbCBpcyBjb25zdHJ1Y3RlZCBieSB0cmF2ZXJzaW5nIGFsbFxuICAgKiB0aGUgY2hpbGRyZW4gYW5kIGFjY3VtdWxhdGluZyBhbGwgdGhlIGBUZXh0YCBub2RlcyBzZXBhcmF0ZWQgYnkgc3BhY2UuXG4gICAqXG4gICAqIFNlZSBodHRwczovL3JlYWN0bmF0aXZlLmRldi9kb2NzL3ZpZXcuaHRtbCNhY2Nlc3NpYmlsaXR5bGFiZWxcbiAgICovXG4gIGFjY2Vzc2liaWxpdHlMYWJlbDogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIEFuIGFjY2Vzc2liaWxpdHkgaGludCBoZWxwcyB1c2VycyB1bmRlcnN0YW5kIHdoYXQgd2lsbCBoYXBwZW4gd2hlbiB0aGV5IHBlcmZvcm1cbiAgICogYW4gYWN0aW9uIG9uIHRoZSBhY2Nlc3NpYmlsaXR5IGVsZW1lbnQgd2hlbiB0aGF0IHJlc3VsdCBpcyBub3Qgb2J2aW91cyBmcm9tIHRoZVxuICAgKiBhY2Nlc3NpYmlsaXR5IGxhYmVsLlxuICAgKlxuICAgKlxuICAgKiBTZWUgaHR0cHM6Ly9yZWFjdG5hdGl2ZS5kZXYvZG9jcy92aWV3Lmh0bWwjYWNjZXNzaWJpbGl0eUhpbnRcbiAgICovXG4gIGFjY2Vzc2liaWxpdHlIaW50OiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBQcm92aWRlcyBhbiBhcnJheSBvZiBjdXN0b20gYWN0aW9ucyBhdmFpbGFibGUgZm9yIGFjY2Vzc2liaWxpdHkuXG4gICAqXG4gICAqIEBwbGF0Zm9ybSBpb3NcbiAgICovXG4gIGFjY2Vzc2liaWxpdHlBY3Rpb25zOiAoUHJvcFR5cGVzLmFycmF5T2YoXG4gICAgUHJvcFR5cGVzLnN0cmluZyxcbiAgKTogUmVhY3QkUHJvcFR5cGUkUHJpbWl0aXZlPEFycmF5PHN0cmluZz4+KSxcblxuICAvKipcbiAgICogUHJldmVudHMgdmlldyBmcm9tIGJlaW5nIGludmVydGVkIGlmIHNldCB0byB0cnVlIGFuZCBjb2xvciBpbnZlcnNpb24gaXMgdHVybmVkIG9uLlxuICAgKlxuICAgKiBAcGxhdGZvcm0gaW9zXG4gICAqL1xuICBhY2Nlc3NpYmlsaXR5SWdub3Jlc0ludmVydENvbG9yczogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEluZGljYXRlcyB0byBhY2Nlc3NpYmlsaXR5IHNlcnZpY2VzIHRvIHRyZWF0IFVJIGNvbXBvbmVudCBsaWtlIGEgc3BlY2lmaWMgcm9sZS5cbiAgICovXG4gIGFjY2Vzc2liaWxpdHlSb2xlOiAoUHJvcFR5cGVzLm9uZU9mKFxuICAgIERlcHJlY2F0ZWRBY2Nlc3NpYmlsaXR5Um9sZXMsXG4gICk6IFJlYWN0JFByb3BUeXBlJFByaW1pdGl2ZTxcbiAgICB8ICdub25lJ1xuICAgIHwgJ2J1dHRvbidcbiAgICB8ICdsaW5rJ1xuICAgIHwgJ3NlYXJjaCdcbiAgICB8ICdpbWFnZSdcbiAgICB8ICdrZXlib2FyZGtleSdcbiAgICB8ICd0ZXh0J1xuICAgIHwgJ2FkanVzdGFibGUnXG4gICAgfCAnaW1hZ2VidXR0b24nXG4gICAgfCAnaGVhZGVyJ1xuICAgIHwgJ3N1bW1hcnknXG4gICAgfCAnYWxlcnQnXG4gICAgfCAnY2hlY2tib3gnXG4gICAgfCAnY29tYm9ib3gnXG4gICAgfCAnbWVudSdcbiAgICB8ICdtZW51YmFyJ1xuICAgIHwgJ21lbnVpdGVtJ1xuICAgIHwgJ3Byb2dyZXNzYmFyJ1xuICAgIHwgJ3JhZGlvJ1xuICAgIHwgJ3JhZGlvZ3JvdXAnXG4gICAgfCAnc2Nyb2xsYmFyJ1xuICAgIHwgJ3NwaW5idXR0b24nXG4gICAgfCAnc3dpdGNoJ1xuICAgIHwgJ3RhYidcbiAgICB8ICd0YWJsaXN0J1xuICAgIHwgJ3RpbWVyJ1xuICAgIHwgJ3Rvb2xiYXInLFxuICA+KSxcblxuICBhY2Nlc3NpYmlsaXR5U3RhdGU6IFByb3BUeXBlcy5vYmplY3QsXG4gIGFjY2Vzc2liaWxpdHlWYWx1ZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgLyoqXG4gICAqIEluZGljYXRlcyB0byBhY2Nlc3NpYmlsaXR5IHNlcnZpY2VzIHdoZXRoZXIgdGhlIHVzZXIgc2hvdWxkIGJlIG5vdGlmaWVkXG4gICAqIHdoZW4gdGhpcyB2aWV3IGNoYW5nZXMuIFdvcmtzIGZvciBBbmRyb2lkIEFQSSA+PSAxOSBvbmx5LlxuICAgKlxuICAgKiBAcGxhdGZvcm0gYW5kcm9pZFxuICAgKlxuICAgKiBTZWUgaHR0cHM6Ly9yZWFjdG5hdGl2ZS5kZXYvZG9jcy92aWV3Lmh0bWwjYWNjZXNzaWJpbGl0eWxpdmVyZWdpb25cbiAgICovXG4gIGFjY2Vzc2liaWxpdHlMaXZlUmVnaW9uOiAoUHJvcFR5cGVzLm9uZU9mKFtcbiAgICAnbm9uZScsXG4gICAgJ3BvbGl0ZScsXG4gICAgJ2Fzc2VydGl2ZScsXG4gIF0pOiBSZWFjdCRQcm9wVHlwZSRQcmltaXRpdmU8J25vbmUnIHwgJ3BvbGl0ZScgfCAnYXNzZXJ0aXZlJz4pLFxuXG4gIC8qKlxuICAgKiBDb250cm9scyBob3cgdmlldyBpcyBpbXBvcnRhbnQgZm9yIGFjY2Vzc2liaWxpdHkgd2hpY2ggaXMgaWYgaXRcbiAgICogZmlyZXMgYWNjZXNzaWJpbGl0eSBldmVudHMgYW5kIGlmIGl0IGlzIHJlcG9ydGVkIHRvIGFjY2Vzc2liaWxpdHkgc2VydmljZXNcbiAgICogdGhhdCBxdWVyeSB0aGUgc2NyZWVuLiBXb3JrcyBmb3IgQW5kcm9pZCBvbmx5LlxuICAgKlxuICAgKiBAcGxhdGZvcm0gYW5kcm9pZFxuICAgKlxuICAgKiBTZWUgaHR0cHM6Ly9yZWFjdG5hdGl2ZS5kZXYvZG9jcy92aWV3Lmh0bWwjaW1wb3J0YW50Zm9yYWNjZXNzaWJpbGl0eVxuICAgKi9cbiAgaW1wb3J0YW50Rm9yQWNjZXNzaWJpbGl0eTogKFByb3BUeXBlcy5vbmVPZihbXG4gICAgJ2F1dG8nLFxuICAgICd5ZXMnLFxuICAgICdubycsXG4gICAgJ25vLWhpZGUtZGVzY2VuZGFudHMnLFxuICBdKTogUmVhY3QkUHJvcFR5cGUkUHJpbWl0aXZlPCdhdXRvJyB8ICd5ZXMnIHwgJ25vJyB8ICduby1oaWRlLWRlc2NlbmRhbnRzJz4pLFxuXG4gIC8qKlxuICAgKiBBIHZhbHVlIGluZGljYXRpbmcgd2hldGhlciBWb2ljZU92ZXIgc2hvdWxkIGlnbm9yZSB0aGUgZWxlbWVudHNcbiAgICogd2l0aGluIHZpZXdzIHRoYXQgYXJlIHNpYmxpbmdzIG9mIHRoZSByZWNlaXZlci5cbiAgICogRGVmYXVsdCBpcyBgZmFsc2VgLlxuICAgKlxuICAgKiBAcGxhdGZvcm0gaW9zXG4gICAqXG4gICAqIFNlZSBodHRwczovL3JlYWN0bmF0aXZlLmRldi9kb2NzL3ZpZXcuaHRtbCNhY2Nlc3NpYmlsaXR5dmlld2lzbW9kYWxcbiAgICovXG4gIGFjY2Vzc2liaWxpdHlWaWV3SXNNb2RhbDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEEgdmFsdWUgaW5kaWNhdGluZyB3aGV0aGVyIHRoZSBhY2Nlc3NpYmlsaXR5IGVsZW1lbnRzIGNvbnRhaW5lZCB3aXRoaW5cbiAgICogdGhpcyBhY2Nlc3NpYmlsaXR5IGVsZW1lbnQgYXJlIGhpZGRlbi5cbiAgICpcbiAgICogQHBsYXRmb3JtIGlvc1xuICAgKlxuICAgKiBTZWUgaHR0cHM6Ly9yZWFjdG5hdGl2ZS5kZXYvZG9jcy92aWV3Lmh0bWwjYWNjZXNzaWJpbGl0eUVsZW1lbnRzSGlkZGVuXG4gICAqL1xuICBhY2Nlc3NpYmlsaXR5RWxlbWVudHNIaWRkZW46IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBXaGVuIGBhY2Nlc3NpYmxlYCBpcyB0cnVlLCB0aGUgc3lzdGVtIHdpbGwgdHJ5IHRvIGludm9rZSB0aGlzIGZ1bmN0aW9uXG4gICAqIHdoZW4gdGhlIHVzZXIgcGVyZm9ybXMgYW4gYWNjZXNzaWJpbGl0eSBjdXN0b20gYWN0aW9uLlxuICAgKlxuICAgKiBAcGxhdGZvcm0gaW9zXG4gICAqL1xuICBvbkFjY2Vzc2liaWxpdHlBY3Rpb246IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBXaGVuIGBhY2Nlc3NpYmxlYCBpcyB0cnVlLCB0aGUgc3lzdGVtIHdpbGwgdHJ5IHRvIGludm9rZSB0aGlzIGZ1bmN0aW9uXG4gICAqIHdoZW4gdGhlIHVzZXIgcGVyZm9ybXMgYWNjZXNzaWJpbGl0eSB0YXAgZ2VzdHVyZS5cbiAgICpcbiAgICogU2VlIGh0dHBzOi8vcmVhY3RuYXRpdmUuZGV2L2RvY3Mvdmlldy5odG1sI29uYWNjZXNzaWJpbGl0eXRhcFxuICAgKi9cbiAgb25BY2Nlc3NpYmlsaXR5VGFwOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogV2hlbiBgYWNjZXNzaWJsZWAgaXMgYHRydWVgLCB0aGUgc3lzdGVtIHdpbGwgaW52b2tlIHRoaXMgZnVuY3Rpb24gd2hlbiB0aGVcbiAgICogdXNlciBwZXJmb3JtcyB0aGUgbWFnaWMgdGFwIGdlc3R1cmUuXG4gICAqXG4gICAqIFNlZSBodHRwczovL3JlYWN0bmF0aXZlLmRldi9kb2NzL3ZpZXcuaHRtbCNvbm1hZ2ljdGFwXG4gICAqL1xuICBvbk1hZ2ljVGFwOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogVXNlZCB0byBsb2NhdGUgdGhpcyB2aWV3IGluIGVuZC10by1lbmQgdGVzdHMuXG4gICAqXG4gICAqID4gVGhpcyBkaXNhYmxlcyB0aGUgJ2xheW91dC1vbmx5IHZpZXcgcmVtb3ZhbCcgb3B0aW1pemF0aW9uIGZvciB0aGlzIHZpZXchXG4gICAqXG4gICAqIFNlZSBodHRwczovL3JlYWN0bmF0aXZlLmRldi9kb2NzL3ZpZXcuaHRtbCN0ZXN0aWRcbiAgICovXG4gIHRlc3RJRDogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVXNlZCB0byBsb2NhdGUgdGhpcyB2aWV3IGZyb20gbmF0aXZlIGNsYXNzZXMuXG4gICAqXG4gICAqID4gVGhpcyBkaXNhYmxlcyB0aGUgJ2xheW91dC1vbmx5IHZpZXcgcmVtb3ZhbCcgb3B0aW1pemF0aW9uIGZvciB0aGlzIHZpZXchXG4gICAqXG4gICAqIFNlZSBodHRwczovL3JlYWN0bmF0aXZlLmRldi9kb2NzL3ZpZXcuaHRtbCNuYXRpdmVpZFxuICAgKi9cbiAgbmF0aXZlSUQ6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIEZvciBtb3N0IHRvdWNoIGludGVyYWN0aW9ucywgeW91J2xsIHNpbXBseSB3YW50IHRvIHdyYXAgeW91ciBjb21wb25lbnQgaW5cbiAgICogYFRvdWNoYWJsZUhpZ2hsaWdodGAgb3IgYFRvdWNoYWJsZU9wYWNpdHlgLiBDaGVjayBvdXQgYFRvdWNoYWJsZS5qc2AsXG4gICAqIGBTY3JvbGxSZXNwb25kZXIuanNgIGFuZCBgUmVzcG9uZGVyRXZlbnRQbHVnaW4uanNgIGZvciBtb3JlIGRpc2N1c3Npb24uXG4gICAqL1xuXG4gIC8qKlxuICAgKiBUaGUgVmlldyBpcyBub3cgcmVzcG9uZGluZyBmb3IgdG91Y2ggZXZlbnRzLiBUaGlzIGlzIHRoZSB0aW1lIHRvIGhpZ2hsaWdodFxuICAgKiBhbmQgc2hvdyB0aGUgdXNlciB3aGF0IGlzIGhhcHBlbmluZy5cbiAgICpcbiAgICogYFZpZXcucHJvcHMub25SZXNwb25kZXJHcmFudDogKGV2ZW50KSA9PiB7fWAsIHdoZXJlIGBldmVudGAgaXMgYSBzeW50aGV0aWNcbiAgICogdG91Y2ggZXZlbnQgYXMgZGVzY3JpYmVkIGFib3ZlLlxuICAgKlxuICAgKiBTZWUgaHR0cHM6Ly9yZWFjdG5hdGl2ZS5kZXYvZG9jcy92aWV3Lmh0bWwjb25yZXNwb25kZXJncmFudFxuICAgKi9cbiAgb25SZXNwb25kZXJHcmFudDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIFRoZSB1c2VyIGlzIG1vdmluZyB0aGVpciBmaW5nZXIuXG4gICAqXG4gICAqIGBWaWV3LnByb3BzLm9uUmVzcG9uZGVyTW92ZTogKGV2ZW50KSA9PiB7fWAsIHdoZXJlIGBldmVudGAgaXMgYSBzeW50aGV0aWNcbiAgICogdG91Y2ggZXZlbnQgYXMgZGVzY3JpYmVkIGFib3ZlLlxuICAgKlxuICAgKiBTZWUgaHR0cHM6Ly9yZWFjdG5hdGl2ZS5kZXYvZG9jcy92aWV3Lmh0bWwjb25yZXNwb25kZXJtb3ZlXG4gICAqL1xuICBvblJlc3BvbmRlck1vdmU6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBBbm90aGVyIHJlc3BvbmRlciBpcyBhbHJlYWR5IGFjdGl2ZSBhbmQgd2lsbCBub3QgcmVsZWFzZSBpdCB0byB0aGF0IGBWaWV3YFxuICAgKiBhc2tpbmcgdG8gYmUgdGhlIHJlc3BvbmRlci5cbiAgICpcbiAgICogYFZpZXcucHJvcHMub25SZXNwb25kZXJSZWplY3Q6IChldmVudCkgPT4ge31gLCB3aGVyZSBgZXZlbnRgIGlzIGFcbiAgICogc3ludGhldGljIHRvdWNoIGV2ZW50IGFzIGRlc2NyaWJlZCBhYm92ZS5cbiAgICpcbiAgICogU2VlIGh0dHBzOi8vcmVhY3RuYXRpdmUuZGV2L2RvY3Mvdmlldy5odG1sI29ucmVzcG9uZGVycmVqZWN0XG4gICAqL1xuICBvblJlc3BvbmRlclJlamVjdDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEZpcmVkIGF0IHRoZSBlbmQgb2YgdGhlIHRvdWNoLlxuICAgKlxuICAgKiBgVmlldy5wcm9wcy5vblJlc3BvbmRlclJlbGVhc2U6IChldmVudCkgPT4ge31gLCB3aGVyZSBgZXZlbnRgIGlzIGFcbiAgICogc3ludGhldGljIHRvdWNoIGV2ZW50IGFzIGRlc2NyaWJlZCBhYm92ZS5cbiAgICpcbiAgICogU2VlIGh0dHBzOi8vcmVhY3RuYXRpdmUuZGV2L2RvY3Mvdmlldy5odG1sI29ucmVzcG9uZGVycmVsZWFzZVxuICAgKi9cbiAgb25SZXNwb25kZXJSZWxlYXNlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogVGhlIHJlc3BvbmRlciBoYXMgYmVlbiB0YWtlbiBmcm9tIHRoZSBgVmlld2AuIE1pZ2h0IGJlIHRha2VuIGJ5IG90aGVyXG4gICAqIHZpZXdzIGFmdGVyIGEgY2FsbCB0byBgb25SZXNwb25kZXJUZXJtaW5hdGlvblJlcXVlc3RgLCBvciBtaWdodCBiZSB0YWtlblxuICAgKiBieSB0aGUgT1Mgd2l0aG91dCBhc2tpbmcgKGUuZy4sIGhhcHBlbnMgd2l0aCBjb250cm9sIGNlbnRlci8gbm90aWZpY2F0aW9uXG4gICAqIGNlbnRlciBvbiBpT1MpXG4gICAqXG4gICAqIGBWaWV3LnByb3BzLm9uUmVzcG9uZGVyVGVybWluYXRlOiAoZXZlbnQpID0+IHt9YCwgd2hlcmUgYGV2ZW50YCBpcyBhXG4gICAqIHN5bnRoZXRpYyB0b3VjaCBldmVudCBhcyBkZXNjcmliZWQgYWJvdmUuXG4gICAqXG4gICAqIFNlZSBodHRwczovL3JlYWN0bmF0aXZlLmRldi9kb2NzL3ZpZXcuaHRtbCNvbnJlc3BvbmRlcnRlcm1pbmF0ZVxuICAgKi9cbiAgb25SZXNwb25kZXJUZXJtaW5hdGU6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBTb21lIG90aGVyIGBWaWV3YCB3YW50cyB0byBiZWNvbWUgcmVzcG9uZGVyIGFuZCBpcyBhc2tpbmcgdGhpcyBgVmlld2AgdG9cbiAgICogcmVsZWFzZSBpdHMgcmVzcG9uZGVyLiBSZXR1cm5pbmcgYHRydWVgIGFsbG93cyBpdHMgcmVsZWFzZS5cbiAgICpcbiAgICogYFZpZXcucHJvcHMub25SZXNwb25kZXJUZXJtaW5hdGlvblJlcXVlc3Q6IChldmVudCkgPT4ge31gLCB3aGVyZSBgZXZlbnRgXG4gICAqIGlzIGEgc3ludGhldGljIHRvdWNoIGV2ZW50IGFzIGRlc2NyaWJlZCBhYm92ZS5cbiAgICpcbiAgICogU2VlIGh0dHBzOi8vcmVhY3RuYXRpdmUuZGV2L2RvY3Mvdmlldy5odG1sI29ucmVzcG9uZGVydGVybWluYXRpb25yZXF1ZXN0XG4gICAqL1xuICBvblJlc3BvbmRlclRlcm1pbmF0aW9uUmVxdWVzdDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIERvZXMgdGhpcyB2aWV3IHdhbnQgdG8gYmVjb21lIHJlc3BvbmRlciBvbiB0aGUgc3RhcnQgb2YgYSB0b3VjaD9cbiAgICpcbiAgICogYFZpZXcucHJvcHMub25TdGFydFNob3VsZFNldFJlc3BvbmRlcjogKGV2ZW50KSA9PiBbdHJ1ZSB8IGZhbHNlXWAsIHdoZXJlXG4gICAqIGBldmVudGAgaXMgYSBzeW50aGV0aWMgdG91Y2ggZXZlbnQgYXMgZGVzY3JpYmVkIGFib3ZlLlxuICAgKlxuICAgKiBTZWUgaHR0cHM6Ly9yZWFjdG5hdGl2ZS5kZXYvZG9jcy92aWV3Lmh0bWwjb25zdGFydHNob3VsZHNldHJlc3BvbmRlclxuICAgKi9cbiAgb25TdGFydFNob3VsZFNldFJlc3BvbmRlcjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIElmIGEgcGFyZW50IGBWaWV3YCB3YW50cyB0byBwcmV2ZW50IGEgY2hpbGQgYFZpZXdgIGZyb20gYmVjb21pbmcgcmVzcG9uZGVyXG4gICAqIG9uIGEgdG91Y2ggc3RhcnQsIGl0IHNob3VsZCBoYXZlIHRoaXMgaGFuZGxlciB3aGljaCByZXR1cm5zIGB0cnVlYC5cbiAgICpcbiAgICogYFZpZXcucHJvcHMub25TdGFydFNob3VsZFNldFJlc3BvbmRlckNhcHR1cmU6IChldmVudCkgPT4gW3RydWUgfCBmYWxzZV1gLFxuICAgKiB3aGVyZSBgZXZlbnRgIGlzIGEgc3ludGhldGljIHRvdWNoIGV2ZW50IGFzIGRlc2NyaWJlZCBhYm92ZS5cbiAgICpcbiAgICogU2VlIGh0dHBzOi8vcmVhY3RuYXRpdmUuZGV2L2RvY3Mvdmlldy5odG1sI29uc3RhcnRzaG91bGRzZXRyZXNwb25kZXJjYXB0dXJlXG4gICAqL1xuICBvblN0YXJ0U2hvdWxkU2V0UmVzcG9uZGVyQ2FwdHVyZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIERvZXMgdGhpcyB2aWV3IHdhbnQgdG8gXCJjbGFpbVwiIHRvdWNoIHJlc3BvbnNpdmVuZXNzPyBUaGlzIGlzIGNhbGxlZCBmb3JcbiAgICogZXZlcnkgdG91Y2ggbW92ZSBvbiB0aGUgYFZpZXdgIHdoZW4gaXQgaXMgbm90IHRoZSByZXNwb25kZXIuXG4gICAqXG4gICAqIGBWaWV3LnByb3BzLm9uTW92ZVNob3VsZFNldFJlc3BvbmRlcjogKGV2ZW50KSA9PiBbdHJ1ZSB8IGZhbHNlXWAsIHdoZXJlXG4gICAqIGBldmVudGAgaXMgYSBzeW50aGV0aWMgdG91Y2ggZXZlbnQgYXMgZGVzY3JpYmVkIGFib3ZlLlxuICAgKlxuICAgKiBTZWUgaHR0cHM6Ly9yZWFjdG5hdGl2ZS5kZXYvZG9jcy92aWV3Lmh0bWwjb25tb3Zlc2hvdWxkc2V0cmVzcG9uZGVyXG4gICAqL1xuICBvbk1vdmVTaG91bGRTZXRSZXNwb25kZXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBJZiBhIHBhcmVudCBgVmlld2Agd2FudHMgdG8gcHJldmVudCBhIGNoaWxkIGBWaWV3YCBmcm9tIGJlY29taW5nIHJlc3BvbmRlclxuICAgKiBvbiBhIG1vdmUsIGl0IHNob3VsZCBoYXZlIHRoaXMgaGFuZGxlciB3aGljaCByZXR1cm5zIGB0cnVlYC5cbiAgICpcbiAgICogYFZpZXcucHJvcHMub25Nb3ZlU2hvdWxkU2V0UmVzcG9uZGVyQ2FwdHVyZTogKGV2ZW50KSA9PiBbdHJ1ZSB8IGZhbHNlXWAsXG4gICAqIHdoZXJlIGBldmVudGAgaXMgYSBzeW50aGV0aWMgdG91Y2ggZXZlbnQgYXMgZGVzY3JpYmVkIGFib3ZlLlxuICAgKlxuICAgKiBTZWUgaHR0cHM6Ly9yZWFjdG5hdGl2ZS5kZXYvZG9jcy92aWV3Lmh0bWwjb25Nb3ZlU2hvdWxkc2V0cmVzcG9uZGVyY2FwdHVyZVxuICAgKi9cbiAgb25Nb3ZlU2hvdWxkU2V0UmVzcG9uZGVyQ2FwdHVyZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIFRoaXMgZGVmaW5lcyBob3cgZmFyIGEgdG91Y2ggZXZlbnQgY2FuIHN0YXJ0IGF3YXkgZnJvbSB0aGUgdmlldy5cbiAgICogVHlwaWNhbCBpbnRlcmZhY2UgZ3VpZGVsaW5lcyByZWNvbW1lbmQgdG91Y2ggdGFyZ2V0cyB0aGF0IGFyZSBhdCBsZWFzdFxuICAgKiAzMCAtIDQwIHBvaW50cy9kZW5zaXR5LWluZGVwZW5kZW50IHBpeGVscy5cbiAgICpcbiAgICogPiBUaGUgdG91Y2ggYXJlYSBuZXZlciBleHRlbmRzIHBhc3QgdGhlIHBhcmVudCB2aWV3IGJvdW5kcyBhbmQgdGhlIFotaW5kZXhcbiAgICogPiBvZiBzaWJsaW5nIHZpZXdzIGFsd2F5cyB0YWtlcyBwcmVjZWRlbmNlIGlmIGEgdG91Y2ggaGl0cyB0d28gb3ZlcmxhcHBpbmdcbiAgICogPiB2aWV3cy5cbiAgICpcbiAgICogU2VlIGh0dHBzOi8vcmVhY3RuYXRpdmUuZGV2L2RvY3Mvdmlldy5odG1sI2hpdHNsb3BcbiAgICovXG4gIGhpdFNsb3A6IERlcHJlY2F0ZWRFZGdlSW5zZXRzUHJvcFR5cGUsXG5cbiAgLyoqXG4gICAqIEludm9rZWQgb24gbW91bnQgYW5kIGxheW91dCBjaGFuZ2VzIHdpdGg6XG4gICAqXG4gICAqIGB7bmF0aXZlRXZlbnQ6IHsgbGF5b3V0OiB7eCwgeSwgd2lkdGgsIGhlaWdodH19fWBcbiAgICpcbiAgICogVGhpcyBldmVudCBpcyBmaXJlZCBpbW1lZGlhdGVseSBvbmNlIHRoZSBsYXlvdXQgaGFzIGJlZW4gY2FsY3VsYXRlZCwgYnV0XG4gICAqIHRoZSBuZXcgbGF5b3V0IG1heSBub3QgeWV0IGJlIHJlZmxlY3RlZCBvbiB0aGUgc2NyZWVuIGF0IHRoZSB0aW1lIHRoZVxuICAgKiBldmVudCBpcyByZWNlaXZlZCwgZXNwZWNpYWxseSBpZiBhIGxheW91dCBhbmltYXRpb24gaXMgaW4gcHJvZ3Jlc3MuXG4gICAqXG4gICAqIFNlZSBodHRwczovL3JlYWN0bmF0aXZlLmRldi9kb2NzL3ZpZXcuaHRtbCNvbmxheW91dFxuICAgKi9cbiAgb25MYXlvdXQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDb250cm9scyB3aGV0aGVyIHRoZSBgVmlld2AgY2FuIGJlIHRoZSB0YXJnZXQgb2YgdG91Y2ggZXZlbnRzLlxuICAgKlxuICAgKiBTZWUgaHR0cHM6Ly9yZWFjdG5hdGl2ZS5kZXYvZG9jcy92aWV3Lmh0bWwjcG9pbnRlcmV2ZW50c1xuICAgKi9cbiAgcG9pbnRlckV2ZW50czogKFByb3BUeXBlcy5vbmVPZihbXG4gICAgJ2JveC1ub25lJyxcbiAgICAnbm9uZScsXG4gICAgJ2JveC1vbmx5JyxcbiAgICAnYXV0bycsXG4gIF0pOiBSZWFjdCRQcm9wVHlwZSRQcmltaXRpdmU8J2JveC1ub25lJyB8ICdub25lJyB8ICdib3gtb25seScgfCAnYXV0byc+KSxcblxuICAvKipcbiAgICogU2VlIGh0dHBzOi8vcmVhY3RuYXRpdmUuZGV2L2RvY3Mvc3R5bGUuaHRtbFxuICAgKi9cbiAgc3R5bGU6IHN0eWxlUHJvcFR5cGUsXG5cbiAgLyoqXG4gICAqIFRoaXMgaXMgYSBzcGVjaWFsIHBlcmZvcm1hbmNlIHByb3BlcnR5IGV4cG9zZWQgYnkgYFJDVFZpZXdgIGFuZCBpcyB1c2VmdWxcbiAgICogZm9yIHNjcm9sbGluZyBjb250ZW50IHdoZW4gdGhlcmUgYXJlIG1hbnkgc3Vidmlld3MsIG1vc3Qgb2Ygd2hpY2ggYXJlXG4gICAqIG9mZnNjcmVlbi4gRm9yIHRoaXMgcHJvcGVydHkgdG8gYmUgZWZmZWN0aXZlLCBpdCBtdXN0IGJlIGFwcGxpZWQgdG8gYVxuICAgKiB2aWV3IHRoYXQgY29udGFpbnMgbWFueSBzdWJ2aWV3cyB0aGF0IGV4dGVuZCBvdXRzaWRlIGl0cyBib3VuZC4gVGhlXG4gICAqIHN1YnZpZXdzIG11c3QgYWxzbyBoYXZlIGBvdmVyZmxvdzogaGlkZGVuYCwgYXMgc2hvdWxkIHRoZSBjb250YWluaW5nIHZpZXdcbiAgICogKG9yIG9uZSBvZiBpdHMgc3VwZXJ2aWV3cykuXG4gICAqXG4gICAqIFNlZSBodHRwczovL3JlYWN0bmF0aXZlLmRldi9kb2NzL3ZpZXcuaHRtbCNyZW1vdmVjbGlwcGVkc3Vidmlld3NcbiAgICovXG4gIHJlbW92ZUNsaXBwZWRTdWJ2aWV3czogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhpcyBgVmlld2Agc2hvdWxkIHJlbmRlciBpdHNlbGYgKGFuZCBhbGwgb2YgaXRzIGNoaWxkcmVuKSBpbnRvIGFcbiAgICogc2luZ2xlIGhhcmR3YXJlIHRleHR1cmUgb24gdGhlIEdQVS5cbiAgICpcbiAgICogQHBsYXRmb3JtIGFuZHJvaWRcbiAgICpcbiAgICogU2VlIGh0dHBzOi8vcmVhY3RuYXRpdmUuZGV2L2RvY3Mvdmlldy5odG1sI3JlbmRlcnRvaGFyZHdhcmV0ZXh0dXJlYW5kcm9pZFxuICAgKi9cbiAgcmVuZGVyVG9IYXJkd2FyZVRleHR1cmVBbmRyb2lkOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogV2hldGhlciB0aGlzIGBWaWV3YCBzaG91bGQgYmUgcmVuZGVyZWQgYXMgYSBiaXRtYXAgYmVmb3JlIGNvbXBvc2l0aW5nLlxuICAgKlxuICAgKiBAcGxhdGZvcm0gaW9zXG4gICAqXG4gICAqIFNlZSBodHRwczovL3JlYWN0bmF0aXZlLmRldi9kb2NzL3ZpZXcuaHRtbCNzaG91bGRyYXN0ZXJpemVpb3NcbiAgICovXG4gIHNob3VsZFJhc3Rlcml6ZUlPUzogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFZpZXdzIHRoYXQgYXJlIG9ubHkgdXNlZCB0byBsYXlvdXQgdGhlaXIgY2hpbGRyZW4gb3Igb3RoZXJ3aXNlIGRvbid0IGRyYXdcbiAgICogYW55dGhpbmcgbWF5IGJlIGF1dG9tYXRpY2FsbHkgcmVtb3ZlZCBmcm9tIHRoZSBuYXRpdmUgaGllcmFyY2h5IGFzIGFuXG4gICAqIG9wdGltaXphdGlvbi4gU2V0IHRoaXMgcHJvcGVydHkgdG8gYGZhbHNlYCB0byBkaXNhYmxlIHRoaXMgb3B0aW1pemF0aW9uIGFuZFxuICAgKiBlbnN1cmUgdGhhdCB0aGlzIGBWaWV3YCBleGlzdHMgaW4gdGhlIG5hdGl2ZSB2aWV3IGhpZXJhcmNoeS5cbiAgICpcbiAgICogQHBsYXRmb3JtIGFuZHJvaWRcbiAgICpcbiAgICogU2VlIGh0dHBzOi8vcmVhY3RuYXRpdmUuZGV2L2RvY3Mvdmlldy5odG1sI2NvbGxhcHNhYmxlXG4gICAqL1xuICBjb2xsYXBzYWJsZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdGhpcyBgVmlld2AgbmVlZHMgdG8gcmVuZGVyZWQgb2Zmc2NyZWVuIGFuZCBjb21wb3NpdGVkIHdpdGggYW5cbiAgICogYWxwaGEgaW4gb3JkZXIgdG8gcHJlc2VydmUgMTAwJSBjb3JyZWN0IGNvbG9ycyBhbmQgYmxlbmRpbmcgYmVoYXZpb3IuXG4gICAqXG4gICAqIEBwbGF0Zm9ybSBhbmRyb2lkXG4gICAqXG4gICAqIFNlZSBodHRwczovL3JlYWN0bmF0aXZlLmRldi9kb2NzL3ZpZXcuaHRtbCNuZWVkc29mZnNjcmVlbmFscGhhY29tcG9zaXRpbmdcbiAgICovXG4gIG5lZWRzT2Zmc2NyZWVuQWxwaGFDb21wb3NpdGluZzogUHJvcFR5cGVzLmJvb2wsXG59O1xuIl19