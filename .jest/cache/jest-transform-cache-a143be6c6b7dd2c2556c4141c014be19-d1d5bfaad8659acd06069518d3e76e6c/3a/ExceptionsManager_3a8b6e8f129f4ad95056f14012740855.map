{"version":3,"sources":["ExceptionsManager.js"],"names":["SyntheticError","name","Error","userExceptionDecorator","inUserExceptionDecorator","unstable_setExceptionDecorator","exceptionDecorator","preprocessException","data","exceptionID","reportException","e","isFatal","reportToConsole","NativeExceptionsManager","require","default","parseErrorStack","stack","currentExceptionID","originalMessage","message","componentStack","namePrefix","startsWith","jsEngine","isHandledByLogBox","forceRedbox","__DEV__","id","extraData","rawStack","suppressRedBox","console","error","LogBoxData","addException","isComponentError","preventSymbolication","symbolicateStackTrace","then","prettyStack","updateExceptionMessage","catch","log","inExceptionHandler","handleException","reactConsoleErrorHandler","_errorOriginal","apply","arguments","reportErrorsAsExceptions","stringifySafe","str","Array","prototype","map","call","value","join","slice","installConsoleErrorReporter","bind","undefined","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\n'use strict';\n\nimport type {ExtendedError} from './Devtools/parseErrorStack';\nimport * as LogBoxData from '../LogBox/Data/LogBoxData';\nimport type {ExceptionData} from './NativeExceptionsManager';\n\nclass SyntheticError extends Error {\n  name: string = '';\n}\n\ntype ExceptionDecorator = ExceptionData => ExceptionData;\n\nlet userExceptionDecorator: ?ExceptionDecorator;\nlet inUserExceptionDecorator = false;\n\n/**\n * Allows the app to add information to the exception report before it is sent\n * to native. This API is not final.\n */\n\nfunction unstable_setExceptionDecorator(\n  exceptionDecorator: ?ExceptionDecorator,\n) {\n  userExceptionDecorator = exceptionDecorator;\n}\n\nfunction preprocessException(data: ExceptionData): ExceptionData {\n  if (userExceptionDecorator && !inUserExceptionDecorator) {\n    inUserExceptionDecorator = true;\n    try {\n      return userExceptionDecorator(data);\n    } catch {\n      // Fall through\n    } finally {\n      inUserExceptionDecorator = false;\n    }\n  }\n  return data;\n}\n\n/**\n * Handles the developer-visible aspect of errors and exceptions\n */\nlet exceptionID = 0;\nfunction reportException(\n  e: ExtendedError,\n  isFatal: boolean,\n  reportToConsole: boolean, // only true when coming from handleException; the error has not yet been logged\n) {\n  const NativeExceptionsManager = require('./NativeExceptionsManager').default;\n  if (NativeExceptionsManager) {\n    const parseErrorStack = require('./Devtools/parseErrorStack');\n    const stack = parseErrorStack(e);\n    const currentExceptionID = ++exceptionID;\n    const originalMessage = e.message || '';\n    let message = originalMessage;\n    if (e.componentStack != null) {\n      message += `\\n\\nThis error is located at:${e.componentStack}`;\n    }\n    const namePrefix = e.name == null || e.name === '' ? '' : `${e.name}: `;\n\n    if (!message.startsWith(namePrefix)) {\n      message = namePrefix + message;\n    }\n\n    message =\n      e.jsEngine == null ? message : `${message}, js engine: ${e.jsEngine}`;\n\n    const isHandledByLogBox = e.forceRedbox !== true && __DEV__;\n\n    const data = preprocessException({\n      message,\n      originalMessage: message === originalMessage ? null : originalMessage,\n      name: e.name == null || e.name === '' ? null : e.name,\n      componentStack:\n        typeof e.componentStack === 'string' ? e.componentStack : null,\n      stack,\n      id: currentExceptionID,\n      isFatal,\n      extraData: {\n        jsEngine: e.jsEngine,\n        rawStack: e.stack,\n\n        // Hack to hide native redboxes when in the LogBox experiment.\n        // This is intentionally untyped and stuffed here, because it is temporary.\n        suppressRedBox: isHandledByLogBox,\n      },\n    });\n\n    if (reportToConsole) {\n      // we feed back into console.error, to make sure any methods that are\n      // monkey patched on top of console.error are called when coming from\n      // handleException\n      console.error(data.message);\n    }\n\n    if (isHandledByLogBox) {\n      LogBoxData.addException({\n        ...data,\n        isComponentError: !!e.isComponentError,\n      });\n    }\n\n    NativeExceptionsManager.reportException(data);\n\n    if (__DEV__) {\n      if (e.preventSymbolication === true) {\n        return;\n      }\n      const symbolicateStackTrace = require('./Devtools/symbolicateStackTrace');\n      symbolicateStackTrace(stack)\n        .then(({stack: prettyStack}) => {\n          if (prettyStack) {\n            NativeExceptionsManager.updateExceptionMessage(\n              data.message,\n              prettyStack,\n              currentExceptionID,\n            );\n          } else {\n            throw new Error('The stack is null');\n          }\n        })\n        .catch(error => {\n          console.log('Unable to symbolicate stack trace: ' + error.message);\n        });\n    }\n  } else if (reportToConsole) {\n    // we feed back into console.error, to make sure any methods that are\n    // monkey patched on top of console.error are called when coming from\n    // handleException\n    console.error(e);\n  }\n}\n\ndeclare var console: typeof console & {\n  _errorOriginal: typeof console.error,\n  reportErrorsAsExceptions: boolean,\n  ...\n};\n\n// If we trigger console.error _from_ handleException,\n// we do want to make sure that console.error doesn't trigger error reporting again\nlet inExceptionHandler = false;\n\n/**\n * Logs exceptions to the (native) console and displays them\n */\nfunction handleException(e: mixed, isFatal: boolean) {\n  let error: Error;\n  if (e instanceof Error) {\n    error = e;\n  } else {\n    // Workaround for reporting errors caused by `throw 'some string'`\n    // Unfortunately there is no way to figure out the stacktrace in this\n    // case, so if you ended up here trying to trace an error, look for\n    // `throw '<error message>'` somewhere in your codebase.\n    error = new SyntheticError(e);\n  }\n  try {\n    inExceptionHandler = true;\n    reportException(error, isFatal, /*reportToConsole*/ true);\n  } finally {\n    inExceptionHandler = false;\n  }\n}\n\nfunction reactConsoleErrorHandler() {\n  // bubble up to any original handlers\n  console._errorOriginal.apply(console, arguments);\n  if (!console.reportErrorsAsExceptions) {\n    return;\n  }\n  if (inExceptionHandler) {\n    // The fundamental trick here is that are multiple entry point to logging errors:\n    // (see D19743075 for more background)\n    //\n    // 1. An uncaught exception being caught by the global handler\n    // 2. An error being logged throw console.error\n    //\n    // However, console.error is monkey patched multiple times: by this module, and by the\n    // DevTools setup that sends messages to Metro.\n    // The patching order cannot be relied upon.\n    //\n    // So, some scenarios that are handled by this flag:\n    //\n    // Logging an error:\n    // 1. console.error called from user code\n    // 2. (possibly) arrives _first_ at DevTool handler, send to Metro\n    // 3. Bubbles to here\n    // 4. goes into report Exception.\n    // 5. should not trigger console.error again, to avoid looping / logging twice\n    // 6. should still bubble up to original console\n    //    (which might either be console.log, or the DevTools handler in case it patched _earlier_ and (2) didn't happen)\n    //\n    // Throwing an uncaught exception:\n    // 1. exception thrown\n    // 2. picked up by handleException\n    // 3. should be send to console.error (not console._errorOriginal, as DevTools might have patched _later_ and it needs to send it to Metro)\n    // 4. that _might_ bubble again to the `reactConsoleErrorHandle` defined here\n    //    -> should not handle exception _again_, to avoid looping / showing twice (this code branch)\n    // 5. should still bubble up to original console (which might either be console.log, or the DevTools handler in case that one patched _earlier_)\n    return;\n  }\n\n  if (arguments[0] && arguments[0].stack) {\n    // reportException will console.error this with high enough fidelity.\n    reportException(\n      arguments[0],\n      /* isFatal */ false,\n      /*reportToConsole*/ false,\n    );\n  } else {\n    const stringifySafe = require('../Utilities/stringifySafe').default;\n    const str = Array.prototype.map\n      .call(arguments, value =>\n        typeof value === 'string' ? value : stringifySafe(value),\n      )\n      .join(' ');\n\n    if (str.slice(0, 9) === 'Warning: ') {\n      // React warnings use console.error so that a stack trace is shown, but\n      // we don't (currently) want these to show a redbox\n      // (Note: Logic duplicated in polyfills/console.js.)\n      return;\n    }\n    const error: ExtendedError = new SyntheticError(str);\n    error.name = 'console.error';\n    reportException(error, /* isFatal */ false, /*reportToConsole*/ false);\n  }\n}\n\n/**\n * Shows a redbox with stacktrace for all console.error messages.  Disable by\n * setting `console.reportErrorsAsExceptions = false;` in your app.\n */\nfunction installConsoleErrorReporter() {\n  // Enable reportErrorsAsExceptions\n  if (console._errorOriginal) {\n    return; // already installed\n  }\n  // Flow doesn't like it when you set arbitrary values on a global object\n  console._errorOriginal = console.error.bind(console);\n  console.error = reactConsoleErrorHandler;\n  if (console.reportErrorsAsExceptions === undefined) {\n    // Individual apps can disable this\n    // Flow doesn't like it when you set arbitrary values on a global object\n    console.reportErrorsAsExceptions = true;\n  }\n}\n\nmodule.exports = {\n  handleException,\n  installConsoleErrorReporter,\n  SyntheticError,\n  unstable_setExceptionDecorator,\n};\n"]}