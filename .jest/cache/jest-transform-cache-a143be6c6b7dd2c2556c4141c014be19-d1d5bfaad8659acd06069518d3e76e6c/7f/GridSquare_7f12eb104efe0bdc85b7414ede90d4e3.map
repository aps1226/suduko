{"version":3,"sources":["C:\\Users\\ashee\\Documents\\Javascript\\React\\React Native\\suduko\\components\\GridSquare.tsx"],"names":[],"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","sourcesContent":["import React, {useEffect} from \"react\";\r\nimport { Alert, ImageBackground, StyleSheet, TouchableHighlight, Text, View } from \"react-native\";\r\nimport { useSelector, useDispatch } from \"react-redux\"; \r\nimport { bindActionCreators } from \"redux\";\r\nimport * as actionCreators from '../src/state/index';\r\nimport {isValidSudoku,isCompleted} from '../src/state/boardController'\r\nimport {IProps,Notes} from '../types';\r\nimport {RootState} from '../src/state/reducers/index';\r\n\r\nexport default function GridSquare(props:IProps) {\r\n  //Redux-state.\r\n  const {board,colors,selection, entryMode,notes} = useSelector((state:RootState) => state);\r\n  const dispatch = useDispatch();\r\n  //Redux action creators.\r\n  const { changeColor, setSelection, setBoard, setNotes, setGameState } = bindActionCreators(actionCreators,dispatch);\r\n  //Passed row and column props for respective square.\r\n  const {row,col} = props;\r\n  //Color for respective square based on current value.\r\n  const colorIndex:string = String(board[row][col]);\r\n  const color:string[] = colors[colorIndex] ? colors[colorIndex]: ['transparent','black'];\r\n  \r\n  const handleOnPress = ():void =>{\r\n    //If value of board selection is not null\r\n      //Change the color of the respective value to green for \r\n      //all displayed values on the board.\r\n      //Set selection prop equal to value.\r\n    if(board[row][col]){\r\n      changeColor(String(board[row][col]));\r\n      setSelection(board[row][col]);\r\n    }\r\n    //Else, determine if current selection placed at the respective\r\n    //location creates a valid board.\r\n    else if(selection && entryMode){\r\n      const newBoard:(number|null)[][] = board.map((arr:(number|null)[])=> [...arr]);\r\n      newBoard[row][col] = Number(selection);\r\n      //If board would be valid, modify board state.\r\n      if(isValidSudoku(newBoard.map((arr:(number|null)[])=> [...arr]))){\r\n        setBoard(newBoard);\r\n        //Check if board is completed.\r\n          //If complete, modify gameState property to where 'isComplete' index is true.\r\n        if(isCompleted(newBoard.map((arr:(number|null)[])=> [...arr]))){\r\n          setGameState({'isCompleted':true,'gameExists':false});\r\n        }\r\n      }\r\n    //Else if a number is selected and entryMode is set to 'notes'.\r\n    } else if(selection && !entryMode){\r\n      //Clone notes state. \r\n      const newNotes:Notes = Object.assign({},notes);\r\n      //Create variable for note index based on current row and column position.\r\n      const newNotesIndex:string = `${row}${col}`;\r\n      //If current square has existing notes within the note object:\r\n      if(newNotes[newNotesIndex]){\r\n        //If note object at current square index does not include the current selection,\r\n        //add the selection to the array at the index.\r\n        if(!newNotes[newNotesIndex].includes(selection)) newNotes[newNotesIndex].push(selection)\r\n      //Else, create the index within the note object initialized to current selection.\r\n      } else newNotes[newNotesIndex] = [selection];\r\n      //Set new notes state.\r\n      setNotes(newNotes);\r\n    }\r\n  }\r\n\r\n  //Function renders note for squares with null values on the board.\r\n  const renderNotes = ():JSX.Element =>{\r\n    //Return empty text element if notes or note[index] do not exist.\r\n    if(!notes || !notes[`${row}${col}`]) return (<Text></Text>);\r\n    //Initialize array of notes to be rendered from the notes object\r\n    //with respect to the current square position.\r\n    const notesToRender = notes[`${row}${col}`];\r\n    //Initialize array to hold all rows of notes.\r\n    const notesJSX:JSX.Element[] = [];\r\n    //Initialize variable to be populated with each row of notes.\r\n    let noteRows:JSX.Element;\r\n    //Initialize array to hold the current row of notes.\r\n    let curRow:JSX.Element[] = [];\r\n    //Initialize pointer to allow iteration through notesToRender array.\r\n    let pointer:number = 1;\r\n    //Iterate through notesToRender:\r\n    while(pointer <= 9){\r\n      //Push each number to JSX to display value.\r\n      curRow.push(\r\n        <View\r\n          key = {String(`Square[${row}${col}]_Note_${pointer - 1}`)}\r\n        >\r\n          <Text\r\n            style = {styles.noteText}\r\n          >\r\n            {notesToRender[pointer - 1]}\r\n          </Text>\r\n        </View>\r\n      )\r\n      //Create 3x3 grid of notes within square.\r\n      if(pointer % 3 === 0 && pointer > 0){\r\n        noteRows = (\r\n          <View\r\n            key = {String(`NoteRow_${pointer}`)} \r\n            style = {styles.noteRow}\r\n          >\r\n            {curRow}\r\n          </View>\r\n        )\r\n        curRow = [];\r\n        notesJSX.push(noteRows);\r\n      }\r\n      pointer ++;\r\n    }\r\n\r\n    //Return JSX.\r\n    return(\r\n      <View\r\n        style = {styles.noteContainer}\r\n      >\r\n        {notesJSX}\r\n      </View>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <TouchableHighlight\r\n          onPress = {handleOnPress}\r\n      >\r\n        <View \r\n          style={{\r\n            borderStyle:'solid',\r\n            backgroundColor:color[0],\r\n            width: 38,\r\n            height: 38,\r\n            borderWidth: 5,\r\n            borderLeftColor: 'rgba(255, 255, 255, 0.20)',\r\n            borderTopColor: 'rgba(255, 255, 255, 0.33)',\r\n            borderRightColor: 'rgba(0, 0, 0, 0.15)',\r\n            borderBottomColor: 'rgba(0, 0, 0, 0.5)',\r\n            alignItems:'center'\r\n          }}\r\n        >\r\n          <ImageBackground\r\n            source = {require('../assets/images/square.jpg')}\r\n            style = {styles.backgroundImage}\r\n          >\r\n            {/* Render values based on ternary conditional respective of \r\n                if value is null or not. */}\r\n            {board[row][col] === null? \r\n              renderNotes()\r\n            :\r\n              <Text\r\n                style = {{\r\n                  color:color[1],\r\n                  textAlign:'center',\r\n                  marginTop:'20%',\r\n                }}\r\n              >\r\n                {String(board[row][col])}\r\n              </Text>\r\n            }\r\n          </ImageBackground>\r\n        </View>\r\n      </TouchableHighlight>\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n  },\r\n  noteContainer:{\r\n    flex:1,\r\n    flexDirection:'column',\r\n    alignItems:'center'\r\n  },\r\n  noteRow:{\r\n    flex:1,\r\n    flexDirection:'row',\r\n    alignItems:'flex-start'\r\n  },\r\n  noteText:{\r\n    fontSize:9,\r\n    fontFamily:'JustAnotherHand',\r\n  },\r\n  backgroundImage:{\r\n    width:'100%',\r\n    height:'100%'\r\n  }\r\n});"]}