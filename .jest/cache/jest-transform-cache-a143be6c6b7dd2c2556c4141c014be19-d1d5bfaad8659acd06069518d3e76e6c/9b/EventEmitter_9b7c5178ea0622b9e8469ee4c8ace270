19fa327fc74d2b42f131fa4ba660aba3
"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.EventEmitter = void 0;var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));var _invariant = _interopRequireDefault(require("invariant"));
var _reactNative = require("react-native");
var nativeEmitterSubscriptionKey = '@@nativeEmitterSubscription@@';var
EventEmitter = function () {
  function EventEmitter(nativeModule) {(0, _classCallCheck2.default)(this, EventEmitter);
    this._listenerCount = 0;
    this._nativeModule = nativeModule;
    this._eventEmitter = new _reactNative.NativeEventEmitter(nativeModule);
  }(0, _createClass2.default)(EventEmitter, [{ key: "addListener", value:
    function addListener(eventName, listener) {var _this = this,_subscription;
      if (!this._listenerCount && _reactNative.Platform.OS !== 'ios' && this._nativeModule.startObserving) {
        this._nativeModule.startObserving();
      }
      this._listenerCount++;
      var nativeEmitterSubscription = this._eventEmitter.addListener(eventName, listener);
      var subscription = (_subscription = {}, (0, _defineProperty2.default)(_subscription,
      nativeEmitterSubscriptionKey, nativeEmitterSubscription), (0, _defineProperty2.default)(_subscription, "remove",
      function remove() {
        _this.removeSubscription(subscription);
      }), _subscription);

      return subscription;
    } }, { key: "removeAllListeners", value:
    function removeAllListeners(eventName) {

      var removedListenerCount = this._eventEmitter.listenerCount ?

      this._eventEmitter.listenerCount(eventName) :

      this._eventEmitter.listeners(eventName).length;
      this._eventEmitter.removeAllListeners(eventName);
      this._listenerCount -= removedListenerCount;
      (0, _invariant.default)(this._listenerCount >= 0, "EventEmitter must have a non-negative number of listeners");
      if (!this._listenerCount && _reactNative.Platform.OS !== 'ios' && this._nativeModule.stopObserving) {
        this._nativeModule.stopObserving();
      }
    } }, { key: "removeSubscription", value:
    function removeSubscription(subscription) {
      var nativeEmitterSubscription = subscription[nativeEmitterSubscriptionKey];
      if (!nativeEmitterSubscription) {
        return;
      }
      this._eventEmitter.removeSubscription(nativeEmitterSubscription);
      this._listenerCount--;


      delete subscription[nativeEmitterSubscriptionKey];

      subscription.remove = function () {};
      if (!this._listenerCount && _reactNative.Platform.OS !== 'ios' && this._nativeModule.stopObserving) {
        this._nativeModule.stopObserving();
      }
    } }, { key: "emit", value:
    function emit(eventName) {var _this$_eventEmitter;for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {params[_key - 1] = arguments[_key];}
      (_this$_eventEmitter = this._eventEmitter).emit.apply(_this$_eventEmitter, [eventName].concat(params));
    } }]);return EventEmitter;}();exports.EventEmitter = EventEmitter;