514cfabd8eaf8a649e9d18a4d5489c90
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var _require = require("./AnimatedEvent"),
    AnimatedEvent = _require.AnimatedEvent;

var AnimatedProps = require("./nodes/AnimatedProps");

var React = require('react');

var invariant = require('invariant');

var setAndForwardRef = require("../../Utilities/setAndForwardRef");

function createAnimatedComponent(Component) {
  invariant(typeof Component !== 'function' || Component.prototype && Component.prototype.isReactComponent, '`createAnimatedComponent` does not support stateless functional components; ' + 'use a class component instead.');

  var AnimatedComponent = function (_React$Component) {
    (0, _inherits2.default)(AnimatedComponent, _React$Component);

    var _super = _createSuper(AnimatedComponent);

    function AnimatedComponent() {
      var _this;

      (0, _classCallCheck2.default)(this, AnimatedComponent);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));
      _this._invokeAnimatedPropsCallbackOnMount = false;
      _this._eventDetachers = [];

      _this._animatedPropsCallback = function () {
        var _this$_component$_int, _this$_component$_int2, _this$_component$getN, _this$_component$getN2, _this$_component$getS, _this$_component$getS2;

        if (_this._component == null) {
          _this._invokeAnimatedPropsCallbackOnMount = true;
        } else if (process.env.NODE_ENV === 'test' || typeof _this._component.setNativeProps !== 'function' || ((_this$_component$_int = _this._component['_internalInstanceHandle']) == null ? void 0 : (_this$_component$_int2 = _this$_component$_int.stateNode) == null ? void 0 : _this$_component$_int2.canonical) != null || _this._component.getNativeScrollRef != null && _this._component.getNativeScrollRef() != null && ((_this$_component$getN = _this._component.getNativeScrollRef()['_internalInstanceHandle']) == null ? void 0 : (_this$_component$getN2 = _this$_component$getN.stateNode) == null ? void 0 : _this$_component$getN2.canonical) != null || _this._component.getScrollResponder != null && _this._component.getScrollResponder().getNativeScrollRef != null && _this._component.getScrollResponder().getNativeScrollRef() != null && ((_this$_component$getS = _this._component.getScrollResponder().getNativeScrollRef()['_internalInstanceHandle']) == null ? void 0 : (_this$_component$getS2 = _this$_component$getS.stateNode) == null ? void 0 : _this$_component$getS2.canonical) != null) {
          _this.forceUpdate();
        } else if (!_this._propsAnimated.__isNative) {
          _this._component.setNativeProps(_this._propsAnimated.__getAnimatedValue());
        } else {
          throw new Error('Attempting to run JS driven animation on animated ' + 'node that has been moved to "native" earlier by starting an ' + 'animation with `useNativeDriver: true`');
        }
      };

      _this._setComponentRef = setAndForwardRef({
        getForwardedRef: function getForwardedRef() {
          return _this.props.forwardedRef;
        },
        setLocalRef: function setLocalRef(ref) {
          _this._prevComponent = _this._component;
          _this._component = ref;

          if (ref != null && ref.getNode == null) {
            ref.getNode = function () {
              var _ref$constructor$name;

              console.warn('%s: Calling `getNode()` on the ref of an Animated component ' + 'is no longer necessary. You can now directly use the ref ' + 'instead. This method will be removed in a future release.', (_ref$constructor$name = ref.constructor.name) != null ? _ref$constructor$name : '<<anonymous>>');
              return ref;
            };
          }
        }
      });
      return _this;
    }

    (0, _createClass2.default)(AnimatedComponent, [{
      key: "_attachNativeEvents",
      value: function _attachNativeEvents() {
        var _this$_component,
            _this2 = this;

        var scrollableNode = (_this$_component = this._component) != null && _this$_component.getScrollableNode ? this._component.getScrollableNode() : this._component;

        var _loop = function _loop(key) {
          var prop = _this2.props[key];

          if (prop instanceof AnimatedEvent && prop.__isNative) {
            prop.__attach(scrollableNode, key);

            _this2._eventDetachers.push(function () {
              return prop.__detach(scrollableNode, key);
            });
          }
        };

        for (var key in this.props) {
          _loop(key);
        }
      }
    }, {
      key: "_detachNativeEvents",
      value: function _detachNativeEvents() {
        this._eventDetachers.forEach(function (remove) {
          return remove();
        });

        this._eventDetachers = [];
      }
    }, {
      key: "_attachProps",
      value: function _attachProps(nextProps) {
        var oldPropsAnimated = this._propsAnimated;
        this._propsAnimated = new AnimatedProps(nextProps, this._animatedPropsCallback);

        if (oldPropsAnimated) {
          oldPropsAnimated.__restoreDefaultValues();

          oldPropsAnimated.__detach();
        }
      }
    }, {
      key: "render",
      value: function render() {
        var props = this._propsAnimated.__getValue();

        return React.createElement(Component, (0, _extends2.default)({}, props, {
          ref: this._setComponentRef,
          collapsable: this._propsAnimated.__isNative ? false : props.collapsable
        }));
      }
    }, {
      key: "UNSAFE_componentWillMount",
      value: function UNSAFE_componentWillMount() {
        this._attachProps(this.props);
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        if (this._invokeAnimatedPropsCallbackOnMount) {
          this._invokeAnimatedPropsCallbackOnMount = false;

          this._animatedPropsCallback();
        }

        this._propsAnimated.setNativeView(this._component);

        this._attachNativeEvents();
      }
    }, {
      key: "UNSAFE_componentWillReceiveProps",
      value: function UNSAFE_componentWillReceiveProps(newProps) {
        this._attachProps(newProps);
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        if (this._component !== this._prevComponent) {
          this._propsAnimated.setNativeView(this._component);
        }

        if (this._component !== this._prevComponent || prevProps !== this.props) {
          this._detachNativeEvents();

          this._attachNativeEvents();
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this._propsAnimated && this._propsAnimated.__detach();

        this._detachNativeEvents();
      }
    }]);
    return AnimatedComponent;
  }(React.Component);

  return React.forwardRef(function AnimatedComponentWrapper(props, ref) {
    return React.createElement(AnimatedComponent, (0, _extends2.default)({}, props, ref == null ? null : {
      forwardedRef: ref
    }));
  });
}

module.exports = createAnimatedComponent;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,