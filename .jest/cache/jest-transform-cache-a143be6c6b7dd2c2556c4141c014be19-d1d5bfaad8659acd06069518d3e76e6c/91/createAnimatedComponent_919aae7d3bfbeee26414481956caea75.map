{"version":3,"sources":["createAnimatedComponent.js"],"names":["require","AnimatedEvent","AnimatedProps","React","invariant","setAndForwardRef","createAnimatedComponent","Component","prototype","isReactComponent","AnimatedComponent","_invokeAnimatedPropsCallbackOnMount","_eventDetachers","_animatedPropsCallback","_component","process","env","NODE_ENV","setNativeProps","stateNode","canonical","getNativeScrollRef","getScrollResponder","forceUpdate","_propsAnimated","__isNative","__getAnimatedValue","Error","_setComponentRef","getForwardedRef","props","forwardedRef","setLocalRef","ref","_prevComponent","getNode","console","warn","constructor","name","scrollableNode","getScrollableNode","key","prop","__attach","push","__detach","forEach","remove","nextProps","oldPropsAnimated","__restoreDefaultValues","__getValue","collapsable","_attachProps","setNativeView","_attachNativeEvents","newProps","prevProps","_detachNativeEvents","forwardRef","AnimatedComponentWrapper","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nconst {AnimatedEvent} = require('./AnimatedEvent');\nconst AnimatedProps = require('./nodes/AnimatedProps');\nconst React = require('react');\n\nconst invariant = require('invariant');\nconst setAndForwardRef = require('../../Utilities/setAndForwardRef');\n\nexport type AnimatedComponentType<\n  Props: {+[string]: mixed, ...},\n  Instance,\n> = React.AbstractComponent<$ObjMap<Props, () => any>, Instance>;\n\nfunction createAnimatedComponent<Props: {+[string]: mixed, ...}, Instance>(\n  Component: React.AbstractComponent<Props, Instance>,\n): AnimatedComponentType<Props, Instance> {\n  invariant(\n    typeof Component !== 'function' ||\n      (Component.prototype && Component.prototype.isReactComponent),\n    '`createAnimatedComponent` does not support stateless functional components; ' +\n      'use a class component instead.',\n  );\n\n  class AnimatedComponent extends React.Component<Object> {\n    _component: any; // TODO T53738161: flow type this, and the whole file\n    _invokeAnimatedPropsCallbackOnMount: boolean = false;\n    _prevComponent: any;\n    _propsAnimated: AnimatedProps;\n    _eventDetachers: Array<Function> = [];\n\n    _attachNativeEvents() {\n      // Make sure to get the scrollable node for components that implement\n      // `ScrollResponder.Mixin`.\n      const scrollableNode = this._component?.getScrollableNode\n        ? this._component.getScrollableNode()\n        : this._component;\n\n      for (const key in this.props) {\n        const prop = this.props[key];\n        if (prop instanceof AnimatedEvent && prop.__isNative) {\n          prop.__attach(scrollableNode, key);\n          this._eventDetachers.push(() => prop.__detach(scrollableNode, key));\n        }\n      }\n    }\n\n    _detachNativeEvents() {\n      this._eventDetachers.forEach(remove => remove());\n      this._eventDetachers = [];\n    }\n\n    // The system is best designed when setNativeProps is implemented. It is\n    // able to avoid re-rendering and directly set the attributes that changed.\n    // However, setNativeProps can only be implemented on leaf native\n    // components. If you want to animate a composite component, you need to\n    // re-render it. In this case, we have a fallback that uses forceUpdate.\n    _animatedPropsCallback = () => {\n      if (this._component == null) {\n        // AnimatedProps is created in will-mount because it's used in render.\n        // But this callback may be invoked before mount in async mode,\n        // In which case we should defer the setNativeProps() call.\n        // React may throw away uncommitted work in async mode,\n        // So a deferred call won't always be invoked.\n        this._invokeAnimatedPropsCallbackOnMount = true;\n      } else if (\n        process.env.NODE_ENV === 'test' ||\n        // For animating properties of non-leaf/non-native components\n        typeof this._component.setNativeProps !== 'function' ||\n        // In Fabric, force animations to go through forceUpdate and skip setNativeProps\n        // eslint-disable-next-line dot-notation\n        this._component['_internalInstanceHandle']?.stateNode?.canonical !=\n          null ||\n        // Some components have a setNativeProps function but aren't a host component\n        // such as lists like FlatList and SectionList. These should also use\n        // forceUpdate in Fabric since setNativeProps doesn't exist on the underlying\n        // host component. This crazy hack is essentially special casing those lists and\n        // ScrollView itself to use forceUpdate in Fabric.\n        // If these components end up using forwardRef then these hacks can go away\n        // as this._component would actually be the underlying host component and the above check\n        // would be sufficient.\n        (this._component.getNativeScrollRef != null &&\n          this._component.getNativeScrollRef() != null &&\n          // eslint-disable-next-line dot-notation\n          this._component.getNativeScrollRef()['_internalInstanceHandle']\n            ?.stateNode?.canonical != null) ||\n        (this._component.getScrollResponder != null &&\n          this._component.getScrollResponder().getNativeScrollRef != null &&\n          this._component.getScrollResponder().getNativeScrollRef() != null &&\n          this._component.getScrollResponder().getNativeScrollRef()[\n            // eslint-disable-next-line dot-notation\n            '_internalInstanceHandle'\n          ]?.stateNode?.canonical != null)\n      ) {\n        this.forceUpdate();\n      } else if (!this._propsAnimated.__isNative) {\n        this._component.setNativeProps(\n          this._propsAnimated.__getAnimatedValue(),\n        );\n      } else {\n        throw new Error(\n          'Attempting to run JS driven animation on animated ' +\n            'node that has been moved to \"native\" earlier by starting an ' +\n            'animation with `useNativeDriver: true`',\n        );\n      }\n    };\n\n    _attachProps(nextProps) {\n      const oldPropsAnimated = this._propsAnimated;\n\n      this._propsAnimated = new AnimatedProps(\n        nextProps,\n        this._animatedPropsCallback,\n      );\n\n      // When you call detach, it removes the element from the parent list\n      // of children. If it goes to 0, then the parent also detaches itself\n      // and so on.\n      // An optimization is to attach the new elements and THEN detach the old\n      // ones instead of detaching and THEN attaching.\n      // This way the intermediate state isn't to go to 0 and trigger\n      // this expensive recursive detaching to then re-attach everything on\n      // the very next operation.\n      if (oldPropsAnimated) {\n        oldPropsAnimated.__restoreDefaultValues();\n        oldPropsAnimated.__detach();\n      }\n    }\n\n    _setComponentRef = setAndForwardRef({\n      getForwardedRef: () => this.props.forwardedRef,\n      setLocalRef: ref => {\n        this._prevComponent = this._component;\n        this._component = ref;\n\n        // TODO: Delete this in a future release.\n        if (ref != null && ref.getNode == null) {\n          ref.getNode = () => {\n            console.warn(\n              '%s: Calling `getNode()` on the ref of an Animated component ' +\n                'is no longer necessary. You can now directly use the ref ' +\n                'instead. This method will be removed in a future release.',\n              ref.constructor.name ?? '<<anonymous>>',\n            );\n            return ref;\n          };\n        }\n      },\n    });\n\n    render() {\n      const props = this._propsAnimated.__getValue();\n      return (\n        <Component\n          {...props}\n          ref={this._setComponentRef}\n          // The native driver updates views directly through the UI thread so we\n          // have to make sure the view doesn't get optimized away because it cannot\n          // go through the NativeViewHierarchyManager since it operates on the shadow\n          // thread.\n          collapsable={\n            this._propsAnimated.__isNative ? false : props.collapsable\n          }\n        />\n      );\n    }\n\n    UNSAFE_componentWillMount() {\n      this._attachProps(this.props);\n    }\n\n    componentDidMount() {\n      if (this._invokeAnimatedPropsCallbackOnMount) {\n        this._invokeAnimatedPropsCallbackOnMount = false;\n        this._animatedPropsCallback();\n      }\n\n      this._propsAnimated.setNativeView(this._component);\n      this._attachNativeEvents();\n    }\n\n    UNSAFE_componentWillReceiveProps(newProps) {\n      this._attachProps(newProps);\n    }\n\n    componentDidUpdate(prevProps) {\n      if (this._component !== this._prevComponent) {\n        this._propsAnimated.setNativeView(this._component);\n      }\n      if (this._component !== this._prevComponent || prevProps !== this.props) {\n        this._detachNativeEvents();\n        this._attachNativeEvents();\n      }\n    }\n\n    componentWillUnmount() {\n      this._propsAnimated && this._propsAnimated.__detach();\n      this._detachNativeEvents();\n    }\n  }\n\n  return React.forwardRef(function AnimatedComponentWrapper(props, ref) {\n    return (\n      <AnimatedComponent\n        {...props}\n        {...(ref == null ? null : {forwardedRef: ref})}\n      />\n    );\n  });\n}\n\nmodule.exports = createAnimatedComponent;\n"]}