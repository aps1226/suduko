70715026d01ec85a548fd20cf9761f15
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault2(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault2(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault2(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault2(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault2(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault2(require("@babel/runtime/helpers/getPrototypeOf"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.PortalContext = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _PortalManager = _interopRequireDefault(require("./PortalManager"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var PortalContext = React.createContext(null);
exports.PortalContext = PortalContext;

var PortalHost = function (_React$Component) {
  (0, _inherits2.default)(PortalHost, _React$Component);

  var _super = _createSuper(PortalHost);

  function PortalHost() {
    var _this;

    (0, _classCallCheck2.default)(this, PortalHost);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty((0, _assertThisInitialized2.default)(_this), "setManager", function (manager) {
      _this.manager = manager;
    });

    _defineProperty((0, _assertThisInitialized2.default)(_this), "mount", function (children) {
      var key = _this.nextKey++;

      if (_this.manager) {
        _this.manager.mount(key, children);
      } else {
        _this.queue.push({
          type: 'mount',
          key: key,
          children: children
        });
      }

      return key;
    });

    _defineProperty((0, _assertThisInitialized2.default)(_this), "update", function (key, children) {
      if (_this.manager) {
        _this.manager.update(key, children);
      } else {
        var op = {
          type: 'mount',
          key: key,
          children: children
        };

        var index = _this.queue.findIndex(function (o) {
          return o.type === 'mount' || o.type === 'update' && o.key === key;
        });

        if (index > -1) {
          _this.queue[index] = op;
        } else {
          _this.queue.push(op);
        }
      }
    });

    _defineProperty((0, _assertThisInitialized2.default)(_this), "unmount", function (key) {
      if (_this.manager) {
        _this.manager.unmount(key);
      } else {
        _this.queue.push({
          type: 'unmount',
          key: key
        });
      }
    });

    _defineProperty((0, _assertThisInitialized2.default)(_this), "nextKey", 0);

    _defineProperty((0, _assertThisInitialized2.default)(_this), "queue", []);

    _defineProperty((0, _assertThisInitialized2.default)(_this), "manager", void 0);

    return _this;
  }

  (0, _createClass2.default)(PortalHost, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var manager = this.manager;
      var queue = this.queue;

      while (queue.length && manager) {
        var action = queue.pop();

        if (action) {
          switch (action.type) {
            case 'mount':
              manager.mount(action.key, action.children);
              break;

            case 'update':
              manager.update(action.key, action.children);
              break;

            case 'unmount':
              manager.unmount(action.key);
              break;
          }
        }
      }
    }
  }, {
    key: "render",
    value: function render() {
      return React.createElement(PortalContext.Provider, {
        value: {
          mount: this.mount,
          update: this.update,
          unmount: this.unmount
        }
      }, React.createElement(_reactNative.View, {
        style: styles.container,
        collapsable: false,
        pointerEvents: "box-none"
      }, this.props.children), React.createElement(_PortalManager.default, {
        ref: this.setManager
      }));
    }
  }]);
  return PortalHost;
}(React.Component);

exports.default = PortalHost;

_defineProperty(PortalHost, "displayName", 'Portal.Host');

var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,