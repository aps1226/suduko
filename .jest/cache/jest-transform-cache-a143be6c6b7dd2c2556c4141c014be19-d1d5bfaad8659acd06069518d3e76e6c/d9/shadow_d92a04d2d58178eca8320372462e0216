19eb1699c7e4ed30714de3e3927db21a
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = shadow;

var Colors = _interopRequireWildcard(require("./colors"));

var _reactNative = require("react-native");

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

var SHADOW_COLOR = Colors.black;
var SHADOW_OPACITY = 0.24;

function shadow() {
  var elevation = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

  if (elevation instanceof _reactNative.Animated.Value) {
    var inputRange = [0, 1, 2, 3, 8, 24];
    return {
      shadowColor: SHADOW_COLOR,
      shadowOffset: {
        width: new _reactNative.Animated.Value(0),
        height: elevation.interpolate({
          inputRange: inputRange,
          outputRange: [0, 0.5, 0.75, 2, 7, 23]
        })
      },
      shadowOpacity: elevation.interpolate({
        inputRange: [0, 1],
        outputRange: [0, SHADOW_OPACITY],
        extrapolate: 'clamp'
      }),
      shadowRadius: elevation.interpolate({
        inputRange: inputRange,
        outputRange: [0, 0.75, 1.5, 3, 8, 24]
      })
    };
  } else {
    if (elevation === 0) {
      return {};
    }

    var height, radius;

    switch (elevation) {
      case 1:
        height = 0.5;
        radius = 0.75;
        break;

      case 2:
        height = 0.75;
        radius = 1.5;
        break;

      default:
        height = elevation - 1;
        radius = elevation;
    }

    return {
      shadowColor: SHADOW_COLOR,
      shadowOffset: {
        width: 0,
        height: height
      },
      shadowOpacity: SHADOW_OPACITY,
      shadowRadius: radius
    };
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNoYWRvdy50c3giXSwibmFtZXMiOlsiU0hBRE9XX0NPTE9SIiwiQ29sb3JzIiwiU0hBRE9XX09QQUNJVFkiLCJlbGV2YXRpb24iLCJBbmltYXRlZCIsImlucHV0UmFuZ2UiLCJzaGFkb3dDb2xvciIsInNoYWRvd09mZnNldCIsIndpZHRoIiwiaGVpZ2h0Iiwib3V0cHV0UmFuZ2UiLCJzaGFkb3dPcGFjaXR5IiwiZXh0cmFwb2xhdGUiLCJzaGFkb3dSYWRpdXMiLCJyYWRpdXMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxJQUFBLE1BQUEsR0FBQSx1QkFBQSxDQUFBLE9BQUEsWUFBQSxDQUFBOztBQUNBLElBQUEsWUFBQSxHQUFBLE9BQUEsQ0FBQSxjQUFBLENBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVBLElBQU1BLFlBQVksR0FBR0MsTUFBTSxDQUEzQixLQUFBO0FBQ0EsSUFBTUMsY0FBYyxHQUFwQixJQUFBOztBQUVlLFNBQUEsTUFBQSxHQUF3RDtBQUFBLE1BQXhDQyxTQUF3Qyx1RUFBeEQsQ0FBd0Q7O0FBQ3JFLE1BQUlBLFNBQVMsWUFBWUMsWUFBQUEsQ0FBQUEsUUFBQUEsQ0FBekIsS0FBQSxFQUF5QztBQUN2QyxRQUFNQyxVQUFVLEdBQUcsQ0FBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFuQixFQUFtQixDQUFuQjtBQUVBLFdBQU87QUFDTEMsTUFBQUEsV0FBVyxFQUROLFlBQUE7QUFFTEMsTUFBQUEsWUFBWSxFQUFFO0FBQ1pDLFFBQUFBLEtBQUssRUFBRSxJQUFJSixZQUFBQSxDQUFBQSxRQUFBQSxDQUFKLEtBQUEsQ0FESyxDQUNMLENBREs7QUFFWkssUUFBQUEsTUFBTSxFQUFFLFNBQVMsQ0FBVCxXQUFBLENBQXNCO0FBQzVCSixVQUFBQSxVQUQ0QixFQUM1QkEsVUFENEI7QUFFNUJLLFVBQUFBLFdBQVcsRUFBRSxDQUFBLENBQUEsRUFBQSxHQUFBLEVBQUEsSUFBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsRUFBQTtBQUZlLFNBQXRCO0FBRkksT0FGVDtBQVNMQyxNQUFBQSxhQUFhLEVBQUUsU0FBUyxDQUFULFdBQUEsQ0FBc0I7QUFDbkNOLFFBQUFBLFVBQVUsRUFBRSxDQUFBLENBQUEsRUFEdUIsQ0FDdkIsQ0FEdUI7QUFFbkNLLFFBQUFBLFdBQVcsRUFBRSxDQUFBLENBQUEsRUFGc0IsY0FFdEIsQ0FGc0I7QUFHbkNFLFFBQUFBLFdBQVcsRUFBRTtBQUhzQixPQUF0QixDQVRWO0FBY0xDLE1BQUFBLFlBQVksRUFBRSxTQUFTLENBQVQsV0FBQSxDQUFzQjtBQUNsQ1IsUUFBQUEsVUFEa0MsRUFDbENBLFVBRGtDO0FBRWxDSyxRQUFBQSxXQUFXLEVBQUUsQ0FBQSxDQUFBLEVBQUEsSUFBQSxFQUFBLEdBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLEVBQUE7QUFGcUIsT0FBdEI7QUFkVCxLQUFQO0FBSEYsR0FBQSxNQXNCTztBQUNMLFFBQUlQLFNBQVMsS0FBYixDQUFBLEVBQXFCO0FBQ25CLGFBQUEsRUFBQTtBQUNEOztBQUVELFFBQUEsTUFBQSxFQUFBLE1BQUE7O0FBQ0EsWUFBQSxTQUFBO0FBQ0UsV0FBQSxDQUFBO0FBQ0VNLFFBQUFBLE1BQU0sR0FBTkEsR0FBQUE7QUFDQUssUUFBQUEsTUFBTSxHQUFOQSxJQUFBQTtBQUNBOztBQUNGLFdBQUEsQ0FBQTtBQUNFTCxRQUFBQSxNQUFNLEdBQU5BLElBQUFBO0FBQ0FLLFFBQUFBLE1BQU0sR0FBTkEsR0FBQUE7QUFDQTs7QUFDRjtBQUNFTCxRQUFBQSxNQUFNLEdBQUdOLFNBQVMsR0FBbEJNLENBQUFBO0FBQ0FLLFFBQUFBLE1BQU0sR0FBTkEsU0FBQUE7QUFYSjs7QUFjQSxXQUFPO0FBQ0xSLE1BQUFBLFdBQVcsRUFETixZQUFBO0FBRUxDLE1BQUFBLFlBQVksRUFBRTtBQUNaQyxRQUFBQSxLQUFLLEVBRE8sQ0FBQTtBQUVaQyxRQUFBQSxNQUFBQSxFQUFBQTtBQUZZLE9BRlQ7QUFNTEUsTUFBQUEsYUFBYSxFQU5SLGNBQUE7QUFPTEUsTUFBQUEsWUFBWSxFQUFFQztBQVBULEtBQVA7QUFTRDtBQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgQ29sb3JzIGZyb20gJy4vY29sb3JzJztcbmltcG9ydCB7IEFuaW1hdGVkIH0gZnJvbSAncmVhY3QtbmF0aXZlJztcblxuY29uc3QgU0hBRE9XX0NPTE9SID0gQ29sb3JzLmJsYWNrO1xuY29uc3QgU0hBRE9XX09QQUNJVFkgPSAwLjI0O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzaGFkb3coZWxldmF0aW9uOiBudW1iZXIgfCBBbmltYXRlZC5WYWx1ZSA9IDApIHtcbiAgaWYgKGVsZXZhdGlvbiBpbnN0YW5jZW9mIEFuaW1hdGVkLlZhbHVlKSB7XG4gICAgY29uc3QgaW5wdXRSYW5nZSA9IFswLCAxLCAyLCAzLCA4LCAyNF07XG5cbiAgICByZXR1cm4ge1xuICAgICAgc2hhZG93Q29sb3I6IFNIQURPV19DT0xPUixcbiAgICAgIHNoYWRvd09mZnNldDoge1xuICAgICAgICB3aWR0aDogbmV3IEFuaW1hdGVkLlZhbHVlKDApLFxuICAgICAgICBoZWlnaHQ6IGVsZXZhdGlvbi5pbnRlcnBvbGF0ZSh7XG4gICAgICAgICAgaW5wdXRSYW5nZSxcbiAgICAgICAgICBvdXRwdXRSYW5nZTogWzAsIDAuNSwgMC43NSwgMiwgNywgMjNdLFxuICAgICAgICB9KSxcbiAgICAgIH0sXG4gICAgICBzaGFkb3dPcGFjaXR5OiBlbGV2YXRpb24uaW50ZXJwb2xhdGUoe1xuICAgICAgICBpbnB1dFJhbmdlOiBbMCwgMV0sXG4gICAgICAgIG91dHB1dFJhbmdlOiBbMCwgU0hBRE9XX09QQUNJVFldLFxuICAgICAgICBleHRyYXBvbGF0ZTogJ2NsYW1wJyxcbiAgICAgIH0pLFxuICAgICAgc2hhZG93UmFkaXVzOiBlbGV2YXRpb24uaW50ZXJwb2xhdGUoe1xuICAgICAgICBpbnB1dFJhbmdlLFxuICAgICAgICBvdXRwdXRSYW5nZTogWzAsIDAuNzUsIDEuNSwgMywgOCwgMjRdLFxuICAgICAgfSksXG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoZWxldmF0aW9uID09PSAwKSB7XG4gICAgICByZXR1cm4ge307XG4gICAgfVxuXG4gICAgbGV0IGhlaWdodCwgcmFkaXVzO1xuICAgIHN3aXRjaCAoZWxldmF0aW9uKSB7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIGhlaWdodCA9IDAuNTtcbiAgICAgICAgcmFkaXVzID0gMC43NTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIGhlaWdodCA9IDAuNzU7XG4gICAgICAgIHJhZGl1cyA9IDEuNTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBoZWlnaHQgPSBlbGV2YXRpb24gLSAxO1xuICAgICAgICByYWRpdXMgPSBlbGV2YXRpb247XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHNoYWRvd0NvbG9yOiBTSEFET1dfQ09MT1IsXG4gICAgICBzaGFkb3dPZmZzZXQ6IHtcbiAgICAgICAgd2lkdGg6IDAsXG4gICAgICAgIGhlaWdodCxcbiAgICAgIH0sXG4gICAgICBzaGFkb3dPcGFjaXR5OiBTSEFET1dfT1BBQ0lUWSxcbiAgICAgIHNoYWRvd1JhZGl1czogcmFkaXVzLFxuICAgIH07XG4gIH1cbn1cbiJdfQ==