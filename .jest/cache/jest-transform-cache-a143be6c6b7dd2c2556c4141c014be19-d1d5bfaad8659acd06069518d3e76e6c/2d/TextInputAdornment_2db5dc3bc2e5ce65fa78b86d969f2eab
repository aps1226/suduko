a1688722d4c856d7d0002e8cf2e2c2a8
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault2(require("@babel/runtime/helpers/defineProperty"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getAdornmentConfig = getAdornmentConfig;
exports.getAdornmentStyleAdjustmentForNativeInput = getAdornmentStyleAdjustmentForNativeInput;
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _TextInputIcon = _interopRequireWildcard(require("./TextInputIcon"));

var _TextInputAffix = _interopRequireWildcard(require("./TextInputAffix"));

var _constants = require("../constants");

var _enums = require("./enums");

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function getAdornmentConfig(_ref) {
  var left = _ref.left,
      right = _ref.right;
  var adornmentConfig = [];

  if (left || right) {
    [{
      side: _enums.AdornmentSide.Left,
      adornment: left
    }, {
      side: _enums.AdornmentSide.Right,
      adornment: right
    }].forEach(function (_ref2) {
      var side = _ref2.side,
          adornment = _ref2.adornment;

      if (adornment && _react.default.isValidElement(adornment)) {
        var type;

        if (adornment.type === _TextInputAffix.default) {
          type = _enums.AdornmentType.Affix;
        } else if (adornment.type === _TextInputIcon.default) {
          type = _enums.AdornmentType.Icon;
        }

        adornmentConfig.push({
          side: side,
          type: type
        });
      }
    });
  }

  return adornmentConfig;
}

function getAdornmentStyleAdjustmentForNativeInput(_ref3) {
  var adornmentConfig = _ref3.adornmentConfig,
      leftAffixWidth = _ref3.leftAffixWidth,
      rightAffixWidth = _ref3.rightAffixWidth,
      paddingHorizontal = _ref3.paddingHorizontal,
      _ref3$inputOffset = _ref3.inputOffset,
      inputOffset = _ref3$inputOffset === void 0 ? 0 : _ref3$inputOffset,
      mode = _ref3.mode;

  if (adornmentConfig.length) {
    var adornmentStyleAdjustmentForNativeInput = adornmentConfig.map(function (_ref4) {
      var _ref5;

      var type = _ref4.type,
          side = _ref4.side;
      var isLeftSide = side === _enums.AdornmentSide.Left;
      var inputModeAdornemntOffset = mode === _enums.InputMode.Outlined ? _constants.ADORNMENT_OFFSET + _constants.OUTLINED_INPUT_OFFSET : _constants.ADORNMENT_OFFSET;
      var paddingKey = "padding".concat(captalize(side));
      var affixWidth = isLeftSide ? leftAffixWidth : rightAffixWidth;
      var padding = typeof paddingHorizontal === 'number' ? paddingHorizontal : inputModeAdornemntOffset;
      var offset = affixWidth + padding;
      var isAffix = type === _enums.AdornmentType.Affix;
      var marginKey = "margin".concat(captalize(side));
      return _ref5 = {}, (0, _defineProperty2.default)(_ref5, marginKey, isAffix ? 0 : offset), (0, _defineProperty2.default)(_ref5, paddingKey, isAffix ? offset : inputOffset), _ref5;
    });
    var allStyleAdjustmentsMerged = adornmentStyleAdjustmentForNativeInput.reduce(function (mergedStyles, currentStyle) {
      return _objectSpread(_objectSpread({}, mergedStyles), currentStyle);
    }, {});
    return allStyleAdjustmentsMerged;
  } else {
    return [{}];
  }
}

var captalize = function captalize(text) {
  return text.charAt(0).toUpperCase() + text.slice(1);
};

var TextInputAdornment = function TextInputAdornment(_ref6) {
  var adornmentConfig = _ref6.adornmentConfig,
      left = _ref6.left,
      right = _ref6.right,
      onAffixChange = _ref6.onAffixChange,
      textStyle = _ref6.textStyle,
      visible = _ref6.visible,
      topPosition = _ref6.topPosition,
      isTextInputFocused = _ref6.isTextInputFocused,
      forceFocus = _ref6.forceFocus,
      paddingHorizontal = _ref6.paddingHorizontal;

  if (adornmentConfig.length) {
    return _react.default.createElement(_react.default.Fragment, null, adornmentConfig.map(function (_ref7) {
      var type = _ref7.type,
          side = _ref7.side;
      var inputAdornmentComponent;

      if (side === _enums.AdornmentSide.Left) {
        inputAdornmentComponent = left;
      } else if (side === _enums.AdornmentSide.Right) {
        inputAdornmentComponent = right;
      }

      var commonProps = {
        key: side,
        side: side,
        testID: "".concat(side, "-").concat(type, "-adornment"),
        isTextInputFocused: isTextInputFocused,
        paddingHorizontal: paddingHorizontal
      };

      if (type === _enums.AdornmentType.Icon) {
        return _react.default.createElement(_TextInputIcon.IconAdornment, _extends({}, commonProps, {
          icon: inputAdornmentComponent,
          topPosition: topPosition[_enums.AdornmentType.Icon],
          forceFocus: forceFocus
        }));
      } else if (type === _enums.AdornmentType.Affix) {
        return _react.default.createElement(_TextInputAffix.AffixAdornment, _extends({}, commonProps, {
          topPosition: topPosition[_enums.AdornmentType.Affix][side],
          affix: inputAdornmentComponent,
          textStyle: textStyle,
          onLayout: onAffixChange[side],
          visible: visible
        }));
      } else {
        return null;
      }
    }));
  } else {
    return null;
  }
};

var _default = TextInputAdornment;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlRleHRJbnB1dEFkb3JubWVudC50c3giXSwibmFtZXMiOlsicmlnaHQiLCJhZG9ybm1lbnRDb25maWciLCJsZWZ0Iiwic2lkZSIsIkFkb3JubWVudFNpZGUiLCJhZG9ybm1lbnQiLCJSZWFjdCIsIlRleHRJbnB1dEFmZml4IiwidHlwZSIsIkFkb3JubWVudFR5cGUiLCJUZXh0SW5wdXRJY29uIiwiaW5wdXRPZmZzZXQiLCJtb2RlIiwiYWRvcm5tZW50U3R5bGVBZGp1c3RtZW50Rm9yTmF0aXZlSW5wdXQiLCJpc0xlZnRTaWRlIiwiaW5wdXRNb2RlQWRvcm5lbW50T2Zmc2V0IiwiSW5wdXRNb2RlIiwiQURPUk5NRU5UX09GRlNFVCIsIk9VVExJTkVEX0lOUFVUX09GRlNFVCIsInBhZGRpbmdLZXkiLCJjYXB0YWxpemUiLCJhZmZpeFdpZHRoIiwicGFkZGluZyIsIm9mZnNldCIsImlzQWZmaXgiLCJtYXJnaW5LZXkiLCJhbGxTdHlsZUFkanVzdG1lbnRzTWVyZ2VkIiwiY3VycmVudFN0eWxlIiwidGV4dCIsIlRleHRJbnB1dEFkb3JubWVudCIsInBhZGRpbmdIb3Jpem9udGFsIiwiaW5wdXRBZG9ybm1lbnRDb21wb25lbnQiLCJjb21tb25Qcm9wcyIsImtleSIsInRlc3RJRCIsImlzVGV4dElucHV0Rm9jdXNlZCIsInRvcFBvc2l0aW9uIiwiZm9yY2VGb2N1cyIsIm9uQWZmaXhDaGFuZ2UiLCJ2aXNpYmxlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLElBQUEsTUFBQSxHQUFBLHNCQUFBLENBQUEsT0FBQSxDQUFBLE9BQUEsQ0FBQSxDQUFBOztBQUNBLElBQUEsY0FBQSxHQUFBLHVCQUFBLENBQUEsT0FBQSxtQkFBQSxDQUFBOztBQUNBLElBQUEsZUFBQSxHQUFBLHVCQUFBLENBQUEsT0FBQSxvQkFBQSxDQUFBOztBQUNBLElBQUEsVUFBQSxHQUFBLE9BQUEsZ0JBQUE7O0FBV0EsSUFBQSxNQUFBLEdBQUEsT0FBQSxXQUFBOzs7Ozs7Ozs7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LENBQUEsQ0FERjtBQURGLE9BQUEsTUFTTyxJQUFJN0IsSUFBSSxLQUFLQyxNQUFBQSxDQUFBQSxhQUFBQSxDQUFiLEtBQUEsRUFBa0M7QUFDdkMsZUFDRSxNQUFBLENBQUEsT0FBQSxDQUFBLGFBQUEsQ0FBQyxlQUFBLENBQUQsY0FBQSxFQUFBLFFBQUEsQ0FBQSxFQUFBLEVBQUEsV0FBQSxFQUFBO0FBRUUsVUFBQSxXQUFXLEVBQUUyQixXQUFXLENBQUMzQixNQUFBQSxDQUFBQSxhQUFBQSxDQUFaMkIsS0FBVyxDQUFYQSxDQUZmLElBRWVBLENBRmY7QUFHRSxVQUFBLEtBQUssRUFIUCx1QkFBQTtBQUlFLFVBQUEsU0FBUyxFQUpYLFNBQUE7QUFLRSxVQUFBLFFBQVEsRUFBRUUsYUFBYSxDQUx6QixJQUt5QixDQUx6QjtBQU1FLFVBQUEsT0FBTyxFQUFFQztBQU5YLFNBQUEsQ0FBQSxDQURGO0FBREssT0FBQSxNQVdBO0FBQ0wsZUFBQSxJQUFBO0FBQ0Q7QUF2Q1AsS0FFSyxDQURILENBREY7QUFERixHQUFBLE1BNENPO0FBQ0wsV0FBQSxJQUFBO0FBQ0Q7QUExREgsQ0FBQTs7ZUE2RGVWLGtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBUZXh0SW5wdXRJY29uLCB7IEljb25BZG9ybm1lbnQgfSBmcm9tICcuL1RleHRJbnB1dEljb24nO1xuaW1wb3J0IFRleHRJbnB1dEFmZml4LCB7IEFmZml4QWRvcm5tZW50IH0gZnJvbSAnLi9UZXh0SW5wdXRBZmZpeCc7XG5pbXBvcnQgeyBBRE9STk1FTlRfT0ZGU0VULCBPVVRMSU5FRF9JTlBVVF9PRkZTRVQgfSBmcm9tICcuLi9jb25zdGFudHMnO1xuaW1wb3J0IHR5cGUge1xuICBMYXlvdXRDaGFuZ2VFdmVudCxcbiAgVGV4dFN0eWxlLFxuICBTdHlsZVByb3AsXG4gIEFuaW1hdGVkLFxufSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuaW1wb3J0IHR5cGUge1xuICBBZG9ybm1lbnRDb25maWcsXG4gIEFkb3JubWVudFN0eWxlQWRqdXN0bWVudEZvck5hdGl2ZUlucHV0LFxufSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB7IEFkb3JubWVudFNpZGUsIEFkb3JubWVudFR5cGUsIElucHV0TW9kZSB9IGZyb20gJy4vZW51bXMnO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0QWRvcm5tZW50Q29uZmlnKHtcbiAgbGVmdCxcbiAgcmlnaHQsXG59OiB7XG4gIGxlZnQ/OiBSZWFjdC5SZWFjdE5vZGU7XG4gIHJpZ2h0PzogUmVhY3QuUmVhY3ROb2RlO1xufSk6IEFycmF5PEFkb3JubWVudENvbmZpZz4ge1xuICBsZXQgYWRvcm5tZW50Q29uZmlnOiBhbnlbXSA9IFtdO1xuICBpZiAobGVmdCB8fCByaWdodCkge1xuICAgIFtcbiAgICAgIHsgc2lkZTogQWRvcm5tZW50U2lkZS5MZWZ0LCBhZG9ybm1lbnQ6IGxlZnQgfSxcbiAgICAgIHsgc2lkZTogQWRvcm5tZW50U2lkZS5SaWdodCwgYWRvcm5tZW50OiByaWdodCB9LFxuICAgIF0uZm9yRWFjaCgoeyBzaWRlLCBhZG9ybm1lbnQgfSkgPT4ge1xuICAgICAgaWYgKGFkb3JubWVudCAmJiBSZWFjdC5pc1ZhbGlkRWxlbWVudChhZG9ybm1lbnQpKSB7XG4gICAgICAgIGxldCB0eXBlO1xuICAgICAgICBpZiAoYWRvcm5tZW50LnR5cGUgPT09IFRleHRJbnB1dEFmZml4KSB7XG4gICAgICAgICAgdHlwZSA9IEFkb3JubWVudFR5cGUuQWZmaXg7XG4gICAgICAgIH0gZWxzZSBpZiAoYWRvcm5tZW50LnR5cGUgPT09IFRleHRJbnB1dEljb24pIHtcbiAgICAgICAgICB0eXBlID0gQWRvcm5tZW50VHlwZS5JY29uO1xuICAgICAgICB9XG4gICAgICAgIGFkb3JubWVudENvbmZpZy5wdXNoKHtcbiAgICAgICAgICBzaWRlLFxuICAgICAgICAgIHR5cGUsXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGFkb3JubWVudENvbmZpZztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEFkb3JubWVudFN0eWxlQWRqdXN0bWVudEZvck5hdGl2ZUlucHV0KHtcbiAgYWRvcm5tZW50Q29uZmlnLFxuICBsZWZ0QWZmaXhXaWR0aCxcbiAgcmlnaHRBZmZpeFdpZHRoLFxuICBwYWRkaW5nSG9yaXpvbnRhbCxcbiAgaW5wdXRPZmZzZXQgPSAwLFxuICBtb2RlLFxufToge1xuICBpbnB1dE9mZnNldD86IG51bWJlcjtcbiAgYWRvcm5tZW50Q29uZmlnOiBBZG9ybm1lbnRDb25maWdbXTtcbiAgbGVmdEFmZml4V2lkdGg6IG51bWJlcjtcbiAgcmlnaHRBZmZpeFdpZHRoOiBudW1iZXI7XG4gIG1vZGU/OiAnb3V0bGluZWQnIHwgJ2ZsYXQnO1xuICBwYWRkaW5nSG9yaXpvbnRhbD86IG51bWJlciB8IHN0cmluZztcbn0pOiBBZG9ybm1lbnRTdHlsZUFkanVzdG1lbnRGb3JOYXRpdmVJbnB1dCB8IHt9IHtcbiAgaWYgKGFkb3JubWVudENvbmZpZy5sZW5ndGgpIHtcbiAgICBjb25zdCBhZG9ybm1lbnRTdHlsZUFkanVzdG1lbnRGb3JOYXRpdmVJbnB1dCA9IGFkb3JubWVudENvbmZpZy5tYXAoXG4gICAgICAoeyB0eXBlLCBzaWRlIH06IEFkb3JubWVudENvbmZpZykgPT4ge1xuICAgICAgICBjb25zdCBpc0xlZnRTaWRlID0gc2lkZSA9PT0gQWRvcm5tZW50U2lkZS5MZWZ0O1xuICAgICAgICBjb25zdCBpbnB1dE1vZGVBZG9ybmVtbnRPZmZzZXQgPVxuICAgICAgICAgIG1vZGUgPT09IElucHV0TW9kZS5PdXRsaW5lZFxuICAgICAgICAgICAgPyBBRE9STk1FTlRfT0ZGU0VUICsgT1VUTElORURfSU5QVVRfT0ZGU0VUXG4gICAgICAgICAgICA6IEFET1JOTUVOVF9PRkZTRVQ7XG4gICAgICAgIGNvbnN0IHBhZGRpbmdLZXkgPSBgcGFkZGluZyR7Y2FwdGFsaXplKHNpZGUpfWA7XG4gICAgICAgIGNvbnN0IGFmZml4V2lkdGggPSBpc0xlZnRTaWRlID8gbGVmdEFmZml4V2lkdGggOiByaWdodEFmZml4V2lkdGg7XG4gICAgICAgIGNvbnN0IHBhZGRpbmcgPVxuICAgICAgICAgIHR5cGVvZiBwYWRkaW5nSG9yaXpvbnRhbCA9PT0gJ251bWJlcidcbiAgICAgICAgICAgID8gcGFkZGluZ0hvcml6b250YWxcbiAgICAgICAgICAgIDogaW5wdXRNb2RlQWRvcm5lbW50T2Zmc2V0O1xuICAgICAgICBjb25zdCBvZmZzZXQgPSBhZmZpeFdpZHRoICsgcGFkZGluZztcblxuICAgICAgICBjb25zdCBpc0FmZml4ID0gdHlwZSA9PT0gQWRvcm5tZW50VHlwZS5BZmZpeDtcbiAgICAgICAgY29uc3QgbWFyZ2luS2V5ID0gYG1hcmdpbiR7Y2FwdGFsaXplKHNpZGUpfWA7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBbbWFyZ2luS2V5XTogaXNBZmZpeCA/IDAgOiBvZmZzZXQsXG4gICAgICAgICAgW3BhZGRpbmdLZXldOiBpc0FmZml4ID8gb2Zmc2V0IDogaW5wdXRPZmZzZXQsXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgKTtcbiAgICBjb25zdCBhbGxTdHlsZUFkanVzdG1lbnRzTWVyZ2VkID0gYWRvcm5tZW50U3R5bGVBZGp1c3RtZW50Rm9yTmF0aXZlSW5wdXQucmVkdWNlKFxuICAgICAgKG1lcmdlZFN0eWxlcywgY3VycmVudFN0eWxlKSA9PiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgLi4ubWVyZ2VkU3R5bGVzLFxuICAgICAgICAgIC4uLmN1cnJlbnRTdHlsZSxcbiAgICAgICAgfTtcbiAgICAgIH0sXG4gICAgICB7fVxuICAgICk7XG4gICAgcmV0dXJuIGFsbFN0eWxlQWRqdXN0bWVudHNNZXJnZWQ7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFt7fV07XG4gIH1cbn1cblxuY29uc3QgY2FwdGFsaXplID0gKHRleHQ6IHN0cmluZykgPT5cbiAgdGV4dC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHRleHQuc2xpY2UoMSk7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVGV4dElucHV0QWRvcm5tZW50UHJvcHMge1xuICBmb3JjZUZvY3VzOiAoKSA9PiB2b2lkO1xuICBhZG9ybm1lbnRDb25maWc6IEFkb3JubWVudENvbmZpZ1tdO1xuICB0b3BQb3NpdGlvbjoge1xuICAgIFtBZG9ybm1lbnRUeXBlLkFmZml4XToge1xuICAgICAgW0Fkb3JubWVudFNpZGUuTGVmdF06IG51bWJlciB8IG51bGw7XG4gICAgICBbQWRvcm5tZW50U2lkZS5SaWdodF06IG51bWJlciB8IG51bGw7XG4gICAgfTtcbiAgICBbQWRvcm5tZW50VHlwZS5JY29uXTogbnVtYmVyO1xuICB9O1xuICBvbkFmZml4Q2hhbmdlOiB7XG4gICAgW0Fkb3JubWVudFNpZGUuTGVmdF06IChldmVudDogTGF5b3V0Q2hhbmdlRXZlbnQpID0+IHZvaWQ7XG4gICAgW0Fkb3JubWVudFNpZGUuUmlnaHRdOiAoZXZlbnQ6IExheW91dENoYW5nZUV2ZW50KSA9PiB2b2lkO1xuICB9O1xuICBsZWZ0PzogUmVhY3QuUmVhY3ROb2RlO1xuICByaWdodD86IFJlYWN0LlJlYWN0Tm9kZTtcbiAgdGV4dFN0eWxlPzogU3R5bGVQcm9wPFRleHRTdHlsZT47XG4gIHZpc2libGU/OiBBbmltYXRlZC5WYWx1ZTtcbiAgaXNUZXh0SW5wdXRGb2N1c2VkOiBib29sZWFuO1xuICBwYWRkaW5nSG9yaXpvbnRhbD86IG51bWJlciB8IHN0cmluZztcbn1cblxuY29uc3QgVGV4dElucHV0QWRvcm5tZW50OiBSZWFjdC5GdW5jdGlvbkNvbXBvbmVudDxUZXh0SW5wdXRBZG9ybm1lbnRQcm9wcz4gPSAoe1xuICBhZG9ybm1lbnRDb25maWcsXG4gIGxlZnQsXG4gIHJpZ2h0LFxuICBvbkFmZml4Q2hhbmdlLFxuICB0ZXh0U3R5bGUsXG4gIHZpc2libGUsXG4gIHRvcFBvc2l0aW9uLFxuICBpc1RleHRJbnB1dEZvY3VzZWQsXG4gIGZvcmNlRm9jdXMsXG4gIHBhZGRpbmdIb3Jpem9udGFsLFxufSkgPT4ge1xuICBpZiAoYWRvcm5tZW50Q29uZmlnLmxlbmd0aCkge1xuICAgIHJldHVybiAoXG4gICAgICA8PlxuICAgICAgICB7YWRvcm5tZW50Q29uZmlnLm1hcCgoeyB0eXBlLCBzaWRlIH06IEFkb3JubWVudENvbmZpZykgPT4ge1xuICAgICAgICAgIGxldCBpbnB1dEFkb3JubWVudENvbXBvbmVudDtcbiAgICAgICAgICBpZiAoc2lkZSA9PT0gQWRvcm5tZW50U2lkZS5MZWZ0KSB7XG4gICAgICAgICAgICBpbnB1dEFkb3JubWVudENvbXBvbmVudCA9IGxlZnQ7XG4gICAgICAgICAgfSBlbHNlIGlmIChzaWRlID09PSBBZG9ybm1lbnRTaWRlLlJpZ2h0KSB7XG4gICAgICAgICAgICBpbnB1dEFkb3JubWVudENvbXBvbmVudCA9IHJpZ2h0O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnN0IGNvbW1vblByb3BzID0ge1xuICAgICAgICAgICAga2V5OiBzaWRlLFxuICAgICAgICAgICAgc2lkZTogc2lkZSxcbiAgICAgICAgICAgIHRlc3RJRDogYCR7c2lkZX0tJHt0eXBlfS1hZG9ybm1lbnRgLFxuICAgICAgICAgICAgaXNUZXh0SW5wdXRGb2N1c2VkLFxuICAgICAgICAgICAgcGFkZGluZ0hvcml6b250YWwsXG4gICAgICAgICAgfTtcbiAgICAgICAgICBpZiAodHlwZSA9PT0gQWRvcm5tZW50VHlwZS5JY29uKSB7XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICA8SWNvbkFkb3JubWVudFxuICAgICAgICAgICAgICAgIHsuLi5jb21tb25Qcm9wc31cbiAgICAgICAgICAgICAgICBpY29uPXtpbnB1dEFkb3JubWVudENvbXBvbmVudH1cbiAgICAgICAgICAgICAgICB0b3BQb3NpdGlvbj17dG9wUG9zaXRpb25bQWRvcm5tZW50VHlwZS5JY29uXX1cbiAgICAgICAgICAgICAgICBmb3JjZUZvY3VzPXtmb3JjZUZvY3VzfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IEFkb3JubWVudFR5cGUuQWZmaXgpIHtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgIDxBZmZpeEFkb3JubWVudFxuICAgICAgICAgICAgICAgIHsuLi5jb21tb25Qcm9wc31cbiAgICAgICAgICAgICAgICB0b3BQb3NpdGlvbj17dG9wUG9zaXRpb25bQWRvcm5tZW50VHlwZS5BZmZpeF1bc2lkZV19XG4gICAgICAgICAgICAgICAgYWZmaXg9e2lucHV0QWRvcm5tZW50Q29tcG9uZW50fVxuICAgICAgICAgICAgICAgIHRleHRTdHlsZT17dGV4dFN0eWxlfVxuICAgICAgICAgICAgICAgIG9uTGF5b3V0PXtvbkFmZml4Q2hhbmdlW3NpZGVdfVxuICAgICAgICAgICAgICAgIHZpc2libGU9e3Zpc2libGV9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgIH0pfVxuICAgICAgPC8+XG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgVGV4dElucHV0QWRvcm5tZW50O1xuIl19