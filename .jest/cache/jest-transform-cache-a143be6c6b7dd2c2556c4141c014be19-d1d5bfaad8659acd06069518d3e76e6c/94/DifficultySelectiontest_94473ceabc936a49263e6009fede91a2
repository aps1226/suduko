39fc53baadd3e8941c9d749f3a37830d
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _react = _interopRequireDefault(require("react"));

var _renderWithRedux = _interopRequireDefault(require("./renderWithRedux"));

var _history = require("history");

var _reactNative = require("@testing-library/react-native");

var _DifficultySelection = _interopRequireDefault(require("../../../components/DifficultySelection"));

var history = (0, _history.createMemoryHistory)();
var path = "/route/:id";
var match = {
  isExact: false,
  path: path,
  url: path.replace(':id', '1'),
  params: {
    id: '1'
  }
};
var location = (0, _history.createLocation)(match.url);
describe('DifficultySelection', function () {
  var mockStore = {};
  var difficultySelection;
  beforeEach(function _callee() {
    return _regenerator.default.async(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return _regenerator.default.awrap((0, _reactNative.waitFor)(function () {
              difficultySelection = (0, _renderWithRedux.default)(_react.default.createElement(_DifficultySelection.default, {
                history: history,
                location: location,
                match: match
              }), {
                initialState: mockStore
              });
            }));

          case 2:
          case "end":
            return _context.stop();
        }
      }
    }, null, null, null, Promise);
  });
  afterEach(_reactNative.cleanup);
  it('renders without crashing', function _callee2() {
    return _regenerator.default.async(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            expect(difficultySelection.toJSON()).toMatchSnapshot();

          case 1:
          case "end":
            return _context2.stop();
        }
      }
    }, null, null, null, Promise);
  });
  it("correctly initializes board when the easy button is selected", function _callee3() {
    var _difficultySelection, getByTestId, store, easyButton, curHistory;

    return _regenerator.default.async(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _difficultySelection = difficultySelection, getByTestId = _difficultySelection.getByTestId, store = _difficultySelection.store;
            easyButton = getByTestId('easyButton');
            curHistory = history.length;

            _reactNative.fireEvent.press(easyButton);

            _context3.next = 6;
            return _regenerator.default.awrap((0, _reactNative.waitFor)(function () {
              expect(history.length).toBe(curHistory + 1);
              expect(history.location.pathname).toBe('/GameDisplay');
              var boardState = store.getState().board;
              var valueCount = 0;
              boardState.forEach(function (arr) {
                arr.forEach(function (num) {
                  if (num !== null) valueCount += 1;
                });
              });
              console.log('easy:', valueCount);
              expect(valueCount >= 37 && valueCount <= 46).toBeTruthy();
            }));

          case 6:
          case "end":
            return _context3.stop();
        }
      }
    }, null, null, null, Promise);
  });
  it("correctly initializes board when the medium button is selected", function _callee4() {
    var _difficultySelection2, getByTestId, store, mediumButton, curHistory;

    return _regenerator.default.async(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _difficultySelection2 = difficultySelection, getByTestId = _difficultySelection2.getByTestId, store = _difficultySelection2.store;
            mediumButton = getByTestId('mediumButton');
            curHistory = history.length;

            _reactNative.fireEvent.press(mediumButton);

            _context4.next = 6;
            return _regenerator.default.awrap((0, _reactNative.waitFor)(function () {
              expect(history.length).toBe(curHistory + 1);
              expect(history.location.pathname).toBe('/GameDisplay');
              var boardState = store.getState().board;
              var valueCount = 0;
              boardState.forEach(function (arr) {
                arr.forEach(function (num) {
                  if (num !== null) valueCount += 1;
                });
              });
              console.log('medium:', valueCount);
              expect(valueCount >= 27 && valueCount <= 36).toBeTruthy();
            }));

          case 6:
          case "end":
            return _context4.stop();
        }
      }
    }, null, null, null, Promise);
  });
  it("correctly initializes board when the hard button is selected", function _callee5() {
    var _difficultySelection3, getByTestId, store, hardButton, curHistory;

    return _regenerator.default.async(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _difficultySelection3 = difficultySelection, getByTestId = _difficultySelection3.getByTestId, store = _difficultySelection3.store;
            hardButton = getByTestId('hardButton');
            curHistory = history.length;

            _reactNative.fireEvent.press(hardButton);

            _context5.next = 6;
            return _regenerator.default.awrap((0, _reactNative.waitFor)(function () {
              expect(history.length).toBe(curHistory + 1);
              expect(history.location.pathname).toBe('/GameDisplay');
              var boardState = store.getState().board;
              var valueCount = 0;
              boardState.forEach(function (arr) {
                arr.forEach(function (num) {
                  if (num !== null) valueCount += 1;
                });
              });
              console.log('hard:', valueCount);
              expect(valueCount >= 19 && valueCount <= 26).toBeTruthy();
            }));

          case 6:
          case "end":
            return _context5.stop();
        }
      }
    }, null, null, null, Promise);
  });
  it("correctly initializes board when the extreme button is selected", function _callee6() {
    var _difficultySelection4, getByTestId, store, extremeButton, curHistory;

    return _regenerator.default.async(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            _difficultySelection4 = difficultySelection, getByTestId = _difficultySelection4.getByTestId, store = _difficultySelection4.store;
            extremeButton = getByTestId('extremeButton');
            curHistory = history.length;

            _reactNative.fireEvent.press(extremeButton);

            _context6.next = 6;
            return _regenerator.default.awrap((0, _reactNative.waitFor)(function () {
              expect(history.length).toBe(curHistory + 1);
              expect(history.location.pathname).toBe('/GameDisplay');
              var boardState = store.getState().board;
              var valueCount = 0;
              boardState.forEach(function (arr) {
                arr.forEach(function (num) {
                  if (num !== null) valueCount += 1;
                });
              });
              console.log('extremeButton:', valueCount);
              expect(valueCount).toBe(18);
            }));

          case 6:
          case "end":
            return _context6.stop();
        }
      }
    }, null, null, null, Promise);
  });
  it("should route to the home screen when the 'Main Menu' button is selected", function () {
    var _difficultySelection5 = difficultySelection,
        getByTestId = _difficultySelection5.getByTestId;
    var mainMenuButton = getByTestId('mainMenuButton');
    var curHistory = history.length;

    _reactNative.fireEvent.press(mainMenuButton);

    expect(history.length).toBe(curHistory + 1);
    expect(history.location.pathname).toBe('/');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcYXNoZWVcXERvY3VtZW50c1xcSmF2YXNjcmlwdFxcUmVhY3RcXFJlYWN0IE5hdGl2ZVxcc3VkdWtvXFxzcmNcXF9fdGVzdHNfX1xcQ29tcG9uZW50IFRlc3RzXFxEaWZmaWN1bHR5U2VsZWN0aW9uLnRlc3QudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7QUFFQTs7QUFDQTs7QUFFQTs7QUFLQTs7QUFHQSxJQUFNLE9BQU8sR0FBRyxtQ0FBaEI7QUFDQSxJQUFNLElBQUksZUFBVjtBQUNBLElBQU0sS0FBSyxHQUEwQjtBQUNqQyxFQUFBLE9BQU8sRUFBRSxLQUR3QjtBQUVqQyxFQUFBLElBQUksRUFBSixJQUZpQztBQUdqQyxFQUFBLEdBQUcsRUFBRSxJQUFJLENBQUMsT0FBTCxDQUFhLEtBQWIsRUFBb0IsR0FBcEIsQ0FINEI7QUFJakMsRUFBQSxNQUFNLEVBQUU7QUFBRSxJQUFBLEVBQUUsRUFBRTtBQUFOO0FBSnlCLENBQXJDO0FBTUEsSUFBTSxRQUFRLEdBQUcsNkJBQWUsS0FBSyxDQUFDLEdBQXJCLENBQWpCO0FBR0EsUUFBUSxDQUFDLHFCQUFELEVBQXVCLFlBQUs7QUFHbEMsTUFBTSxTQUFTLEdBQWEsRUFBNUI7QUFHQSxNQUFJLG1CQUFKO0FBQ0EsRUFBQSxVQUFVLENBQUM7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsOENBQ0gsMEJBQVEsWUFBSztBQUNqQixjQUFBLG1CQUFtQixHQUFHLDhCQUNwQixlQUFBLGFBQUEsQ0FBQyw0QkFBRCxFQUFvQjtBQUNsQixnQkFBQSxPQUFPLEVBQUUsT0FEUztBQUVsQixnQkFBQSxRQUFRLEVBQUUsUUFGUTtBQUdsQixnQkFBQSxLQUFLLEVBQUU7QUFIVyxlQUFwQixDQURvQixFQU1wQjtBQUNFLGdCQUFBLFlBQVksRUFBQztBQURmLGVBTm9CLENBQXRCO0FBVUQsYUFYSyxDQURHOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEdBQUQs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LFFBQU0sY0FBYyxHQUFHLFdBQVcsQ0FBQyxnQkFBRCxDQUFsQztBQUNBLFFBQU0sVUFBVSxHQUFHLE9BQU8sQ0FBQyxNQUEzQjs7QUFFQSwyQkFBVSxLQUFWLENBQWdCLGNBQWhCOztBQUVBLElBQUEsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFULENBQU4sQ0FBdUIsSUFBdkIsQ0FBNEIsVUFBVSxHQUFHLENBQXpDO0FBRUEsSUFBQSxNQUFNLENBQUMsT0FBTyxDQUFDLFFBQVIsQ0FBaUIsUUFBbEIsQ0FBTixDQUFrQyxJQUFsQyxDQUF1QyxHQUF2QztBQUNELEdBVkMsQ0FBRjtBQVlELENBbkpPLENBQVIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyBUZXh0LFZpZXcgfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xyXG5pbXBvcnQgcmVuZGVyV2l0aFJlZHV4IGZyb20gJy4vcmVuZGVyV2l0aFJlZHV4JztcclxuaW1wb3J0IHsgY3JlYXRlTWVtb3J5SGlzdG9yeSwgY3JlYXRlTG9jYXRpb24gfSBmcm9tICdoaXN0b3J5JztcclxuaW1wb3J0IHsgbWF0Y2ggfSBmcm9tICdyZWFjdC1yb3V0ZXInO1xyXG5pbXBvcnQgeyBhY3QsIGNsZWFudXAsIGZpcmVFdmVudCwgcmVuZGVyLCB3YWl0Rm9yfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XHJcbmltcG9ydCByZW5kZXJlciBmcm9tICdyZWFjdC10ZXN0LXJlbmRlcmVyJztcclxuaW1wb3J0IHtHYW1lU3RhdGV9IGZyb20gJy4uLy4uLy4uL3R5cGVzJztcclxuaW1wb3J0IHtSb290U3RhdGV9IGZyb20gJy4uLy4uL3N0YXRlL3JlZHVjZXJzL2luZGV4JztcclxuXHJcbmltcG9ydCBEaWZmaWN1bHR5U2VsZWN0aW9uIGZyb20gJy4uLy4uLy4uL2NvbXBvbmVudHMvRGlmZmljdWx0eVNlbGVjdGlvbic7XHJcblxyXG4vL01vY2sgcHJvcHMgZm9yIHJvdXRpbmcuXHJcbmNvbnN0IGhpc3RvcnkgPSBjcmVhdGVNZW1vcnlIaXN0b3J5KCk7XHJcbmNvbnN0IHBhdGggPSBgL3JvdXRlLzppZGA7XHJcbmNvbnN0IG1hdGNoOiBtYXRjaDx7IGlkOiBzdHJpbmcgfT4gPSB7XHJcbiAgICBpc0V4YWN0OiBmYWxzZSxcclxuICAgIHBhdGgsXHJcbiAgICB1cmw6IHBhdGgucmVwbGFjZSgnOmlkJywgJzEnKSxcclxuICAgIHBhcmFtczogeyBpZDogJzEnIH1cclxufTtcclxuY29uc3QgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihtYXRjaC51cmwpO1xyXG5cclxuLy9HYW1lRGlzcGxheSBjb21wb25lbnQgdGVzdC5cclxuZGVzY3JpYmUoJ0RpZmZpY3VsdHlTZWxlY3Rpb24nLCgpID0+e1xyXG5cclxuICAvL01vY2sgc3RvcmUgb2JqZWN0IGZvciBzdGF0ZSBtYW5hZ2VtZW50LlxyXG4gIGNvbnN0IG1vY2tTdG9yZTpSb290U3RhdGUgPSB7fTtcclxuXHJcbiAgLy9SZW5kZXIgRGlmZmljdWx0eVNlbGVjdGlvbiBjb21wb25lbnQgd2l0aCByb3V0aW5nIGFuZCByZWR1eC5cclxuICBsZXQgZGlmZmljdWx0eVNlbGVjdGlvbjphbnk7XHJcbiAgYmVmb3JlRWFjaChhc3luYygpID0+e1xyXG4gICAgYXdhaXQgd2FpdEZvcigoKSA9PntcclxuICAgICAgZGlmZmljdWx0eVNlbGVjdGlvbiA9IHJlbmRlcldpdGhSZWR1eChcclxuICAgICAgICA8RGlmZmljdWx0eVNlbGVjdGlvblxyXG4gICAgICAgICAgaGlzdG9yeT17aGlzdG9yeX1cclxuICAgICAgICAgIGxvY2F0aW9uPXtsb2NhdGlvbn1cclxuICAgICAgICAgIG1hdGNoPXttYXRjaH1cclxuICAgICAgICAvPixcclxuICAgICAgICB7XHJcbiAgICAgICAgICBpbml0aWFsU3RhdGU6bW9ja1N0b3JlXHJcbiAgICAgICAgfVxyXG4gICAgICApO1xyXG4gICAgfSlcclxuICB9KVxyXG5cclxuICAvL0NsZWFudXAgYWZ0ZXIgZWFjaCB0ZXN0LlxyXG4gIGFmdGVyRWFjaChjbGVhbnVwKTtcclxuXHJcbiAgLy9Db21wb25lbnQgcmVuZGVycyB3aXRob3V0IGNyYXNoaW5nLlxyXG4gIGl0KCdyZW5kZXJzIHdpdGhvdXQgY3Jhc2hpbmcnLGFzeW5jKCk9PntcclxuICAgIGV4cGVjdChkaWZmaWN1bHR5U2VsZWN0aW9uLnRvSlNPTigpKS50b01hdGNoU25hcHNob3QoKTtcclxuICB9KVxyXG5cclxuICAvL1Rlc3QgZWFzeSBzZWxlY3Rpb24uXHJcbiAgaXQoYGNvcnJlY3RseSBpbml0aWFsaXplcyBib2FyZCB3aGVuIHRoZSBlYXN5IGJ1dHRvbiBpcyBzZWxlY3RlZGAsIGFzeW5jICgpPT57XHJcbiAgICBjb25zdCB7Z2V0QnlUZXN0SWQsIHN0b3JlfSA9IGRpZmZpY3VsdHlTZWxlY3Rpb247XHJcbiAgICBjb25zdCBlYXN5QnV0dG9uID0gZ2V0QnlUZXN0SWQoJ2Vhc3lCdXR0b24nKTtcclxuICAgIGNvbnN0IGN1ckhpc3RvcnkgPSBoaXN0b3J5Lmxlbmd0aDtcclxuICAgIC8vUHJlc3MgZWFzeSBidXR0b25cclxuICAgIGZpcmVFdmVudC5wcmVzcyhlYXN5QnV0dG9uKTtcclxuICAgIGF3YWl0IHdhaXRGb3IoKCk9PntcclxuICAgICAgLy9IaXN0b3J5IGxlbmd0aCBzaG91bGQgaW5jcmVhc2UgYnkgMS5cclxuICAgICAgZXhwZWN0KGhpc3RvcnkubGVuZ3RoKS50b0JlKGN1ckhpc3RvcnkgKyAxKTtcclxuICAgICAgLy9Mb2NhdGlvbiBwYXRobmFtZSBzaG91bGQgYmUgJ0dhbWVEaXNwbGF5Jy5cclxuICAgICAgZXhwZWN0KGhpc3RvcnkubG9jYXRpb24ucGF0aG5hbWUpLnRvQmUoJy9HYW1lRGlzcGxheScpO1xyXG4gICAgICAvL0RldGVybWluZSB0aGUgYW1vdW50IG9mIG5vbi1udWxsIHZhbHVlcyBvbiB0aGUgaW5pdGlhbGl6ZWQgYm9hcmQuXHJcbiAgICAgIGNvbnN0IGJvYXJkU3RhdGU6KG51bWJlciB8IG51bGwpW11bXSA9IHN0b3JlLmdldFN0YXRlKCkuYm9hcmQ7XHJcbiAgICAgIGxldCB2YWx1ZUNvdW50Om51bWJlciA9IDA7XHJcbiAgICAgIGJvYXJkU3RhdGUuZm9yRWFjaCgoYXJyKSA9PntcclxuICAgICAgICBhcnIuZm9yRWFjaCgobnVtKT0+e1xyXG4gICAgICAgICAgaWYobnVtICE9PSBudWxsKSB2YWx1ZUNvdW50ICs9IDE7XHJcbiAgICAgICAgfSlcclxuICAgICAgfSlcclxuICAgICAgY29uc29sZS5sb2coJ2Vhc3k6Jyx2YWx1ZUNvdW50KVxyXG4gICAgICAvL0JvYXJkIHNob3VsZCBiZSBpbml0aWFsaXplZCB3aXRoICgzNyw0Nikgbm9uLW51bGwgdmFsdWVzLlxyXG4gICAgICBleHBlY3QodmFsdWVDb3VudCA+PSAzNyAmJiB2YWx1ZUNvdW50IDw9IDQ2KS50b0JlVHJ1dGh5KCk7XHJcbiAgICB9KVxyXG4gIH0pXHJcblxyXG4gIC8vVGVzdCBtZWRpdW0gc2VsZWN0aW9uLlxyXG4gIGl0KGBjb3JyZWN0bHkgaW5pdGlhbGl6ZXMgYm9hcmQgd2hlbiB0aGUgbWVkaXVtIGJ1dHRvbiBpcyBzZWxlY3RlZGAsIGFzeW5jICgpPT57XHJcbiAgICBjb25zdCB7Z2V0QnlUZXN0SWQsIHN0b3JlfSA9IGRpZmZpY3VsdHlTZWxlY3Rpb247XHJcbiAgICBjb25zdCBtZWRpdW1CdXR0b24gPSBnZXRCeVRlc3RJZCgnbWVkaXVtQnV0dG9uJyk7XHJcbiAgICBjb25zdCBjdXJIaXN0b3J5ID0gaGlzdG9yeS5sZW5ndGg7XHJcbiAgICAvL1ByZXNzIG1lZGl1bSBidXR0b24uXHJcbiAgICBmaXJlRXZlbnQucHJlc3MobWVkaXVtQnV0dG9uKTtcclxuICAgIGF3YWl0IHdhaXRGb3IoKCk9PntcclxuICAgICAgLy9IaXN0b3J5IGxlbmd0aCBzaG91bGQgaW5jcmVhc2UgYnkgMS5cclxuICAgICAgZXhwZWN0KGhpc3RvcnkubGVuZ3RoKS50b0JlKGN1ckhpc3RvcnkgKyAxKTtcclxuICAgICAgLy9Mb2NhdGlvbiBwYXRobmFtZSBzaG91bGQgYmUgJ0dhbWVEaXNwbGF5Jy5cclxuICAgICAgZXhwZWN0KGhpc3RvcnkubG9jYXRpb24ucGF0aG5hbWUpLnRvQmUoJy9HYW1lRGlzcGxheScpO1xyXG4gICAgICAvL0RldGVybWluZSB0aGUgYW1vdW50IG9mIG5vbi1udWxsIHZhbHVlcyBvbiB0aGUgaW5pdGlhbGl6ZWQgYm9hcmQuXHJcbiAgICAgIGNvbnN0IGJvYXJkU3RhdGU6KG51bWJlciB8IG51bGwpW11bXSA9IHN0b3JlLmdldFN0YXRlKCkuYm9hcmQ7XHJcbiAgICAgIGxldCB2YWx1ZUNvdW50Om51bWJlciA9IDA7XHJcbiAgICAgIGJvYXJkU3RhdGUuZm9yRWFjaCgoYXJyKSA9PntcclxuICAgICAgICBhcnIuZm9yRWFjaCgobnVtKT0+e1xyXG4gICAgICAgICAgaWYobnVtICE9PSBudWxsKSB2YWx1ZUNvdW50ICs9IDE7XHJcbiAgICAgICAgfSlcclxuICAgICAgfSlcclxuICAgICAgY29uc29sZS5sb2coJ21lZGl1bTonLHZhbHVlQ291bnQpXHJcbiAgICAgIC8vQm9hcmQgc2hvdWxkIGJlIGluaXRpYWxpemVkIHdpdGggKDI3LDM2KSBub24tbnVsbCB2YWx1ZXMuXHJcbiAgICAgIGV4cGVjdCh2YWx1ZUNvdW50ID49IDI3ICYmIHZhbHVlQ291bnQgPD0gMzYpLnRvQmVUcnV0aHkoKTtcclxuICAgIH0pXHJcbiAgfSlcclxuXHJcbiAgLy9UZXN0IGhhcmQgc2VsZWN0aW9uLlxyXG4gIGl0KGBjb3JyZWN0bHkgaW5pdGlhbGl6ZXMgYm9hcmQgd2hlbiB0aGUgaGFyZCBidXR0b24gaXMgc2VsZWN0ZWRgLCBhc3luYyAoKT0+e1xyXG4gICAgY29uc3Qge2dldEJ5VGVzdElkLCBzdG9yZX0gPSBkaWZmaWN1bHR5U2VsZWN0aW9uO1xyXG4gICAgY29uc3QgaGFyZEJ1dHRvbiA9IGdldEJ5VGVzdElkKCdoYXJkQnV0dG9uJyk7XHJcbiAgICBjb25zdCBjdXJIaXN0b3J5ID0gaGlzdG9yeS5sZW5ndGg7XHJcbiAgICAvL1ByZXNzIGhhcmQgYnV0dG9uXHJcbiAgICBmaXJlRXZlbnQucHJlc3MoaGFyZEJ1dHRvbik7XHJcbiAgICBhd2FpdCB3YWl0Rm9yKCgpPT57XHJcbiAgICAgIC8vSGlzdG9yeSBsZW5ndGggc2hvdWxkIGluY3JlYXNlIGJ5IDEuXHJcbiAgICAgIGV4cGVjdChoaXN0b3J5Lmxlbmd0aCkudG9CZShjdXJIaXN0b3J5ICsgMSk7XHJcbiAgICAgIC8vTG9jYXRpb24gcGF0aG5hbWUgc2hvdWxkIGJlICdHYW1lRGlzcGxheScuXHJcbiAgICAgIGV4cGVjdChoaXN0b3J5LmxvY2F0aW9uLnBhdGhuYW1lKS50b0JlKCcvR2FtZURpc3BsYXknKTtcclxuICAgICAgLy9EZXRlcm1pbmUgdGhlIGFtb3VudCBvZiBub24tbnVsbCB2YWx1ZXMgb24gdGhlIGluaXRpYWxpemVkIGJvYXJkLlxyXG4gICAgICBjb25zdCBib2FyZFN0YXRlOihudW1iZXIgfCBudWxsKVtdW10gPSBzdG9yZS5nZXRTdGF0ZSgpLmJvYXJkO1xyXG4gICAgICBsZXQgdmFsdWVDb3VudDpudW1iZXIgPSAwO1xyXG4gICAgICBib2FyZFN0YXRlLmZvckVhY2goKGFycikgPT57XHJcbiAgICAgICAgYXJyLmZvckVhY2goKG51bSk9PntcclxuICAgICAgICAgIGlmKG51bSAhPT0gbnVsbCkgdmFsdWVDb3VudCArPSAxO1xyXG4gICAgICAgIH0pXHJcbiAgICAgIH0pXHJcbiAgICAgIGNvbnNvbGUubG9nKCdoYXJkOicsdmFsdWVDb3VudClcclxuICAgICAgLy9Cb2FyZCBzaG91bGQgYmUgaW5pdGlhbGl6ZWQgd2l0aCAoMTksMjYpIG5vbi1udWxsIHZhbHVlcy5cclxuICAgICAgZXhwZWN0KHZhbHVlQ291bnQgPj0gMTkgJiYgdmFsdWVDb3VudCA8PSAyNikudG9CZVRydXRoeSgpO1xyXG4gICAgfSlcclxuICB9KVxyXG5cclxuICAvL1Rlc3QgZXh0cmVtZSBzZWxlY3Rpb24uXHJcbiAgaXQoYGNvcnJlY3RseSBpbml0aWFsaXplcyBib2FyZCB3aGVuIHRoZSBleHRyZW1lIGJ1dHRvbiBpcyBzZWxlY3RlZGAsIGFzeW5jICgpPT57XHJcbiAgICBjb25zdCB7Z2V0QnlUZXN0SWQsIHN0b3JlfSA9IGRpZmZpY3VsdHlTZWxlY3Rpb247XHJcbiAgICBjb25zdCBleHRyZW1lQnV0dG9uID0gZ2V0QnlUZXN0SWQoJ2V4dHJlbWVCdXR0b24nKTtcclxuICAgIGNvbnN0IGN1ckhpc3RvcnkgPSBoaXN0b3J5Lmxlbmd0aDtcclxuICAgIC8vUHJlc3MgaGFyZCBidXR0b25cclxuICAgIGZpcmVFdmVudC5wcmVzcyhleHRyZW1lQnV0dG9uKTtcclxuICAgIGF3YWl0IHdhaXRGb3IoKCk9PntcclxuICAgICAgLy9IaXN0b3J5IGxlbmd0aCBzaG91bGQgaW5jcmVhc2UgYnkgMS5cclxuICAgICAgZXhwZWN0KGhpc3RvcnkubGVuZ3RoKS50b0JlKGN1ckhpc3RvcnkgKyAxKTtcclxuICAgICAgLy9Mb2NhdGlvbiBwYXRobmFtZSBzaG91bGQgYmUgJ0dhbWVEaXNwbGF5Jy5cclxuICAgICAgZXhwZWN0KGhpc3RvcnkubG9jYXRpb24ucGF0aG5hbWUpLnRvQmUoJy9HYW1lRGlzcGxheScpO1xyXG4gICAgICAvL0RldGVybWluZSB0aGUgYW1vdW50IG9mIG5vbi1udWxsIHZhbHVlcyBvbiB0aGUgaW5pdGlhbGl6ZWQgYm9hcmQuXHJcbiAgICAgIGNvbnN0IGJvYXJkU3RhdGU6KG51bWJlciB8IG51bGwpW11bXSA9IHN0b3JlLmdldFN0YXRlKCkuYm9hcmQ7XHJcbiAgICAgIGxldCB2YWx1ZUNvdW50Om51bWJlciA9IDA7XHJcbiAgICAgIGJvYXJkU3RhdGUuZm9yRWFjaCgoYXJyKSA9PntcclxuICAgICAgICBhcnIuZm9yRWFjaCgobnVtKT0+e1xyXG4gICAgICAgICAgaWYobnVtICE9PSBudWxsKSB2YWx1ZUNvdW50ICs9IDE7XHJcbiAgICAgICAgfSlcclxuICAgICAgfSlcclxuICAgICAgY29uc29sZS5sb2coJ2V4dHJlbWVCdXR0b246Jyx2YWx1ZUNvdW50KVxyXG4gICAgICAvL0JvYXJkIHNob3VsZCBiZSBpbml0aWFsaXplZCB3aXRoIDE4IG5vbi1udWxsIHZhbHVlcy5cclxuICAgICAgZXhwZWN0KHZhbHVlQ291bnQpLnRvQmUoMTgpO1xyXG4gICAgfSlcclxuICB9KVxyXG5cclxuICAvL1Rlc3QgbWFpbiBtZW51IGJ1dHRvbi5cclxuICBpdChgc2hvdWxkIHJvdXRlIHRvIHRoZSBob21lIHNjcmVlbiB3aGVuIHRoZSAnTWFpbiBNZW51JyBidXR0b24gaXMgc2VsZWN0ZWRgLCAoKT0+e1xyXG4gICAgY29uc3Qge2dldEJ5VGVzdElkfSA9IGRpZmZpY3VsdHlTZWxlY3Rpb247XHJcbiAgICBjb25zdCBtYWluTWVudUJ1dHRvbiA9IGdldEJ5VGVzdElkKCdtYWluTWVudUJ1dHRvbicpO1xyXG4gICAgY29uc3QgY3VySGlzdG9yeSA9IGhpc3RvcnkubGVuZ3RoO1xyXG4gICAgLy9QcmVzcyAnTWFpbiBNZW51JyBidXR0b24uXHJcbiAgICBmaXJlRXZlbnQucHJlc3MobWFpbk1lbnVCdXR0b24pO1xyXG4gICAgLy9IaXN0b3J5IGxlbmd0aCBzaG91bGQgaW5jcmVhc2UgYnkgMS5cclxuICAgIGV4cGVjdChoaXN0b3J5Lmxlbmd0aCkudG9CZShjdXJIaXN0b3J5ICsgMSk7XHJcbiAgICAvL0xvY2F0aW9uIHBhdGhuYW1lIHNob3VsZCBiZSAnLycuXHJcbiAgICBleHBlY3QoaGlzdG9yeS5sb2NhdGlvbi5wYXRobmFtZSkudG9CZSgnLycpO1xyXG4gIH0pXHJcbiAgXHJcbn0pIl19