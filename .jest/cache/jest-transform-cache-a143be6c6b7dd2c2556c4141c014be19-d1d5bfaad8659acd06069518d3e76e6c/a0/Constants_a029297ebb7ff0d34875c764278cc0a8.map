{"version":3,"sources":["../src/Constants.ts"],"names":[],"mappings":"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","sourcesContent":["import { CodedError, NativeModulesProxy } from '@unimodules/core';\nimport { Platform, NativeModules } from 'react-native';\n\nimport {\n  AndroidManifest,\n  AppManifest,\n  AppOwnership,\n  Constants,\n  ExecutionEnvironment,\n  IOSManifest,\n  Manifest,\n  NativeConstants,\n  PlatformManifest,\n  UserInterfaceIdiom,\n  WebManifest,\n} from './Constants.types';\nimport ExponentConstants from './ExponentConstants';\n\nexport {\n  AndroidManifest,\n  AppOwnership,\n  Constants,\n  ExecutionEnvironment,\n  IOSManifest,\n  NativeConstants,\n  PlatformManifest,\n  UserInterfaceIdiom,\n  WebManifest,\n};\n\nif (!ExponentConstants) {\n  console.warn(\n    \"No native ExponentConstants module found, are you sure the expo-constants's module is linked properly?\"\n  );\n}\n\nlet rawManifest: AppManifest | Manifest | null = null;\n// If expo-updates defines a non-empty manifest, prefer that one\nif (NativeModulesProxy.ExpoUpdates) {\n  let updatesManifest;\n  if (NativeModulesProxy.ExpoUpdates.manifest) {\n    updatesManifest = NativeModulesProxy.ExpoUpdates.manifest;\n  } else if (NativeModulesProxy.ExpoUpdates.manifestString) {\n    updatesManifest = JSON.parse(NativeModulesProxy.ExpoUpdates.manifestString);\n  }\n  if (updatesManifest && Object.keys(updatesManifest).length > 0) {\n    rawManifest = updatesManifest;\n  }\n}\n\n// If dev-launcher defines a non-empty manifest, prefer that one\nif (NativeModules.EXDevLauncher) {\n  let devLauncherManifest;\n  if (NativeModules.EXDevLauncher.manifestString) {\n    devLauncherManifest = JSON.parse(NativeModules.EXDevLauncher.manifestString);\n  }\n\n  if (devLauncherManifest && Object.keys(devLauncherManifest).length > 0) {\n    rawManifest = devLauncherManifest;\n  }\n}\n\n// Fall back to ExponentConstants.manifest if we don't have one from Updates\nif (!rawManifest && ExponentConstants && ExponentConstants.manifest) {\n  rawManifest = ExponentConstants.manifest;\n  // On Android we pass the manifest in JSON form so this step is necessary\n  if (typeof rawManifest === 'string') {\n    rawManifest = JSON.parse(rawManifest);\n  }\n}\n\nconst { name, appOwnership, ...nativeConstants } = (ExponentConstants || {}) as any;\n\nlet warnedAboutInstallationId = false;\nlet warnedAboutDeviceId = false;\nlet warnedAboutLinkingUrl = false;\n\nconst constants = {\n  ...nativeConstants,\n  // Ensure this is null in bare workflow\n  appOwnership: appOwnership ?? null,\n  // Deprecated fields\n  get installationId() {\n    if (!warnedAboutInstallationId) {\n      console.warn(\n        `Constants.installationId has been deprecated in favor of generating and storing your own ID. Implement it using expo-application's androidId on Android and a storage API such as expo-secure-store on iOS and localStorage on the web. This API will be removed in SDK 44.`\n      );\n      warnedAboutInstallationId = true;\n    }\n    return nativeConstants.installationId;\n  },\n  // Legacy aliases\n  get deviceId() {\n    if (!warnedAboutDeviceId) {\n      console.warn(\n        `Constants.deviceId has been deprecated in favor of generating and storing your own ID. This API will be removed in SDK 44.`\n      );\n      warnedAboutDeviceId = true;\n    }\n    return nativeConstants.installationId;\n  },\n  get linkingUrl() {\n    if (!warnedAboutLinkingUrl) {\n      console.warn(\n        `Constants.linkingUrl has been renamed to Constants.linkingUri. Consider using the Linking API directly. Constants.linkingUrl will be removed in SDK 44.`\n      );\n      warnedAboutLinkingUrl = true;\n    }\n    return nativeConstants.linkingUri;\n  },\n  get manifest(): AppManifest | null {\n    const maybeManifest = getManifest();\n    if (!maybeManifest || !isAppManifest(maybeManifest)) {\n      return null;\n    }\n    return maybeManifest;\n  },\n  get manifest2(): Manifest | null {\n    const maybeManifest = getManifest();\n    if (!maybeManifest || !isManifest(maybeManifest)) {\n      return null;\n    }\n    return maybeManifest;\n  },\n  /**\n   * Use `manifest` property by default.\n   * This property is only used for internal purposes.\n   * It behaves similarly to the original one, but suppresses warning upon no manifest available.\n   * `expo-asset` uses it to prevent users from seeing mentioned warning.\n   */\n  get __unsafeNoWarnManifest(): AppManifest | Manifest | null {\n    return getManifest(true);\n  },\n  get __rawManifest_TEST(): AppManifest | Manifest | null {\n    return rawManifest;\n  },\n  set __rawManifest_TEST(value: AppManifest | Manifest | null) {\n    rawManifest = value;\n  },\n} as Constants;\n\nfunction isAppManifest(manifest: AppManifest | Manifest): manifest is AppManifest {\n  return !isManifest(manifest);\n}\n\nfunction isManifest(manifest: AppManifest | Manifest): manifest is Manifest {\n  return 'metadata' in manifest;\n}\n\nfunction getManifest(suppressWarning = false): AppManifest | Manifest | null {\n  if (!rawManifest) {\n    const invalidManifestType = rawManifest === null ? 'null' : 'undefined';\n    if (\n      nativeConstants.executionEnvironment === ExecutionEnvironment.Bare &&\n      Platform.OS !== 'web'\n    ) {\n      if (!suppressWarning) {\n        console.warn(\n          `Constants.manifest is ${invalidManifestType} because the embedded app.config could not be read. Ensure that you have installed the expo-constants build scripts if you need to read from Constants.manifest.`\n        );\n      }\n    } else if (\n      nativeConstants.executionEnvironment === ExecutionEnvironment.StoreClient ||\n      nativeConstants.executionEnvironment === ExecutionEnvironment.Standalone\n    ) {\n      // If we somehow get here, this is a truly exceptional state to be in.\n      // Constants.manifest should *always* be defined in those contexts.\n      throw new CodedError(\n        'ERR_CONSTANTS_MANIFEST_UNAVAILABLE',\n        `Constants.manifest is ${invalidManifestType}, must be an object.`\n      );\n    }\n  }\n  return rawManifest;\n}\n\nexport default constants as Constants;\n"],"sourceRoot":""}