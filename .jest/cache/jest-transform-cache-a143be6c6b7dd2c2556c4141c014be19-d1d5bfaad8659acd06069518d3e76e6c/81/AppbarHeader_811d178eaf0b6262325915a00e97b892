6c5e082877afd24b906949bf30641d34
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _objectWithoutProperties2 = _interopRequireDefault2(require("@babel/runtime/helpers/objectWithoutProperties"));

var _excluded = ["statusBarHeight", "style", "dark"],
    _excluded2 = ["height", "elevation", "backgroundColor", "zIndex"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AppbarHeader = exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _overlay = _interopRequireDefault(require("../../styles/overlay"));

var _Appbar = require("./Appbar");

var _shadow = _interopRequireDefault(require("../../styles/shadow"));

var _theming = require("../../core/theming");

var _constants = require("../../constants");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var AppbarHeader = function AppbarHeader(props) {
  var _props$statusBarHeigh = props.statusBarHeight,
      statusBarHeight = _props$statusBarHeigh === void 0 ? _constants.APPROX_STATUSBAR_HEIGHT : _props$statusBarHeigh,
      style = props.style,
      dark = props.dark,
      rest = (0, _objectWithoutProperties2.default)(props, _excluded);
  var _rest$theme = rest.theme,
      isDarkTheme = _rest$theme.dark,
      colors = _rest$theme.colors,
      mode = _rest$theme.mode;

  var _ref = _reactNative.StyleSheet.flatten(style) || {},
      _ref$height = _ref.height,
      height = _ref$height === void 0 ? _Appbar.DEFAULT_APPBAR_HEIGHT : _ref$height,
      _ref$elevation = _ref.elevation,
      elevation = _ref$elevation === void 0 ? 4 : _ref$elevation,
      customBackground = _ref.backgroundColor,
      _ref$zIndex = _ref.zIndex,
      zIndex = _ref$zIndex === void 0 ? 0 : _ref$zIndex,
      restStyle = (0, _objectWithoutProperties2.default)(_ref, _excluded2);

  var backgroundColor = customBackground ? customBackground : isDarkTheme && mode === 'adaptive' ? (0, _overlay.default)(elevation, colors.surface) : colors.primary;
  var Wrapper = typeof props.statusBarHeight === 'number' ? _reactNative.View : _reactNative.SafeAreaView;
  return React.createElement(Wrapper, {
    style: [{
      backgroundColor: backgroundColor,
      zIndex: zIndex,
      elevation: elevation
    }, (0, _shadow.default)(elevation)]
  }, React.createElement(_Appbar.Appbar, _extends({
    style: [{
      height: height,
      backgroundColor: backgroundColor,
      marginTop: statusBarHeight
    }, styles.appbar, restStyle],
    dark: dark
  }, rest)));
};

AppbarHeader.displayName = 'Appbar.Header';

var styles = _reactNative.StyleSheet.create({
  appbar: {
    elevation: 0
  }
});

var _default = (0, _theming.withTheme)(AppbarHeader);

exports.default = _default;
var AppbarHeaderWithTheme = (0, _theming.withTheme)(AppbarHeader);
exports.AppbarHeader = AppbarHeaderWithTheme;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,