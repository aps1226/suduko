8fbc5ac8571996657dbdb50cd53e1559
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _react = _interopRequireDefault(require("react"));

var _renderWithRedux = _interopRequireDefault(require("./renderWithRedux"));

var _history = require("history");

var _reactNative = require("@testing-library/react-native");

var _Home = _interopRequireDefault(require("../../../components/Home"));

var history = (0, _history.createMemoryHistory)();
var path = "/route/:id";
var match = {
  isExact: false,
  path: path,
  url: path.replace(':id', '1'),
  params: {
    id: "1"
  }
};
var location = (0, _history.createLocation)(match.url);
describe('Home', function () {
  var mockStore = {};
  var homeComponent;
  beforeEach(function () {
    homeComponent = (0, _renderWithRedux.default)(_react.default.createElement(_Home.default, {
      history: history,
      match: match,
      location: location
    }));
  });
  it('renders without crashing', function () {
    expect(homeComponent.toJSON()).toMatchSnapshot();
  });
  it("routes to difficulty selection menu when pressing 'Play New Game'.", function () {
    var _homeComponent = homeComponent,
        getByTestId = _homeComponent.getByTestId;
    var newGameButton = getByTestId('newGameButton');
    var curHistory = history.length;
    expect(history.length).toBe(curHistory);

    _reactNative.fireEvent.press(newGameButton);

    expect(history.length).toBe(curHistory + 1);
    expect(history.location.pathname).toBe('/DifficultySelection');
  });
  it("does not route to GameDisplay when pressing 'Load Game' if a game does not exist.", function () {
    var _homeComponent2 = homeComponent,
        getByTestId = _homeComponent2.getByTestId;
    var loadGameButton = getByTestId('loadGameButton');
    var curHistory = history.length;
    expect(history.length).toBe(curHistory);
    expect(history.location.pathname).toBe('/DifficultySelection');

    _reactNative.fireEvent.press(loadGameButton);

    expect(history.length).toBe(curHistory);
    expect(history.location.pathname).toBe('/DifficultySelection');
  });
  it("prompt appears when attempting to load a game when none exists.", function () {
    var _homeComponent3 = homeComponent,
        getByTestId = _homeComponent3.getByTestId;
    var loadGameButton = getByTestId('loadGameButton');
    var loadGamePopUp = getByTestId('loadGamePopUp');
    expect(loadGamePopUp.props.visible).toBeFalsy();

    _reactNative.fireEvent.press(loadGameButton);

    expect(loadGamePopUp.props.visible).toBeTruthy();
    var newGameButton = getByTestId('newGameButton');
    var newGamePopUp = getByTestId('newGamePopUp');
    expect(newGamePopUp.props.visible).toBeFalsy();

    _reactNative.fireEvent.press(newGameButton);

    expect(newGamePopUp.props.visible).toBeFalsy();
  });
  it("prompt disappears when pressing the screen.", function _callee() {
    var _homeComponent4, getByTestId, loadGameButton, loadGamePopUp, loadGamePopUpHide;

    return _regenerator.default.async(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _homeComponent4 = homeComponent, getByTestId = _homeComponent4.getByTestId;
            loadGameButton = getByTestId('loadGameButton');
            loadGamePopUp = getByTestId('loadGamePopUp');
            loadGamePopUpHide = getByTestId('loadGamePopUpHide');
            expect(loadGamePopUp.props.visible).toBeFalsy();

            _reactNative.fireEvent.press(loadGameButton);

            expect(loadGamePopUp.props.visible).toBeTruthy();

            _reactNative.fireEvent.press(loadGamePopUpHide);

            _context.next = 10;
            return _regenerator.default.awrap((0, _reactNative.waitFor)(function () {
              expect(getByTestId('loadGamePopUp').props.visible).toBeFalsy();
            }));

          case 10:
          case "end":
            return _context.stop();
        }
      }
    }, null, null, null, Promise);
  });
  mockStore['gameState'] = {
    'isCompleted': false,
    'gameExists': true
  };
  it("routes to GameDisplay when pressing 'Load Game' if a game does exist.", function () {
    var _homeComponent5 = homeComponent,
        getByTestId = _homeComponent5.getByTestId,
        store = _homeComponent5.store;
    console.log(store.getState());
  });
  it("does not route to difficulty selection menu when pressing 'Play New Game' if a game currently exists.", function () {
    var _homeComponent6 = homeComponent,
        getByTestId = _homeComponent6.getByTestId;
    var newGameButton = getByTestId('newGameButton');
    var curHistory = history.length;
    expect(history.length).toBe(curHistory);
    expect(history.location.pathname).toBe('/GameDisplay');

    _reactNative.fireEvent.press(newGameButton);

    expect(history.length).toBe(curHistory);
    expect(history.location.pathname).toBe('/GameDisplay');
  });
  it("prompt appears when attempting to play a new game when one exists.", function () {
    var _homeComponent7 = homeComponent,
        getByTestId = _homeComponent7.getByTestId;
    var newGameButton = getByTestId('newGameButton');
    var newGamePopUp = getByTestId('newGamePopUp');
    expect(newGamePopUp.props.visible).toBeFalsy();

    _reactNative.fireEvent.press(newGameButton);

    expect(newGamePopUp.props.visible).toBeTruthy();
    var loadGameButton = getByTestId('loadGameButton');
    var loadGamePopUp = getByTestId('loadGamePopUp');
    expect(loadGamePopUp.props.visible).toBeFalsy();

    _reactNative.fireEvent.press(loadGameButton);

    expect(loadGamePopUp.props.visible).toBeFalsy();
  });
  it("should route to the difficulty selection menu when the 'yes' button is selected on the 'Play New Game' popup.", function () {
    var _homeComponent8 = homeComponent,
        getByTestId = _homeComponent8.getByTestId;
    var newGameButton = getByTestId('newGameButton');
    var newGamePopUp = getByTestId('newGamePopUp');
    var yesButton = getByTestId('newGamePopUpYes');
    var curHistory = history.length;
    expect(history.length).toBe(curHistory);
    expect(history.location.pathname).toBe('/GameDisplay');

    _reactNative.fireEvent.press(newGameButton);

    _reactNative.fireEvent.press(yesButton);

    expect(history.length).toBe(curHistory + 1);
    expect(history.location.pathname).toBe('/DifficultySelection');
  });
  it("prompt should disappear and not route to any other component when the 'No' button is selected on the prompt.", function _callee2() {
    var _homeComponent9, getByTestId, findByTestId, newGameButton, newGamePopUp, noButton, curHistory;

    return _regenerator.default.async(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _homeComponent9 = homeComponent, getByTestId = _homeComponent9.getByTestId, findByTestId = _homeComponent9.findByTestId;
            newGameButton = getByTestId('newGameButton');
            newGamePopUp = getByTestId('newGamePopUp');
            noButton = getByTestId('newGamePopUpNo');
            curHistory = history.length;
            expect(history.length).toBe(curHistory);
            expect(history.location.pathname).toBe('/DifficultySelection');

            _reactNative.fireEvent.press(newGameButton);

            _context2.next = 10;
            return _regenerator.default.awrap((0, _reactNative.waitFor)(function () {
              expect(getByTestId('newGamePopUp').props.visible).toBeTruthy();
            }));

          case 10:
            _reactNative.fireEvent.press(noButton);

            _context2.next = 13;
            return _regenerator.default.awrap((0, _reactNative.waitFor)(function () {
              expect(getByTestId('newGamePopUp').props.visible).toBeFalsy();
              expect(history.length).toBe(curHistory);
              expect(history.location.pathname).toBe('/DifficultySelection');
            }));

          case 13:
          case "end":
            return _context2.stop();
        }
      }
    }, null, null, null, Promise);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcYXNoZWVcXERvY3VtZW50c1xcSmF2YXNjcmlwdFxcUmVhY3RcXFJlYWN0IE5hdGl2ZVxcc3VkdWtvXFxzcmNcXF9fdGVzdHNfX1xcQ29tcG9uZW50IFRlc3RzXFxIb21lLnRlc3QudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFFQTs7QUFLQTs7QUFHQSxJQUFNLE9BQU8sR0FBRyxtQ0FBaEI7QUFDQSxJQUFNLElBQUksZUFBVjtBQUNBLElBQU0sS0FBSyxHQUEwQjtBQUNqQyxFQUFBLE9BQU8sRUFBRSxLQUR3QjtBQUVqQyxFQUFBLElBQUksRUFBSixJQUZpQztBQUdqQyxFQUFBLEdBQUcsRUFBRSxJQUFJLENBQUMsT0FBTCxDQUFhLEtBQWIsRUFBb0IsR0FBcEIsQ0FINEI7QUFJakMsRUFBQSxNQUFNLEVBQUU7QUFBRSxJQUFBLEVBQUUsRUFBRTtBQUFOO0FBSnlCLENBQXJDO0FBTUEsSUFBTSxRQUFRLEdBQUcsNkJBQWUsS0FBSyxDQUFDLEdBQXJCLENBQWpCO0FBR0EsUUFBUSxDQUFDLE1BQUQsRUFBUyxZQUFLO0FBRXBCLE1BQU0sU0FBUyxHQUFhLEVBQTVCO0FBRUEsTUFBSSxhQUFKO0FBQ0EsRUFBQSxVQUFVLENBQUMsWUFBSztBQUNkLElBQUEsYUFBYSxHQUFHLDhCQUNoQixlQUFBLGFBQUEsQ0FBQyxhQUFELEVBQUs7QUFDSCxNQUFBLE9BQU8sRUFBSSxPQURSO0FBRUgsTUFBQSxLQUFLLEVBQUksS0FGTjtBQUdILE1BQUEsUUFBUSxFQUFJO0FBSFQsS0FBTCxDQURnQixDQUFoQjtBQU9ELEdBUlMsQ0FBVjtBQVdBLEVBQUEsRUFBRSxDQUFDLDBCQUFELEVBQTZCLFlBQUs7QUFDbEMsSUFBQSxNQUFNLENBQUMsYUFBYSxDQUFDLE1BQWQsRUFBRCxDQUFOLENBQStCLGVBQS9CO0FBQ0QsR0FGQyxDQUFGO0FBS0EsRUFBQSxFQUFFLHVFQUF1RSxZQUFLO0FBQzVFLHlCQUFzQixh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QVYsQ0FBZ0IsUUFBaEI7O0FBakJpSDtBQUFBLDhDQW1CM0csMEJBQVEsWUFBSztBQUVqQixjQUFBLE1BQU0sQ0FBQyxXQUFXLENBQUMsY0FBRCxDQUFYLENBQTRCLEtBQTVCLENBQWtDLE9BQW5DLENBQU4sQ0FBa0QsU0FBbEQ7QUFFQSxjQUFBLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBVCxDQUFOLENBQXVCLElBQXZCLENBQTRCLFVBQTVCO0FBRUEsY0FBQSxNQUFNLENBQUMsT0FBTyxDQUFDLFFBQVIsQ0FBaUIsUUFBbEIsQ0FBTixDQUFrQyxJQUFsQyxDQUF1QyxzQkFBdkM7QUFDRCxhQVBLLENBbkIyRzs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxHQUFqSCxDQUFGO0FBNEJELENBOU1PLENBQVIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHJlbmRlcldpdGhSZWR1eCBmcm9tICcuL3JlbmRlcldpdGhSZWR1eCc7XG5pbXBvcnQgeyBjcmVhdGVNZW1vcnlIaXN0b3J5LCBjcmVhdGVMb2NhdGlvbiB9IGZyb20gJ2hpc3RvcnknO1xuaW1wb3J0IHsgbWF0Y2ggfSBmcm9tICdyZWFjdC1yb3V0ZXInOyBcbmltcG9ydCB7IGZpcmVFdmVudCwgcmVuZGVyLCB3YWl0Rm9yfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgcmVuZGVyZXIgZnJvbSAncmVhY3QtdGVzdC1yZW5kZXJlcic7XG5pbXBvcnQge0dhbWVTdGF0ZX0gZnJvbSAnLi4vLi4vLi4vdHlwZXMnO1xuaW1wb3J0IHtSb290U3RhdGV9IGZyb20gJy4uLy4uL3N0YXRlL3JlZHVjZXJzL2luZGV4JztcblxuaW1wb3J0IEhvbWUgZnJvbSAnLi4vLi4vLi4vY29tcG9uZW50cy9Ib21lJztcblxuLy9Nb2NrIHByb3BzIGZvciByb3V0aW5nLlxuY29uc3QgaGlzdG9yeSA9IGNyZWF0ZU1lbW9yeUhpc3RvcnkoKTtcbmNvbnN0IHBhdGggPSBgL3JvdXRlLzppZGA7XG5jb25zdCBtYXRjaDogbWF0Y2g8eyBpZDogc3RyaW5nIH0+ID0ge1xuICAgIGlzRXhhY3Q6IGZhbHNlLFxuICAgIHBhdGgsXG4gICAgdXJsOiBwYXRoLnJlcGxhY2UoJzppZCcsICcxJyksXG4gICAgcGFyYW1zOiB7IGlkOiBcIjFcIiB9XG59O1xuY29uc3QgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihtYXRjaC51cmwpO1xuXG4vL0hvbWUgY29tcG9uZW50IHRlc3RpbmcuXG5kZXNjcmliZSgnSG9tZScsICgpID0+e1xuICAvL01vY2sgc3RvcmUgb2JqZWN0IGZvciBzdGF0ZSBtYW5hZ2VtZW50LlxuICBjb25zdCBtb2NrU3RvcmU6Um9vdFN0YXRlID0ge307XG4gIC8vUmVuZGVyIEhvbWUgY29tcG9uZW50IHdpdGggcm91dGluZyBhbmQgcmVkdXguXG4gIGxldCBob21lQ29tcG9uZW50OmFueTtcbiAgYmVmb3JlRWFjaCgoKSA9PntcbiAgICBob21lQ29tcG9uZW50ID0gcmVuZGVyV2l0aFJlZHV4KFxuICAgIDxIb21lXG4gICAgICBoaXN0b3J5ID0ge2hpc3Rvcnl9XG4gICAgICBtYXRjaCA9IHttYXRjaH1cbiAgICAgIGxvY2F0aW9uID0ge2xvY2F0aW9ufVxuICAgIC8+XG4gICAgKTtcbiAgfSlcblxuICAvL0hvbWUgY29tcG9uZW50IHNob3VsZCBtYXRjaCBjdXJyZW50IHNjcmVlbnNob3QuXG4gIGl0KCdyZW5kZXJzIHdpdGhvdXQgY3Jhc2hpbmcnLCAoKSA9PiB7XG4gICAgZXhwZWN0KGhvbWVDb21wb25lbnQudG9KU09OKCkpLnRvTWF0Y2hTbmFwc2hvdCgpO1xuICB9KTtcblxuICAvL0hvbWUgY29tcG9uZW50IHNob3VsZCByb3V0ZSB0byB0aGUgZGlmZmljdWx0eSBzZWxlY3Rpb24gbWVudSB3aGVuIHRoZSAnUGxheSBOZXcgR2FtZScgYnV0dG9uIGlzIHNlbGVjdGVkLlxuICBpdChgcm91dGVzIHRvIGRpZmZpY3VsdHkgc2VsZWN0aW9uIG1lbnUgd2hlbiBwcmVzc2luZyAnUGxheSBOZXcgR2FtZScuYCwgKCkgPT4ge1xuICAgIGNvbnN0IHtnZXRCeVRlc3RJZH0gPSBob21lQ29tcG9uZW50O1xuICAgIGNvbnN0IG5ld0dhbWVCdXR0b24gPSBnZXRCeVRlc3RJZCgnbmV3R2FtZUJ1dHRvbicpO1xuICAgIGNvbnN0IGN1ckhpc3RvcnkgPSBoaXN0b3J5Lmxlbmd0aDtcbiAgICBleHBlY3QoaGlzdG9yeS5sZW5ndGgpLnRvQmUoY3VySGlzdG9yeSk7XG4gICAgLy9QcmVzcyAnUGxheSBOZXcgR2FtZScgYnV0dG9uLlxuICAgIGZpcmVFdmVudC5wcmVzcyhuZXdHYW1lQnV0dG9uKTtcbiAgICAvL0hpc3RvcnkgbGVuZ3RoIHNob3VsZCBpbmNyZWFzZSBieSAxLlxuICAgIGV4cGVjdChoaXN0b3J5Lmxlbmd0aCkudG9CZShjdXJIaXN0b3J5ICsgMSk7XG4gICAgLy9Mb2NhdGlvbiBwYXRobmFtZSBzaG91bGQgYmUgJ0RpZmZpY3VsdHlTZWxlY3Rpb24nLlxuICAgIGV4cGVjdChoaXN0b3J5LmxvY2F0aW9uLnBhdGhuYW1lKS50b0JlKCcvRGlmZmljdWx0eVNlbGVjdGlvbicpXG4gIH0pO1xuXG4gIC8vSG9tZSBjb21wb25lbnQgc2hvdWxkIG5vdCByb3V0ZSB0byBHYW1lRGlzcGxheSBjb21wb25lbnQgd2hlbiBwcmVzc2luZyAnTG9hZCBHYW1lJyBpZiBhIGdhbWUgZG9lcyBub3QgZXhpc3QuXG4gIGl0KGBkb2VzIG5vdCByb3V0ZSB0byBHYW1lRGlzcGxheSB3aGVuIHByZXNzaW5nICdMb2FkIEdhbWUnIGlmIGEgZ2FtZSBkb2VzIG5vdCBleGlzdC5gLCAoKSA9PiB7XG4gICAgY29uc3Qge2dldEJ5VGVzdElkfSA9IGhvbWVDb21wb25lbnQ7XG4gICAgY29uc3QgbG9hZEdhbWVCdXR0b24gPSBnZXRCeVRlc3RJZCgnbG9hZEdhbWVCdXR0b24nKTtcbiAgICBjb25zdCBjdXJIaXN0b3J5ID0gaGlzdG9yeS5sZW5ndGg7XG4gICAgZXhwZWN0KGhpc3RvcnkubGVuZ3RoKS50b0JlKGN1ckhpc3RvcnkpO1xuICAgIC8vTG9jYXRpb24gcGF0aG5hbWUgc2hvdWxkIGluaXRpYWxseSBiZSAnL0RpZmZpY3VsdHlTZWxlY3Rpb24nLlxuICAgIGV4cGVjdChoaXN0b3J5LmxvY2F0aW9uLnBhdGhuYW1lKS50b0JlKCcvRGlmZmljdWx0eVNlbGVjdGlvbicpXG4gICAgLy9QcmVzcyAnTG9hZCBHYW1lIEJ1dHRvbicuXG4gICAgZmlyZUV2ZW50LnByZXNzKGxvYWRHYW1lQnV0dG9uKTtcbiAgICAvL0hpc3RvcnkgbGVuZ3RoIHNob3VsZCBub3QgY2hhbmdlLlxuICAgIGV4cGVjdChoaXN0b3J5Lmxlbmd0aCkudG9CZShjdXJIaXN0b3J5KTtcbiAgICAvL0xvY2F0aW9uIHBhdGhuYW1lIHNob3VsZCByZW1haW4gYXMgJy9EaWZmaWN1bHR5U2VsZWN0aW9uJy5cbiAgICBleHBlY3QoaGlzdG9yeS5sb2NhdGlvbi5wYXRobmFtZSkudG9CZSgnL0RpZmZpY3VsdHlTZWxlY3Rpb24nKVxuICB9KTtcblxuICAvL0EgcG9wLXVwIHByb21wdCBzaG91bGQgYXBwZWFyIHdoZW4gdGhlICdMb2FkIEdhbWUnIGJ1dHRvbiBpcyBwcmVzc2VkIHdoZW4gbm8gY3VycmVudCBnYW1lIGV4aXN0cy5cbiAgaXQoYHByb21wdCBhcHBlYXJzIHdoZW4gYXR0ZW1wdGluZyB0byBsb2FkIGEgZ2FtZSB3aGVuIG5vbmUgZXhpc3RzLmAsICgpID0+IHtcbiAgICBjb25zdCB7Z2V0QnlUZXN0SWR9ID0gaG9tZUNvbXBvbmVudDtcbiAgICBjb25zdCBsb2FkR2FtZUJ1dHRvbiA9IGdldEJ5VGVzdElkKCdsb2FkR2FtZUJ1dHRvbicpO1xuICAgIGNvbnN0IGxvYWRHYW1lUG9wVXAgPSBnZXRCeVRlc3RJZCgnbG9hZEdhbWVQb3BVcCcpO1xuICAgIC8vUG9wdXAgc2hvdWxkIGluaXRpYWxseSBub3QgYmUgdmlzaWJsZS5cbiAgICBleHBlY3QobG9hZEdhbWVQb3BVcC5wcm9wcy52aXNpYmxlKS50b0JlRmFsc3koKTtcbiAgICAvL1ByZXNzICdMb2FkIEdhbWUnIGJ1dHRvbi5cbiAgICBmaXJlRXZlbnQucHJlc3MobG9hZEdhbWVCdXR0b24pO1xuICAgIC8vUG9wdXAgc2hvdWxkIG5vIGxvbmdlciBiZSB2aXNpYmxlLlxuICAgIGV4cGVjdChsb2FkR2FtZVBvcFVwLnByb3BzLnZpc2libGUpLnRvQmVUcnV0aHkoKTtcbiAgICBcbiAgICAvL1NlY29uZGFyeSB0ZXN0IHRvIGVuc3VyZSB0aGF0IHRoZSAnUGxheSBOZXcgR2FtZScgcG9wdXAgZG9lcyBub3QgYXBwZWFyIGdpdmVuIGN1cnJlbnQgc3RhdGUuXG4gICAgY29uc3QgbmV3R2FtZUJ1dHRvbiA9IGdldEJ5VGVzdElkKCduZXdHYW1lQnV0dG9uJyk7XG4gICAgY29uc3QgbmV3R2FtZVBvcFVwID0gZ2V0QnlUZXN0SWQoJ25ld0dhbWVQb3BVcCcpO1xuICAgIC8vUG9wdXAgc2hvdWxkIGluaXRpYWxseSBub3QgYmUgdmlzaWJsZS5cbiAgICBleHBlY3QobmV3R2FtZVBvcFVwLnByb3BzLnZpc2libGUpLnRvQmVGYWxzeSgpO1xuICAgIC8vUHJlc3MgJ1BsYXkgTmV3IEdhbWUnIGJ1dHRvbi5cbiAgICBmaXJlRXZlbnQucHJlc3MobmV3R2FtZUJ1dHRvbik7XG4gICAgLy9Qb3B1cCBzaG91bGQgcmVtYWluIG5vdCB2aXNpYmxlLlxuICAgIGV4cGVjdChuZXdHYW1lUG9wVXAucHJvcHMudmlzaWJsZSkudG9CZUZhbHN5KCk7XG4gIH0pO1xuICBcbiAgLy9Mb2FkIGdhbWUgcHJvbXB0IHNob3VsZCBkaXNhcHBlYXIgYWZ0ZXIgdGhlIHNjcmVlbiBpcyBwcmVzc2VkLlxuICBpdChgcHJvbXB0IGRpc2FwcGVhcnMgd2hlbiBwcmVzc2luZyB0aGUgc2NyZWVuLmAsIGFzeW5jICgpPT57XG4gICAgY29uc3Qge2dldEJ5VGVzdElkfSA9IGhvbWVDb21wb25lbnQ7XG4gICAgY29uc3QgbG9hZEdhbWVCdXR0b24gPSBnZXRCeVRlc3RJZCgnbG9hZEdhbWVCdXR0b24nKTtcbiAgICBjb25zdCBsb2FkR2FtZVBvcFVwID0gZ2V0QnlUZXN0SWQoJ2xvYWRHYW1lUG9wVXAnKTtcbiAgICBjb25zdCBsb2FkR2FtZVBvcFVwSGlkZSA9IGdldEJ5VGVzdElkKCdsb2FkR2FtZVBvcFVwSGlkZScpO1xuICAgIC8vUHJvbXB0IHNob3VsZCBpbml0aWFsbHkgYmUgaW52aXNpYmxlLlxuICAgIGV4cGVjdChsb2FkR2FtZVBvcFVwLnByb3BzLnZpc2libGUpLnRvQmVGYWxzeSgpO1xuICAgIC8vUHJlc3MgJ0xvYWQgR2FtZScgYnV0dG9uLlxuICAgIGZpcmVFdmVudC5wcmVzcyhsb2FkR2FtZUJ1dHRvbik7XG4gICAgLy9Qcm9tcHQgc2hvdWxkIGJlIHZpc2libGUuXG4gICAgZXhwZWN0KGxvYWRHYW1lUG9wVXAucHJvcHMudmlzaWJsZSkudG9CZVRydXRoeSgpO1xuICAgIC8vUHJlc3Mgc2NyZWVuIGFmdGVyIHByb21wdCBhcHBlYXJzLlxuICAgIGZpcmVFdmVudC5wcmVzcyhsb2FkR2FtZVBvcFVwSGlkZSk7XG4gICAgLy9XYWl0IGZvciBjb21wb25lbnQgdG8gdXBkYXRlIGFmdGVyIHByZXNzIGV2ZW50LlxuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgLy9Qcm9tcHQgc2hvdWxkIG5vdCBiZSB2aXNpYmxlLlxuICAgICAgZXhwZWN0KGdldEJ5VGVzdElkKCdsb2FkR2FtZVBvcFVwJykucHJvcHMudmlzaWJsZSkudG9CZUZhbHN5KCk7XG4gICAgfSlcbiAgfSlcbiAgXG4gIC8vVXBkYXRlIHN0YXRlIGZvciB0aGUgbmV4dCBzZXJpZXMgb2YgdGVzdHMuXG4gIG1vY2tTdG9yZVsnZ2FtZVN0YXRlJ10gPSB7XG4gICAgJ2lzQ29tcGxldGVkJzpmYWxzZSxcbiAgICAnZ2FtZUV4aXN0cyc6dHJ1ZVxuICB9XG4gIFxuICAvL0hvbWUgY29tcG9uZW50IHNob3VsZCByb3V0ZSB0byBHYW1lRGlzcGxheSBjb21wb25lbnQgaWYgYSBjdXJyZW50IGdhbWUgZXhpc3RzLlxuICBpdChgcm91dGVzIHRvIEdhbWVEaXNwbGF5IHdoZW4gcHJlc3NpbmcgJ0xvYWQgR2FtZScgaWYgYSBnYW1lIGRvZXMgZXhpc3QuYCwgKCkgPT4ge1xuICAgIGNvbnN0IHtnZXRCeVRlc3RJZCwgc3RvcmV9ID0gaG9tZUNvbXBvbmVudDtcbiAgICBjb25zb2xlLmxvZyhzdG9yZS5nZXRTdGF0ZSgpKVxuICAgIC8vIGNvbnN0IGxvYWRHYW1lQnV0dG9uID0gZ2V0QnlUZXN0SWQoJ2xvYWRHYW1lQnV0dG9uJyk7XG4gICAgLy8gY29uc3QgY3VySGlzdG9yeSA9IGhpc3RvcnkubGVuZ3RoO1xuICAgIC8vIGV4cGVjdChoaXN0b3J5Lmxlbmd0aCkudG9CZShjdXJIaXN0b3J5KTtcbiAgICAvLyAvL0xvY2F0aW9uIHBhdGhuYW1lIHNob3VsZCBpbml0aWFsbHkgYmUgJ0RpZmZpY3VsdHlTZWxlY3Rpb24nLlxuICAgIC8vIGV4cGVjdChoaXN0b3J5LmxvY2F0aW9uLnBhdGhuYW1lKS50b0JlKCcvRGlmZmljdWx0eVNlbGVjdGlvbicpXG4gICAgLy8gLy9QcmVzcyAnTG9hZCBHYW1lJyBidXR0b24uXG4gICAgLy8gZmlyZUV2ZW50LnByZXNzKGxvYWRHYW1lQnV0dG9uKTtcbiAgICAvLyAvL0hpc3RvcnkgbGVuZ3RoIHNob3VsZCBpbmNyZWFzZSBieSAxLlxuICAgIC8vIGV4cGVjdChoaXN0b3J5Lmxlbmd0aCkudG9CZShjdXJIaXN0b3J5ICsgMSk7XG4gICAgLy8gLy9Mb2NhdGlvbiBwYXRobmFtZSBzaG91bGQgYmUgJ0dhbWVEaXNwbGF5Jy5cbiAgICAvLyBleHBlY3QoaGlzdG9yeS5sb2NhdGlvbi5wYXRobmFtZSkudG9CZSgnL0dhbWVEaXNwbGF5JylcbiAgfSk7XG4gIFxuICAvL0hvbWUgY29tcG9uZW50IHNob3VsZCBub3QgaW1tZWRpYXRlbHkgcm91dGUgdG8gRGlmZmljdWx0eVNlbGVjdGlvbiBjb21wb25lbnQgaWYgYSBnYW1lIGV4aXN0cy5cbiAgaXQoYGRvZXMgbm90IHJvdXRlIHRvIGRpZmZpY3VsdHkgc2VsZWN0aW9uIG1lbnUgd2hlbiBwcmVzc2luZyAnUGxheSBOZXcgR2FtZScgaWYgYSBnYW1lIGN1cnJlbnRseSBleGlzdHMuYCwgKCkgPT4ge1xuICAgIGNvbnN0IHtnZXRCeVRlc3RJZH0gPSBob21lQ29tcG9uZW50O1xuICAgIGNvbnN0IG5ld0dhbWVCdXR0b24gPSBnZXRCeVRlc3RJZCgnbmV3R2FtZUJ1dHRvbicpO1xuICAgIGNvbnN0IGN1ckhpc3RvcnkgPSBoaXN0b3J5Lmxlbmd0aDtcbiAgICBleHBlY3QoaGlzdG9yeS5sZW5ndGgpLnRvQmUoY3VySGlzdG9yeSk7XG4gICAgLy9Mb2NhdGlvbiBwYXRobmFtZSBzaG91bGQgaW5pdGlhbGx5IGJlICdHYW1lRGlzcGxheScuXG4gICAgZXhwZWN0KGhpc3RvcnkubG9jYXRpb24ucGF0aG5hbWUpLnRvQmUoJy9HYW1lRGlzcGxheScpXG4gICAgLy9QcmVzcyAnUGxheSBOZXcgR2FtZScuXG4gICAgZmlyZUV2ZW50LnByZXNzKG5ld0dhbWVCdXR0b24pO1xuICAgIC8vSGlzdG9yeSBsZW5ndGggc2hvdWxkIHJlbWFpbiB0aGUgc2FtZS5cbiAgICBleHBlY3QoaGlzdG9yeS5sZW5ndGgpLnRvQmUoY3VySGlzdG9yeSk7XG4gICAgLy9Mb2NhdGlvbiBwYXRobmFtZSBzaG91bGQgcmVtYWluIGFzICdHYW1lRGlzcGxheScuXG4gICAgZXhwZWN0KGhpc3RvcnkubG9jYXRpb24ucGF0aG5hbWUpLnRvQmUoJy9HYW1lRGlzcGxheScpXG4gIH0pO1xuICBcbiAgLy9Qcm9tcHQgc2hvdWxkIGFwcGVhciB3aGVuIGF0dGVtcHRpbmcgdG8gcGxheSBhIG5ldyBnYW1lIHdoZW4gb25lIGN1cnJlbnRseSBleGlzdHMuXG4gIGl0KGBwcm9tcHQgYXBwZWFycyB3aGVuIGF0dGVtcHRpbmcgdG8gcGxheSBhIG5ldyBnYW1lIHdoZW4gb25lIGV4aXN0cy5gLCAoKSA9PiB7XG4gICAgY29uc3Qge2dldEJ5VGVzdElkfSA9IGhvbWVDb21wb25lbnQ7XG4gICAgY29uc3QgbmV3R2FtZUJ1dHRvbiA9IGdldEJ5VGVzdElkKCduZXdHYW1lQnV0dG9uJyk7XG4gICAgY29uc3QgbmV3R2FtZVBvcFVwID0gZ2V0QnlUZXN0SWQoJ25ld0dhbWVQb3BVcCcpO1xuICAgIC8vUHJvbXB0IHNob3VsZCBpbml0aWFsbHkgbm90IGJlIHZpc2libGUuXG4gICAgZXhwZWN0KG5ld0dhbWVQb3BVcC5wcm9wcy52aXNpYmxlKS50b0JlRmFsc3koKTtcbiAgICAvL1ByZXNzICdQbGF5IE5ldyBHYW1lJyBidXR0b24uXG4gICAgZmlyZUV2ZW50LnByZXNzKG5ld0dhbWVCdXR0b24pO1xuICAgIC8vUHJvbXB0IHNob3VsZCBiZSB2aXNpYmxlLlxuICAgIGV4cGVjdChuZXdHYW1lUG9wVXAucHJvcHMudmlzaWJsZSkudG9CZVRydXRoeSgpO1xuICAgIFxuICAgIC8vU2Vjb25kYXJ5IHRlc3QgdG8gZW5zdXJlIHRoYXQgdGhlICdQbGF5IE5ldyBHYW1lJyBwb3B1cCBkb2VzIG5vdCBhcHBlYXIgZ2l2ZW4gY3VycmVudCBzdGF0ZS5cbiAgICBjb25zdCBsb2FkR2FtZUJ1dHRvbiA9IGdldEJ5VGVzdElkKCdsb2FkR2FtZUJ1dHRvbicpO1xuICAgIGNvbnN0IGxvYWRHYW1lUG9wVXAgPSBnZXRCeVRlc3RJZCgnbG9hZEdhbWVQb3BVcCcpO1xuICAgIC8vUHJvbXB0IHNob3VsZCBpbml0aWFsbHkgbm90IGJlIHZpc2libGUuXG4gICAgZXhwZWN0KGxvYWRHYW1lUG9wVXAucHJvcHMudmlzaWJsZSkudG9CZUZhbHN5KCk7XG4gICAgLy9QcmVzcyAnTG9hZCBHYW1lJyBidXR0b24uXG4gICAgZmlyZUV2ZW50LnByZXNzKGxvYWRHYW1lQnV0dG9uKTtcbiAgICAvL1Byb21wdCBzaG91bGQgcmVtYWluIG5vdCB2aXNpYmxlLlxuICAgIGV4cGVjdChsb2FkR2FtZVBvcFVwLnByb3BzLnZpc2libGUpLnRvQmVGYWxzeSgpO1xuICB9KTtcblxuICAvL0hvbWUgY29tcG9uZW50IHNob3VsZCByb3V0ZSB0byBkaWZmaWN1bHR5IHNlbGVjdGlvbiBtZW51IHdoZW4gdGhlICd5ZXMnIGJ1dHRvbiBpcyBzZWxlY3RlZCB3aXRoaW4gdGhlIHByb21wdC5cbiAgaXQoYHNob3VsZCByb3V0ZSB0byB0aGUgZGlmZmljdWx0eSBzZWxlY3Rpb24gbWVudSB3aGVuIHRoZSAneWVzJyBidXR0b24gaXMgc2VsZWN0ZWQgb24gdGhlICdQbGF5IE5ldyBHYW1lJyBwb3B1cC5gLCAoKSA9PntcbiAgICBjb25zdCB7Z2V0QnlUZXN0SWR9ID0gaG9tZUNvbXBvbmVudDtcbiAgICBjb25zdCBuZXdHYW1lQnV0dG9uID0gZ2V0QnlUZXN0SWQoJ25ld0dhbWVCdXR0b24nKTtcbiAgICBjb25zdCBuZXdHYW1lUG9wVXAgPSBnZXRCeVRlc3RJZCgnbmV3R2FtZVBvcFVwJyk7XG4gICAgY29uc3QgeWVzQnV0dG9uID0gZ2V0QnlUZXN0SWQoJ25ld0dhbWVQb3BVcFllcycpO1xuICAgIGNvbnN0IGN1ckhpc3RvcnkgPSBoaXN0b3J5Lmxlbmd0aDtcbiAgICBleHBlY3QoaGlzdG9yeS5sZW5ndGgpLnRvQmUoY3VySGlzdG9yeSk7XG4gICAgLy9Mb2NhdGlvbiBwYXRobmFtZSBzaG91bGQgaW5pdGlhbGx5IGJlICdHYW1lRGlzcGxheScuXG4gICAgZXhwZWN0KGhpc3RvcnkubG9jYXRpb24ucGF0aG5hbWUpLnRvQmUoJy9HYW1lRGlzcGxheScpO1xuICAgIC8vUHJlc3MgJ1BsYXkgTmV3IEdhbWUnIGJ1dHRvbi5cbiAgICBmaXJlRXZlbnQucHJlc3MobmV3R2FtZUJ1dHRvbik7XG4gICAgLy9QcmVzcyAnWWVzJyBidXR0b24uXG4gICAgZmlyZUV2ZW50LnByZXNzKHllc0J1dHRvbik7XG4gICAgLy9IaXN0b3J5IGxlbmd0aCBzaG91bGQgaW5pdGlhbGx5IGJlIDYuXG4gICAgZXhwZWN0KGhpc3RvcnkubGVuZ3RoKS50b0JlKGN1ckhpc3RvcnkgKyAxKTtcbiAgICAvL0xvY2F0aW9uIHBhdGhuYW1lIHNob3VsZCBiZSAnRGlmZmljdWx0eVNlbGVjdGlvbicuXG4gICAgZXhwZWN0KGhpc3RvcnkubG9jYXRpb24ucGF0aG5hbWUpLnRvQmUoJy9EaWZmaWN1bHR5U2VsZWN0aW9uJyk7XG4gIH0pXG5cbiAgLy9XaGVuIHRoZSAnTm8nIGJ1dHRvbiBpcyBzZWxlY3RlZCBvbiB0aGUgcHJvbXB0IGl0IHNob3VsZCBkaXNhcHBlYXJcbiAgLy9hbmQgbm90IHJvdXRlIHRvIGFub3RoZXIgY29tcG9uZW50LlxuICBpdChgcHJvbXB0IHNob3VsZCBkaXNhcHBlYXIgYW5kIG5vdCByb3V0ZSB0byBhbnkgb3RoZXIgY29tcG9uZW50IHdoZW4gdGhlICdObycgYnV0dG9uIGlzIHNlbGVjdGVkIG9uIHRoZSBwcm9tcHQuYCwgYXN5bmMgKCk9PntcbiAgICBjb25zdCB7Z2V0QnlUZXN0SWQsIGZpbmRCeVRlc3RJZH0gPSBob21lQ29tcG9uZW50O1xuICAgIGNvbnN0IG5ld0dhbWVCdXR0b24gPSBnZXRCeVRlc3RJZCgnbmV3R2FtZUJ1dHRvbicpO1xuICAgIGNvbnN0IG5ld0dhbWVQb3BVcCA9IGdldEJ5VGVzdElkKCduZXdHYW1lUG9wVXAnKTtcbiAgICBjb25zdCBub0J1dHRvbiA9IGdldEJ5VGVzdElkKCduZXdHYW1lUG9wVXBObycpO1xuICAgIGNvbnN0IGN1ckhpc3RvcnkgPSBoaXN0b3J5Lmxlbmd0aDtcbiAgICBleHBlY3QoaGlzdG9yeS5sZW5ndGgpLnRvQmUoY3VySGlzdG9yeSk7XG4gICAgLy9Mb2NhdGlvbiBwYXRobmFtZSBzaG91bGQgaW5pdGlhbGx5IGJlICdEaWZmaWN1bHR5U2VsZWN0aW9uJy5cbiAgICBleHBlY3QoaGlzdG9yeS5sb2NhdGlvbi5wYXRobmFtZSkudG9CZSgnL0RpZmZpY3VsdHlTZWxlY3Rpb24nKTtcbiAgICAvL1ByZXNzICdQbGF5IE5ldyBHYW1lJyBidXR0b24uXG4gICAgZmlyZUV2ZW50LnByZXNzKG5ld0dhbWVCdXR0b24pO1xuICAgIC8vV2FpdCBmb3IgY29tcG9uZW50IHRvIHVwZGF0ZSBhZnRlciBwcmVzcyBldmVudC5cbiAgICBhd2FpdCB3YWl0Rm9yKCgpID0+e1xuICAgICAgLy8nUGxheSBOZXcgR2FtZScgcHJvbXB0IHNob3VsZCBiZSB2aXNpYmxlLlxuICAgICAgZXhwZWN0KGdldEJ5VGVzdElkKCduZXdHYW1lUG9wVXAnKS5wcm9wcy52aXNpYmxlKS50b0JlVHJ1dGh5KCk7XG4gICAgfSlcbiAgICAvL1ByZXNzICdObycgYnV0dG9uLlxuICAgIGZpcmVFdmVudC5wcmVzcyhub0J1dHRvbik7XG4gICAgLy9XYWl0IGZvciBjb21wb25lbnQgdG8gdXBkYXRlIGFmdGVyIHByZXNzIGV2ZW50LlxuICAgIGF3YWl0IHdhaXRGb3IoKCkgPT57XG4gICAgICAvLydQbGF5IE5ldyBHYW1lJyBwcm9tcHQgc2hvdWxkIG5vdCBiZSB2aXNpYmxlLlxuICAgICAgZXhwZWN0KGdldEJ5VGVzdElkKCduZXdHYW1lUG9wVXAnKS5wcm9wcy52aXNpYmxlKS50b0JlRmFsc3koKTtcbiAgICAgIC8vSGlzdG9yeSBsZW5ndGggc2hvdWxkIHJlbWFpbiB0aGUgc2FtZS5cbiAgICAgIGV4cGVjdChoaXN0b3J5Lmxlbmd0aCkudG9CZShjdXJIaXN0b3J5KTtcbiAgICAgIC8vTG9jYXRpb24gcGF0aG5hbWUgc2hvdWxkIGluaXRpYWxseSBiZSAnRGlmZmljdWx0eVNlbGVjdGlvbicuXG4gICAgICBleHBlY3QoaGlzdG9yeS5sb2NhdGlvbi5wYXRobmFtZSkudG9CZSgnL0RpZmZpY3VsdHlTZWxlY3Rpb24nKTtcbiAgICB9KVxuICB9KVxufSk7XG5cbiJdfQ==