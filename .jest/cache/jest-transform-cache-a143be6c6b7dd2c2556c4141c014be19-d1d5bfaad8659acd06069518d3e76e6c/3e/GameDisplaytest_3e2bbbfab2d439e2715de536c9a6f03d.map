{"version":3,"sources":["C:\\Users\\ashee\\Documents\\Javascript\\React\\React Native\\suduko\\src\\__tests__\\Component Tests\\GameDisplay.test.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Text,View } from 'react-native';\r\nimport renderWithRedux from './renderWithRedux';\r\nimport { createMemoryHistory, createLocation } from 'history';\r\nimport { match } from 'react-router';\r\nimport { act, cleanup, fireEvent, render, waitFor} from '@testing-library/react-native';\r\nimport renderer from 'react-test-renderer';\r\nimport {Colors,GameState} from '../../../types';\r\nimport {RootState} from '../../state/reducers/index';\r\n\r\nimport GameDisplay from '../../../components/GameDisplay';\r\n\r\n//Mock props for routing.\r\nconst history = createMemoryHistory();\r\nconst path = `/route/:id`;\r\nconst match: match<{ id: string }> = {\r\n    isExact: false,\r\n    path,\r\n    url: path.replace(':id', '1'),\r\n    params: { id: '1' }\r\n};\r\nconst location = createLocation(match.url);\r\n\r\n//Hard coded state properties.\r\nconst board: (number | null)[][] =[ \r\n  [ 3, 1, 6, 5, 7, 8, 4, 9, 2 ],\r\n  [ 5, 2, 9, 1, 3, 4, 7, 6, 8 ],\r\n  [ 4, 8, 7, 6, 2, 9, 5, 3, 1 ],\r\n  [ 2, 6, 3, 4, 1, 5, 9, 8, 7 ],\r\n  [ 9, 7, 4, 8, 6, null, 1, 2, 5 ],\r\n  [ 8, 5, 1, 7, 9, 2, 6, 4, 3 ],\r\n  [ 1, 3, 8, 9, 4, 7, 2, null, 6 ],\r\n  [ 6, 9, 2, 3, 5, 1, 8, 7, 4 ],\r\n  [ 7, 4, 5, 2, 8, 6, 3, 1, 9] \r\n];\r\n\r\nconst colors:Colors = {\r\n  1:['transparent','black'],\r\n  2:['transparent','black'],\r\n  3:['transparent','black'],\r\n  4:['transparent','black'],\r\n  5:['transparent','black'],\r\n  6:['transparent','black'],\r\n  7:['transparent','black'],\r\n  8:['transparent','black'],\r\n  9:['transparent','black'],\r\n  'Selection_1':'#3297FD',\r\n  'Selection_2':'transparent',\r\n  'Selection_3':'transparent',\r\n  'Selection_4':'transparent',\r\n  'Selection_5':'transparent',\r\n  'Selection_6':'transparent',\r\n  'Selection_7':'transparent',\r\n  'Selection_8':'transparent',\r\n  'Selection_9':'transparent',\r\n  'gradient': [ \r\n    \"#a37e5c\", \"#b89372\",\"#c8a484\",\"#dcb999\", \"#d3af8f\",\"#d9b696\",\"#ceaa89\",\"#d2ae8d\",\"#b38e6d\",\"#aa8563\",\r\n    \"#a37e5c\", \"#b89372\",\"#c8a484\",\"#dcb999\", \"#d3af8f\",\"#d9b696\",\"#ceaa89\",\"#d2ae8d\",\"#b38e6d\",\"#aa8563\",\r\n    \"#a37e5c\", \"#b89372\",\"#c8a484\",\"#dcb999\", \"#d3af8f\",\"#d9b696\",\"#ceaa89\",\"#d2ae8d\",\"#b38e6d\",\"#aa8563\",\r\n    \"#a37e5c\", \"#b89372\",\"#c8a484\",\"#dcb999\", \"#d3af8f\",\"#d9b696\",\"#ceaa89\",\"#d2ae8d\",\"#b38e6d\",\"#aa8563\",\r\n    \"#a37e5c\", \"#b89372\",\"#c8a484\",\"#dcb999\", \"#d3af8f\",\"#d9b696\",\"#ceaa89\",\"#d2ae8d\",\"#b38e6d\",\"#aa8563\"\r\n  ]\r\n}\r\n\r\n//GameDisplay component test.\r\ndescribe('GameDisplay',() =>{\r\n\r\n  //Mock store object for state management.\r\n    //Hard code properties that are initialized randomly for\r\n    //snapshot comparison.\r\n  const mockStore:RootState = {\r\n    'board':board,\r\n    'colors':colors\r\n  };\r\n\r\n  //Mock switch component.\r\n  jest.mock('react-native/Libraries/Components/Switch/Switch', () => {\r\n    const mockComponent = require('react-native/jest/mockComponent')\r\n    return mockComponent('react-native/Libraries/Components/Switch/Switch')\r\n  })\r\n\r\n  //Render GameDisplay component with routing and redux.\r\n  let gameDisplayComponent:any;\r\n  beforeEach(async() =>{\r\n    await waitFor(() =>{\r\n      gameDisplayComponent = renderWithRedux(\r\n        <GameDisplay\r\n          history={history}\r\n          location={location}\r\n          match={match}\r\n        />,\r\n        {\r\n          initialState:mockStore\r\n        }\r\n      );\r\n    })\r\n  })\r\n\r\n  //Cleanup after each test.\r\n  afterEach(cleanup);\r\n\r\n  //Component renders without crashing.\r\n  it('renders without crashing',async()=>{\r\n    expect(gameDisplayComponent.toJSON()).toMatchSnapshot();\r\n  })\r\n\r\n  //Test that board will allow for valid value entry to the board.\r\n  it(`should allow for a square with a null value to be updated with a valid value`, ()=>{\r\n    const {getByTestId,store,queryByTestId} = gameDisplayComponent;\r\n    const selectionSquare5 = getByTestId('selectionSquare_5');\r\n    const gridSquare67 = getByTestId('gridSquare_67');\r\n    //Select selection square for 5 value.\r\n    fireEvent.press(selectionSquare5);\r\n    //Input a 5 for the grid square at location row 6, column 7.\r\n    fireEvent.press(gridSquare67);\r\n    //Board should have updated with a 5 at location row 6, column 7.\r\n    expect(store.getState().board[6][7]).toBe(5);\r\n  })\r\n\r\n  //Test that board will not allow for invalid entry to the board.\r\n  it(`should not allow for an invalid entry to the board`, ()=>{\r\n    const {getByTestId,store,queryByTestId} = gameDisplayComponent;\r\n    const selectionSquare4 = getByTestId('selectionSquare_4');\r\n    const gridSquare67 = getByTestId('gridSquare_67');\r\n    //Select selection square for 4 value.\r\n    fireEvent.press(selectionSquare4);\r\n    //Input a 5 for the grid square at location row 6, column 7.\r\n    fireEvent.press(gridSquare67);\r\n    //Board should not have updated.\r\n    expect(store.getState().board[6][7]).toBe(null);\r\n  })\r\n\r\n  //Test that board will not allow for a square that already contains a value to be overridden with another value.\r\n  it(`should not allow for a square with an existing value to be overridden with another value`, ()=>{\r\n    const {getByTestId,store,queryByTestId} = gameDisplayComponent;\r\n    const selectionSquare6 = getByTestId('selectionSquare_6');\r\n    const gridSquare00 = getByTestId('gridSquare_00');\r\n    //Select selection square for 6 value.\r\n    fireEvent.press(selectionSquare6);\r\n    //Attempt to input a 6 for the grid square at location row 0, column 0.\r\n    fireEvent.press(gridSquare00);\r\n    //Value should remain the initial value of 3.\r\n    expect(store.getState().board[0][0]).toBe(3);\r\n  })\r\n\r\n  //Test that note entry works.\r\n  it(`should allow for note entry for squares that do not have an inputted value`, ()=>{\r\n    const {getByTestId,store} = gameDisplayComponent;\r\n    //Square with a null value.\r\n    const entryModeToggle = getByTestId('entryModeToggle');\r\n    const gridSquare67 = getByTestId('gridSquare_67');\r\n    //Change entry mode to 'Notes' by pressing the toggle switch.\r\n    fireEvent(entryModeToggle,'valueChange',false);\r\n    [1,2,3,5,6,7,8,9].forEach((num,index) =>{\r\n      let selection = getByTestId(`selectionSquare_${num}`);\r\n      //Press selection value.\r\n      fireEvent.press(selection);\r\n      //Press square with null value to enter note.\r\n      fireEvent.press(gridSquare67);\r\n      //Assert that note state value was updated.\r\n      expect(store.getState().notes['67'][index]).toBe(num);\r\n    })\r\n  })\r\n\r\n  //Test that a square will not allow for a repeated note entry.\r\n  it(`should not allow for a repeated note entry for a given square`, ()=>{\r\n    const {getByTestId,store} = gameDisplayComponent;\r\n    //Square with a null value.\r\n    const entryModeToggle = getByTestId('entryModeToggle');\r\n    const gridSquare67 = getByTestId('gridSquare_67');\r\n    const selection1 = getByTestId(`selectionSquare_1`);\r\n    //Change entry mode to 'Notes' by pressing the toggle switch.\r\n    fireEvent(entryModeToggle,'valueChange',false);\r\n    //Press selection value for '1'.\r\n    fireEvent.press(selection1);\r\n    //Press square with null value to enter note.\r\n    fireEvent.press(gridSquare67);\r\n    //Assert that length of note state for this square is 1.\r\n    expect(store.getState().notes['67'].length).toBe(1);\r\n    //Attempt to re-enter note in null square where note for '1' already exists.\r\n    fireEvent.press(gridSquare67);\r\n    //Assert that length of note state for this square is 1.\r\n    expect(store.getState().notes['67'].length).toBe(1);\r\n  })\r\n\r\n  //Test that a note cannot be entered in a square containing a valid value.\r\n  it(`should not allow for a note to be entered in a square already containing a valid value`, ()=>{\r\n    const {getByTestId,store} = gameDisplayComponent;\r\n    const entryModeToggle = getByTestId('entryModeToggle');\r\n    const gridSquare00 = getByTestId('gridSquare_00');\r\n    const selection2 = getByTestId(`selectionSquare_2`);\r\n    //Change entry mode to 'Notes' by pressing the toggle switch.\r\n    fireEvent(entryModeToggle,'valueChange',false);\r\n    //Press selection value for '2'.\r\n    fireEvent.press(selection2);\r\n    //Attempt to enter '2' note in a square with an existing value.\r\n    fireEvent.press(gridSquare00);\r\n    //Assert that a note was not inputted.\r\n    expect(store.getState().notes['00']).toBeFalsy();\r\n  })\r\n\r\n  //Test that nothing will happen if there is no selection value.\r\n  it(`should not change the board state if there is no selection value upon entry attempt`, ()=>{\r\n    const {getByTestId,store} = gameDisplayComponent;\r\n    const entryModeToggle = getByTestId('entryModeToggle');\r\n    const gridSquare00 = getByTestId('gridSquare_00');\r\n    const selection2 = getByTestId(`selectionSquare_2`);\r\n    //Change entry mode to 'Notes' by pressing the toggle switch.\r\n    fireEvent(entryModeToggle,'valueChange',false);\r\n    //Press selection value for '2'.\r\n    fireEvent.press(selection2);\r\n    //Attempt to enter '2' note in a square with an existing value.\r\n    fireEvent.press(gridSquare00);\r\n    //Assert that a note was not inputted.\r\n    expect(store.getState().notes['00']).toBeFalsy();\r\n  })\r\n\r\n  //If board is not complete, winner animation should not be rendered.\r\n  it(`should not render the Winner component if the board is not complete`, async ()=>{\r\n    //Simulate a value being inputted on the board.\r\n    const {getByTestId,store,queryByTestId} = gameDisplayComponent;\r\n    const selectionSquare5 = getByTestId('selectionSquare_5');\r\n    const gridSquare67 = getByTestId('gridSquare_67');\r\n    const winnerAnimation = queryByTestId('winnerAnimation');\r\n    //Select selection square for 5 value.\r\n    fireEvent.press(selectionSquare5);\r\n    //Input a 5 for the grid square at location row 6, column 7.\r\n    fireEvent.press(gridSquare67);\r\n    //Winner animation should not be found.\r\n    expect(winnerAnimation).toEqual(null);\r\n  })\r\n\r\n  //If board is complete, winner animation should be rendered.\r\n  it(`should render the Winner component if the board is complete`, async ()=>{\r\n    const {getByTestId,store,queryByTestId} = gameDisplayComponent;\r\n    const selectionSquare5 = getByTestId('selectionSquare_5');\r\n    const selectionSquare3 = getByTestId('selectionSquare_3');\r\n    const gridSquare67 = getByTestId('gridSquare_67');\r\n    const gridSquare45 = getByTestId('gridSquare_45');\r\n    //Select selection square for 5 value.\r\n    fireEvent.press(selectionSquare5);\r\n    //Input a 5 for the grid square at location row 6, column 7.\r\n    fireEvent.press(gridSquare67);\r\n    //Select selection square for 3 value.\r\n    fireEvent.press(selectionSquare3);\r\n    //Input a 3 for the grid square at location row 4, column 5.\r\n    fireEvent.press(gridSquare45);\r\n    //Winner animation should not be found.\r\n    await waitFor(()=>{\r\n      expect(queryByTestId('winnerAnimation')).toBeTruthy();\r\n    })\r\n  })\r\n\r\n  //If board is completed, pressing the screen should route to the main menu.\r\n  it(`should route to the main menu if the board is completed and the screen is, then, pressed`, async ()=>{\r\n    const {getByTestId,store} = gameDisplayComponent;\r\n    const selectionSquare5 = getByTestId('selectionSquare_5');\r\n    const selectionSquare3 = getByTestId('selectionSquare_3');\r\n    const gridSquare67 = getByTestId('gridSquare_67');\r\n    const gridSquare45 = getByTestId('gridSquare_45');\r\n    const curHistory = history.length;\r\n    //Select selection square for 5 value.\r\n    fireEvent.press(selectionSquare5);\r\n    //Input a 5 for the grid square at location row 6, column 7.\r\n    fireEvent.press(gridSquare67);\r\n    //Select selection square for 3 value.\r\n    fireEvent.press(selectionSquare3);\r\n    //Input a 3 for the grid square at location row 4, column 5.\r\n    fireEvent.press(gridSquare45);\r\n    //Winner animation should not be found.\r\n    await waitFor(()=>{\r\n      const winnerAnimationPressable = getByTestId('winnerAnimationPressable');\r\n      fireEvent.press(winnerAnimationPressable);\r\n      //History length should increase by 1.\r\n      expect(history.length).toBe(curHistory + 1);\r\n      //Location pathname should be '/'.\r\n      expect(history.location.pathname).toBe('/');\r\n    })\r\n  })\r\n\r\n  //Test that color highlighting by value works.\r\n  it(`should allow for color highlighting based on value`, async ()=>{\r\n    const {getByTestId, getAllByTestId, store} = gameDisplayComponent;\r\n    const gridSquare00 = getByTestId('gridSquare_00');\r\n    const gridSquareView3Arr = getAllByTestId('gridSquareView_3');\r\n    const gridSquareText3Arr = getAllByTestId('gridSquareText_3');\r\n    //Simulate pressing square at location row 0, column 0.\r\n      //Value is hard coded to be a 3.\r\n    fireEvent.press(gridSquare00);\r\n    await waitFor(()=>{\r\n      //Test that grid squares with values of 3 have been correctly highlighted.\r\n      expect(store.getState().colors['3'][0] === '#008000' && store.getState().colors['3'][1] === '#008000').toBeTruthy();\r\n      gridSquareView3Arr.map((comp:JSX.Element) => expect(comp.props.style.backgroundColor).toBe('#008000'))\r\n      gridSquareText3Arr.map((comp:JSX.Element) => expect(comp.props.style.color).toBe('#008000'))\r\n    })\r\n  })\r\n\r\n  //Test main menu button.\r\n  it(`should route to the main menu when the 'Main Menu' button is selected`,() =>{\r\n    const {getByTestId} = gameDisplayComponent;\r\n    const mainMenuButton = getByTestId('mainMenuButton');\r\n    const curHistory = history.length;\r\n    //Press 'Main Menu' button.\r\n    fireEvent.press(mainMenuButton);\r\n    //History length should increase by 1.\r\n    expect(history.length).toBe(curHistory + 1);\r\n    //Location pathname should be '/'.\r\n    expect(history.location.pathname).toBe('/');\r\n  })\r\n\r\n})"]}