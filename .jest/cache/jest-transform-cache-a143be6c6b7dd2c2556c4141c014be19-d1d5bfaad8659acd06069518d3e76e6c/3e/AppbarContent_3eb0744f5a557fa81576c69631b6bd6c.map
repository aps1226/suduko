{"version":3,"sources":["AppbarContent.tsx"],"names":["AppbarContent","color","titleColor","white","rest","fonts","subtitleColor","onPress","styles","Platform","subtitle","container","flex","paddingHorizontal","title","fontSize","AppbarContentWithTheme"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Platform,\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport color from 'color';\n\nimport Text from '../Typography/Text';\n\nimport { withTheme } from '../../core/theming';\nimport { white } from '../../styles/colors';\n\nimport type { $RemoveChildren } from '../../types';\n\ntype Props = $RemoveChildren<typeof View> & {\n  /**\n   * Custom color for the text.\n   */\n  color?: string;\n  /**\n   * Text for the title.\n   */\n  title: React.ReactNode;\n  /**\n   * Style for the title.\n   */\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * Reference for the title.\n   */\n  titleRef?: React.RefObject<Text>;\n  /**\n   * Text for the subtitle.\n   */\n  subtitle?: React.ReactNode;\n  /**\n   * Style for the subtitle.\n   */\n  subtitleStyle?: StyleProp<TextStyle>;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * A component used to display a title and optional subtitle in an appbar.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/appbar-content.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Appbar } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *     <Appbar.Header>\n *        <Appbar.Content title=\"Title\" subtitle={'Subtitle'} />\n *     </Appbar.Header>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst AppbarContent = ({\n  color: titleColor = white,\n  subtitle,\n  subtitleStyle,\n  onPress,\n  style,\n  titleRef,\n  titleStyle,\n  theme,\n  title,\n  ...rest\n}: Props) => {\n  const { fonts } = theme;\n\n  const subtitleColor = color(titleColor).alpha(0.7).rgb().string();\n\n  return (\n    <TouchableWithoutFeedback onPress={onPress} disabled={!onPress}>\n      <View style={[styles.container, style]} {...rest}>\n        <Text\n          ref={titleRef}\n          style={[\n            {\n              color: titleColor,\n              ...(Platform.OS === 'ios' ? fonts.regular : fonts.medium),\n            },\n            styles.title,\n            titleStyle,\n          ]}\n          numberOfLines={1}\n          accessible\n          accessibilityTraits=\"header\"\n          // @ts-expect-error React Native doesn't accept 'heading' as it's web-only\n          accessibilityRole={Platform.OS === 'web' ? 'heading' : 'header'}\n        >\n          {title}\n        </Text>\n        {subtitle ? (\n          <Text\n            style={[styles.subtitle, { color: subtitleColor }, subtitleStyle]}\n            numberOfLines={1}\n          >\n            {subtitle}\n          </Text>\n        ) : null}\n      </View>\n    </TouchableWithoutFeedback>\n  );\n};\n\nAppbarContent.displayName = 'Appbar.Content';\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingHorizontal: 12,\n  },\n  title: {\n    fontSize: Platform.OS === 'ios' ? 17 : 20,\n  },\n  subtitle: {\n    fontSize: Platform.OS === 'ios' ? 11 : 14,\n  },\n});\n\nexport default withTheme(AppbarContent);\n\n// @component-docs ignore-next-line\nconst AppbarContentWithTheme = withTheme(AppbarContent);\n// @component-docs ignore-next-line\nexport { AppbarContentWithTheme as AppbarContent };\n"]}