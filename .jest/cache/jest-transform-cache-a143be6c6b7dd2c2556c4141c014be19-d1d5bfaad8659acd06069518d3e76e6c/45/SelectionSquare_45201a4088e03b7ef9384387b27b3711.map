{"version":3,"sources":["C:\\Users\\ashee\\Documents\\Javascript\\React\\React Native\\suduko\\components\\SelectionSquare.tsx"],"names":[],"mappingssBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA,CAAA;;AACA,IAAA,YAAA;AAAA;AAAA,0BAAA,OAAA,CAAA,cAAA,CAAA,CAAA;;AACA,IAAA,WAAA;AAAA;AAAA,0BAAA,OAAA,CAAA,aAAA,CAAA,CAAA;;AACA,IAAA,MAAA;AAAA;AAAA,0BAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAA,cAAA;AAAA;AAAA,0BAAA,uBAAA,CAAA,OAAA,CAAA,oBAAA,CAAA,CAAA,CAAA;;AAEA,IAAA,eAAA;AAAA;AAAA,0BAAA,sBAAA,CAAA,OAAA,CAAA,kBAAA,CAAA,CAAA,CAAA;;AACA,IAAA,KAAA;AAAA;AAAA,2BAAA,OAAA,CAAA,gBAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKc,SAAA,eAAA,CAAA,KAAA,EAAsC;AAAA;AAAA;AAElD,MAAO,MAAP;AAAA;AAAA,6BAAiB,KAAjB,CAAA,MAAA,CAAA;;AAEA,MAAA,YAAA;AAAA;AAAA,6BAAqC,CAAA,GAAA,WAAA,CAAA,WAAA,EAAY,UAAA,KAAA,EAAA;AAAA;AAAA;AAAA;AAAA,WAAA,KAAA;AAAjD,GAAqC,CAArC,CAAA;AAAA,MAAO,SAAP;AAAA;AAAA,6BAAA,YAAA,CAAA,SAAA,CAAA;AAAA,MAAiB,MAAjB;AAAA;AAAA,6BAAA,YAAA,CAAA,MAAA,CAAA;AAAA,MAAwB,SAAxB;AAAA;AAAA,6BAAA,YAAA,CAAA,SAAA,CAAA;;AACA,MAAM,KAAK;AAAA;AAAA,6BAAU,MAAM,CAAA,eAA3B,MAA2B,CAAhB,CAAX;AACA,MAAM,QAAQ;AAAA;AAAA,6BAAG,CAAA,GAAA,WAAA,CAAjB,WAAiB,GAAH,CAAd;;AACA,MAAA,mBAAA;AAAA;AAAA,6BAAsC,CAAA,GAAA,MAAA,CAAA,kBAAA,EAAA,cAAA,EAAtC,QAAsC,CAAtC,CAAA;AAAA,MAAQ,YAAR;AAAA;AAAA,6BAAA,mBAAA,CAAA,YAAA,CAAA;AAAA,MAAsB,WAAtB;AAAA;AAAA,6BAAA,mBAAA,CAAA,WAAA,CAAA;;AAPkD;AAAA;;AASlD,MAAM,aAAa,GAAG,SAAhB,aAAgB,GAAU;AAAA;AAAA;AAAA;AAC9B,IAAA,YAAY,CAAZ,MAAY,CAAZ;;AAD8B;AAAA;AAE9B,IAAA,WAAW,CAAA,eAAX,MAAW,CAAX;AAFF,GAAA;;AAIA,MAAA,SAAA;AAAA;AAAA,6BAAmB,CAAA,GAAA,KAAA,CAAA,QAAA,EAAS;AAC1B,uBAAkB,OAAO,CADC,6CACD,CADC;AAE1B,iBAAY,OAAO,CAAA,uCAAA;AAFO,GAAT,CAAnB,CAAA;AAAA,MAAA,UAAA;AAAA;AAAA,6BAAA,CAAA,GAAA,eAAA,CAAA,OAAA,EAAA,SAAA,EAAA,CAAA,CAAA,CAAA;AAAA,MAAO,QAAP;AAAA;AAAA,6BAAA,UAAA,CAAA,CAAA,CAAA,CAAA;;AAbkD;AAAA;;AAkBlD,MAAG,CAAH,QAAA,EAAa;AAAA;AAAA;AAAA;AACX,WAAO,MAAA,CAAA,OAAA,CAAA,aAAA,CAAC,eAAA,CAAD,OAAA,EAAP,IAAO,CAAP;AADF,GAAA,MAEK;AAAA;AAAA;AACH,QAAI,UAAU;AAAA;AAAA,+BAAU,SAAS;AAAA;AAAA,kCAAA,WAAA;AAAA;AAAA,kCAAjC,iBAAiC,CAAnB,CAAd;AACA,QAAI,SAAS;AAAA;AAAA,+BAAU,SAAS;AAAA;AAAA,kCAAA,CAAA;AAAA;AAAA,kCAAhC,CAAgC,CAAnB,CAAb;;AAFG;AAAA;AAGH,WACE,MAAA,CAAA,OAAA,CAAA,aAAA,CAAC,YAAA,CAAD,IAAA,EAAK;AACH,MAAA,KAAK,EAAI;AAAC,QAAA,eAAe,EAAC;AAAjB;AADN,KAAL;AAGG;AAAA,kCAAA,KAAK,KAAL,aAAA;AAAA;AAAA,kCAA2B,CAA3B,KAAA;AAAA;AAAA,kCACC,MAAA,CAAA,OAAA,CAAA,aAAA,CAAC,YAAA,CAAD,eAAA,EAAgB;AACd,MAAA,MAAM,EAAI,OAAO,CADH,6BACG,CADH;AAEd,MAAA,KAAK,EAAI;AACP,QAAA,KAAK,EAAC;AADC;AAFK,KAAhB,EAME,MAAA,CAAA,OAAA,CAAA,aAAA,CAAC,YAAA,CAAD,kBAAA,EAAmB;AACjB,MAAA,OAAO,EAAI;AADM,KAAnB,EAGE,MAAA,CAAA,OAAA,CAAA,aAAA,CAAC,YAAA,CAAD,IAAA,EAAK;AAAC,MAAA,KAAK,EAAE,MAAM,CAAC;AAAf,KAAL,EACI,MAAA,CAAA,OAAA,CAAA,aAAA,CAAC,YAAA,CAAD,IAAA,EAAK;AACH,MAAA,KAAK,EAAI;AACP,QAAA,SAAS,EADF,SAAA;AAEP,QAAA,UAAU,EAAC;AAFJ;AADN,KAAL,EAXT,MAWS,CADJ,CAHF,CANF,CADD;AAAA;AAAA,kCAuBG,MAAA,CAAA,OAAA,CAAA,aAAA,CAAC,YAAA,CAAD,kBAAA,EAAmB;AACjB,MAAA,OAAO,EAAI;AADM,KAAnB,EAGE,MAAA,CAAA,OAAA,CAAA,aAAA,CAAC,YAAA,CAAD,IAAA,EAAK;AAAC,MAAA,KAAK,EAAE,MAAM,CAAC;AAAf,KAAL,EACI,MAAA,CAAA,OAAA,CAAA,aAAA,CAAC,YAAA,CAAD,IAAA,EAAK;AACH,MAAA,KAAK,EAAI;AACP,QAAA,SAAS,EADF,SAAA;AAEP,QAAA,UAAU,EAAC;AAFJ;AADN,KAAL,EA/Bd,MA+Bc,CADJ,CAHF,CAvBH,CAHH,CADF;AA4CD;AACF;;AAED,IAAM,MAAM;AAAA;AAAA,2BAAG,YAAA,CAAA,UAAA,CAAA,MAAA,CAAkB;AAC/B,EAAA,SAAS,EADsB,EAAA;AAG/B,EAAA,UAAU,EAAC;AACT,IAAA,WAAW,EADF,OAAA;AAET,IAAA,KAAK,EAFI,EAAA;AAGT,IAAA,MAAM,EAHG,EAAA;AAIT,IAAA,WAAW,EAJF,CAAA;AAKT,IAAA,eAAe,EALN,2BAAA;AAMT,IAAA,cAAc,EANL,2BAAA;AAOT,IAAA,gBAAgB,EAPP,qBAAA;AAQT,IAAA,iBAAiB,EARR,oBAAA;AAST,IAAA,UAAU,EAAC;AATF;AAHoB,CAAlB,CAAH,CAAZ","sourcesContent":["import React, {useEffect} from \"react\";\r\nimport { Alert, ImageBackground, StyleSheet, TouchableHighlight, Text, View } from \"react-native\";\r\nimport { useSelector, useDispatch } from \"react-redux\"; \r\nimport { bindActionCreators } from \"redux\";\r\nimport * as actionCreators from '../src/state/index';\r\n\r\nimport AppLoading from 'expo-app-loading';\r\nimport { useFonts } from '@use-expo/font';\r\n\r\nimport {IProps} from '../types';\r\nimport {RootState} from '../src/state/reducers/index';\r\n        \r\nexport default function SelectionSquare(props:IProps) {\r\n  \r\n  const {number} = props;\r\n\r\n  const {selection,colors,entryMode} = useSelector((state:RootState) => state);\r\n  const color:string = colors[`Selection_${number}`];\r\n  const dispatch = useDispatch();\r\n  const { setSelection, changeColor } = bindActionCreators(actionCreators,dispatch);\r\n\r\n  const handleOnPress = ():void =>{\r\n    setSelection(number);\r\n    changeColor(`Selection_${number}`);\r\n  }\r\n  const [isLoaded] = useFonts({\r\n    \"JustAnotherHand\":require(\"../assets/fonts/JustAnotherHand-Regular.ttf\"),\r\n    \"SpaceMono\":require(\"../assets/fonts/SpaceMono-Regular.ttf\")\r\n  })\r\n  \r\n  if(!isLoaded){\r\n    return(<AppLoading/>);\r\n  }else{\r\n    let fontFamily:string = entryMode ? \"SpaceMono\":\"JustAnotherHand\";\r\n    let marginTop:number = entryMode ? 0:5;\r\n    return (\r\n      <View\r\n        style = {{backgroundColor:color}}\r\n      >\r\n        {color === 'transparent' || !color ?\r\n          <ImageBackground\r\n            source = {require('../assets/images/square.jpg')}\r\n            style = {{\r\n              width:'100%',\r\n            }}\r\n          >\r\n            <TouchableHighlight\r\n              onPress = {handleOnPress}\r\n            >\r\n              <View style={styles.gridSquare}>\r\n                  <Text\r\n                    style = {{\r\n                      marginTop:marginTop,\r\n                      fontFamily:fontFamily\r\n                    }}\r\n                  >\r\n                    {number}\r\n                  </Text>\r\n              </View>\r\n            </TouchableHighlight>\r\n          </ImageBackground>\r\n          :\r\n            <TouchableHighlight\r\n              onPress = {handleOnPress}\r\n            >\r\n              <View style={styles.gridSquare}>\r\n                  <Text\r\n                    style = {{\r\n                      marginTop:marginTop,\r\n                      fontFamily:fontFamily\r\n                    }}\r\n                  >\r\n                    {number}\r\n                  </Text>\r\n              </View>\r\n            </TouchableHighlight>\r\n        }\r\n      </View>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n  },\r\n  gridSquare:{\r\n    borderStyle:'solid',\r\n    width: 35,\r\n    height: 35,\r\n    borderWidth: 5,\r\n    borderLeftColor: 'rgba(255, 255, 255, 0.20)',\r\n    borderTopColor: 'rgba(255, 255, 255, 0.33)',\r\n    borderRightColor: 'rgba(0, 0, 0, 0.15)',\r\n    borderBottomColor: 'rgba(0, 0, 0, 0.5)',\r\n    alignItems:'center'\r\n  }\r\n});"]}