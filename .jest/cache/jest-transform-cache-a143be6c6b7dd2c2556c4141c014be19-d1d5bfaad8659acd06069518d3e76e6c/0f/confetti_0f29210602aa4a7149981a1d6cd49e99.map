{"version":3,"sources":["confetti.js"],"names":["Confetti","width","height","isRounded","Math","round","props","containerTransform","transform","opacity","color","containerStyle","style","backgroundColor","styles","confetti","rounded","React","PureComponent","StyleSheet","create","position","left","bottom","borderRadius"],"mappings":";;;;;;;;;;;;;;;;;AAEA;;AACA;;AAEA;;;;;;;;;;IAmBMA,Q;;;;;;;;;;;;;;;UAEJC,K,GAAgB,wBAAY,CAAZ,EAAe,EAAf,C;UAChBC,M,GAAiB,wBAAY,CAAZ,EAAe,EAAf,C;UACjBC,S,GAAqBC,IAAI,CAACC,KAAL,CAAW,wBAAY,CAAZ,EAAe,CAAf,CAAX,MAAkC,C;;;;;;WAEvD,kBAAS;AACP,wBAA0D,KAAKC,KAA/D;AAAA,UAAQC,kBAAR,eAAQA,kBAAR;AAAA,UAA4BC,SAA5B,eAA4BA,SAA5B;AAAA,UAAuCC,OAAvC,eAAuCA,OAAvC;AAAA,UAAgDC,KAAhD,eAAgDA,KAAhD;AACA,UAAQT,KAAR,GAAqC,IAArC,CAAQA,KAAR;AAAA,UAAeC,MAAf,GAAqC,IAArC,CAAeA,MAAf;AAAA,UAAuBC,SAAvB,GAAqC,IAArC,CAAuBA,SAAvB;AACA,UAAMQ,cAAc,GAAG;AAAEH,QAAAA,SAAS,EAAED;AAAb,OAAvB;AACA,UAAMK,KAAK,GAAG;AAAEX,QAAAA,KAAK,EAALA,KAAF;AAASC,QAAAA,MAAM,EAANA,MAAT;AAAiBW,QAAAA,eAAe,EAAEH,KAAlC;AAAyCF,QAAAA,SAAS,EAATA,SAAzC;AAAoDC,QAAAA,OAAO,EAAPA;AAApD,OAAd;AAEA,aACE,oBAAC,qBAAD,CAAU,IAAV;AACE,QAAA,aAAa,EAAC,MADhB;AAEE,QAAA,8BAA8B,EAAE,IAFlC;AAGE,QAAA,KAAK,EAAE,CAACK,MAAM,CAACC,QAAR,EAAkBJ,cAAlB;AAHT,SAIE,oBAAC,qBAAD,CAAU,IAAV;AAAe,QAAA,KAAK,EAAE,CAACR,SAAS,IAAIW,MAAM,CAACE,OAArB,EAA8BJ,KAA9B;AAAtB,QAJF,CADF;AAQD;;;EApBoBK,KAAK,CAACC,a;;AAuB7B,IAAMJ,MAAM,GAAGK,wBAAWC,MAAX,CAAkB;AAC/BL,EAAAA,QAAQ,EAAE;AACRM,IAAAA,QAAQ,EAAE,UADF;AAERC,IAAAA,IAAI,EAAE,CAFE;AAGRC,IAAAA,MAAM,EAAE;AAHA,GADqB;AAM/BP,EAAAA,OAAO,EAAE;AACPQ,IAAAA,YAAY,EAAE;AADP;AANsB,CAAlB,CAAf;;eAWexB,Q","sourcesContent":["// @flow\n\nimport * as React from 'react';\nimport { StyleSheet, Animated } from 'react-native';\n\nimport { randomValue } from '../utils';\n\ntype Interpolations = Array<{\n  translateX?: Animated.Interpolation,\n  translateY?: Animated.Interpolation,\n  rotate?: Animated.Interpolation,\n  rotateX?: Animated.Interpolation,\n  rotateY?: Animated.Interpolation,\n  perspective?: number\n}>;\n\ntype Props = {|\n  containerTransform: Interpolations,\n  transform: Interpolations,\n  color: string,\n  opacity: Animated.Interpolation,\n  testID?: string\n|};\n\nclass Confetti extends React.PureComponent<Props> {\n  props: Props;\n  width: number = randomValue(8, 16);\n  height: number = randomValue(6, 12);\n  isRounded: boolean = Math.round(randomValue(0, 1)) === 1;\n\n  render() {\n    const { containerTransform, transform, opacity, color } = this.props;\n    const { width, height, isRounded } = this;\n    const containerStyle = { transform: containerTransform };\n    const style = { width, height, backgroundColor: color, transform, opacity};\n\n    return (\n      <Animated.View\n        pointerEvents=\"none\"\n        renderToHardwareTextureAndroid={true}\n        style={[styles.confetti, containerStyle]}>\n        <Animated.View style={[isRounded && styles.rounded, style]} />\n      </Animated.View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  confetti: {\n    position: 'absolute',\n    left: 0,\n    bottom: 0\n  },\n  rounded: {\n    borderRadius: 100\n  }\n});\n\nexport default Confetti;\n"]}