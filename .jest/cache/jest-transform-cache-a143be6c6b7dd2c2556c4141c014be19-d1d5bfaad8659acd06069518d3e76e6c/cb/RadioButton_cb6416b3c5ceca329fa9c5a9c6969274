feff3ee5d0d4e8df553c3e1315f5d3f7
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RadioButton = exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _RadioButtonAndroid = _interopRequireDefault(require("./RadioButtonAndroid"));

var _RadioButtonIOS = _interopRequireDefault(require("./RadioButtonIOS"));

var _theming = require("../../core/theming");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

var RadioButton = function RadioButton(props) {
  var Button = _reactNative.Platform.select({
    default: _RadioButtonAndroid.default,
    ios: _RadioButtonIOS.default
  });

  return React.createElement(Button, props);
};

var _default = (0, _theming.withTheme)(RadioButton);

exports.default = _default;
var RadioButtonWithTheme = (0, _theming.withTheme)(RadioButton);
exports.RadioButton = RadioButtonWithTheme;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlJhZGlvQnV0dG9uLnRzeCJdLCJuYW1lcyI6WyJSYWRpb0J1dHRvbiIsInByb3BzIiwiQnV0dG9uIiwiZGVmYXVsdCIsIlJhZGlvQnV0dG9uQW5kcm9pZCIsImlvcyIsIlJhZGlvQnV0dG9uSU9TIiwiUmFkaW9CdXR0b25XaXRoVGhlbWUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxJQUFBLEtBQUEsR0FBQSx1QkFBQSxDQUFBLE9BQUEsQ0FBQSxPQUFBLENBQUEsQ0FBQTs7QUFDQSxJQUFBLFlBQUEsR0FBQSxPQUFBLENBQUEsY0FBQSxDQUFBOztBQUNBLElBQUEsbUJBQUEsR0FBQSxzQkFBQSxDQUFBLE9BQUEsd0JBQUEsQ0FBQTs7QUFDQSxJQUFBLGVBQUEsR0FBQSxzQkFBQSxDQUFBLE9BQUEsb0JBQUEsQ0FBQTs7QUFDQSxJQUFBLFFBQUEsR0FBQSxPQUFBLHNCQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF1RkEsSUFBTUEsV0FBVyxHQUFJQyxTQUFmRCxXQUFlQyxDQUFBQSxLQUFELEVBQWtCO0FBQ3BDLE1BQU1DLE1BQU0sR0FBRyxZQUFBLENBQUEsUUFBQSxDQUFBLE1BQUEsQ0FBZ0I7QUFDN0JDLElBQUFBLE9BQU8sRUFBRUMsbUJBQUFBLENBRG9CLE9BQUE7QUFFN0JDLElBQUFBLEdBQUcsRUFBRUMsZUFBQUEsQ0FBQUE7QUFGd0IsR0FBaEIsQ0FBZjs7QUFLQSxTQUFPLEtBQUEsQ0FBQSxhQUFBLENBQUEsTUFBQSxFQUFQLEtBQU8sQ0FBUDtBQU5GLENBQUE7O2VBU2UsQ0FBQSxHQUFBLFFBQUEsQ0FBQSxTQUFBLEVBQUEsV0FBQSxDOzs7QUFHZixJQUFNQyxvQkFBb0IsR0FBRyxDQUFBLEdBQUEsUUFBQSxDQUFBLFNBQUEsRUFBN0IsV0FBNkIsQ0FBN0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBQbGF0Zm9ybSB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgUmFkaW9CdXR0b25BbmRyb2lkIGZyb20gJy4vUmFkaW9CdXR0b25BbmRyb2lkJztcbmltcG9ydCBSYWRpb0J1dHRvbklPUyBmcm9tICcuL1JhZGlvQnV0dG9uSU9TJztcbmltcG9ydCB7IHdpdGhUaGVtZSB9IGZyb20gJy4uLy4uL2NvcmUvdGhlbWluZyc7XG5cbmV4cG9ydCB0eXBlIFByb3BzID0ge1xuICAvKipcbiAgICogVmFsdWUgb2YgdGhlIHJhZGlvIGJ1dHRvblxuICAgKi9cbiAgdmFsdWU6IHN0cmluZztcbiAgLyoqXG4gICAqIFN0YXR1cyBvZiByYWRpbyBidXR0b24uXG4gICAqL1xuICBzdGF0dXM/OiAnY2hlY2tlZCcgfCAndW5jaGVja2VkJztcbiAgLyoqXG4gICAqIFdoZXRoZXIgcmFkaW8gaXMgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlZD86IGJvb2xlYW47XG4gIC8qKlxuICAgKiBGdW5jdGlvbiB0byBleGVjdXRlIG9uIHByZXNzLlxuICAgKi9cbiAgb25QcmVzcz86ICgpID0+IHZvaWQ7XG4gIC8qKlxuICAgKiBDdXN0b20gY29sb3IgZm9yIHVuY2hlY2tlZCByYWRpby5cbiAgICovXG4gIHVuY2hlY2tlZENvbG9yPzogc3RyaW5nO1xuICAvKipcbiAgICogQ3VzdG9tIGNvbG9yIGZvciByYWRpby5cbiAgICovXG4gIGNvbG9yPzogc3RyaW5nO1xuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqL1xuICB0aGVtZTogUmVhY3ROYXRpdmVQYXBlci5UaGVtZTtcbiAgLyoqXG4gICAqIHRlc3RJRCB0byBiZSB1c2VkIG9uIHRlc3RzLlxuICAgKi9cbiAgdGVzdElEPzogc3RyaW5nO1xufTtcblxuLyoqXG4gKiBSYWRpbyBidXR0b25zIGFsbG93IHRoZSBzZWxlY3Rpb24gYSBzaW5nbGUgb3B0aW9uIGZyb20gYSBzZXQuXG4gKlxuICogPGRpdiBjbGFzcz1cInNjcmVlbnNob3RzXCI+XG4gKiAgIDxmaWd1cmU+XG4gKiAgICAgPGltZyBzcmM9XCJzY3JlZW5zaG90cy9yYWRpby1lbmFibGVkLmFuZHJvaWQucG5nXCIgLz5cbiAqICAgICA8ZmlnY2FwdGlvbj5BbmRyb2lkIChlbmFibGVkKTwvZmlnY2FwdGlvbj5cbiAqICAgPC9maWd1cmU+XG4gKiAgIDxmaWd1cmU+XG4gKiAgICAgPGltZyBzcmM9XCJzY3JlZW5zaG90cy9yYWRpby1kaXNhYmxlZC5hbmRyb2lkLnBuZ1wiIC8+XG4gKiAgICAgPGZpZ2NhcHRpb24+QW5kcm9pZCAoZGlzYWJsZWQpPC9maWdjYXB0aW9uPlxuICogICA8L2ZpZ3VyZT5cbiAqICAgPGZpZ3VyZT5cbiAqICAgICA8aW1nIHNyYz1cInNjcmVlbnNob3RzL3JhZGlvLWVuYWJsZWQuaW9zLnBuZ1wiIC8+XG4gKiAgICAgPGZpZ2NhcHRpb24+aU9TIChlbmFibGVkKTwvZmlnY2FwdGlvbj5cbiAqICAgPC9maWd1cmU+XG4gKiAgIDxmaWd1cmU+XG4gKiAgICAgPGltZyBzcmM9XCJzY3JlZW5zaG90cy9yYWRpby1kaXNhYmxlZC5pb3MucG5nXCIgLz5cbiAqICAgICA8ZmlnY2FwdGlvbj5pT1MgKGRpc2FibGVkKTwvZmlnY2FwdGlvbj5cbiAqICAgPC9maWd1cmU+XG4gKiA8L2Rpdj5cbiAqXG4gKiAjIyBVc2FnZVxuICogYGBganNcbiAqIGltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbiAqIGltcG9ydCB7IFZpZXcgfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuICogaW1wb3J0IHsgUmFkaW9CdXR0b24gfSBmcm9tICdyZWFjdC1uYXRpdmUtcGFwZXInO1xuICpcbiAqIGNvbnN0IE15Q29tcG9uZW50ID0gKCkgPT4ge1xuICogICBjb25zdCBbY2hlY2tlZCwgc2V0Q2hlY2tlZF0gPSBSZWFjdC51c2VTdGF0ZSgnZmlyc3QnKTtcbiAqXG4gKiAgIHJldHVybiAoXG4gKiAgICAgPFZpZXc+XG4gKiAgICAgICA8UmFkaW9CdXR0b25cbiAqICAgICAgICAgdmFsdWU9XCJmaXJzdFwiXG4gKiAgICAgICAgIHN0YXR1cz17IGNoZWNrZWQgPT09ICdmaXJzdCcgPyAnY2hlY2tlZCcgOiAndW5jaGVja2VkJyB9XG4gKiAgICAgICAgIG9uUHJlc3M9eygpID0+IHNldENoZWNrZWQoJ2ZpcnN0Jyl9XG4gKiAgICAgICAvPlxuICogICAgICAgPFJhZGlvQnV0dG9uXG4gKiAgICAgICAgIHZhbHVlPVwic2Vjb25kXCJcbiAqICAgICAgICAgc3RhdHVzPXsgY2hlY2tlZCA9PT0gJ3NlY29uZCcgPyAnY2hlY2tlZCcgOiAndW5jaGVja2VkJyB9XG4gKiAgICAgICAgIG9uUHJlc3M9eygpID0+IHNldENoZWNrZWQoJ3NlY29uZCcpfVxuICogICAgICAgLz5cbiAqICAgICA8L1ZpZXc+XG4gKiAgICk7XG4gKiB9O1xuICpcbiAqIGV4cG9ydCBkZWZhdWx0IE15Q29tcG9uZW50O1xuICogYGBgXG4gKi9cbmNvbnN0IFJhZGlvQnV0dG9uID0gKHByb3BzOiBQcm9wcykgPT4ge1xuICBjb25zdCBCdXR0b24gPSBQbGF0Zm9ybS5zZWxlY3Qoe1xuICAgIGRlZmF1bHQ6IFJhZGlvQnV0dG9uQW5kcm9pZCxcbiAgICBpb3M6IFJhZGlvQnV0dG9uSU9TLFxuICB9KTtcblxuICByZXR1cm4gPEJ1dHRvbiB7Li4ucHJvcHN9IC8+O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgd2l0aFRoZW1lKFJhZGlvQnV0dG9uKTtcblxuLy8gQGNvbXBvbmVudC1kb2NzIGlnbm9yZS1uZXh0LWxpbmVcbmNvbnN0IFJhZGlvQnV0dG9uV2l0aFRoZW1lID0gd2l0aFRoZW1lKFJhZGlvQnV0dG9uKTtcbi8vIEBjb21wb25lbnQtZG9jcyBpZ25vcmUtbmV4dC1saW5lXG5leHBvcnQgeyBSYWRpb0J1dHRvbldpdGhUaGVtZSBhcyBSYWRpb0J1dHRvbiB9O1xuIl19