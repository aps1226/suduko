919207175668ada0dbc39e52e8536ac5
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty3 = _interopRequireDefault2(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault2(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault2(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault2(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault2(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault2(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault2(require("@babel/runtime/helpers/getPrototypeOf"));

var _excluded = ["disabled", "editable", "label", "error", "selectionColor", "underlineColor", "outlineColor", "dense", "style", "theme", "render", "multiline", "parentState", "innerRef", "onFocus", "forceFocus", "onBlur", "onChangeText", "onLayoutAnimatedText", "onLeftAffixLayoutChange", "onRightAffixLayoutChange", "left", "right", "placeholderTextColor"],
    _excluded2 = ["fontSize", "fontWeight", "height", "backgroundColor", "textAlign"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty3.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _color = _interopRequireDefault(require("color"));

var _TextInputAdornment = _interopRequireWildcard(require("./Adornment/TextInputAdornment"));

var _InputLabel = _interopRequireDefault(require("./Label/InputLabel"));

var _LabelBackground = _interopRequireDefault(require("./Label/LabelBackground"));

var _constants = require("./constants");

var _helpers = require("./helpers");

var _enums = require("./Adornment/enums");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var OUTLINE_MINIMIZED_LABEL_Y_OFFSET = -6;
var LABEL_PADDING_TOP = 8;
var MIN_HEIGHT = 64;
var MIN_DENSE_HEIGHT = 48;
var INPUT_PADDING_HORIZONTAL = 14;

var TextInputOutlined = function (_React$Component) {
  (0, _inherits2.default)(TextInputOutlined, _React$Component);

  var _super = _createSuper(TextInputOutlined);

  function TextInputOutlined() {
    (0, _classCallCheck2.default)(this, TextInputOutlined);
    return _super.apply(this, arguments);
  }

  (0, _createClass2.default)(TextInputOutlined, [{
    key: "render",
    value: function render() {
      var _affixTopPosition, _onAffixChange, _topPosition;

      var _this$props = this.props,
          disabled = _this$props.disabled,
          editable = _this$props.editable,
          label = _this$props.label,
          error = _this$props.error,
          selectionColor = _this$props.selectionColor,
          underlineColor = _this$props.underlineColor,
          customOutlineColor = _this$props.outlineColor,
          dense = _this$props.dense,
          style = _this$props.style,
          theme = _this$props.theme,
          render = _this$props.render,
          multiline = _this$props.multiline,
          parentState = _this$props.parentState,
          innerRef = _this$props.innerRef,
          onFocus = _this$props.onFocus,
          forceFocus = _this$props.forceFocus,
          onBlur = _this$props.onBlur,
          onChangeText = _this$props.onChangeText,
          onLayoutAnimatedText = _this$props.onLayoutAnimatedText,
          onLeftAffixLayoutChange = _this$props.onLeftAffixLayoutChange,
          onRightAffixLayoutChange = _this$props.onRightAffixLayoutChange,
          left = _this$props.left,
          right = _this$props.right,
          placeholderTextColor = _this$props.placeholderTextColor,
          rest = (0, _objectWithoutProperties2.default)(_this$props, _excluded);
      var adornmentConfig = (0, _TextInputAdornment.getAdornmentConfig)({
        left: left,
        right: right
      });
      var colors = theme.colors,
          fonts = theme.fonts;
      var font = fonts.regular;
      var hasActiveOutline = parentState.focused || error;

      var _ref = _reactNative.StyleSheet.flatten(style) || {},
          fontSizeStyle = _ref.fontSize,
          fontWeight = _ref.fontWeight,
          height = _ref.height,
          _ref$backgroundColor = _ref.backgroundColor,
          backgroundColor = _ref$backgroundColor === void 0 ? colors.background : _ref$backgroundColor,
          textAlign = _ref.textAlign,
          viewStyle = (0, _objectWithoutProperties2.default)(_ref, _excluded2);

      var fontSize = fontSizeStyle || _constants.MAXIMIZED_LABEL_FONT_SIZE;
      var inputTextColor, activeColor, outlineColor, placeholderColor, errorColor;

      if (disabled) {
        var isTransparent = (0, _color.default)(customOutlineColor).alpha() === 0;
        inputTextColor = activeColor = (0, _color.default)(colors.text).alpha(0.54).rgb().string();
        placeholderColor = colors.disabled;
        outlineColor = isTransparent ? customOutlineColor : colors.disabled;
      } else {
        inputTextColor = colors.text;
        activeColor = error ? colors.error : colors.primary;
        placeholderColor = colors.placeholder;
        outlineColor = customOutlineColor || colors.placeholder;
        errorColor = colors.error;
      }

      var labelScale = _constants.MINIMIZED_LABEL_FONT_SIZE / fontSize;
      var fontScale = _constants.MAXIMIZED_LABEL_FONT_SIZE / fontSize;
      var labelWidth = parentState.labelLayout.width;
      var labelHeight = parentState.labelLayout.height;
      var labelHalfWidth = labelWidth / 2;
      var labelHalfHeight = labelHeight / 2;
      var baseLabelTranslateX = (_reactNative.I18nManager.isRTL ? 1 : -1) * (labelHalfWidth - labelScale * labelWidth / 2 - (fontSize - _constants.MINIMIZED_LABEL_FONT_SIZE) * labelScale);
      var labelTranslationXOffset = 0;
      var isAdornmentLeftIcon = adornmentConfig.some(function (_ref2) {
        var side = _ref2.side,
            type = _ref2.type;
        return side === _enums.AdornmentSide.Left && type === _enums.AdornmentType.Icon;
      });

      if (isAdornmentLeftIcon) {
        labelTranslationXOffset = (_reactNative.I18nManager.isRTL ? -1 : 1) * (_constants.ADORNMENT_SIZE + _constants.ADORNMENT_OFFSET - 8);
      }

      var minInputHeight = (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT) - LABEL_PADDING_TOP;
      var inputHeight = (0, _helpers.calculateInputHeight)(labelHeight, height, minInputHeight);
      var topPosition = (0, _helpers.calculateLabelTopPosition)(labelHeight, inputHeight, LABEL_PADDING_TOP);

      if (height && typeof height !== 'number') {
        console.warn('Currently we support only numbers in height prop');
      }

      var paddingSettings = {
        height: height ? +height : null,
        labelHalfHeight: labelHalfHeight,
        offset: LABEL_PADDING_TOP,
        multiline: multiline ? multiline : null,
        dense: dense ? dense : null,
        topPosition: topPosition,
        fontSize: fontSize,
        label: label,
        scale: fontScale,
        isAndroid: _reactNative.Platform.OS === 'android',
        styles: _reactNative.StyleSheet.flatten(dense ? styles.inputOutlinedDense : styles.inputOutlined)
      };
      var pad = (0, _helpers.calculatePadding)(paddingSettings);
      var paddingOut = (0, _helpers.adjustPaddingOut)(_objectSpread(_objectSpread({}, paddingSettings), {}, {
        pad: pad
      }));
      var baseLabelTranslateY = -labelHalfHeight - (topPosition + OUTLINE_MINIMIZED_LABEL_Y_OFFSET);
      var placeholderOpacity = hasActiveOutline ? (0, _helpers.interpolatePlaceholder)(parentState.labeled, hasActiveOutline) : parentState.labelLayout.measured ? 1 : 0;
      var labelProps = {
        label: label,
        onLayoutAnimatedText: onLayoutAnimatedText,
        placeholderOpacity: placeholderOpacity,
        error: error,
        placeholderStyle: styles.placeholder,
        baseLabelTranslateY: baseLabelTranslateY,
        baseLabelTranslateX: baseLabelTranslateX,
        font: font,
        fontSize: fontSize,
        fontWeight: fontWeight,
        labelScale: labelScale,
        wiggleOffsetX: _constants.LABEL_WIGGLE_X_OFFSET,
        topPosition: topPosition,
        hasActiveOutline: hasActiveOutline,
        activeColor: activeColor,
        placeholderColor: placeholderColor,
        backgroundColor: backgroundColor,
        errorColor: errorColor,
        labelTranslationXOffset: labelTranslationXOffset
      };
      var minHeight = height || (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT);
      var leftLayout = parentState.leftLayout,
          rightLayout = parentState.rightLayout;
      var leftAffixTopPosition = (0, _helpers.calculateOutlinedIconAndAffixTopPosition)({
        height: minHeight,
        affixHeight: leftLayout.height || 0,
        labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET
      });
      var rightAffixTopPosition = (0, _helpers.calculateOutlinedIconAndAffixTopPosition)({
        height: minHeight,
        affixHeight: rightLayout.height || 0,
        labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET
      });
      var iconTopPosition = (0, _helpers.calculateOutlinedIconAndAffixTopPosition)({
        height: minHeight,
        affixHeight: _constants.ADORNMENT_SIZE,
        labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET
      });
      var rightAffixWidth = right ? rightLayout.width || _constants.ADORNMENT_SIZE : _constants.ADORNMENT_SIZE;
      var leftAffixWidth = left ? leftLayout.width || _constants.ADORNMENT_SIZE : _constants.ADORNMENT_SIZE;
      var adornmentStyleAdjustmentForNativeInput = (0, _TextInputAdornment.getAdornmentStyleAdjustmentForNativeInput)({
        adornmentConfig: adornmentConfig,
        rightAffixWidth: rightAffixWidth,
        leftAffixWidth: leftAffixWidth,
        mode: 'outlined'
      });
      var affixTopPosition = (_affixTopPosition = {}, (0, _defineProperty3.default)(_affixTopPosition, _enums.AdornmentSide.Left, leftAffixTopPosition), (0, _defineProperty3.default)(_affixTopPosition, _enums.AdornmentSide.Right, rightAffixTopPosition), _affixTopPosition);
      var onAffixChange = (_onAffixChange = {}, (0, _defineProperty3.default)(_onAffixChange, _enums.AdornmentSide.Left, onLeftAffixLayoutChange), (0, _defineProperty3.default)(_onAffixChange, _enums.AdornmentSide.Right, onRightAffixLayoutChange), _onAffixChange);
      var adornmentProps = {
        adornmentConfig: adornmentConfig,
        forceFocus: forceFocus,
        topPosition: (_topPosition = {}, (0, _defineProperty3.default)(_topPosition, _enums.AdornmentType.Icon, iconTopPosition), (0, _defineProperty3.default)(_topPosition, _enums.AdornmentType.Affix, affixTopPosition), _topPosition),
        onAffixChange: onAffixChange,
        isTextInputFocused: parentState.focused
      };

      if (adornmentConfig.length) {
        adornmentProps = _objectSpread(_objectSpread({}, adornmentProps), {}, {
          left: left,
          right: right,
          textStyle: _objectSpread(_objectSpread({}, font), {}, {
            fontSize: fontSize,
            fontWeight: fontWeight
          }),
          visible: this.props.parentState.labeled
        });
      }

      return React.createElement(_reactNative.View, {
        style: viewStyle
      }, React.createElement(_reactNative.View, null, React.createElement(Outline, {
        theme: theme,
        hasActiveOutline: hasActiveOutline,
        activeColor: activeColor,
        outlineColor: outlineColor,
        backgroundColor: backgroundColor
      }), React.createElement(_reactNative.View, {
        style: [styles.labelContainer, {
          paddingTop: LABEL_PADDING_TOP,
          minHeight: minHeight
        }]
      }, React.createElement(_InputLabel.default, {
        parentState: parentState,
        labelProps: labelProps,
        labelBackground: _LabelBackground.default
      }), render === null || render === void 0 ? void 0 : render(_objectSpread(_objectSpread({}, rest), {}, {
        ref: innerRef,
        onChangeText: onChangeText,
        placeholder: label ? parentState.placeholder : this.props.placeholder,
        placeholderTextColor: placeholderTextColor || placeholderColor,
        editable: !disabled && editable,
        selectionColor: typeof selectionColor === 'undefined' ? activeColor : selectionColor,
        onFocus: onFocus,
        onBlur: onBlur,
        underlineColorAndroid: 'transparent',
        multiline: multiline,
        style: [styles.input, !multiline || multiline && height ? {
          height: inputHeight
        } : {}, paddingOut, _objectSpread(_objectSpread({}, font), {}, {
          fontSize: fontSize,
          fontWeight: fontWeight,
          color: inputTextColor,
          textAlignVertical: multiline ? 'top' : 'center',
          textAlign: textAlign ? textAlign : _reactNative.I18nManager.isRTL ? 'right' : 'left'
        }), _reactNative.Platform.OS === 'web' && {
          outline: 'none'
        }, adornmentStyleAdjustmentForNativeInput]
      }))), React.createElement(_TextInputAdornment.default, adornmentProps)));
    }
  }]);
  return TextInputOutlined;
}(React.Component);

_defineProperty(TextInputOutlined, "defaultProps", {
  disabled: false,
  error: false,
  multiline: false,
  editable: true,
  render: function render(props) {
    return React.createElement(_reactNative.TextInput, props);
  }
});

var _default = TextInputOutlined;
exports.default = _default;

var Outline = function Outline(_ref3) {
  var theme = _ref3.theme,
      hasActiveOutline = _ref3.hasActiveOutline,
      activeColor = _ref3.activeColor,
      outlineColor = _ref3.outlineColor,
      backgroundColor = _ref3.backgroundColor;
  return React.createElement(_reactNative.View, {
    pointerEvents: "none",
    style: [styles.outline, {
      backgroundColor: backgroundColor,
      borderRadius: theme.roundness,
      borderWidth: hasActiveOutline ? 2 : 1,
      borderColor: hasActiveOutline ? activeColor : outlineColor
    }]
  });
};

var styles = _reactNative.StyleSheet.create({
  placeholder: {
    position: 'absolute',
    left: 0,
    paddingHorizontal: INPUT_PADDING_HORIZONTAL
  },
  outline: {
    position: 'absolute',
    left: 0,
    right: 0,
    top: 6,
    bottom: 0
  },
  labelContainer: {
    paddingBottom: 0
  },
  input: {
    flexGrow: 1,
    paddingHorizontal: INPUT_PADDING_HORIZONTAL,
    margin: 0,
    zIndex: 1
  },
  inputOutlined: {
    paddingTop: 8,
    paddingBottom: 8
  },
  inputOutlinedDense: {
    paddingTop: 4,
    paddingBottom: 4
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,