1ee20b2cd76ea455e7b88a76b2480226
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault2(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault2(require("@babel/runtime/helpers/objectWithoutProperties"));

var _excluded = ["clearAccessibilityLabel", "clearIcon", "icon", "iconColor", "inputStyle", "onIconPress", "placeholder", "searchAccessibilityLabel", "style", "theme", "value"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _color = _interopRequireDefault(require("color"));

var _IconButton = _interopRequireDefault(require("./IconButton"));

var _Surface = _interopRequireDefault(require("./Surface"));

var _theming = require("../core/theming");

var _MaterialCommunityIcon = _interopRequireDefault(require("./MaterialCommunityIcon"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var Searchbar = React.forwardRef(function (_ref, ref) {
  var _ref$clearAccessibili = _ref.clearAccessibilityLabel,
      clearAccessibilityLabel = _ref$clearAccessibili === void 0 ? 'clear' : _ref$clearAccessibili,
      clearIcon = _ref.clearIcon,
      icon = _ref.icon,
      customIconColor = _ref.iconColor,
      inputStyle = _ref.inputStyle,
      onIconPress = _ref.onIconPress,
      placeholder = _ref.placeholder,
      _ref$searchAccessibil = _ref.searchAccessibilityLabel,
      searchAccessibilityLabel = _ref$searchAccessibil === void 0 ? 'search' : _ref$searchAccessibil,
      style = _ref.style,
      theme = _ref.theme,
      value = _ref.value,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var root = React.useRef(null);
  React.useImperativeHandle(ref, function () {
    var input = root.current;

    if (input) {
      return {
        focus: function focus() {
          return input.focus();
        },
        clear: function clear() {
          return input.clear();
        },
        setNativeProps: function setNativeProps(args) {
          return input.setNativeProps(args);
        },
        isFocused: function isFocused() {
          return input.isFocused();
        },
        blur: function blur() {
          return input.blur();
        }
      };
    }

    var noop = function noop() {
      throw new Error('TextInput is not available');
    };

    return {
      focus: noop,
      clear: noop,
      setNativeProps: noop,
      isFocused: noop,
      blur: noop
    };
  });

  var handleClearPress = function handleClearPress() {
    var _root$current, _rest$onChangeText;

    (_root$current = root.current) === null || _root$current === void 0 ? void 0 : _root$current.clear();
    (_rest$onChangeText = rest.onChangeText) === null || _rest$onChangeText === void 0 ? void 0 : _rest$onChangeText.call(rest, '');
  };

  var colors = theme.colors,
      roundness = theme.roundness,
      dark = theme.dark,
      fonts = theme.fonts;
  var textColor = colors.text;
  var font = fonts.regular;
  var iconColor = customIconColor || (dark ? textColor : (0, _color.default)(textColor).alpha(0.54).rgb().string());
  var rippleColor = (0, _color.default)(textColor).alpha(0.32).rgb().string();
  return React.createElement(_Surface.default, {
    style: [{
      borderRadius: roundness,
      elevation: 4
    }, styles.container, style]
  }, React.createElement(_IconButton.default, {
    accessibilityTraits: "button",
    accessibilityComponentType: "button",
    accessibilityRole: "button",
    borderless: true,
    rippleColor: rippleColor,
    onPress: onIconPress,
    color: iconColor,
    icon: icon || function (_ref2) {
      var size = _ref2.size,
          color = _ref2.color;
      return React.createElement(_MaterialCommunityIcon.default, {
        name: "magnify",
        color: color,
        size: size,
        direction: _reactNative.I18nManager.isRTL ? 'rtl' : 'ltr'
      });
    },
    accessibilityLabel: searchAccessibilityLabel
  }), React.createElement(_reactNative.TextInput, _extends({
    style: [styles.input, _objectSpread({
      color: textColor
    }, font), inputStyle],
    placeholder: placeholder || '',
    placeholderTextColor: colors.placeholder,
    selectionColor: colors.primary,
    underlineColorAndroid: "transparent",
    returnKeyType: "search",
    keyboardAppearance: dark ? 'dark' : 'light',
    accessibilityTraits: "search",
    accessibilityRole: "search",
    ref: root,
    value: value
  }, rest)), React.createElement(_IconButton.default, {
    borderless: true,
    disabled: !value,
    accessibilityLabel: clearAccessibilityLabel,
    color: value ? iconColor : 'rgba(255, 255, 255, 0)',
    rippleColor: rippleColor,
    onPress: handleClearPress,
    icon: clearIcon || function (_ref3) {
      var size = _ref3.size,
          color = _ref3.color;
      return React.createElement(_MaterialCommunityIcon.default, {
        name: "close",
        color: color,
        size: size,
        direction: _reactNative.I18nManager.isRTL ? 'rtl' : 'ltr'
      });
    },
    accessibilityTraits: "button",
    accessibilityComponentType: "button",
    accessibilityRole: "button"
  }));
});

var styles = _reactNative.StyleSheet.create({
  container: {
    flexDirection: 'row',
    alignItems: 'center'
  },
  input: {
    flex: 1,
    fontSize: 18,
    paddingLeft: 8,
    alignSelf: 'stretch',
    textAlign: _reactNative.I18nManager.isRTL ? 'right' : 'left',
    minWidth: 0
  }
});

var _default = (0, _theming.withTheme)(Searchbar);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,