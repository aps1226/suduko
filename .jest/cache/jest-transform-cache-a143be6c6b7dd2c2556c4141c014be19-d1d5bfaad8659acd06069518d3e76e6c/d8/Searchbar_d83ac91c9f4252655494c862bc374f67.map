{"version":3,"sources":["Searchbar.tsx"],"names":["Searchbar","clearAccessibilityLabel","iconColor","searchAccessibilityLabel","rest","root","React","input","focus","clear","setNativeProps","args","isFocused","blur","noop","handleClearPress","fonts","textColor","colors","font","customIconColor","dark","rippleColor","borderRadius","elevation","styles","icon","color","I18nManager","placeholder","value","clearIcon","container","flexDirection","alignItems","flex","fontSize","paddingLeft","alignSelf","textAlign","minWidth"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  StyleProp,\n  TextInput,\n  I18nManager,\n  TextInputProps,\n  ViewStyle,\n  TextStyle,\n} from 'react-native';\n\nimport color from 'color';\nimport IconButton from './IconButton';\nimport Surface from './Surface';\nimport { withTheme } from '../core/theming';\nimport type { IconSource } from './Icon';\nimport MaterialCommunityIcon from './MaterialCommunityIcon';\n\ntype Props = React.ComponentPropsWithRef<typeof TextInput> & {\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  clearAccessibilityLabel?: string;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  searchAccessibilityLabel?: string;\n  /**\n   * Hint text shown when the input is empty.\n   */\n  placeholder?: string;\n  /**\n   * The value of the text input.\n   */\n  value: string;\n  /**\n   * Icon name for the left icon button (see `onIconPress`).\n   */\n  icon?: IconSource;\n  /**\n   * Callback that is called when the text input's text changes.\n   */\n  onChangeText?: (query: string) => void;\n  /**\n   * Callback to execute if we want the left icon to act as button.\n   */\n  onIconPress?: () => void;\n  /**\n   * Set style of the TextInput component inside the searchbar\n   */\n  inputStyle?: StyleProp<TextStyle>;\n  style?: StyleProp<ViewStyle>;\n\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Custom color for icon, default will be derived from theme\n   */\n  iconColor?: string;\n  /**\n   * Custom icon for clear button, default will be icon close\n   */\n  clearIcon?: IconSource;\n};\n\ntype TextInputHandles = Pick<\n  TextInput,\n  'setNativeProps' | 'isFocused' | 'clear' | 'blur' | 'focus'\n>;\n\n/**\n * Searchbar is a simple input box where users can type search queries.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/searchbar.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Searchbar } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [searchQuery, setSearchQuery] = React.useState('');\n *\n *   const onChangeSearch = query => setSearchQuery(query);\n *\n *   return (\n *     <Searchbar\n *       placeholder=\"Search\"\n *       onChangeText={onChangeSearch}\n *       value={searchQuery}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n\n * ```\n */\nconst Searchbar = React.forwardRef<TextInputHandles, Props>(\n  (\n    {\n      clearAccessibilityLabel = 'clear',\n      clearIcon,\n      icon,\n      iconColor: customIconColor,\n      inputStyle,\n      onIconPress,\n      placeholder,\n      searchAccessibilityLabel = 'search',\n      style,\n      theme,\n      value,\n      ...rest\n    }: Props,\n    ref\n  ) => {\n    const root = React.useRef<TextInput>(null);\n\n    React.useImperativeHandle(ref, () => {\n      const input = root.current;\n\n      if (input) {\n        return {\n          focus: () => input.focus(),\n          clear: () => input.clear(),\n          setNativeProps: (args: TextInputProps) => input.setNativeProps(args),\n          isFocused: () => input.isFocused(),\n          blur: () => input.blur(),\n        };\n      }\n\n      const noop = () => {\n        throw new Error('TextInput is not available');\n      };\n\n      return {\n        focus: noop,\n        clear: noop,\n        setNativeProps: noop,\n        isFocused: noop,\n        blur: noop,\n      };\n    });\n\n    const handleClearPress = () => {\n      root.current?.clear();\n      rest.onChangeText?.('');\n    };\n\n    const { colors, roundness, dark, fonts } = theme;\n    const textColor = colors.text;\n    const font = fonts.regular;\n    const iconColor =\n      customIconColor ||\n      (dark ? textColor : color(textColor).alpha(0.54).rgb().string());\n    const rippleColor = color(textColor).alpha(0.32).rgb().string();\n\n    return (\n      <Surface\n        style={[\n          { borderRadius: roundness, elevation: 4 },\n          styles.container,\n          style,\n        ]}\n      >\n        <IconButton\n          // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n          accessibilityTraits=\"button\"\n          accessibilityComponentType=\"button\"\n          accessibilityRole=\"button\"\n          borderless\n          rippleColor={rippleColor}\n          onPress={onIconPress}\n          color={iconColor}\n          icon={\n            icon ||\n            (({ size, color }) => (\n              <MaterialCommunityIcon\n                name=\"magnify\"\n                color={color}\n                size={size}\n                direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n              />\n            ))\n          }\n          accessibilityLabel={searchAccessibilityLabel}\n        />\n        <TextInput\n          style={[styles.input, { color: textColor, ...font }, inputStyle]}\n          placeholder={placeholder || ''}\n          placeholderTextColor={colors.placeholder}\n          selectionColor={colors.primary}\n          underlineColorAndroid=\"transparent\"\n          returnKeyType=\"search\"\n          keyboardAppearance={dark ? 'dark' : 'light'}\n          // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n          accessibilityTraits=\"search\"\n          accessibilityRole=\"search\"\n          ref={root}\n          value={value}\n          {...rest}\n        />\n        <IconButton\n          borderless\n          disabled={!value}\n          accessibilityLabel={clearAccessibilityLabel}\n          color={value ? iconColor : 'rgba(255, 255, 255, 0)'}\n          rippleColor={rippleColor}\n          onPress={handleClearPress}\n          icon={\n            clearIcon ||\n            (({ size, color }) => (\n              <MaterialCommunityIcon\n                name=\"close\"\n                color={color}\n                size={size}\n                direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n              />\n            ))\n          }\n          // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n          accessibilityTraits=\"button\"\n          accessibilityComponentType=\"button\"\n          accessibilityRole=\"button\"\n        />\n      </Surface>\n    );\n  }\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  input: {\n    flex: 1,\n    fontSize: 18,\n    paddingLeft: 8,\n    alignSelf: 'stretch',\n    textAlign: I18nManager.isRTL ? 'right' : 'left',\n    minWidth: 0,\n  },\n});\n\nexport default withTheme(Searchbar);\n"]}