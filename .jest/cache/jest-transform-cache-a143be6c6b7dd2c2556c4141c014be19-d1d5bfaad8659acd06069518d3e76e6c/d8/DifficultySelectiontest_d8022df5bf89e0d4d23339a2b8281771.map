{"version":3,"sources":["C:\\Users\\ashee\\Documents\\Javascript\\React\\React Native\\suduko\\src\\__tests__\\Component Tests\\DifficultySelection.test.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Text,View } from 'react-native';\r\nimport renderWithRedux from './renderWithRedux';\r\nimport { createMemoryHistory, createLocation } from 'history';\r\nimport { match } from 'react-router';\r\nimport { act, cleanup, fireEvent, render, waitFor} from '@testing-library/react-native';\r\nimport renderer from 'react-test-renderer';\r\nimport {GameState} from '../../../types';\r\nimport {RootState} from '../../state/reducers/index';\r\n\r\nimport DifficultySelection from '../../../components/DifficultySelection';\r\n\r\n//Mock props for routing.\r\nconst history = createMemoryHistory();\r\nconst path = `/route/:id`;\r\nconst match: match<{ id: string }> = {\r\n    isExact: false,\r\n    path,\r\n    url: path.replace(':id', '1'),\r\n    params: { id: '1' }\r\n};\r\nconst location = createLocation(match.url);\r\n\r\n//GameDisplay component test.\r\ndescribe('DifficultySelection',() =>{\r\n\r\n  //Mock store object for state management.\r\n  const mockStore:RootState = {};\r\n\r\n  //Render DifficultySelection component with routing and redux.\r\n  let difficultySelection:any;\r\n  beforeEach(async() =>{\r\n    await waitFor(() =>{\r\n      difficultySelection = renderWithRedux(\r\n        <DifficultySelection\r\n          history={history}\r\n          location={location}\r\n          match={match}\r\n        />,\r\n        {\r\n          initialState:mockStore\r\n        }\r\n      );\r\n    })\r\n  })\r\n\r\n  //Cleanup after each test.\r\n  afterEach(cleanup);\r\n\r\n  //Component renders without crashing.\r\n  it('renders without crashing',async()=>{\r\n    expect(difficultySelection.toJSON()).toMatchSnapshot();\r\n  })\r\n\r\n  //Test easy selection.\r\n  it(`correctly initializes board when the easy button is selected`, async ()=>{\r\n    const {getByTestId, store} = difficultySelection;\r\n    const easyButton = getByTestId('easyButton');\r\n    const curHistory = history.length;\r\n    //Press easy button\r\n    fireEvent.press(easyButton);\r\n    await waitFor(()=>{\r\n      //History length should increase by 1.\r\n      expect(history.length).toBe(curHistory + 1);\r\n      //Location pathname should be 'GameDisplay'.\r\n      expect(history.location.pathname).toBe('/GameDisplay');\r\n      //Determine the amount of non-null values on the initialized board.\r\n      const boardState:(number | null)[][] = store.getState().board;\r\n      let valueCount:number = 0;\r\n      boardState.forEach((arr) =>{\r\n        arr.forEach((num)=>{\r\n          if(num !== null) valueCount += 1;\r\n        })\r\n      })\r\n      console.log('easy:',valueCount)\r\n      //Board should be initialized with (37,46) non-null values.\r\n      expect(valueCount >= 37 && valueCount <= 46).toBeTruthy();\r\n    })\r\n  })\r\n\r\n  //Test medium selection.\r\n  it(`correctly initializes board when the medium button is selected`, async ()=>{\r\n    const {getByTestId, store} = difficultySelection;\r\n    const mediumButton = getByTestId('mediumButton');\r\n    const curHistory = history.length;\r\n    //Press easy button\r\n    fireEvent.press(mediumButton);\r\n    await waitFor(()=>{\r\n      //History length should increase by 1.\r\n      expect(history.length).toBe(curHistory + 1);\r\n      //Location pathname should be 'GameDisplay'.\r\n      expect(history.location.pathname).toBe('/GameDisplay');\r\n      //Determine the amount of non-null values on the initialized board.\r\n      const boardState:(number | null)[][] = store.getState().board;\r\n      let valueCount:number = 0;\r\n      boardState.forEach((arr) =>{\r\n        arr.forEach((num)=>{\r\n          if(num !== null) valueCount += 1;\r\n        })\r\n      })\r\n      console.log('medium:',valueCount)\r\n      //Board should be initialized with (27,36) non-null values.\r\n      expect(valueCount >= 27 && valueCount <= 36).toBeTruthy();\r\n    })\r\n  })\r\n})"]}