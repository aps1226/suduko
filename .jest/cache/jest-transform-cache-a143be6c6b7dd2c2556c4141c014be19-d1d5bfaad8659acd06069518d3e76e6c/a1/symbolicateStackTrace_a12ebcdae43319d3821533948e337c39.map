{"version":3,"sources":["symbolicateStackTrace.js"],"names":["getDevServer","require","fetch","isSourcedFromDisk","sourcePath","test","symbolicateStackTrace","stack","global","devServer","bundleLoadedFromServer","Error","stackCopy","NativeSourceCode","getConstants","scriptURL","foundInternalSource","map","frame","file","url","method","body","JSON","stringify","response","json","module","exports"],"mappings":"AAUA;;;;;;;;AAIA;;;;;;AAFA,IAAMA,YAAY,GAAGC,OAAO,kBAA5B;;AAKA,IAAIC,KAAJ;;AAmBA,SAASC,iBAAT,CAA2BC,UAA3B,EAAwD;AACtD,SAAO,CAAC,QAAQC,IAAR,CAAaD,UAAb,CAAD,IAA6B,QAAQC,IAAR,CAAaD,UAAb,CAApC;AACD;;AAED,SAAeE,qBAAf,CACEC,KADF;AAAA;;AAAA;AAAA;AAAA;AAAA;AAcE,cAAI,CAACL,KAAL,EAAY;AACVA,YAAAA,KAAK,GAAGM,MAAM,CAACN,KAAP,IAAgBD,OAAO,uBAAP,CAA+BC,KAAvD;AACD;;AAEKO,UAAAA,SAlBR,GAkBoBT,YAAY,EAlBhC;;AAAA,cAmBOS,SAAS,CAACC,sBAnBjB;AAAA;AAAA;AAAA;;AAAA,gBAoBU,IAAIC,KAAJ,CAAU,yCAAV,CApBV;;AAAA;AAuBMC,UAAAA,SAvBN,GAuBkBL,KAvBlB;AAAA,kCAyBsBM,0BAAiBC,YAAjB,EAzBtB,EAyBSC,SAzBT,yBAyBSA,SAzBT;;AA0BE,cAAIA,SAAJ,EAAe;AACTC,YAAAA,mBADS,GACsB,KADtB;AAEbJ,YAAAA,SAAS,GAAGL,KAAK,CAACU,GAAN,CAAU,UAACC,KAAD,EAAuB;AAC3C,kBAAIA,KAAK,CAACC,IAAN,IAAc,IAAlB,EAAwB;AACtB,uBAAOD,KAAP;AACD;;AAMD,kBAAI,CAACF,mBAAD,IAAwBb,iBAAiB,CAACe,KAAK,CAACC,IAAP,CAA7C,EAA2D;AAEzD,uDAAWD,KAAX;AAAkBC,kBAAAA,IAAI,EAAEJ;AAAxB;AACD;;AAEDC,cAAAA,mBAAmB,GAAG,IAAtB;AACA,qBAAOE,KAAP;AACD,aAhBW,CAAZ;AAiBD;;AA7CH;AAAA,4CA+CyBhB,KAAK,CAACO,SAAS,CAACW,GAAV,GAAgB,aAAjB,EAAgC;AAC1DC,YAAAA,MAAM,EAAE,MADkD;AAE1DC,YAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAACjB,cAAAA,KAAK,EAAEK;AAAR,aAAf;AAFoD,WAAhC,CA/C9B;;AAAA;AA+CQa,UAAAA,QA/CR;AAAA;AAAA,4CAmDeA,QAAQ,CAACC,IAAT,EAnDf;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAsDAC,MAAM,CAACC,OAAP,GAAiBtB,qBAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nconst getDevServer = require('./getDevServer');\n\nimport NativeSourceCode from '../../NativeModules/specs/NativeSourceCode';\n\n// Avoid requiring fetch on load of this module; see symbolicateStackTrace\nlet fetch;\n\nimport type {StackFrame} from '../NativeExceptionsManager';\n\nexport type CodeFrame = $ReadOnly<{|\n  content: string,\n  location: ?{\n    row: number,\n    column: number,\n    ...\n  },\n  fileName: string,\n|}>;\n\nexport type SymbolicatedStackTrace = $ReadOnly<{|\n  stack: Array<StackFrame>,\n  codeFrame: ?CodeFrame,\n|}>;\n\nfunction isSourcedFromDisk(sourcePath: string): boolean {\n  return !/^http/.test(sourcePath) && /[\\\\/]/.test(sourcePath);\n}\n\nasync function symbolicateStackTrace(\n  stack: Array<StackFrame>,\n): Promise<SymbolicatedStackTrace> {\n  // RN currently lazy loads whatwg-fetch using a custom fetch module, which,\n  // when called for the first time, requires and re-exports 'whatwg-fetch'.\n  // However, when a dependency of the project tries to require whatwg-fetch\n  // either directly or indirectly, whatwg-fetch is required before\n  // RN can lazy load whatwg-fetch. As whatwg-fetch checks\n  // for a fetch polyfill before loading, it will in turn try to load\n  // RN's fetch module, which immediately tries to import whatwg-fetch AGAIN.\n  // This causes a circular require which results in RN's fetch module\n  // exporting fetch as 'undefined'.\n  // The fix below postpones trying to load fetch until the first call to symbolicateStackTrace.\n  // At that time, we will have either global.fetch (whatwg-fetch) or RN's fetch.\n  if (!fetch) {\n    fetch = global.fetch || require('../../Network/fetch').fetch;\n  }\n\n  const devServer = getDevServer();\n  if (!devServer.bundleLoadedFromServer) {\n    throw new Error('Bundle was not loaded from the packager');\n  }\n\n  let stackCopy = stack;\n\n  const {scriptURL} = NativeSourceCode.getConstants();\n  if (scriptURL) {\n    let foundInternalSource: boolean = false;\n    stackCopy = stack.map((frame: StackFrame) => {\n      if (frame.file == null) {\n        return frame;\n      }\n\n      // If the sources exist on disk rather than appearing to come from the packager,\n      // replace the location with the packager URL until we reach an internal source\n      // which does not have a path (no slashes), indicating a switch from within\n      // the application to a surrounding debugging environment.\n      if (!foundInternalSource && isSourcedFromDisk(frame.file)) {\n        // Copy frame into new object and replace 'file' property\n        return {...frame, file: scriptURL};\n      }\n\n      foundInternalSource = true;\n      return frame;\n    });\n  }\n\n  const response = await fetch(devServer.url + 'symbolicate', {\n    method: 'POST',\n    body: JSON.stringify({stack: stackCopy}),\n  });\n  return await response.json();\n}\n\nmodule.exports = symbolicateStackTrace;\n"]}