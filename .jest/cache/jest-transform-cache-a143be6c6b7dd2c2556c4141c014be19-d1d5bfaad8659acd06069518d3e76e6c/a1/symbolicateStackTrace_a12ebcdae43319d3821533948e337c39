57092df253fe2ec3ffd5fcfcdb964132
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _NativeSourceCode = _interopRequireDefault(require("../../NativeModules/specs/NativeSourceCode"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var getDevServer = require("./getDevServer");

var fetch;

function isSourcedFromDisk(sourcePath) {
  return !/^http/.test(sourcePath) && /[\\/]/.test(sourcePath);
}

function symbolicateStackTrace(stack) {
  var devServer, stackCopy, _NativeSourceCode$get, scriptURL, foundInternalSource, response;

  return _regenerator.default.async(function symbolicateStackTrace$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          if (!fetch) {
            fetch = global.fetch || require("../../Network/fetch").fetch;
          }

          devServer = getDevServer();

          if (devServer.bundleLoadedFromServer) {
            _context.next = 4;
            break;
          }

          throw new Error('Bundle was not loaded from the packager');

        case 4:
          stackCopy = stack;
          _NativeSourceCode$get = _NativeSourceCode.default.getConstants(), scriptURL = _NativeSourceCode$get.scriptURL;

          if (scriptURL) {
            foundInternalSource = false;
            stackCopy = stack.map(function (frame) {
              if (frame.file == null) {
                return frame;
              }

              if (!foundInternalSource && isSourcedFromDisk(frame.file)) {
                return _objectSpread(_objectSpread({}, frame), {}, {
                  file: scriptURL
                });
              }

              foundInternalSource = true;
              return frame;
            });
          }

          _context.next = 9;
          return _regenerator.default.awrap(fetch(devServer.url + 'symbolicate', {
            method: 'POST',
            body: JSON.stringify({
              stack: stackCopy
            })
          }));

        case 9:
          response = _context.sent;
          _context.next = 12;
          return _regenerator.default.awrap(response.json());

        case 12:
          return _context.abrupt("return", _context.sent);

        case 13:
        case "end":
          return _context.stop();
      }
    }
  }, null, null, null, Promise);
}

module.exports = symbolicateStackTrace;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN5bWJvbGljYXRlU3RhY2tUcmFjZS5qcyJdLCJuYW1lcyI6WyJnZXREZXZTZXJ2ZXIiLCJyZXF1aXJlIiwiZmV0Y2giLCJpc1NvdXJjZWRGcm9tRGlzayIsInNvdXJjZVBhdGgiLCJ0ZXN0Iiwic3ltYm9saWNhdGVTdGFja1RyYWNlIiwic3RhY2siLCJnbG9iYWwiLCJkZXZTZXJ2ZXIiLCJidW5kbGVMb2FkZWRGcm9tU2VydmVyIiwiRXJyb3IiLCJzdGFja0NvcHkiLCJOYXRpdmVTb3VyY2VDb2RlIiwiZ2V0Q29uc3RhbnRzIiwic2NyaXB0VVJMIiwiZm91bmRJbnRlcm5hbFNvdXJjZSIsIm1hcCIsImZyYW1lIiwiZmlsZSIsInVybCIsIm1ldGhvZCIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5IiwicmVzcG9uc2UiLCJqc29uIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBVUE7Ozs7Ozs7O0FBSUE7Ozs7OztBQUZBLElBQU1BLFlBQVksR0FBR0MsT0FBTyxrQkFBNUI7O0FBS0EsSUFBSUMsS0FBSjs7QUFtQkEsU0FBU0MsaUJBQVQsQ0FBMkJDLFVBQTNCLEVBQXdEO0FBQ3RELFNBQU8sQ0FBQyxRQUFRQyxJQUFSLENBQWFELFVBQWIsQ0FBRCxJQUE2QixRQUFRQyxJQUFSLENBQWFELFVBQWIsQ0FBcEM7QUFDRDs7QUFFRCxTQUFlRSxxQkFBZixDQUNFQyxLQURGO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFjRSxjQUFJLENBQUNMLEtBQUwsRUFBWTtBQUNWQSxZQUFBQSxLQUFLLEdBQUdNLE1BQU0sQ0FBQ04sS0FBUCxJQUFnQkQsT0FBTyx1QkFBUCxDQUErQkMsS0FBdkQ7QUFDRDs7QUFFS08sVUFBQUEsU0FsQlIsR0FrQm9CVCxZQUFZLEVBbEJoQzs7QUFBQSxjQW1CT1MsU0FBUyxDQUFDQyxzQkFuQmpCO0FBQUE7QUFBQTtBQUFBOztBQUFBLGdCQW9CVSxJQUFJQyxLQUFKLENBQVUseUNBQVYsQ0FwQlY7O0FBQUE7QUF1Qk1DLFVBQUFBLFNBdkJOLEdBdUJrQkwsS0F2QmxCO0FBQUEsa0NBeUJzQk0sMEJBQWlCQyxZQUFqQixFQXpCdEIsRUF5QlNDLFNBekJULHlCQXlCU0EsU0F6QlQ7O0FBMEJFLGNBQUlBLFNBQUosRUFBZTtBQUNUQyxZQUFBQSxtQkFEUyxHQUNzQixLQUR0QjtBQUViSixZQUFBQSxTQUFTLEdBQUdMLEtBQUssQ0FBQ1UsR0FBTixDQUFVLFVBQUNDLEtBQUQsRUFBdUI7QUFDM0Msa0JBQUlBLEtBQUssQ0FBQ0MsSUFBTixJQUFjLElBQWxCLEVBQXdCO0FBQ3RCLHVCQUFPRCxLQUFQO0FBQ0Q7O0FBTUQsa0JBQUksQ0FBQ0YsbUJBQUQsSUFBd0JiLGlCQUFpQixDQUFDZSxLQUFLLENBQUNDLElBQVAsQ0FBN0MsRUFBMkQ7QUFFekQsdURBQVdELEtBQVg7QUFBa0JDLGtCQUFBQSxJQUFJLEVBQUVKO0FBQXhCO0FBQ0Q7O0FBRURDLGNBQUFBLG1CQUFtQixHQUFHLElBQXRCO0FBQ0EscUJBQU9FLEtBQVA7QUFDRCxhQWhCVyxDQUFaO0FBaUJEOztBQTdDSDtBQUFBLDRDQStDeUJoQixLQUFLLENBQUNPLFNBQVMsQ0FBQ1csR0FBVixHQUFnQixhQUFqQixFQUFnQztBQUMxREMsWUFBQUEsTUFBTSxFQUFFLE1BRGtEO0FBRTFEQyxZQUFBQSxJQUFJLEVBQUVDLElBQUksQ0FBQ0MsU0FBTCxDQUFlO0FBQUNqQixjQUFBQSxLQUFLLEVBQUVLO0FBQVIsYUFBZjtBQUZvRCxXQUFoQyxDQS9DOUI7O0FBQUE7QUErQ1FhLFVBQUFBLFFBL0NSO0FBQUE7QUFBQSw0Q0FtRGVBLFFBQVEsQ0FBQ0MsSUFBVCxFQW5EZjs7QUFBQTtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQXNEQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCdEIscUJBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBAZmxvd1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgZ2V0RGV2U2VydmVyID0gcmVxdWlyZSgnLi9nZXREZXZTZXJ2ZXInKTtcblxuaW1wb3J0IE5hdGl2ZVNvdXJjZUNvZGUgZnJvbSAnLi4vLi4vTmF0aXZlTW9kdWxlcy9zcGVjcy9OYXRpdmVTb3VyY2VDb2RlJztcblxuLy8gQXZvaWQgcmVxdWlyaW5nIGZldGNoIG9uIGxvYWQgb2YgdGhpcyBtb2R1bGU7IHNlZSBzeW1ib2xpY2F0ZVN0YWNrVHJhY2VcbmxldCBmZXRjaDtcblxuaW1wb3J0IHR5cGUge1N0YWNrRnJhbWV9IGZyb20gJy4uL05hdGl2ZUV4Y2VwdGlvbnNNYW5hZ2VyJztcblxuZXhwb3J0IHR5cGUgQ29kZUZyYW1lID0gJFJlYWRPbmx5PHt8XG4gIGNvbnRlbnQ6IHN0cmluZyxcbiAgbG9jYXRpb246ID97XG4gICAgcm93OiBudW1iZXIsXG4gICAgY29sdW1uOiBudW1iZXIsXG4gICAgLi4uXG4gIH0sXG4gIGZpbGVOYW1lOiBzdHJpbmcsXG58fT47XG5cbmV4cG9ydCB0eXBlIFN5bWJvbGljYXRlZFN0YWNrVHJhY2UgPSAkUmVhZE9ubHk8e3xcbiAgc3RhY2s6IEFycmF5PFN0YWNrRnJhbWU+LFxuICBjb2RlRnJhbWU6ID9Db2RlRnJhbWUsXG58fT47XG5cbmZ1bmN0aW9uIGlzU291cmNlZEZyb21EaXNrKHNvdXJjZVBhdGg6IHN0cmluZyk6IGJvb2xlYW4ge1xuICByZXR1cm4gIS9eaHR0cC8udGVzdChzb3VyY2VQYXRoKSAmJiAvW1xcXFwvXS8udGVzdChzb3VyY2VQYXRoKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gc3ltYm9saWNhdGVTdGFja1RyYWNlKFxuICBzdGFjazogQXJyYXk8U3RhY2tGcmFtZT4sXG4pOiBQcm9taXNlPFN5bWJvbGljYXRlZFN0YWNrVHJhY2U+IHtcbiAgLy8gUk4gY3VycmVudGx5IGxhenkgbG9hZHMgd2hhdHdnLWZldGNoIHVzaW5nIGEgY3VzdG9tIGZldGNoIG1vZHVsZSwgd2hpY2gsXG4gIC8vIHdoZW4gY2FsbGVkIGZvciB0aGUgZmlyc3QgdGltZSwgcmVxdWlyZXMgYW5kIHJlLWV4cG9ydHMgJ3doYXR3Zy1mZXRjaCcuXG4gIC8vIEhvd2V2ZXIsIHdoZW4gYSBkZXBlbmRlbmN5IG9mIHRoZSBwcm9qZWN0IHRyaWVzIHRvIHJlcXVpcmUgd2hhdHdnLWZldGNoXG4gIC8vIGVpdGhlciBkaXJlY3RseSBvciBpbmRpcmVjdGx5LCB3aGF0d2ctZmV0Y2ggaXMgcmVxdWlyZWQgYmVmb3JlXG4gIC8vIFJOIGNhbiBsYXp5IGxvYWQgd2hhdHdnLWZldGNoLiBBcyB3aGF0d2ctZmV0Y2ggY2hlY2tzXG4gIC8vIGZvciBhIGZldGNoIHBvbHlmaWxsIGJlZm9yZSBsb2FkaW5nLCBpdCB3aWxsIGluIHR1cm4gdHJ5IHRvIGxvYWRcbiAgLy8gUk4ncyBmZXRjaCBtb2R1bGUsIHdoaWNoIGltbWVkaWF0ZWx5IHRyaWVzIHRvIGltcG9ydCB3aGF0d2ctZmV0Y2ggQUdBSU4uXG4gIC8vIFRoaXMgY2F1c2VzIGEgY2lyY3VsYXIgcmVxdWlyZSB3aGljaCByZXN1bHRzIGluIFJOJ3MgZmV0Y2ggbW9kdWxlXG4gIC8vIGV4cG9ydGluZyBmZXRjaCBhcyAndW5kZWZpbmVkJy5cbiAgLy8gVGhlIGZpeCBiZWxvdyBwb3N0cG9uZXMgdHJ5aW5nIHRvIGxvYWQgZmV0Y2ggdW50aWwgdGhlIGZpcnN0IGNhbGwgdG8gc3ltYm9saWNhdGVTdGFja1RyYWNlLlxuICAvLyBBdCB0aGF0IHRpbWUsIHdlIHdpbGwgaGF2ZSBlaXRoZXIgZ2xvYmFsLmZldGNoICh3aGF0d2ctZmV0Y2gpIG9yIFJOJ3MgZmV0Y2guXG4gIGlmICghZmV0Y2gpIHtcbiAgICBmZXRjaCA9IGdsb2JhbC5mZXRjaCB8fCByZXF1aXJlKCcuLi8uLi9OZXR3b3JrL2ZldGNoJykuZmV0Y2g7XG4gIH1cblxuICBjb25zdCBkZXZTZXJ2ZXIgPSBnZXREZXZTZXJ2ZXIoKTtcbiAgaWYgKCFkZXZTZXJ2ZXIuYnVuZGxlTG9hZGVkRnJvbVNlcnZlcikge1xuICAgIHRocm93IG5ldyBFcnJvcignQnVuZGxlIHdhcyBub3QgbG9hZGVkIGZyb20gdGhlIHBhY2thZ2VyJyk7XG4gIH1cblxuICBsZXQgc3RhY2tDb3B5ID0gc3RhY2s7XG5cbiAgY29uc3Qge3NjcmlwdFVSTH0gPSBOYXRpdmVTb3VyY2VDb2RlLmdldENvbnN0YW50cygpO1xuICBpZiAoc2NyaXB0VVJMKSB7XG4gICAgbGV0IGZvdW5kSW50ZXJuYWxTb3VyY2U6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICBzdGFja0NvcHkgPSBzdGFjay5tYXAoKGZyYW1lOiBTdGFja0ZyYW1lKSA9PiB7XG4gICAgICBpZiAoZnJhbWUuZmlsZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBmcmFtZTtcbiAgICAgIH1cblxuICAgICAgLy8gSWYgdGhlIHNvdXJjZXMgZXhpc3Qgb24gZGlzayByYXRoZXIgdGhhbiBhcHBlYXJpbmcgdG8gY29tZSBmcm9tIHRoZSBwYWNrYWdlcixcbiAgICAgIC8vIHJlcGxhY2UgdGhlIGxvY2F0aW9uIHdpdGggdGhlIHBhY2thZ2VyIFVSTCB1bnRpbCB3ZSByZWFjaCBhbiBpbnRlcm5hbCBzb3VyY2VcbiAgICAgIC8vIHdoaWNoIGRvZXMgbm90IGhhdmUgYSBwYXRoIChubyBzbGFzaGVzKSwgaW5kaWNhdGluZyBhIHN3aXRjaCBmcm9tIHdpdGhpblxuICAgICAgLy8gdGhlIGFwcGxpY2F0aW9uIHRvIGEgc3Vycm91bmRpbmcgZGVidWdnaW5nIGVudmlyb25tZW50LlxuICAgICAgaWYgKCFmb3VuZEludGVybmFsU291cmNlICYmIGlzU291cmNlZEZyb21EaXNrKGZyYW1lLmZpbGUpKSB7XG4gICAgICAgIC8vIENvcHkgZnJhbWUgaW50byBuZXcgb2JqZWN0IGFuZCByZXBsYWNlICdmaWxlJyBwcm9wZXJ0eVxuICAgICAgICByZXR1cm4gey4uLmZyYW1lLCBmaWxlOiBzY3JpcHRVUkx9O1xuICAgICAgfVxuXG4gICAgICBmb3VuZEludGVybmFsU291cmNlID0gdHJ1ZTtcbiAgICAgIHJldHVybiBmcmFtZTtcbiAgICB9KTtcbiAgfVxuXG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goZGV2U2VydmVyLnVybCArICdzeW1ib2xpY2F0ZScsIHtcbiAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7c3RhY2s6IHN0YWNrQ29weX0pLFxuICB9KTtcbiAgcmV0dXJuIGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzeW1ib2xpY2F0ZVN0YWNrVHJhY2U7XG4iXX0=