b8c836c350f60ed69af277779783f8a2
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _Pressability = _interopRequireDefault(require("../../Pressability/Pressability"));

var _PressabilityDebug = require("../../Pressability/PressabilityDebug");

var _StyleSheet = _interopRequireDefault(require("../../StyleSheet/StyleSheet"));

var _TVTouchable = _interopRequireDefault(require("./TVTouchable"));

var _Platform = _interopRequireDefault(require("../../Utilities/Platform"));

var _View = _interopRequireDefault(require("../../Components/View/View"));

var React = _interopRequireWildcard(require("react"));

var _excluded = ["onBlur", "onFocus"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var TouchableHighlight = function (_React$Component) {
  (0, _inherits2.default)(TouchableHighlight, _React$Component);

  var _super = _createSuper(TouchableHighlight);

  function TouchableHighlight() {
    var _this;

    (0, _classCallCheck2.default)(this, TouchableHighlight);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this._isMounted = false;
    _this.state = {
      pressability: new _Pressability.default(_this._createPressabilityConfig()),
      extraStyles: _this.props.testOnly_pressed === true ? _this._createExtraStyles() : null
    };
    return _this;
  }

  (0, _createClass2.default)(TouchableHighlight, [{
    key: "_createPressabilityConfig",
    value: function _createPressabilityConfig() {
      var _this2 = this;

      return {
        cancelable: !this.props.rejectResponderTermination,
        disabled: this.props.disabled,
        hitSlop: this.props.hitSlop,
        delayLongPress: this.props.delayLongPress,
        delayPressIn: this.props.delayPressIn,
        delayPressOut: this.props.delayPressOut,
        minPressDuration: 0,
        pressRectOffset: this.props.pressRetentionOffset,
        android_disableSound: this.props.touchSoundDisabled,
        onBlur: function onBlur(event) {
          if (_Platform.default.isTV) {
            _this2._hideUnderlay();
          }

          if (_this2.props.onBlur != null) {
            _this2.props.onBlur(event);
          }
        },
        onFocus: function onFocus(event) {
          if (_Platform.default.isTV) {
            _this2._showUnderlay();
          }

          if (_this2.props.onFocus != null) {
            _this2.props.onFocus(event);
          }
        },
        onLongPress: function onLongPress(event) {
          if (_this2.props.onLongPress != null) {
            _this2.props.onLongPress(event);
          }
        },
        onPress: function onPress(event) {
          if (_this2._hideTimeout != null) {
            clearTimeout(_this2._hideTimeout);
          }

          if (!_Platform.default.isTV) {
            var _this2$props$delayPre;

            _this2._showUnderlay();

            _this2._hideTimeout = setTimeout(function () {
              _this2._hideUnderlay();
            }, (_this2$props$delayPre = _this2.props.delayPressOut) != null ? _this2$props$delayPre : 0);
          }

          if (_this2.props.onPress != null) {
            _this2.props.onPress(event);
          }
        },
        onPressIn: function onPressIn(event) {
          if (_this2._hideTimeout != null) {
            clearTimeout(_this2._hideTimeout);
            _this2._hideTimeout = null;
          }

          _this2._showUnderlay();

          if (_this2.props.onPressIn != null) {
            _this2.props.onPressIn(event);
          }
        },
        onPressOut: function onPressOut(event) {
          if (_this2._hideTimeout == null) {
            _this2._hideUnderlay();
          }

          if (_this2.props.onPressOut != null) {
            _this2.props.onPressOut(event);
          }
        }
      };
    }
  }, {
    key: "_createExtraStyles",
    value: function _createExtraStyles() {
      var _this$props$activeOpa;

      return {
        child: {
          opacity: (_this$props$activeOpa = this.props.activeOpacity) != null ? _this$props$activeOpa : 0.85
        },
        underlay: {
          backgroundColor: this.props.underlayColor === undefined ? 'black' : this.props.underlayColor
        }
      };
    }
  }, {
    key: "_showUnderlay",
    value: function _showUnderlay() {
      if (!this._isMounted || !this._hasPressHandler()) {
        return;
      }

      this.setState({
        extraStyles: this._createExtraStyles()
      });

      if (this.props.onShowUnderlay != null) {
        this.props.onShowUnderlay();
      }
    }
  }, {
    key: "_hideUnderlay",
    value: function _hideUnderlay() {
      if (this._hideTimeout != null) {
        clearTimeout(this._hideTimeout);
        this._hideTimeout = null;
      }

      if (this.props.testOnly_pressed === true) {
        return;
      }

      if (this._hasPressHandler()) {
        this.setState({
          extraStyles: null
        });

        if (this.props.onHideUnderlay != null) {
          this.props.onHideUnderlay();
        }
      }
    }
  }, {
    key: "_hasPressHandler",
    value: function _hasPressHandler() {
      return this.props.onPress != null || this.props.onPressIn != null || this.props.onPressOut != null || this.props.onLongPress != null;
    }
  }, {
    key: "render",
    value: function render() {
      var _this$state$extraStyl, _this$state$extraStyl2;

      var child = React.Children.only(this.props.children);

      var _this$state$pressabil = this.state.pressability.getEventHandlers(),
          onBlur = _this$state$pressabil.onBlur,
          onFocus = _this$state$pressabil.onFocus,
          eventHandlersWithoutBlurAndFocus = (0, _objectWithoutProperties2.default)(_this$state$pressabil, _excluded);

      return React.createElement(_View.default, (0, _extends2.default)({
        accessible: this.props.accessible !== false,
        accessibilityLabel: this.props.accessibilityLabel,
        accessibilityHint: this.props.accessibilityHint,
        accessibilityRole: this.props.accessibilityRole,
        accessibilityState: this.props.accessibilityState,
        accessibilityValue: this.props.accessibilityValue,
        accessibilityActions: this.props.accessibilityActions,
        onAccessibilityAction: this.props.onAccessibilityAction,
        importantForAccessibility: this.props.importantForAccessibility,
        accessibilityLiveRegion: this.props.accessibilityLiveRegion,
        accessibilityViewIsModal: this.props.accessibilityViewIsModal,
        accessibilityElementsHidden: this.props.accessibilityElementsHidden,
        style: _StyleSheet.default.compose(this.props.style, (_this$state$extraStyl = this.state.extraStyles) == null ? void 0 : _this$state$extraStyl.underlay),
        onLayout: this.props.onLayout,
        hitSlop: this.props.hitSlop,
        hasTVPreferredFocus: this.props.hasTVPreferredFocus,
        nextFocusDown: this.props.nextFocusDown,
        nextFocusForward: this.props.nextFocusForward,
        nextFocusLeft: this.props.nextFocusLeft,
        nextFocusRight: this.props.nextFocusRight,
        nextFocusUp: this.props.nextFocusUp,
        focusable: this.props.focusable !== false && this.props.onPress !== undefined,
        nativeID: this.props.nativeID,
        testID: this.props.testID,
        ref: this.props.hostRef
      }, eventHandlersWithoutBlurAndFocus), React.cloneElement(child, {
        style: _StyleSheet.default.compose(child.props.style, (_this$state$extraStyl2 = this.state.extraStyles) == null ? void 0 : _this$state$extraStyl2.child)
      }), __DEV__ ? React.createElement(_PressabilityDebug.PressabilityDebugView, {
        color: "green",
        hitSlop: this.props.hitSlop
      }) : null);
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this3 = this;

      this._isMounted = true;

      if (_Platform.default.isTV) {
        this._tvTouchable = new _TVTouchable.default(this, {
          getDisabled: function getDisabled() {
            return _this3.props.disabled === true;
          },
          onBlur: function onBlur(event) {
            if (_this3.props.onBlur != null) {
              _this3.props.onBlur(event);
            }
          },
          onFocus: function onFocus(event) {
            if (_this3.props.onFocus != null) {
              _this3.props.onFocus(event);
            }
          },
          onPress: function onPress(event) {
            if (_this3.props.onPress != null) {
              _this3.props.onPress(event);
            }
          }
        });
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, prevState) {
      this.state.pressability.configure(this._createPressabilityConfig());
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this._isMounted = false;

      if (this._hideTimeout != null) {
        clearTimeout(this._hideTimeout);
      }

      if (_Platform.default.isTV) {
        if (this._tvTouchable != null) {
          this._tvTouchable.destroy();
        }
      }

      this.state.pressability.reset();
    }
  }]);
  return TouchableHighlight;
}(React.Component);

module.exports = React.forwardRef(function (props, hostRef) {
  return React.createElement(TouchableHighlight, (0, _extends2.default)({}, props, {
    hostRef: hostRef
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,