{"C:\\Users\\ashee\\Documents\\Javascript\\React\\React Native\\suduko\\src\\__tests__\\ComponentTests.test.tsx":{"modulePaths":["C:\\Users\\ashee\\Documents\\Javascript\\React\\React Native\\suduko\\node_modules\\@types\\react\\index.d.ts","C:\\Users\\ashee\\Documents\\Javascript\\React\\React Native\\suduko\\node_modules\\@types\\react-native\\index.d.ts","C:\\Users\\ashee\\Documents\\Javascript\\React\\React Native\\suduko\\node_modules\\redux\\index.d.ts","C:\\Users\\ashee\\Documents\\Javascript\\React\\React Native\\suduko\\node_modules\\@types\\react-redux\\index.d.ts","C:\\Users\\ashee\\Documents\\Javascript\\React\\React Native\\suduko\\src\\state\\reducers\\index.ts","C:\\Users\\ashee\\Documents\\Javascript\\React\\React Native\\suduko\\node_modules\\@types\\history\\index.d.ts","C:\\Users\\ashee\\Documents\\Javascript\\React\\React Native\\suduko\\node_modules\\@types\\react-router\\ts4.0\\index.d.ts","C:\\Users\\ashee\\Documents\\Javascript\\React\\React Native\\suduko\\node_modules\\@types\\react-router-native\\index.d.ts","C:\\Users\\ashee\\Documents\\Javascript\\React\\React Native\\suduko\\node_modules\\@testing-library\\react-native\\typings\\index.d.ts","C:\\Users\\ashee\\Documents\\Javascript\\React\\React Native\\suduko\\node_modules\\@types\\react-test-renderer\\index.d.ts","C:\\Users\\ashee\\Documents\\Javascript\\React\\React Native\\suduko\\types.tsx","C:\\Users\\ashee\\Documents\\Javascript\\React\\React Native\\suduko\\src\\state\\reducers\\index.ts","C:\\Users\\ashee\\Documents\\Javascript\\React\\React Native\\suduko\\components\\Home.tsx","C:\\Users\\ashee\\Documents\\Javascript\\React\\React Native\\suduko\\components\\TextStroke.tsx","C:\\Users\\ashee\\Documents\\Javascript\\React\\React Native\\suduko\\components\\Title.tsx"],"testFileContent":"import React from 'react';\nimport { Text,View } from \"react-native\";\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport reducers from '../state/reducers/index';\nimport { createMemoryHistory, createLocation } from 'history';\nimport { match } from 'react-router'; \nimport { RouteComponentProps, Router } from 'react-router-native';\nimport { fireEvent, render, waitFor} from '@testing-library/react-native';\nimport renderer from 'react-test-renderer';\nimport {GameState} from '../../types';\nimport {RootState} from '../state/reducers/index';\nimport Home from '../../components/Home';\nimport TextStroke from '../../components/TextStroke';\nimport Title from '../../components/Title';\n\n\n//Mock props for components with routing.\nconst history = createMemoryHistory();\nconst path = `/route/:id`;\nconst match: match<{ id: string }> = {\n    isExact: false,\n    path,\n    url: path.replace(':id', '1'),\n    params: { id: \"1\" }\n};\nconst location = createLocation(match.url);\n\n//Function to provide mockStore for components managed by redux.\nfunction renderWithRedux(\n  component:JSX.Element,\n  //@ts-ignore\n  {initialState,store = createStore(reducers,initialState)} = {}\n){\n  return {\n    ...render(<Provider store = {store}>{component}</Provider>),\n    store\n  }\n}\n\n//Home component testing.\ndescribe('Home', () =>{\n  //Mock store object for state management.\n  const mockStore:RootState = {};\n\n  let homeComponent:any;\n  beforeEach(() =>{\n    homeComponent = renderWithRedux(\n      <Home\n        history={history}\n        location={location}\n        match={match}\n      />,\n      {\n        initialState:mockStore\n      }\n    );\n  })\n\n  //Home component should match current screenshot.\n  it('renders without crashing', () => {\n    expect(homeComponent.toJSON()).toMatchSnapshot();\n  });\n\n  //Home component should route to the difficulty selection menu when the 'Play New Game' button is selected.\n  it(`routes to difficulty selection menu when pressing 'Play New Game'.`, () => {\n    const {getByTestId} = homeComponent;\n    const newGameButton = getByTestId('newGameButton');\n    //History length should initially be 1.\n    expect(history.length).toBe(1);\n    //Press 'Play New Game' button.\n    fireEvent.press(newGameButton);\n    //History length should be 2.\n    expect(history.length).toBe(2);\n    //Location pathname should be 'DifficultySelection'.\n    expect(history.location.pathname).toBe('/DifficultySelection')\n  });\n\n  //Home component should not route to GameDisplay component when pressing 'Load Game' if a game does not exist.\n  it(`does not route to GameDisplay when pressing 'Load Game' if a game does not exist.`, () => {\n    const {getByTestId} = homeComponent;\n    const loadGameButton = getByTestId('loadGameButton');\n    //History length should initially be 2.\n    expect(history.length).toBe(2);\n    //Location pathname should initially be '/DifficultySelection'.\n    expect(history.location.pathname).toBe('/DifficultySelection')\n    //Press 'Load Game Button'.\n    fireEvent.press(loadGameButton);\n    //History length should remain as 2.\n    expect(history.length).toBe(2);\n    //Location pathname should remain as '/DifficultySelection'.\n    expect(history.location.pathname).toBe('/DifficultySelection')\n  });\n\n  //A pop-up prompt should appear when the 'Load Game' button is pressed when no current game exists.\n  it(`prompt appears when attempting to load a game when none exists.`, () => {\n    const {getByTestId} = homeComponent;\n    const loadGameButton = getByTestId('loadGameButton');\n    const loadGamePopUp = getByTestId('loadGamePopUp');\n    //Popup should initially not be visible.\n    expect(loadGamePopUp.props.visible).toBeFalsy();\n    //Press 'Load Game' button.\n    fireEvent.press(loadGameButton);\n    //Popup should no longer be visible.\n    expect(loadGamePopUp.props.visible).toBeTruthy();\n    \n    //Secondary test to ensure that the 'Play New Game' popup does not appear given current state.\n    const newGameButton = getByTestId('newGameButton');\n    const newGamePopUp = getByTestId('newGamePopUp');\n    //Popup should initially not be visible.\n    expect(newGamePopUp.props.visible).toBeFalsy();\n    //Press 'Play New Game' button.\n    fireEvent.press(newGameButton);\n    //Popup should remain not visible.\n    expect(newGamePopUp.props.visible).toBeFalsy();\n  });\n  \n  //Load game prompt should disappear after the screen is pressed.\n  it(`prompt disappears when pressing the screen.`, async ()=>{\n    const {getByTestId} = homeComponent;\n    const loadGameButton = getByTestId('loadGameButton');\n    const loadGamePopUp = getByTestId('loadGamePopUp');\n    const loadGamePopUpHide = getByTestId('loadGamePopUpHide');\n    //Prompt should initially be invisible.\n    expect(loadGamePopUp.props.visible).toBeFalsy();\n    //Press 'Load Game' button.\n    fireEvent.press(loadGameButton);\n    //Prompt should be visible.\n    expect(loadGamePopUp.props.visible).toBeTruthy();\n    //Press screen after prompt appears.\n    fireEvent.press(loadGamePopUpHide);\n    //Wait for component to update after press event.\n    await waitFor(() => {\n      //Prompt should not be visible.\n      expect(getByTestId('loadGamePopUp').props.visible).toBeFalsy();\n    })\n    //Update state for the next series of tests.\n    mockStore['gameState'] = {\n      'isCompleted':false,\n      'gameExists':true\n    }\n  })\n  \n  //Home component should route to GameDisplay component if a current game exists.\n  it(`routes to GameDisplay when pressing 'Load Game' if a game does exist.`, () => {\n    const {getByTestId} = homeComponent;\n    const loadGameButton = getByTestId('loadGameButton');\n    //History length should initially be 3.\n    expect(history.length).toBe(3);\n    //Location pathname should initially be 'DifficultySelection'.\n    expect(history.location.pathname).toBe('/DifficultySelection')\n    //Press 'Load Game' button.\n    fireEvent.press(loadGameButton);\n    //History length should be 4.\n    expect(history.length).toBe(4);\n    //Location pathname should be 'GameDisplay'.\n    expect(history.location.pathname).toBe('/GameDisplay')\n  });\n  \n  //Home component should not immediately route to DifficultySelection component if a game exists.\n  it(`does not route to difficulty selection menu when pressing 'Play New Game' if a game currently exists.`, () => {\n    const {getByTestId} = homeComponent;\n    const newGameButton = getByTestId('newGameButton');\n    //History length should initially be 4.\n    expect(history.length).toBe(4);\n    //Location pathname should initially be 'GameDisplay'.\n    expect(history.location.pathname).toBe('/GameDisplay')\n    //Press 'Play New Game'.\n    fireEvent.press(newGameButton);\n    //History length remain as 4.\n    expect(history.length).toBe(4);\n    //Location pathname should remain as 'GameDisplay'.\n    expect(history.location.pathname).toBe('/GameDisplay')\n  });\n  \n  //Prompt should appear when attempting to play a new game when one currently exists.\n  it(`prompt appears when attempting to play a new game when one exists.`, () => {\n    const {getByTestId} = homeComponent;\n    const newGameButton = getByTestId('newGameButton');\n    const newGamePopUp = getByTestId('newGamePopUp');\n    //Prompt should initially not be visible.\n    expect(newGamePopUp.props.visible).toBeFalsy();\n    //Press 'Play New Game' button.\n    fireEvent.press(newGameButton);\n    //Prompt should be visible.\n    expect(newGamePopUp.props.visible).toBeTruthy();\n    \n    //Secondary test to ensure that the 'Play New Game' popup does not appear given current state.\n    const loadGameButton = getByTestId('loadGameButton');\n    const loadGamePopUp = getByTestId('loadGamePopUp');\n    //Prompt should initially not be visible.\n    expect(loadGamePopUp.props.visible).toBeFalsy();\n    //Press 'Load Game' button.\n    fireEvent.press(loadGameButton);\n    //Prompt should remain not visible.\n    expect(loadGamePopUp.props.visible).toBeFalsy();\n  });\n\n  //Home component should route to difficulty selection menu when the 'yes' button is selected within the prompt.\n  it(`should route to the difficulty selection menu when the 'yes' button is selected on the 'Play New Game' popup.`, () =>{\n    const {getByTestId} = homeComponent;\n    const newGameButton = getByTestId('newGameButton');\n    const newGamePopUp = getByTestId('newGamePopUp');\n    const yesButton = getByTestId('newGamePopUpYes');\n    //History length should initially be 5.\n    expect(history.length).toBe(5);\n    //Location pathname should initially be 'GameDisplay'.\n    expect(history.location.pathname).toBe('/GameDisplay');\n    //Press 'Play New Game' button.\n    fireEvent.press(newGameButton);\n    //Press 'Yes' button.\n    fireEvent.press(yesButton);\n    //History length should initially be 6.\n    expect(history.length).toBe(6);\n    //Location pathname should be 'DifficultySelection'.\n    expect(history.location.pathname).toBe('/DifficultySelection');\n  })\n\n  //When the 'No' button is selected on the prompt it should disappear\n  //and not route to another component.\n  it(`prompt should disappear and not route to any other component when the 'No' button is selected on the prompt.`, async ()=>{\n    const {getByTestId, findByTestId} = homeComponent;\n    const newGameButton = getByTestId('newGameButton');\n    const newGamePopUp = getByTestId('newGamePopUp');\n    const noButton = getByTestId('newGamePopUpNo');\n    //History length should initially be 6.\n    expect(history.length).toBe(6);\n    //Location pathname should initially be 'DifficultySelection'.\n    expect(history.location.pathname).toBe('/DifficultySelection');\n    //Press 'Play New Game' button.\n    fireEvent.press(newGameButton);\n    //Wait for component to update after press event.\n    await waitFor(() =>{\n      //'Play New Game' prompt should be visible.\n      expect(getByTestId('newGamePopUp').props.visible).toBeTruthy();\n    })\n    //Press 'No' button.\n    fireEvent.press(noButton);\n    //Wait for component to update after press event.\n    await waitFor(() =>{\n      //'Play New Game' prompt should not be visible.\n      expect(getByTestId('newGamePopUp').props.visible).toBeFalsy();\n      //History length should initially be 6.\n      expect(history.length).toBe(6);\n      //Location pathname should initially be 'DifficultySelection'.\n      expect(history.location.pathname).toBe('/DifficultySelection');\n    })\n  })\n});\n\n//TextStroke component test.\ndescribe('TextStroke', () =>{\n  it('renders without crashing', () =>{\n    const titleComponent = render(\n      <TextStroke\n        color = {'white'}\n        stroke = {2}\n      >\n        <Text>\n          Suduko\n        </Text>\n      </TextStroke>\n    ).toJSON();\n    expect(titleComponent).toMatchSnapshot();\n  })\n})\n\n//Title component test.\ndescribe('Title', () =>{\n  it('renders without crashing', () => {\n    const titleComponent = render(<Title/>).toJSON();\n    expect(titleComponent).toMatchSnapshot();\n  });\n});\n"}}