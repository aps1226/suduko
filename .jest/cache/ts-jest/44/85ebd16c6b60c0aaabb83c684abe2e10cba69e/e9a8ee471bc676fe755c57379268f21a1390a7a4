{"C:\\Users\\ashee\\Documents\\Javascript\\React\\React Native\\suduko\\src\\__tests__\\Component Tests\\GameDisplay.test.tsx":{"modulePaths":["C:\\Users\\ashee\\Documents\\Javascript\\React\\React Native\\suduko\\node_modules\\@types\\react\\index.d.ts","C:\\Users\\ashee\\Documents\\Javascript\\React\\React Native\\suduko\\node_modules\\@types\\react-native\\index.d.ts","C:\\Users\\ashee\\Documents\\Javascript\\React\\React Native\\suduko\\src\\__tests__\\Component Tests\\renderWithRedux.tsx","C:\\Users\\ashee\\Documents\\Javascript\\React\\React Native\\suduko\\node_modules\\@types\\history\\index.d.ts","C:\\Users\\ashee\\Documents\\Javascript\\React\\React Native\\suduko\\node_modules\\@types\\react-router\\ts4.0\\index.d.ts","C:\\Users\\ashee\\Documents\\Javascript\\React\\React Native\\suduko\\node_modules\\@testing-library\\react-native\\typings\\index.d.ts","C:\\Users\\ashee\\Documents\\Javascript\\React\\React Native\\suduko\\node_modules\\@types\\react-test-renderer\\index.d.ts","C:\\Users\\ashee\\Documents\\Javascript\\React\\React Native\\suduko\\types.tsx","C:\\Users\\ashee\\Documents\\Javascript\\React\\React Native\\suduko\\src\\state\\reducers\\index.ts","C:\\Users\\ashee\\Documents\\Javascript\\React\\React Native\\suduko\\components\\GameDisplay.tsx"],"testFileContent":"import React from 'react';\r\nimport { Text,View } from 'react-native';\r\nimport renderWithRedux from './renderWithRedux';\r\nimport { createMemoryHistory, createLocation } from 'history';\r\nimport { match } from 'react-router';\r\nimport { act, fireEvent, render, waitFor} from '@testing-library/react-native';\r\nimport renderer from 'react-test-renderer';\r\nimport {Colors,GameState} from '../../../types';\r\nimport {RootState} from '../../state/reducers/index';\r\n\r\nimport GameDisplay from '../../../components/GameDisplay';\r\n\r\n//Mock props for routing.\r\nconst history = createMemoryHistory();\r\nconst path = `/route/:id`;\r\nconst match: match<{ id: string }> = {\r\n    isExact: false,\r\n    path,\r\n    url: path.replace(':id', '1'),\r\n    params: { id: '1' }\r\n};\r\nconst location = createLocation(match.url);\r\n\r\n//Hard coded state properties.\r\nconst board: (number | null)[][] = [\r\n  [5, 3, null, null, 7, null, null, null, null],\r\n  [6, null, null, 1, 9, 5, null, null, null],\r\n  [null, 9, 8, null, null, null, null, 6, null],\r\n  [8, null, null, null, 6, null, null, null, 3],\r\n  [4, null, null, 8, null, 3, null, null, 1],\r\n  [7, null, null, null, 2, null, null, null, 6],\r\n  [null, 6, null, null, null, null, 2, 8, null],\r\n  [null, null, null, 4, 1, 9, null, null, 5],\r\n  [null, null, null, null, 8, null, null, 7, 9],\r\n];\r\n\r\nconst colors:Colors = {\r\n  1:['transparent','black'],\r\n  2:['transparent','black'],\r\n  3:['transparent','black'],\r\n  4:['transparent','black'],\r\n  5:['transparent','black'],\r\n  6:['transparent','black'],\r\n  7:['transparent','black'],\r\n  8:['transparent','black'],\r\n  9:['transparent','black'],\r\n  'Selection_1':'#3297FD',\r\n  'Selection_2':'transparent',\r\n  'Selection_3':'transparent',\r\n  'Selection_4':'transparent',\r\n  'Selection_5':'transparent',\r\n  'Selection_6':'transparent',\r\n  'Selection_7':'transparent',\r\n  'Selection_8':'transparent',\r\n  'Selection_9':'transparent',\r\n  'gradient': [ \r\n    \"#a37e5c\", \"#b89372\",\"#c8a484\",\"#dcb999\", \"#d3af8f\",\"#d9b696\",\"#ceaa89\",\"#d2ae8d\",\"#b38e6d\",\"#aa8563\",\r\n    \"#a37e5c\", \"#b89372\",\"#c8a484\",\"#dcb999\", \"#d3af8f\",\"#d9b696\",\"#ceaa89\",\"#d2ae8d\",\"#b38e6d\",\"#aa8563\",\r\n    \"#a37e5c\", \"#b89372\",\"#c8a484\",\"#dcb999\", \"#d3af8f\",\"#d9b696\",\"#ceaa89\",\"#d2ae8d\",\"#b38e6d\",\"#aa8563\",\r\n    \"#a37e5c\", \"#b89372\",\"#c8a484\",\"#dcb999\", \"#d3af8f\",\"#d9b696\",\"#ceaa89\",\"#d2ae8d\",\"#b38e6d\",\"#aa8563\",\r\n    \"#a37e5c\", \"#b89372\",\"#c8a484\",\"#dcb999\", \"#d3af8f\",\"#d9b696\",\"#ceaa89\",\"#d2ae8d\",\"#b38e6d\",\"#aa8563\"\r\n  ]\r\n}\r\n\r\n//GameDisplay component test.\r\n// describe.skip('GameDisplay',() =>{\r\n\r\n//   //Mock store object for state management.\r\n//     //Hard code properties that are initialized randomly for\r\n//     //snapshot comparison.\r\n//   const mockStore:RootState = {\r\n//     'board':board,\r\n//     'colors':colors\r\n//   };\r\n//   //Render GameDisplay component with routing and redux.\r\n//   let gameDisplayComponent:any;\r\n//   // beforeEach(async() =>{\r\n//   //   await waitFor(() =>{\r\n//   //     gameDisplayComponent = renderWithRedux(\r\n//   //       <GameDisplay\r\n//   //         history={history}\r\n//   //         location={location}\r\n//   //         match={match}\r\n//   //       />,\r\n//   //       {\r\n//   //         initialState:mockStore\r\n//   //       }\r\n//   //     );\r\n//   //   })\r\n//   // })\r\n\r\n//   //Component renders without crashing.\r\n//   it('renders without crashing',async()=>{\r\n//     await waitFor(() =>{\r\n//       gameDisplayComponent = renderWithRedux(\r\n//         <GameDisplay\r\n//           history={history}\r\n//           location={location}\r\n//           match={match}\r\n//         />,\r\n//         {\r\n//           initialState:mockStore\r\n//         }\r\n//       );\r\n//     })\r\n//     expect(gameDisplayComponent.toJSON()).toMatchSnapshot();\r\n//   })\r\n\r\n//   //If board is not complete, winner animation should not be rendered.\r\n//   it(`should not render the Winner component if the board is not complete`, ()=>{\r\n//     //Simulate a value being inputted on the board.\r\n//     // const newBoard:(number | null)[][] = board.map((arr:(number|null)[])=> [...arr])\r\n//     // newBoard[0][2] = 1;\r\n//     // const {store} = gameDisplayComponent;\r\n//     // console.log(store.getState())\r\n//   })\r\n\r\n// })\r\n"},"C:\\Users\\ashee\\Documents\\Javascript\\React\\React Native\\suduko\\src\\__tests__\\Component Tests\\renderWithRedux.tsx":{"modulePaths":["C:\\Users\\ashee\\Documents\\Javascript\\React\\React Native\\suduko\\node_modules\\@types\\react\\index.d.ts","C:\\Users\\ashee\\Documents\\Javascript\\React\\React Native\\suduko\\node_modules\\redux\\index.d.ts","C:\\Users\\ashee\\Documents\\Javascript\\React\\React Native\\suduko\\node_modules\\@types\\react-redux\\index.d.ts","C:\\Users\\ashee\\Documents\\Javascript\\React\\React Native\\suduko\\src\\state\\reducers\\index.ts","C:\\Users\\ashee\\Documents\\Javascript\\React\\React Native\\suduko\\node_modules\\@testing-library\\react-native\\typings\\index.d.ts"],"testFileContent":"import React from 'react';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport reducers from '../../state/reducers/index';\r\nimport { render } from '@testing-library/react-native';\r\n\r\n//Function to provide mockStore for components managed by redux.\r\nexport default function renderWithRedux(\r\n  component:JSX.Element,\r\n  //@ts-ignore\r\n  {initialState,store = createStore(reducers,initialState)} = {}\r\n){\r\n  return {\r\n    ...render(<Provider store = {store}>{component}</Provider>),\r\n    store\r\n  }\r\n}"},"C:\\Users\\ashee\\Documents\\Javascript\\React\\React Native\\suduko\\src\\__tests__\\Component Tests\\Home.test.tsx":{"modulePaths":["C:\\Users\\ashee\\Documents\\Javascript\\React\\React Native\\suduko\\node_modules\\@types\\react\\index.d.ts","C:\\Users\\ashee\\Documents\\Javascript\\React\\React Native\\suduko\\src\\__tests__\\Component Tests\\renderWithRedux.tsx","C:\\Users\\ashee\\Documents\\Javascript\\React\\React Native\\suduko\\node_modules\\@types\\history\\index.d.ts","C:\\Users\\ashee\\Documents\\Javascript\\React\\React Native\\suduko\\node_modules\\@types\\react-router\\ts4.0\\index.d.ts","C:\\Users\\ashee\\Documents\\Javascript\\React\\React Native\\suduko\\node_modules\\@testing-library\\react-native\\typings\\index.d.ts","C:\\Users\\ashee\\Documents\\Javascript\\React\\React Native\\suduko\\node_modules\\@types\\react-test-renderer\\index.d.ts","C:\\Users\\ashee\\Documents\\Javascript\\React\\React Native\\suduko\\types.tsx","C:\\Users\\ashee\\Documents\\Javascript\\React\\React Native\\suduko\\src\\state\\reducers\\index.ts","C:\\Users\\ashee\\Documents\\Javascript\\React\\React Native\\suduko\\components\\Home.tsx"],"testFileContent":"import React from 'react';\nimport renderWithRedux from './renderWithRedux';\nimport { createMemoryHistory, createLocation } from 'history';\nimport { match } from 'react-router'; \nimport { act, fireEvent, render, waitFor} from '@testing-library/react-native';\nimport renderer from 'react-test-renderer';\nimport {GameState} from '../../../types';\nimport {RootState} from '../../state/reducers/index';\n\nimport Home from '../../../components/Home';\n\n//Mock props for routing.\nconst history = createMemoryHistory();\nconst path = `/route/:id`;\nconst match: match<{ id: string }> = {\n    isExact: false,\n    path,\n    url: path.replace(':id', '1'),\n    params: { id: \"1\" }\n};\nconst location = createLocation(match.url);\n\n//Home component testing.\ndescribe('Home', () =>{\n  //Mock store object for state management.\n  const mockStore:RootState = {};\n  //Render Home component with routing and redux.\n  let homeComponent:any;\n\n  beforeEach(() =>{\n    homeComponent = renderWithRedux(\n      <Home\n        history = {history}\n        match = {match}\n        location = {location}\n      />,\n      {\n        initialState: mockStore\n      }\n    );\n  })\n\n  //Home component should match current screenshot.\n  it('renders without crashing', () => {\n    expect(homeComponent.toJSON()).toMatchSnapshot();\n  });\n\n  //Home component should route to the difficulty selection menu when the 'Play New Game' button is selected.\n  it(`routes to difficulty selection menu when pressing 'Play New Game'.`, () => {\n    const {getByTestId} = homeComponent;\n    const newGameButton = getByTestId('newGameButton');\n    const curHistory = history.length;\n    expect(history.length).toBe(curHistory);\n    //Press 'Play New Game' button.\n    fireEvent.press(newGameButton);\n    //History length should increase by 1.\n    expect(history.length).toBe(curHistory + 1);\n    //Location pathname should be 'DifficultySelection'.\n    expect(history.location.pathname).toBe('/DifficultySelection')\n  });\n\n  //Home component should not route to GameDisplay component when pressing 'Load Game' if a game does not exist.\n  it(`does not route to GameDisplay when pressing 'Load Game' if a game does not exist.`, () => {\n    const {getByTestId} = homeComponent;\n    const loadGameButton = getByTestId('loadGameButton');\n    const curHistory = history.length;\n    expect(history.length).toBe(curHistory);\n    //Location pathname should initially be '/DifficultySelection'.\n    expect(history.location.pathname).toBe('/DifficultySelection')\n    //Press 'Load Game Button'.\n    fireEvent.press(loadGameButton);\n    //History length should not change.\n    expect(history.length).toBe(curHistory);\n    //Location pathname should remain as '/DifficultySelection'.\n    expect(history.location.pathname).toBe('/DifficultySelection')\n  });\n\n  //A pop-up prompt should appear when the 'Load Game' button is pressed when no current game exists.\n  it(`prompt appears when attempting to load a game when none exists.`, () => {\n    const {getByTestId} = homeComponent;\n    const loadGameButton = getByTestId('loadGameButton');\n    const loadGamePopUp = getByTestId('loadGamePopUp');\n    //Popup should initially not be visible.\n    expect(loadGamePopUp.props.visible).toBeFalsy();\n    //Press 'Load Game' button.\n    fireEvent.press(loadGameButton);\n    //Popup should no longer be visible.\n    expect(loadGamePopUp.props.visible).toBeTruthy();\n    \n    //Secondary test to ensure that the 'Play New Game' popup does not appear given current state.\n    const newGameButton = getByTestId('newGameButton');\n    const newGamePopUp = getByTestId('newGamePopUp');\n    //Popup should initially not be visible.\n    expect(newGamePopUp.props.visible).toBeFalsy();\n    //Press 'Play New Game' button.\n    fireEvent.press(newGameButton);\n    //Popup should remain not visible.\n    expect(newGamePopUp.props.visible).toBeFalsy();\n  });\n  \n  //Load game prompt should disappear after the screen is pressed.\n  it(`prompt disappears when pressing the screen.`, async ()=>{\n    const {getByTestId} = homeComponent;\n    const loadGameButton = getByTestId('loadGameButton');\n    const loadGamePopUp = getByTestId('loadGamePopUp');\n    const loadGamePopUpHide = getByTestId('loadGamePopUpHide');\n    //Prompt should initially be invisible.\n    expect(loadGamePopUp.props.visible).toBeFalsy();\n    //Press 'Load Game' button.\n    fireEvent.press(loadGameButton);\n    //Prompt should be visible.\n    expect(loadGamePopUp.props.visible).toBeTruthy();\n    //Press screen after prompt appears.\n    fireEvent.press(loadGamePopUpHide);\n    //Wait for component to update after press event.\n    await waitFor(() => {\n      //Prompt should not be visible.\n      expect(getByTestId('loadGamePopUp').props.visible).toBeFalsy();\n    })\n\n    //Update state for the next series of tests.\n    mockStore['gameState'] = {\n      'isCompleted':false,\n      'gameExists':true\n    }\n\n  })\n\n  \n  //Home component should route to GameDisplay component if a current game exists.\n  it(`routes to GameDisplay when pressing 'Load Game' if a game does exist.`, () => {\n    const {getByTestId, store} = homeComponent;\n    const loadGameButton = getByTestId('loadGameButton');\n    const curHistory = history.length;\n    expect(history.length).toBe(curHistory);\n    //Location pathname should initially be 'DifficultySelection'.\n    expect(history.location.pathname).toBe('/DifficultySelection')\n    //Press 'Load Game' button.\n    fireEvent.press(loadGameButton);\n    //History length should increase by 1.\n    expect(history.length).toBe(curHistory + 1);\n    //Location pathname should be 'GameDisplay'.\n    expect(history.location.pathname).toBe('/GameDisplay')\n  });\n  \n  //Home component should not immediately route to DifficultySelection component if a game exists.\n  it(`does not route to difficulty selection menu when pressing 'Play New Game' if a game currently exists.`, () => {\n    const {getByTestId} = homeComponent;\n    const newGameButton = getByTestId('newGameButton');\n    const curHistory = history.length;\n    expect(history.length).toBe(curHistory);\n    //Location pathname should initially be 'GameDisplay'.\n    expect(history.location.pathname).toBe('/GameDisplay')\n    //Press 'Play New Game'.\n    fireEvent.press(newGameButton);\n    //History length should remain the same.\n    expect(history.length).toBe(curHistory);\n    //Location pathname should remain as 'GameDisplay'.\n    expect(history.location.pathname).toBe('/GameDisplay')\n  });\n  \n  //Prompt should appear when attempting to play a new game when one currently exists.\n  it(`prompt appears when attempting to play a new game when one exists.`, () => {\n    const {getByTestId} = homeComponent;\n    const newGameButton = getByTestId('newGameButton');\n    const newGamePopUp = getByTestId('newGamePopUp');\n    //Prompt should initially not be visible.\n    expect(newGamePopUp.props.visible).toBeFalsy();\n    //Press 'Play New Game' button.\n    fireEvent.press(newGameButton);\n    //Prompt should be visible.\n    expect(newGamePopUp.props.visible).toBeTruthy();\n    \n    //Secondary test to ensure that the 'Play New Game' popup does not appear given current state.\n    const loadGameButton = getByTestId('loadGameButton');\n    const loadGamePopUp = getByTestId('loadGamePopUp');\n    //Prompt should initially not be visible.\n    expect(loadGamePopUp.props.visible).toBeFalsy();\n    //Press 'Load Game' button.\n    fireEvent.press(loadGameButton);\n    //Prompt should remain not visible.\n    expect(loadGamePopUp.props.visible).toBeFalsy();\n  });\n\n  //Home component should route to difficulty selection menu when the 'yes' button is selected within the prompt.\n  it(`should route to the difficulty selection menu when the 'yes' button is selected on the 'Play New Game' popup.`, () =>{\n    const {getByTestId} = homeComponent;\n    const newGameButton = getByTestId('newGameButton');\n    const newGamePopUp = getByTestId('newGamePopUp');\n    const yesButton = getByTestId('newGamePopUpYes');\n    const curHistory = history.length;\n    expect(history.length).toBe(curHistory);\n    //Location pathname should initially be 'GameDisplay'.\n    expect(history.location.pathname).toBe('/GameDisplay');\n    //Press 'Play New Game' button.\n    fireEvent.press(newGameButton);\n    //Press 'Yes' button.\n    fireEvent.press(yesButton);\n    //History length should initially be 6.\n    expect(history.length).toBe(curHistory + 1);\n    //Location pathname should be 'DifficultySelection'.\n    expect(history.location.pathname).toBe('/DifficultySelection');\n  })\n\n  //When the 'No' button is selected on the prompt it should disappear\n  //and not route to another component.\n  it(`prompt should disappear and not route to any other component when the 'No' button is selected on the prompt.`, async()=>{\n    const {getByTestId, findByTestId} = homeComponent;\n    const newGameButton = getByTestId('newGameButton');\n    const newGamePopUp = getByTestId('newGamePopUp');\n    const noButton = getByTestId('newGamePopUpNo');\n    const curHistory = history.length;\n    expect(history.length).toBe(curHistory);\n    //Location pathname should initially be 'DifficultySelection'.\n    expect(history.location.pathname).toBe('/DifficultySelection');\n    //Press 'Play New Game' button.\n    fireEvent.press(newGameButton);\n    //Wait for component to update after press event.\n    //'Play New Game' prompt should be visible.\n    waitFor(() =>{\n      expect(getByTestId('newGamePopUp').props.visible).toBeTruthy();\n    })\n    //Press 'No' button.\n    fireEvent.press(noButton);\n    //Wait for component to update after press event.\n    //'Play New Game' prompt should not be visible.\n    await waitFor(() =>{\n      expect(getByTestId('newGamePopUp').props.visible).toBeFalsy();\n    })\n    //History length should remain the same.\n    expect(history.length).toBe(curHistory);\n    //Location pathname should initially be 'DifficultySelection'.\n    expect(history.location.pathname).toBe('/DifficultySelection');\n  })\n});\n"}}