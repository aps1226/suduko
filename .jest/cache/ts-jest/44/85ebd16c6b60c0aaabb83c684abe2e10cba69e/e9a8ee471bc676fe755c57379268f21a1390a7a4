{"C:\\Users\\ashee\\Documents\\Javascript\\React\\React Native\\suduko\\src\\__tests__\\ComponentTests.test.tsx":{"modulePaths":["C:\\Users\\ashee\\Documents\\Javascript\\React\\React Native\\suduko\\node_modules\\@types\\react\\index.d.ts","C:\\Users\\ashee\\Documents\\Javascript\\React\\React Native\\suduko\\node_modules\\redux\\index.d.ts","C:\\Users\\ashee\\Documents\\Javascript\\React\\React Native\\suduko\\node_modules\\@types\\react-redux\\index.d.ts","C:\\Users\\ashee\\Documents\\Javascript\\React\\React Native\\suduko\\src\\state\\reducers\\index.ts","C:\\Users\\ashee\\Documents\\Javascript\\React\\React Native\\suduko\\node_modules\\@types\\history\\index.d.ts","C:\\Users\\ashee\\Documents\\Javascript\\React\\React Native\\suduko\\node_modules\\@types\\react-router\\ts4.0\\index.d.ts","C:\\Users\\ashee\\Documents\\Javascript\\React\\React Native\\suduko\\node_modules\\@types\\react-router-native\\index.d.ts","C:\\Users\\ashee\\Documents\\Javascript\\React\\React Native\\suduko\\node_modules\\@testing-library\\react-native\\typings\\index.d.ts","C:\\Users\\ashee\\Documents\\Javascript\\React\\React Native\\suduko\\node_modules\\@types\\react-test-renderer\\index.d.ts","C:\\Users\\ashee\\Documents\\Javascript\\React\\React Native\\suduko\\types.tsx","C:\\Users\\ashee\\Documents\\Javascript\\React\\React Native\\suduko\\src\\state\\reducers\\index.ts","C:\\Users\\ashee\\Documents\\Javascript\\React\\React Native\\suduko\\components\\Title.tsx","C:\\Users\\ashee\\Documents\\Javascript\\React\\React Native\\suduko\\components\\Home.tsx","C:\\Users\\ashee\\Documents\\Javascript\\React\\React Native\\suduko\\App.tsx"],"testFileContent":"import React from 'react';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport reducers from '../state/reducers/index';\nimport { createMemoryHistory, createLocation } from 'history';\nimport { match } from 'react-router'; \nimport { RouteComponentProps, Router } from 'react-router-native';\nimport { fireEvent, render} from '@testing-library/react-native';\nimport renderer from 'react-test-renderer';\n// import { shallow } from 'enzyme'\n// import toJson from 'enzyme-to-json';\nimport {GameState} from '../../types'\nimport {RootState} from '../state/reducers/index'\nimport Title from '../../components/Title';\nimport Home from '../../components/Home';\nimport App from '../../App';\n\n//Mock props for components with routing.\nconst history = createMemoryHistory();\nconst path = `/route/:id`;\nconst match: match<{ id: string }> = {\n    isExact: false,\n    path,\n    url: path.replace(':id', '1'),\n    params: { id: \"1\" }\n};\nconst location = createLocation(match.url);\n\n//Function to provide mockStore for components managed by redux.\nfunction renderWithRedux(\n  component:JSX.Element,\n  //@ts-ignore\n  {initialState,store = createStore(reducers,initialState)} = {}\n){\n  return {\n    ...render(<Provider store = {store}>{component}</Provider>),\n    store\n  }\n}\n\n//Home component testing.\ndescribe('Home component', () =>{\n  //Mock store object for state management.\n  const mockStore:RootState = {};\n\n  let homeComponent:any;\n  beforeEach(() =>{\n    homeComponent = renderWithRedux(\n      <Home\n        history={history}\n        location={location}\n        match={match}\n      />,\n      {\n        initialState:mockStore\n      }\n    );\n  })\n\n  it('renders without crashing', () => {\n    expect(homeComponent.toJSON()).toMatchSnapshot();\n  });\n\n  it(`routes to difficulty selection menu when pressing 'Play New Game'.`, () => {\n    const {getByTestId} = homeComponent;\n    const newGameButton = getByTestId('newGameButton');\n    expect(history.length).toBe(1);\n    fireEvent.press(newGameButton);\n    expect(history.length).toBe(2);\n    expect(history.location.pathname).toBe('/DifficultySelection')\n  });\n\n  it(`does not route to GameDisplay when pressing 'Load Game' if a game does not exist.`, () => {\n    const {getByTestId} = homeComponent;\n    const loadGameButton = getByTestId('loadGameButton');\n    expect(history.length).toBe(2);\n    fireEvent.press(loadGameButton);\n    expect(history.length).toBe(2);\n    expect(history.location.pathname).toBe('/DifficultySelection')\n  });\n\n  it(`prompt appears when attempting to load a game when none exists.`, () => {\n    const {getByTestId} = homeComponent;\n    const loadGameButton = getByTestId('loadGameButton');\n    const loadGamePopUp = getByTestId('loadGamePopUp');\n    expect(loadGamePopUp.props.visible).toBeFalsy();\n    fireEvent.press(loadGameButton);\n    expect(loadGamePopUp.props.visible).toBeTruthy();\n    \n    const newGameButton = getByTestId('newGameButton');\n    const newGamePopUp = getByTestId('newGamePopUp');\n    expect(newGamePopUp.props.visible).toBeFalsy();\n    fireEvent.press(newGameButton);\n    expect(newGamePopUp.props.visible).toBeFalsy();\n\n    //Update state for the next series of tests.\n    mockStore['gameState'] = {\n      'isCompleted':false,\n      'gameExists':true\n    }\n  });\n\n  it(`routes to GameDisplay when pressing 'Load Game' if a game does exist.`, () => {\n    const {getByTestId} = homeComponent;\n    const loadGameButton = getByTestId('loadGameButton');\n    expect(history.length).toBe(3);\n    fireEvent.press(loadGameButton);\n    expect(history.length).toBe(4);\n    expect(history.location.pathname).toBe('/GameDisplay')\n  });\n  \n  it(`does not route to difficulty selection menu when pressing 'Play New Game' if a game currently exists.`, () => {\n    const {getByTestId} = homeComponent;\n    const newGameButton = getByTestId('newGameButton');\n    expect(history.length).toBe(4);\n    fireEvent.press(newGameButton);\n    expect(history.length).toBe(4);\n    expect(history.location.pathname).toBe('/GameDisplay')\n  });\n\n  it(`prompt appears when attempting to play a new game when one exists.`, () => {\n    const {getByTestId} = homeComponent;\n    const newGameButton = getByTestId('newGameButton');\n    const newGamePopUp = getByTestId('newGamePopUp');\n    expect(newGamePopUp.props.visible).toBeFalsy();\n    fireEvent.press(newGameButton);\n    expect(newGamePopUp.props.visible).toBeTruthy();\n\n    const loadGameButton = getByTestId('loadGameButton');\n    const loadGamePopUp = getByTestId('loadGamePopUp');\n    expect(loadGamePopUp.props.visible).toBeFalsy();\n    fireEvent.press(loadGameButton);\n    expect(loadGamePopUp.props.visible).toBeFalsy();\n  });\n\n});\n\n//Title component tests.\ndescribe('Title component', () =>{\n  it('renders without crashing', () => {\n    const titleComponent = render(<Title/>).toJSON();\n    expect(titleComponent).toMatchSnapshot();\n  });\n});\n"}}